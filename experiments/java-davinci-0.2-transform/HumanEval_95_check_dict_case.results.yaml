language: java
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return dict.keySet().stream().allMatch(s -> s.equals(s.toLowerCase()))\
    \ || dict.keySet().stream().allMatch(s -> s.equals(s.toUpperCase()));\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4u9i5kqi.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4u9i5kqi.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4u9i5kqi.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4u9i5kqi.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4u9i5kqi.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4u9i5kqi.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwm5q2dh.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpqwm5q2dh.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqwm5q2dh.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code goes here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr5990dge.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwm5q2dh.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpqwm5q2dh.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqwm5q2dh.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn045ovd0.java:28)\n"
  stdout: ''
  timestamp: 1659799860
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        boolean isUpper = false;\n      \
    \  boolean isLower = false;\n        for (String key : dict.keySet()) {\n    \
    \        if (key.equals(key.toUpperCase())) {\n                isUpper = true;\n\
    \            } else if (key.equals(key.toLowerCase())) {\n                isLower\
    \ = true;\n            } else {\n                result = false;\n           \
    \     break;\n            }\n        }\n        if (isUpper && isLower) {\n  \
    \          result = false;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzyiz21tp.java:49)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // your code goes here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpin20_l42.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwm5q2dh.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpqwm5q2dh.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqwm5q2dh.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code goes here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr5990dge.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // TODO: Implement this function.\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7u8txsxi.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn045ovd0.java:28)\n"
  stdout: ''
  timestamp: 1659799860
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code goes here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr5990dge.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn045ovd0.java:28)\n"
  stdout: ''
  timestamp: 1659799860
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   result = false;\n        } else {\n            boolean allLower = true;\n\
    \            boolean allUpper = true;\n            for (String key : dict.keySet())\
    \ {\n                if (!key.equals(key.toLowerCase())) {\n                 \
    \   allLower = false;\n                }\n                if (!key.equals(key.toUpperCase()))\
    \ {\n                    allUpper = false;\n                }\n            }\n\
    \            if (!allLower && !allUpper) {\n                result = false;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxx517k5.java:47)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Write your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwm5q2dh.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpqwm5q2dh.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpqwm5q2dh.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpqwm5q2dh.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // TODO: Implement this function\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07qiitcn.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // TODO: Implement this function\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07qiitcn.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // YOUR CODE HERE\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qsy6pyg.java:28)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn045ovd0.java:28)\n"
  stdout: ''
  timestamp: 1659799860
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn045ovd0.java:28)\n"
  stdout: ''
  timestamp: 1659799860
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mpvof45.java:27: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp4mpvof45.java:28:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:29: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp4mpvof45.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp4mpvof45.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lapk7x8.java:28: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp0lapk7x8.java:29:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:30: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:31: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp0lapk7x8.java:32: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp0lapk7x8.java:33: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
