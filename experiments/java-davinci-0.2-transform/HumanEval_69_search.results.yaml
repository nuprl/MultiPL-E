language: java
name: HumanEval_69_search
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code goes here\n        return -1l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pf_0u5i.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ikor0kh.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpjdb__7.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ikor0kh.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        HashMap<Long, Long> map = new HashMap<Long, Long>();\n        for\
    \ (Long l : lst) {\n            if (map.containsKey(l)) {\n                map.put(l,\
    \ map.get(l) + 1);\n            } else {\n                map.put(l, 1l);\n  \
    \          }\n        }\n        long max = -1;\n        for (Long l : map.keySet())\
    \ {\n            if (l <= map.get(l) && l > max) {\n                max = l;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        Map<Long, Long> freq = new HashMap<Long, Long>();\n        for (Long\
    \ l : lst) {\n            if (freq.containsKey(l)) {\n                freq.put(l,\
    \ freq.get(l) + 1);\n            } else {\n                freq.put(l, 1l);\n\
    \            }\n        }\n        long max = -1;\n        for (Long l : freq.keySet())\
    \ {\n            if (l > 0 && freq.get(l) >= l && l > max) {\n               \
    \ max = l;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        // Your code here\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_2_0xke.java:25)\n"
  stdout: ''
