language: java
name: HumanEval_11_string_xor
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        // Your code here\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpb616ovmv.java:18)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n\
    \            int ai = a.charAt(i) - '0';\n            int bi = b.charAt(i) - '0';\n\
    \            sb.append(ai ^ bi);\n        }\n        return sb.toString();\n \
    \   }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        // Your code here.\n       \
    \ return \"\";\n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx307er2j.java:18)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ ^ b.charAt(i));\n        }\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) ==\
    \ b.charAt(i)) {\n                sb.append(\"0\");\n            } else {\n  \
    \              sb.append(\"1\");\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n\
    \            if (a.charAt(i) == b.charAt(i)) {\n                sb.append(\"0\"\
    );\n            } else {\n                sb.append(\"1\");\n            }\n \
    \       }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ == b.charAt(i) ? '0' : '1');\n        }\n        return sb.toString();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ == b.charAt(i) ? \"0\" : \"1\");\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        int n = a.length();\n      \
    \  int m = b.length();\n        if (n != m) {\n            throw new IllegalArgumentException(\"\
    Strings must be of equal length\");\n        }\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < n; i++) {\n            if (a.charAt(i)\
    \ == b.charAt(i)) {\n                sb.append(\"0\");\n            } else {\n\
    \                sb.append(\"1\");\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu2syk17t.java:17)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ == b.charAt(i) ? '0' : '1');\n        }\n        return sb.toString();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ == b.charAt(i) ? '0' : '1');\n        }\n        return sb.toString();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu2syk17t.java:17)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ == b.charAt(i) ? '0' : '1');\n        }\n        return sb.toString();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ == b.charAt(i) ? \"0\" : \"1\");\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) ==\
    \ b.charAt(i)) {\n                sb.append(\"0\");\n            } else {\n  \
    \              sb.append(\"1\");\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ ^ b.charAt(i));\n        }\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i)\
    \ ^ b.charAt(i));\n        }\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        // TODO: Implement this function\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"\
    1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmp0bddsj5r.java:18)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) ==\
    \ b.charAt(i)) {\n                sb.append(\"0\");\n            } else {\n  \
    \              sb.append(\"1\");\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
