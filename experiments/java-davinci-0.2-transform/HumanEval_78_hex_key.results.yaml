language: java
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // TODO: Implement this\
    \ function\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq9uo7yn5.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpw5xejq.java:35)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n\
    \            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c\
    \ == 'D') {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n \
    \   assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn5ff37_.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n \
    \   assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpza1sj479.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n \
    \   assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn5ff37_.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n \
    \   assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn5ff37_.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n \
    \   assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn5ff37_.java:34)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        return num.chars().filter(c\
    \ -> \"2357BD\".indexOf(c) >= 0).count();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\"\
    )) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpw5xejq.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpw5xejq.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(hexKey((\"AB\"\
    )) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaorhsb_b.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n \
    \   assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn5ff37_.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpw5xejq.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpw5xejq.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpw5xejq.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // TODO: implement this\
    \ method\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwyyeim_t.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(hexKey((\"AB\")) == (1l));\n \
    \   assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn5ff37_.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpw5xejq.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    public static long hexKey(String num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9u416gca.java:35)\n"
  stdout: ''
