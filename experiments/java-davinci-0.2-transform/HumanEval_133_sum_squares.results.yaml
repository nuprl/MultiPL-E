language: java
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnv3rg81c.java:28)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x)).map(x\
    \ -> x * x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8933toz.java:24: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8933toz.java:24: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> Math.round(x) * Math.round(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp09f9fsk8.java:30)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvz5_gtg.java:28)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvz5_gtg.java:28)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).mapToLong(x\
    \ -> x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwadokw16.java:30)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long sum = 0;\n        for (float f : lst) {\n     \
    \       sum += Math.round(f) * Math.round(f);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5j8ga75q.java:37)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvz5_gtg.java:28)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long)lst.stream().map(x -> Math.ceil(x)).map(x -> Math.pow(x,\
    \ 2)).reduce((x, y) -> x + y).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxw7huyos.java:24: error: incompatible types: Double cannot be converted\
    \ to long\n        return (long)lst.stream().map(x -> Math.ceil(x)).map(x -> Math.pow(x,\
    \ 2)).reduce((x, y) -> x + y).get();\n                                       \
    \                                                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).mapToLong(x\
    \ -> x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwadokw16.java:30)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(f -> (long)Math.ceil(f)).map(l\
    \ -> l * l).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvz5_gtg.java:28)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x)).map(x\
    \ -> x * x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x)).map(x\
    \ -> x * x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> Math.round(x) * Math.round(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp09f9fsk8.java:30)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> Math.round(x) * Math.round(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp09f9fsk8.java:30)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(e -> (long)Math.ceil(e) * (long)Math.ceil(e)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800031
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x)).map(x\
    \ -> x * x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8933toz.java:24: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long) Math.ceil(x) * (long)\
    \ Math.ceil(x)).sum();\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += Math.round(f) * Math.round(f);\n        }\n        return sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvky5mivc.java:34)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> Math.round(x) * Math.round(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp09f9fsk8.java:30)\n"
  stdout: ''
  timestamp: 1659800031
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long) Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800031
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduo51e8w.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n \
    \   // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
