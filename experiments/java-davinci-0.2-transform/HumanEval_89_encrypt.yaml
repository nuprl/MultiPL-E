name: HumanEval_89_encrypt
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function encrypt that takes a string as an argument\
  \ and\n    // returns a string encrypted with the alphabet being rotated. \n   \
  \ // The alphabet should be rotated in a manner such that the letters \n    // shift\
  \ down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"\
  hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\"\
  )\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n\
  \    // (\"ix\")\n    public static String encrypt(String s) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(encrypt((\"\
  hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\"\
  )));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\"\
  )).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\"\
  )));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n  \
  \  assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"\
  hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"\
  e\")));\n    }\n\n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n           \
    \ if (c >= 'a' && c <= 'z') {\n                c += 2;\n                if (c\
    \ > 'z') {\n                    c -= 26;\n                }\n            }\n \
    \           sb.append(c);\n        }\n        return sb.toString();", "      \
    \  String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted\
    \ = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int index\
    \ = alphabet.indexOf(s.charAt(i));\n            encrypted += alphabet.charAt((index\
    \ + (i + 1) * 2) % 26);\n        }\n        return encrypted;", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n\
    \                c += 2;\n                if (c > 'z') {\n                   \
    \ c -= 26;\n                }\n            }\n            sb.append(c);\n    \
    \    }\n        return sb.toString();", '        return "";', "        String\
    \ result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n           \
    \ char c = s.charAt(i);\n            int ascii = (int) c;\n            ascii +=\
    \ 2 * 2;\n            if (ascii > 122) {\n                ascii -= 26;\n     \
    \       }\n            result += (char) ascii;\n        }\n        return result;",
  "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * (i + 1))) % 26;\n            sb.append(alphabet.charAt(newIndex));\n\
    \        }\n        return sb.toString();", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            int index = alphabet.indexOf(s.charAt(i));\n            if (index\
    \ == -1) {\n                encrypted += s.charAt(i);\n            } else {\n\
    \                encrypted += alphabet.charAt((index + (2 * 2)) % 26);\n     \
    \       }\n        }\n        return encrypted;", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n     \
    \       char c = s.charAt(i);\n            c += 2 * 2;\n            sb.append(c);\n\
    \        }\n        return sb.toString();", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            int index = alphabet.indexOf(s.charAt(i));\n            encrypted\
    \ += alphabet.charAt((index + (2 * (i + 1))) % 26);\n        }\n        return\
    \ encrypted;", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  \
    \      String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            int index = alphabet.indexOf(s.charAt(i));\n            int newIndex\
    \ = (index + (i * 2)) % 26;\n            encrypted += alphabet.charAt(newIndex);\n\
    \        }\n        return encrypted;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            char newChar = (char) (c + (2 * 2));\n            sb.append(newChar);\n\
    \        }\n        return sb.toString();", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            int index = alphabet.indexOf(s.charAt(i));\n            result\
    \ += alphabet.charAt((index + (2 * 2)) % 26);\n        }\n        return result;",
  "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted\
    \ = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int index\
    \ = alphabet.indexOf(s.charAt(i));\n            encrypted += alphabet.charAt((index\
    \ + (2 * (i + 1))) % 26);\n        }\n        return encrypted;", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            c += 2;\n            c += 2;\n\
    \            sb.append(c);\n        }\n        return sb.toString();", '        return
    "";', "        StringBuilder sb = new StringBuilder();\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            char c = s.charAt(i);\n            int offset\
    \ = (c - 'a') * 2;\n            sb.append((char)('a' + (offset % 26)));\n    \
    \    }\n        return sb.toString();", "        // Write your code here\n   \
    \     return \"\";", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i\
    \ < s.length(); i++) {\n            int index = alphabet.indexOf(s.charAt(i));\n\
    \            sb.append(alphabet.charAt((index + (2 * 2)) % 26));\n        }\n\
    \        return sb.toString();", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        String newAlphabet = \"cdefghijklmnopqrstuvwxyzab\";\n        String\
    \ encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n        \
    \    int index = alphabet.indexOf(s.charAt(i));\n            encrypted += newAlphabet.charAt(index);\n\
    \        }\n        return encrypted;", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i\
    \ < s.length(); i++) {\n            int index = alphabet.indexOf(s.charAt(i));\n\
    \            index = (index + (2 * 2)) % alphabet.length();\n            sb.append(alphabet.charAt(index));\n\
    \        }\n        return sb.toString();"]
stop_tokens:
- "\n    }\n"
