language: java
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = 1;\n        for\
    \ (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxcvwfktz.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphq37d8hn.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphq37d8hn.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphq37d8hn.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        if (n <=\
    \ 0) {\n            return 0;\n        }\n        long result = 1;\n        for\
    \ (long i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ifw0ti0.java:23: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = 1;\n        for\
    \ (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxcvwfktz.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        long fact = 1;\n        for (long i = 1; i <= n; i++)\
    \ {\n            fact *= i;\n        }\n        return fact * specialFactorial(n\
    \ - 1);\n    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33d5qhmu.java:20: error: cannot find symbol\n            result\
    \ *= factorial(i);\n                      ^\n  symbol:   method factorial(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpso7gf4y4.java:22)\n"
  stdout: ''
