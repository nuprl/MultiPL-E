language: java
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzjewc8p.java:31)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzjewc8p.java:31)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long sum = 0;\n        for (long i : q) {\n        \
    \    sum += i;\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        int i = 0;\n        int j = q.size() - 1;\n        while (i\
    \ < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l)) == (true));\n\
    \    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))),\
    \ (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        long sum = 0;\n        for (long i : q) {\n            sum +=\
    \ i;\n        }\n        if (sum > w) {\n            return false;\n        }\n\
    \        int i = 0;\n        int j = q.size() - 1;\n        while (i < j) {\n\
    \            if (!q.get(i).equals(q.get(j))) {\n                return false;\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(willItFly((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l)) == (true));\n\
    \    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))),\
    \ (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long sum = 0;\n        for (long i : q) {\n        \
    \    sum += i;\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i)\
    \ != q.get(q.size() - 1 - i)) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzjewc8p.java:31)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        long sum = 0;\n        for (long i : q) {\n            sum +=\
    \ i;\n        }\n        if (sum > w) {\n            return false;\n        }\n\
    \        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) !=\
    \ q.get(q.size() - i - 1)) {\n                return false;\n            }\n \
    \       }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (9l))\n    // (true)\n    // # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static boolean willItFly(ArrayList<Long> q, long\
    \ w) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)3l))), (9l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l))), (5l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l))),\
    \ (5l)) == (true));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l))), (1l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))), (6l)) == (false));\n    assert(willItFly((new ArrayList<Long>(Arrays.asList((long)5l))),\
    \ (5l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3qcw05j.java:28)\n"
  stdout: ''
