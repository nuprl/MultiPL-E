name: HumanEval_108_count_nums
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function count_nums which takes an array of integers\
  \ and returns\n    // the number of elements which has a sum of digits > 0.\n  \
  \  // If a number is negative, then its first signed digit will be negative:\n \
  \   // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> countNums((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (0l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)11l, (long)-11l))))\n    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
  \ arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(countNums((new\
  \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n  \
  \  assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
  \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
  \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
  \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
  \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
completions: ['        return arr.stream().filter(x -> x.toString().chars().map(y
    -> Character.getNumericValue(y)).sum() > 0).count();', '        return arr.stream().filter(x
    -> x.toString().chars().map(y -> Character.getNumericValue(y)).sum() > 0).count();',
  "        long count = 0;\n        for (long i : arr) {\n            long sum = 0;\n\
    \            long num = i;\n            if (num < 0) {\n                num =\
    \ -num;\n            }\n            while (num > 0) {\n                sum +=\
    \ num % 10;\n                num /= 10;\n            }\n            if (sum >\
    \ 0) {\n                count++;\n            }\n        }\n        return count;",
  '        return arr.stream().filter(x -> x.toString().chars().map(y -> Character.getNumericValue(y)).sum()
    > 0).count();', "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(c\
    \ -> c - '0').sum() > 0).count();", '        return arr.stream().filter(x -> x.toString().chars().map(y
    -> Character.getNumericValue(y)).sum() > 0).count();', "        return arr.stream().filter(x\
    \ -> x.toString().chars().map(c -> c - '0').sum() > 0).count();", "        long\
    \ count = 0;\n        for (long i = 0; i < arr.size(); i++) {\n            long\
    \ sum = 0;\n            long num = arr.get((int)i);\n            while (num !=\
    \ 0) {\n                sum += num % 10;\n                num /= 10;\n       \
    \     }\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n        return count;", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(c\
    \ -> c - '0').sum() > 0).count();", "        return arr.stream().filter(x -> x.toString().chars().map(y\
    \ -> y - '0').sum() > 0).count();"]
stop_tokens:
- "\n    }\n"
