name: HumanEval_159_eat
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n    // but now you need to eat more carrots to complete the\
  \ day's meals.\n    // you should return an array of [ total number of eaten carrots\
  \ after your meals,\n    // the number of carrots left after your meals ]\n    //\
  \ if there are not enough remaining carrots, you will eat all remaining carrots,\
  \ but will still be hungry.\n    // Example:\n    // >>> eat((5l), (6l), (10l))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))\n    // >>> eat((4l),\
  \ (8l), (9l))\n    // (new ArrayList<Long>(Arrays.asList((long)12l, (long)1l)))\n\
  \    // >>> eat((1l), (10l), (10l))\n    // (new ArrayList<Long>(Arrays.asList((long)11l,\
  \ (long)0l)))\n    // >>> eat((2l), (11l), (5l))\n    // (new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)0l)))\n    // Variables:\n    // @number : integer\n    // the number of\
  \ carrots that you have eaten.\n    // @need : integer\n    // the number of carrots\
  \ that you need to eat.\n    // @remaining : integer\n    // the number of remaining\
  \ carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n\
  \    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n\
  \    public static ArrayList<Long> eat(long number, long need, long remaining) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(eat((5l),\
  \ (6l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)4l)))));\n\
  \    assert(eat((4l), (8l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)12l,\
  \ (long)1l)))));\n    assert(eat((1l), (10l), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)11l,\
  \ (long)0l)))));\n    assert(eat((2l), (11l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)0l)))));\n    assert(eat((4l), (5l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)9l,\
  \ (long)2l)))));\n    assert(eat((4l), (5l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)0l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        if\
    \ (remaining < need) {\n            result.add(number + remaining);\n        \
    \    result.add((long)0l);\n        } else {\n            result.add(number +\
    \ need);\n            result.add(remaining - need);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (remaining >= need) {\n            result.add(number + need);\n         \
    \   result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add((long)0l);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ if (remaining >= need) {\n            result.add(number + need);\n         \
    \   result.add(remaining - need);\n        } else {\n            result.add(number\
    \ + remaining);\n            result.add((long)0l);\n        }\n        return\
    \ result;", "        // your code here\n        return null;", '        return
    new ArrayList<Long>(Arrays.asList((long)number + need, (long)remaining - need));',
  '        return new ArrayList<Long>(Arrays.asList((long)number + need, (long)remaining
    - need));', '        return new ArrayList<Long>(Arrays.asList((long)0l, (long)0l));',
  '        return new ArrayList<Long>(Arrays.asList((long)0l, (long)0l));', "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        if (remaining <\
    \ need) {\n            result.add(number + remaining);\n            result.add((long)0l);\n\
    \        } else {\n            result.add(number + need);\n            result.add(remaining\
    \ - need);\n        }\n        return result;", "        long total = number +\
    \ need;\n        long left = remaining - need;\n        if (left < 0) {\n    \
    \        left = 0;\n        }\n        return new ArrayList<Long>(Arrays.asList(total,\
    \ left));", "        // your code here\n        return null;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long total = number + need;\n     \
    \   if (total > remaining) {\n            result.add(remaining);\n           \
    \ result.add((long)0);\n        } else {\n            result.add(total);\n   \
    \         result.add(remaining - total);\n        }\n        return result;",
  "        long total = number + need;\n        long left = remaining - need;\n  \
    \      if (left < 0) {\n            total += left;\n            left = 0;\n  \
    \      }\n        return new ArrayList<Long>(Arrays.asList(total, left));", '        return
    new ArrayList<Long>(Arrays.asList((long)0l, (long)0l));', "        long total\
    \ = number + need;\n        long left = 0;\n        if (total > remaining) {\n\
    \            total = remaining;\n            left = 0;\n        } else {\n   \
    \         left = remaining - total;\n        }\n        return new ArrayList<Long>(Arrays.asList(total,\
    \ left));", "        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return new ArrayList<Long>(Arrays.asList((long)0l, (long)0l));",
  '        return new ArrayList<Long>(Arrays.asList((long)0l, (long)0l));', '        return
    new ArrayList<Long>(Arrays.asList((long)Math.min(number + need, remaining), (long)Math.max(remaining
    - (number + need), 0)));', "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.add(remaining);\n            result.add((long)0);\n        } else\
    \ {\n            result.add(total);\n            result.add(remaining - total);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add((long)0l);\n        result.add((long)0l);\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
