language: java
name: HumanEval_9_rolling_max
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (long n : numbers) {\n            if (n > max) {\n                max =\
    \ n;\n            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n   \
    \             max = numbers.get(i);\n            }\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ maxes = new ArrayList<Long>();\n        long max = numbers.get(0);\n       \
    \ for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) >\
    \ max) {\n                max = numbers.get(i);\n            }\n            maxes.add(max);\n\
    \        }\n        return maxes;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp8_3v2_q1.java:15)\n\tat Problem.main(tmp8_3v2_q1.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        Long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp8es6ohvv.java:15)\n\tat Problem.main(tmp8es6ohvv.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        result.add(numbers.get(0));\n     \
    \   for (int i = 1; i < numbers.size(); i++) {\n            result.add(Math.max(result.get(i\
    \ - 1), numbers.get(i)));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpcp8ca490.java:15)\n\tat Problem.main(tmpcp8ca490.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0l;\n        for (int i\
    \ = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n           \
    \ result.add(max);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpxtzdxv15.java:15)\n\tat Problem.main(tmpxtzdxv15.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add(numbers.subList(0, i + 1).stream().max(Comparator.naturalOrder()).get());\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        max = Math.max(max, numbers.get(i));\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpqa2ze_60.java:15)\n\tat Problem.main(tmpqa2ze_60.java:24)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            Long max = numbers.get(i);\n            for (int j = 0;\
    \ j <= i; j++) {\n                if (numbers.get(j) > max) {\n              \
    \      max = numbers.get(j);\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ maxes = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            maxes.add(max);\n        }\n        return maxes;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            max = Math.max(max, number);\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            max = Math.max(max, number);\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n           \
    \ result.add(max);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpxtzdxv15.java:15)\n\tat Problem.main(tmpxtzdxv15.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        Long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp8es6ohvv.java:15)\n\tat Problem.main(tmp8es6ohvv.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            long max = numbers.get(i);\n            for (int j = 0;\
    \ j <= i; j++) {\n                if (numbers.get(j) > max) {\n              \
    \      max = numbers.get(j);\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            max = Math.max(max, number);\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        max = Math.max(max, numbers.get(i));\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpqa2ze_60.java:15)\n\tat Problem.main(tmpqa2ze_60.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long n\
    \ : numbers) {\n            if (n > max) {\n                max = n;\n       \
    \     }\n            result.add(max);\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n           \
    \ result.add(max);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpxtzdxv15.java:15)\n\tat Problem.main(tmpxtzdxv15.java:25)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (long number : numbers) {\n            max = Math.max(max, number);\n \
    \           result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (numbers.size() == 0) {\n      \
    \      return result;\n        }\n        result.add(numbers.get(0));\n      \
    \  for (int i = 1; i < numbers.size(); i++) {\n            result.add(Math.max(result.get(i\
    \ - 1), numbers.get(i)));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpao2izijs.java:15)\n\tat Problem.main(tmpao2izijs.java:26)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (numbers.size() == 0) {\n      \
    \      return result;\n        }\n        result.add(numbers.get(0));\n      \
    \  for (int i = 1; i < numbers.size(); i++) {\n            result.add(Math.max(result.get(i\
    \ - 1), numbers.get(i)));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n           \
    \ result.add(max);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpxtzdxv15.java:15)\n\tat Problem.main(tmpxtzdxv15.java:25)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (long number : numbers) {\n            max = Math.max(max, number);\n \
    \           result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            max = Math.max(max, number);\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (numbers.size() == 0) {\n      \
    \      return result;\n        }\n        result.add(numbers.get(0));\n      \
    \  for (int i = 1; i < numbers.size(); i++) {\n            result.add(Math.max(result.get(i\
    \ - 1), numbers.get(i)));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            max = Math.max(max, number);\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n   \
    \             max = numbers.get(i);\n            }\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (numbers.size() == 0) {\n      \
    \      return result;\n        }\n        result.add(numbers.get(0));\n      \
    \  for (int i = 1; i < numbers.size(); i++) {\n            result.add(Math.max(result.get(i\
    \ - 1), numbers.get(i)));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        max = Math.max(max, numbers.get(i));\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpqa2ze_60.java:15)\n\tat Problem.main(tmpqa2ze_60.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long n = numbers.get(i);\n            if (n > max) {\n              \
    \  max = n;\n            }\n            result.add(max);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpfzoxw6qp.java:15)\n\tat Problem.main(tmpfzoxw6qp.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            max = Math.max(max, current);\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmphc7o5y62.java:15)\n\tat Problem.main(tmphc7o5y62.java:25)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long num = numbers.get(i);\n            if (num > max) {\n          \
    \      max = num;\n            }\n            result.add(max);\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpc_vb46ig.java:15)\n\tat Problem.main(tmpc_vb46ig.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        Long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmp_rkrjf00.java:15)\n\tat Problem.main(tmp_rkrjf00.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        Long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmp_rkrjf00.java:15)\n\tat Problem.main(tmp_rkrjf00.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (numbers.size() > 0) {\n       \
    \     result.add(numbers.get(0));\n            for (int i = 1; i < numbers.size();\
    \ i++) {\n                result.add(Math.max(result.get(i - 1), numbers.get(i)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        Long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp8es6ohvv.java:15)\n\tat Problem.main(tmp8es6ohvv.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        Long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp8es6ohvv.java:15)\n\tat Problem.main(tmp8es6ohvv.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            long max = numbers.get(i);\n            for (int j = 0;\
    \ j <= i; j++) {\n                if (numbers.get(j) > max) {\n              \
    \      max = numbers.get(j);\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpao2izijs.java:15)\n\tat Problem.main(tmpao2izijs.java:26)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ > max) {\n                max = numbers.get(i);\n            }\n           \
    \ result.add(max);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpxtzdxv15.java:15)\n\tat Problem.main(tmpxtzdxv15.java:25)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (long number : numbers) {\n            max = Math.max(max, number);\n \
    \           result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (numbers.size() == 0) {\n      \
    \      return result;\n        }\n        result.add(numbers.get(0));\n      \
    \  for (int i = 1; i < numbers.size(); i++) {\n            result.add(Math.max(result.get(i\
    \ - 1), numbers.get(i)));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpao2izijs.java:15)\n\tat Problem.main(tmpao2izijs.java:26)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ maxes = new ArrayList<Long>();\n        long max = numbers.get(0);\n       \
    \ maxes.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n      \
    \      long number = numbers.get(i);\n            if (number > max) {\n      \
    \          max = number;\n            }\n            maxes.add(max);\n       \
    \ }\n        return maxes;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmp6nv6jofo.java:15)\n\tat Problem.main(tmp6nv6jofo.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            max = Math.max(max, number);\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            long max = numbers.get(i);\n            for (int j = 0;\
    \ j <= i; j++) {\n                if (numbers.get(j) > max) {\n              \
    \      max = numbers.get(j);\n                }\n            }\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long current = numbers.get(i);\n            if (current > max) {\n  \
    \              max = current;\n            }\n            result.add(max);\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp_tis9xbe.java:15)\n\tat Problem.main(tmp_tis9xbe.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = Long.MIN_VALUE;\n      \
    \  for (long number : numbers) {\n            max = Math.max(max, number);\n \
    \           result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        if (numbers.get(i) > max) {\n                max = numbers.get(i);\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmp09ner7ux.java:15)\n\tat Problem.main(tmp09ner7ux.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n   \
    \             max = numbers.get(i);\n            }\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        max = Math.max(max, numbers.get(i));\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.rollingMax(tmpqa2ze_60.java:15)\n\tat Problem.main(tmpqa2ze_60.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = numbers.get(0);\n      \
    \  result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n    \
    \        long number = numbers.get(i);\n            if (number > max) {\n    \
    \            max = number;\n            }\n            result.add(max);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.rollingMax(tmpconwpxw0.java:15)\n\tat Problem.main(tmpconwpxw0.java:27)\n"
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (int i =\
    \ 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n\
    \            result.add(max);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)2l, (long)3l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> rollingMax(ArrayList<Long> numbers) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long number\
    \ : numbers) {\n            if (number > max) {\n                max = number;\n\
    \            }\n            result.add(max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(rollingMax((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)3l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(rollingMax((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)3l, (long)100l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)100l, (long)100l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795061
