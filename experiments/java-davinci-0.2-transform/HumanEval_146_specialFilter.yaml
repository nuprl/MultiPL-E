name: HumanEval_146_specialFilter
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that takes an array of numbers as input\
  \ and returns \n    // the number of elements in the array that are greater than\
  \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
  \    // For example:\n    // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)-73l, (long)14l, (long)-15l))))\n    // (1l)\n    // >>> specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l,\
  \ (long)109l))))\n    // (2l)\n    public static long specialFilter(ArrayList<Long>\
  \ nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) ==\
  \ (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l,\
  \ (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l,\
  \ (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l,\
  \ (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l))))\
  \ == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) ==\
  \ (0l));\n    }\n\n}\n"
completions: ['        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x
    % 10 == 1).count();', '        return nums.stream().filter(x -> x > 10).filter(x
    -> x % 2 == 1).filter(x -> x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10
    == 7 || x % 10 == 9).count();', '        return nums.stream().filter(x -> x >
    10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', "        // Write your code\
    \ here\n        return 0;", '        return nums.stream().filter(x -> x > 10 &&
    x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x ->
    x > 10 && x % 2 == 1 && (x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 ==
    7 || x % 10 == 9)).count();', '        return nums.stream().filter(x -> x > 10
    && x % 2 == 1 && (x % 10) % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', "        // Write your code\
    \ here\n        return 0l;", '        return nums.stream().filter(n -> n > 10
    && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();']
stop_tokens:
- "\n    }\n"
