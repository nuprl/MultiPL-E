name: HumanEval_146_specialFilter
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that takes an array of numbers as input\
  \ and returns \n    // the number of elements in the array that are greater than\
  \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
  \    // For example:\n    // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)-73l, (long)14l, (long)-15l))))\n    // (1l)\n    // >>> specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l,\
  \ (long)109l))))\n    // (2l)\n    public static long specialFilter(ArrayList<Long>\
  \ nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) ==\
  \ (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l,\
  \ (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l,\
  \ (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l,\
  \ (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l))))\
  \ == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) ==\
  \ (0l));\n    }\n\n}\n"
completions: ['        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x
    % 10 == 1).count();', '        return nums.stream().filter(x -> x > 10).filter(x
    -> x % 2 == 1).filter(x -> x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10
    == 7 || x % 10 == 9).count();', '        return nums.stream().filter(x -> x >
    10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', "        // Write your code\
    \ here\n        return 0;", '        return nums.stream().filter(x -> x > 10 &&
    x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x ->
    x > 10 && x % 2 == 1 && (x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 ==
    7 || x % 10 == 9)).count();', '        return nums.stream().filter(x -> x > 10
    && x % 2 == 1 && (x % 10) % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', "        // Write your code\
    \ here\n        return 0l;", '        return nums.stream().filter(n -> n > 10
    && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && (x / 10) % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();',
  '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 ==
    1).count();', '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 &&
    n / 10 % 2 == 1).count();', '        return nums.stream().filter(n -> n > 10 &&
    n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(n ->
    n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();', '        return
    nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();',
  '        return nums.stream().filter(Problem::isGreaterThan10).filter(Problem::isFirstAndLastDigitOdd).count();',
  '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && (x % 10) % 2 == 1 && (x / 10)
    % 2 == 1).count();', '        return nums.stream().filter(n -> n > 10 && n % 2
    == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x -> x >
    10 && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', "        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return 0;",
  '        return nums.stream().filter(x -> x > 10 && (x % 10) % 2 == 1 && (x / 10)
    % 2 == 1).count();', '        return nums.stream().filter(x -> x > 10 && x % 2
    == 1 && (x / 10) % 2 == 1).count();', '        return nums.stream().filter(x ->
    x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', "  \
    \      // Write your code here\n        return 0;", "        long count = 0;\n\
    \        for (long num : nums) {\n            if (num > 10) {\n              \
    \  long first = num % 10;\n                long last = num;\n                while\
    \ (last >= 10) {\n                    last /= 10;\n                }\n       \
    \         if (first % 2 != 0 && last % 2 != 0) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", '        return
    nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();',
  '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && (n / 10) % 2 ==
    1).count();', '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 &&
    n % 10 == 1).count();', '        return nums.stream().filter(x -> x > 10 && x
    % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x ->
    x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10).filter(x -> x % 2 == 1).filter(x -> x / 10 % 2 == 1).filter(x -> x
    % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 == 7 || x % 10 == 9).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();',
  '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && (n / 10) % 2 ==
    1).count();', '        return nums.stream().filter(num -> num > 10 && num % 2
    == 1 && num / 10 % 2 == 1).count();', '        return nums.stream().filter(x ->
    x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && (n % 2 == 1) && (n / 10 % 2 == 1)).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', "  \
    \      long count = 0;\n        for (long num : nums) {\n            if (num >\
    \ 10) {\n                String numStr = Long.toString(num);\n               \
    \ if (numStr.charAt(0) % 2 != 0 && numStr.charAt(numStr.length() - 1) % 2 != 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;", '        return nums.stream().filter(x -> x > 10 && x
    % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x ->
    x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && (n / 10) % 2 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && (n / 10) % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', "  \
    \      return nums.stream().filter(x -> x > 10).filter(x -> x % 2 == 1).filter(x\
    \ -> {\n            long firstDigit = x;\n            while (firstDigit >= 10)\
    \ {\n                firstDigit /= 10;\n            }\n            long lastDigit\
    \ = x % 10;\n            return firstDigit % 2 == 1 && lastDigit % 2 == 1;\n \
    \       }).count();", '        return nums.stream().filter(n -> n > 10 && n %
    2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x ->
    x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return
    nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();',
  "        // Write your code here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", '        return nums.stream().filter(x -> x > 10 &&
    x % 2 == 1 && x % 10 == 1).count();', "        long count = 0;\n        for (long\
    \ num : nums) {\n            if (num > 10) {\n                String numString\
    \ = Long.toString(num);\n                if (numString.charAt(0) % 2 != 0 && numString.charAt(numString.length()\
    \ - 1) % 2 != 0) {\n                    count++;\n                }\n        \
    \    }\n        }\n        return count;", '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', "        long count = 0;\n\
    \        for (long num : nums) {\n            if (num > 10 && (num % 2 != 0) &&\
    \ (num % 10 != 0)) {\n                count++;\n            }\n        }\n   \
    \     return count;", '        return nums.stream().filter(n -> n > 10 && n %
    2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x -> x
    > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return
    nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();',
  "        long count = 0;\n        for (long num : nums) {\n            if (num >\
    \ 10 && isFirstAndLastDigitOdd(num)) {\n                count++;\n           \
    \ }\n        }\n        return count;", '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && (x % 10) % 2 == 1 && (x / 10)
    % 2 == 1).count();', '        return nums.stream().filter(n -> n > 10 && n % 2
    == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x -> x >
    10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && (x / 10) % 2 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', "        long count = 0;\n\
    \        for (long num : nums) {\n            if (num > 10) {\n              \
    \  long firstDigit = num % 10;\n                long lastDigit = num / 10;\n \
    \               if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n           \
    \         count++;\n                }\n            }\n        }\n        return\
    \ count;", '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n
    / 10 % 2 == 1).count();', '        return nums.stream().filter(x -> x > 10 &&
    x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(num
    -> num > 10 && num % 2 == 1 && num % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();', '        return
    nums.stream().filter(n -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();',
  "        long count = 0;\n        for (Long num : nums) {\n            if (num >\
    \ 10 && num % 2 == 1 && num % 10 == 1) {\n                count++;\n         \
    \   }\n        }\n        return count;", '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && (n % 2 != 0) && (n % 10 != 0)).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();', "        long count = 0;\n\
    \        for (long num : nums) {\n            if (num > 10) {\n              \
    \  long firstDigit = num % 10;\n                long lastDigit = num;\n      \
    \          while (lastDigit > 10) {\n                    lastDigit /= 10;\n  \
    \              }\n                if (firstDigit % 2 != 0 && lastDigit % 2 !=\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n        return count;", '        return nums.stream().filter(x -> x > 10
    && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(n
    -> n > 10).filter(n -> n % 2 == 1).filter(n -> n % 10 == 1 || n % 10 == 3 || n
    % 10 == 5 || n % 10 == 7 || n % 10 == 9).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(n -> n > 10 && (n % 2 == 1) && (n / 10 % 2 == 1)).count();',
  '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n % 10 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();',
  '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 ==
    1).count();', "        // Write your code here\n        return 0;", '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', "  \
    \      // Write your code here\n        return 0;", '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return
    nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return
    nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && (x % 10) % 2 ==
    1).count();', '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 &&
    (x / 10) % 2 == 1).count();', "        // Write your code here\n        return\
    \ 0;", '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && n / 10
    % 2 == 1).count();', '        return nums.stream().filter(x -> x > 10 && x % 2
    == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x -> x >
    10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', '        return
    nums.stream().filter(n -> n > 10 && n % 2 == 1 && (n / 10) % 2 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x % 10 == 1).count();',
  '        return nums.stream().filter(x -> x > 10 && x % 2 == 1 && x / 10 % 2 ==
    1).count();', '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 &&
    n / 10 % 2 == 1).count();', '        return nums.stream().filter(x -> x > 10 &&
    x % 2 == 1 && x % 10 == 1).count();', '        return nums.stream().filter(n ->
    n > 10 && n % 2 == 1 && n / 10 % 2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).count();', "        long\
    \ count = 0;\n        for (long num : nums) {\n            if (num > 10 && isFirstDigitOdd(num)\
    \ && isLastDigitOdd(num)) {\n                count++;\n            }\n       \
    \ }\n        return count;", '        return nums.stream().filter(x -> x > 10
    && x % 2 == 1 && x % 10 == 1).count();']
stop_tokens:
- "\n    }\n"
