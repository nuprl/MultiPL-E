name: HumanEval_59_largest_prime_factor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>>\
  \ largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
  \ n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        long largestPrimeFactor = 1;\n        long factor = 2;\n  \
    \      while (n > 1) {\n            while (n % factor == 0) {\n              \
    \  largestPrimeFactor = factor;\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return largestPrimeFactor;", "    \
    \    long largest = 1;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \            i--;\n            }\n        }\n        return largest;", "     \
    \   long largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \            i--;\n            }\n        }\n        return largest;", "     \
    \   long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n  \
    \          if (n % i == 0) {\n                largestPrimeFactor = i;\n      \
    \          n /= i;\n                i--;\n            }\n        }\n        return\
    \ largestPrimeFactor;", "        long largestPrimeFactor = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largestPrimeFactor;", "        long largest = 0;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                n /= i;\n                i = 1;\n        \
    \    }\n        }\n        return largest;", "        long largest = 1;\n    \
    \    for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n        \
    \        largest = i;\n                while (n % i == 0) {\n                \
    \    n /= i;\n                }\n            }\n        }\n        return largest;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largest = -1;\n        for (long i = 2; i <= n; i++) {\n        \
    \    if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largestPrimeFactor = 0;\n       \
    \ long factor = 2;\n        while (n > 1) {\n            while (n % factor ==\
    \ 0) {\n                largestPrimeFactor = factor;\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return largest;", " \
    \       long largestPrimeFactor = 1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            n /= i;\n                i--;\n            }\n        }\n       \
    \ return largestPrimeFactor;", "        long largest = 0;\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;", "        long largest = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        return largest;", "      \
    \  long largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                largest = i;\n                n /= i;\n    \
    \            i--;\n            }\n        }\n        return largest;", "     \
    \   long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return n;", "        long largestPrimeFactor = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largestPrimeFactor = i;\n                n /= i;\n              \
    \  i = 1;\n            }\n        }\n        return largestPrimeFactor;"]
stop_tokens:
- "\n    }\n"
