language: java
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_array = s.split(\" \");\n        for (String word : words_array) {\n \
    \           if (word.length() == n) {\n                words.add(word);\n    \
    \        }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp422dgfl5.java:36)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmekdw_g2.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (countConsonants(word) == n) {\n  \
    \              words.add(word);\n            }\n        }\n        return words;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9nz9n507.java:28: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6marffbj.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphngfcs6x.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6marffbj.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6marffbj.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsInString = s.split(\" \");\n        for (String word : wordsInString) {\n\
    \            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5opb658n.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk1c5g6uw.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_ = s.split(\" \");\n        for (String word : words_) {\n           \
    \ if (countConsonants(word) == n) {\n                words.add(word);\n      \
    \      }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbu4iscbn.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ split = s.split(\" \");\n        for (String word : split) {\n            if\
    \ (countConsonants(word) == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmekdw_g2.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Implement this function\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpy4xyf23t.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8rpdlmv.java:36)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here\n        return new ArrayList<String>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr7ektmjz.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6marffbj.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6marffbj.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ words_ = s.split(\" \");\n        for (String word : words_) {\n           \
    \ if (countConsonants(word) == n) {\n                words.add(word);\n      \
    \      }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbu4iscbn.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6marffbj.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (word.length() == n) {\n                result.add(word);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8rpdlmv.java:36)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphngfcs6x.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
