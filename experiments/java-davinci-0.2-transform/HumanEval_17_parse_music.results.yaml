language: java
name: HumanEval_17_parse_music
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        // Write your code here\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseMusic((\"\
    \")).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"\
    o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l,\
    \ (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o\
    \ o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l,\
    \ (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"\
    o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpolzubxyc.java:25)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        // Your code here\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        String[] notes\
    \ = music_string.split(\" \");\n        for (String note : notes) {\n        \
    \    if (note.equals(\"o\")) {\n                result.add((long)4l);\n      \
    \      } else if (note.equals(\"o|\")) {\n                result.add((long)2l);\n\
    \            } else if (note.equals(\".|\")) {\n                result.add((long)1l);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        // Your code here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpg9gpt_z1.java:23)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < music_string.length();\
    \ i++) {\n            if (music_string.charAt(i) == 'o') {\n                if\
    \ (i + 1 < music_string.length() && music_string.charAt(i + 1) == '|') {\n   \
    \                 result.add((long)2l);\n                    i++;\n          \
    \      } else {\n                    result.add((long)4l);\n                }\n\
    \            } else if (music_string.charAt(i) == '.') {\n                result.add((long)1l);\n\
    \                i++;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o\
    \ o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l,\
    \ (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"\
    o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < music_string.length();\
    \ i++) {\n            if (music_string.charAt(i) == 'o') {\n                if\
    \ (i + 1 < music_string.length() && music_string.charAt(i + 1) == '|') {\n   \
    \                 result.add((long)2l);\n                    i++;\n          \
    \      } else {\n                    result.add((long)4l);\n                }\n\
    \            } else if (music_string.charAt(i) == '.') {\n                result.add((long)1l);\n\
    \                i++;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o\
    \ o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l,\
    \ (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"\
    o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < music_string.length();\
    \ i++) {\n            if (music_string.charAt(i) == 'o') {\n                if\
    \ (i + 1 < music_string.length() && music_string.charAt(i + 1) == '|') {\n   \
    \                 result.add((long)2l);\n                    i++;\n          \
    \      } else {\n                    result.add((long)4l);\n                }\n\
    \            } else if (music_string.charAt(i) == '.') {\n                result.add((long)1l);\n\
    \                i++;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o\
    \ o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l,\
    \ (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"\
    o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        // TODO: implement this function\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(parseMusic((\"\
    \")).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"\
    o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l,\
    \ (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o\
    \ o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l,\
    \ (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"\
    o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3wkve9u.java:25)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < music_string.length();\
    \ i++) {\n            if (music_string.charAt(i) == 'o') {\n                if\
    \ (i + 1 < music_string.length() && music_string.charAt(i + 1) == '|') {\n   \
    \                 result.add((long)2l);\n                    i++;\n          \
    \      } else {\n                    result.add((long)4l);\n                }\n\
    \            } else if (music_string.charAt(i) == '.') {\n                result.add((long)1l);\n\
    \                i++;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseMusic((\"\")).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"o o o o\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o\
    \ o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l,\
    \ (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"\
    o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                result.add((long)4l);\n            } else if (note.equals(\"\
    o|\")) {\n                result.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                result.add((long)1l);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(parseMusic((\"\")).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(parseMusic((\"o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n\
    \    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)1l, (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    // Your task is to parse this string and\
    \ return list of integers corresponding to how many beats does each\n    // not\
    \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n\
    \    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one\
    \ beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l,\
    \ (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))\n    public static\
    \ ArrayList<Long> parseMusic(String music_string) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        String[] notes = music_string.split(\" \"\
    );\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n\
    \                res.add((long)4l);\n            } else if (note.equals(\"o|\"\
    )) {\n                res.add((long)2l);\n            } else if (note.equals(\"\
    .|\")) {\n                res.add((long)1l);\n            }\n        }\n     \
    \   return res;\n    }\n    public static void main(String[] args) {\n    assert(parseMusic((\"\
    \")).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(parseMusic((\"\
    o o o o\")).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l,\
    \ (long)4l)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)1l, (long)1l)))));\n    assert(parseMusic((\"o| o| .| .| o o\
    \ o o\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)1l,\
    \ (long)1l, (long)4l, (long)4l, (long)4l, (long)4l)))));\n    assert(parseMusic((\"\
    o| .| o| .| o o| o o|\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l, (long)2l, (long)1l, (long)4l, (long)2l, (long)4l, (long)2l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
