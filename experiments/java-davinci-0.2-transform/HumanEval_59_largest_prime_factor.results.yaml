language: java
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long factor = 2;\n     \
    \   while (n > 1) {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = -1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long factor = 2;\n     \
    \   while (n > 1) {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = -1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        if (n > largestPrimeFactor) {\n           \
    \ largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     n /= i;\n            } else {\n                i++;\n            }\n   \
    \     }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long max = 1;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        while (n % 2 == 0) {\n \
    \           largestPrimeFactor = 2;\n            n /= 2;\n        }\n        for\
    \ (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n\
    \                largestPrimeFactor = i;\n                n /= i;\n          \
    \  }\n        }\n        if (n > 2) {\n            largestPrimeFactor = n;\n \
    \       }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = -1;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = -1;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = -1;\n        long factor = 2;\n    \
    \    while (n > 1) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n                while (n % factor ==\
    \ 0) {\n                    n /= factor;\n                }\n            }\n \
    \           factor += 1;\n        }\n        return largestPrimeFactor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                if (isPrime(i)) {\n           \
    \         largest = i;\n                }\n            }\n        }\n        return\
    \ largest;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20ij0ocy.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                if (isPrime(i)) {\n           \
    \         largest = i;\n                }\n            }\n        }\n        return\
    \ largest;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20ij0ocy.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return largest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        // >>> largestPrimeFactor((13195l))\n        // (29l)\n      \
    \  // >>> largestPrimeFactor((2048l))\n        // (2l)\n        long largestPrimeFactor\
    \ = 0;\n        long i = 2;\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                n /= i;\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ largestPrimeFactor;\n    }\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i < n; i++) {\n  \
    \          if (n % i == 0) {\n                if (isPrime(i)) {\n            \
    \        largest = i;\n                }\n            }\n        }\n        return\
    \ largest;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp79h06rnx.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return n;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpth95f__e.java:24)\n"
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i * i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long result = 0;\n        for (long i = 2; i <= n; i++) {\n  \
    \          if (n % i == 0) {\n                result = i;\n                n /=\
    \ i;\n                i--;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                if (isPrime(i)) {\n           \
    \         largest = i;\n                }\n            }\n        }\n        return\
    \ largest;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20ij0ocy.java:18: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                n /= i;\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1svufulc.java:26)\n"
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 2;\n        while (n % 2 == 0) {\n            n\
    \ /= 2;\n        }\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n  \
    \          while (n % i == 0) {\n                n /= i;\n                largest\
    \ = i;\n            }\n        }\n        if (n > 2) {\n            largest =\
    \ n;\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i * i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n        }\n        if (n > 1) {\n           \
    \ largestPrimeFactor = n;\n        }\n        return largestPrimeFactor;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i = 1;\n            }\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     n /= i;\n            } else {\n                i++;\n            }\n   \
    \     }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largestPrimeFactor =\
    \ i;\n                n /= i;\n                i--;\n            }\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805467
