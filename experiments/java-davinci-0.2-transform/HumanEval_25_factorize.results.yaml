language: java
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        while (n %\
    \ 2 == 0) {\n            factors.add(2l);\n            n /= 2;\n        }\n  \
    \      for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i\
    \ == 0) {\n                factors.add(i);\n                n /= i;\n        \
    \    }\n        }\n        if (n > 2) {\n            factors.add(n);\n       \
    \ }\n        return factors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor += 1;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        // your code\
    \ here\n        return factors;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfqugxztz.java:24)\n"
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long divisor\
    \ = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n    \
    \            factors.add(divisor);\n                n /= divisor;\n          \
    \  }\n            divisor += 1;\n        }\n        return factors;\n    }\n \
    \   public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n == 1)\
    \ {\n            factors.add(1l);\n            return factors;\n        }\n  \
    \      long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors.add(i);\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        if (n == 1)\
    \ {\n            factors.add(1l);\n            return factors;\n        }\n  \
    \      long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors.add(i);\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long divisor\
    \ = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n    \
    \            factors.add(divisor);\n                n /= divisor;\n          \
    \  }\n            divisor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long divisor\
    \ = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n    \
    \            factors.add(divisor);\n                n /= divisor;\n          \
    \  }\n            divisor += 1;\n        }\n        return factors;\n    }\n \
    \   public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                result.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            if (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         factors.add(n);\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797717
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long d = 2;\n\
    \        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d);\n\
    \                n /= d;\n            }\n            d += 1;\n        }\n    \
    \    return factors;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long i = 2;\n\
    \        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n            i++;\n        }\n       \
    \ return factors;\n    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n\
    \                n /= i;\n            }\n        }\n        if (n > 1) {\n   \
    \         res.add(n);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        for (long i\
    \ = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        return factors;\n\
    \    }\n    public static void main(String[] args) {\n    assert(factorize((2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(factorize((4l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n    assert(factorize((8l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l)))));\n    assert(factorize((3249l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((185193l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)3l, (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((20577l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)19l, (long)19l, (long)19l)))));\n\
    \    assert(factorize((18l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
