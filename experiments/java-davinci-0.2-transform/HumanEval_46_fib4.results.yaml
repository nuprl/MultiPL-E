language: java
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Write your code here.\n        return 0l;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqq5kkina.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] arr = new long[4];\n        arr[0] = 0;\n        arr[1] = 0;\n     \
    \   arr[2] = 2;\n        arr[3] = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            long temp = arr[0] + arr[1] + arr[2] + arr[3];\n            arr[0]\
    \ = arr[1];\n            arr[1] = arr[2];\n            arr[2] = arr[3];\n    \
    \        arr[3] = temp;\n        }\n        return arr[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Your code here.\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppoqz35mf.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0, b = 0, c = 2, d = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            d = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = d;\n        }\n        return d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_avsv5l.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n    \
    \    long f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n\
    \        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m\
    \ = 0;\n        long o = 0;\n        long p = 0;\n        long q = 0;\n      \
    \  long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n\
    \        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y\
    \ = 0;\n        long z = 0;\n        long A = 0;\n        long B = 0;\n      \
    \  long C = 0;\n        long D = 0;\n        long E = 0;\n        long F = 0;\n\
    \        long G = 0;\n        long H = 0;\n        long I = 0;\n        long J\
    \ = 0;\n        long K = 0;\n        long L = 0;\n        long M = 0;\n      \
    \  long O = 0;\n        long P = 0;\n        long Q = 0;\n        long R = 0;\n\
    \        long S = 0;\n        long T = 0;\n        long U = 0;\n        long V\
    \ = 0;\n        long W = 0;\n        long X = 0;\n        long Y = 0;\n      \
    \  long Z = 0;\n        long AA = 0;\n        long AB = 0;\n        long AC =\
    \ 0;\n        long AD = 0;\n        long AE = 0;\n        long AF = 0;\n     \
    \   long AG = 0;\n        long AH = 0;\n        long AI = 0;\n        long AJ\
    \ = 0;\n        long AK = 0;\n        long AL = 0;\n        long AM = 0;\n   \
    \     long AO = 0;\n        long AP = 0;\n        long AQ =\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppr807xrj.java:95: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmppr807xrj.java:96: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmppr807xrj.java:96: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmppr807xrj.java:96:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmppr807xrj.java:96: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmppr807xrj.java:96:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmppr807xrj.java:103: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (200l)\n        // >>> fib4((13l))\n        // (328l)\n\
    \        // >>> fib4((14l))\n        // (536l)\n        // >>> fib4((15l))\n \
    \       // (864l)\n        // >>> fib4((16l))\n        // (1400l)\n        //\
    \ >>> fib4((17l))\n        // (2264l)\n        // >>> fib4((18l))\n        //\
    \ (3664l)\n        // >>> fib4((19l))\n        // (5928l)\n        // >>> fib4((20l))\n\
    \        // (9632l)\n        // >>> fib4((21l))\n        // (15600l)\n       \
    \ // >>> fib4((22l))\n        // (25232l)\n        // >>> fib4((23l))\n      \
    \  // (40936l)\n        // >>> fib4((24l))\n        // (66272l)\n        // >>>\
    \ fib4((25l))\n        // (107216l)\n        // >>> fib4((26l))\n        // (173488l)\n\
    \        // >>> fib4((27l))\n        // (280160l)\n        // >>> fib4((28l))\n\
    \        // (453616l)\n        // >>> fib4((29l))\n        // (732864l)\n    \
    \    // >>> fib4((30l))\n        // (1189440l)\n        // >>> fib4((31l))\n \
    \       // (1922304l)\n        // >>> fib4((32l))\n        // (3114752l)\n   \
    \     // >>> fib4((33l))\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcuotj2c4.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 3; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_weby00c.java:38)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fibs = new long[4];\n        fibs[0] = 0;\n        fibs[1] = 0;\n  \
    \      fibs[2] = 2;\n        fibs[3] = 0;\n        for (int i = 4; i <= n; i++)\
    \ {\n            long tmp = fibs[3];\n            fibs[3] = fibs[2] + fibs[1]\
    \ + fibs[0] + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1] =\
    \ fibs[2];\n            fibs[2] = tmp;\n        }\n        return fibs[3];\n \
    \   }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Fill in the code here\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxm3k2spk.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        if (n < 4) {\n            return (n == 0) ? 0 :\
    \ (n == 1) ? 0 : (n == 2) ? 2 : 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            d = a + b + c;\n            a = b;\n            b\
    \ = c;\n            c = d;\n        }\n        return d;\n        // END SOLUTION\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd4c3r_r3.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (22l)\n        // >>> fib4((9l))\n        // (36l)\n        // >>> fib4((10l))\n\
    \        // (58l)\n        // >>> fib4((11l))\n        // (94l)\n        // >>>\
    \ fib4((12l))\n        // (152l)\n        // >>> fib4((13l))\n        // (246l)\n\
    \        // >>> fib4((14l))\n        // (400l)\n        // >>> fib4((15l))\n \
    \       // (646l)\n        // >>> fib4((16l))\n        // (1046l)\n        //\
    \ >>> fib4((17l))\n        // (1692l)\n        // >>> fib4((18l))\n        //\
    \ (2738l)\n        // >>> fib4((19l))\n        // (4430l)\n        // >>> fib4((20l))\n\
    \        // (7168l)\n        // >>> fib4((21l))\n        // (11598l)\n       \
    \ // >>> fib4((22l))\n        // (18776l)\n        // >>> fib4((23l))\n      \
    \  // (30374l)\n        // >>> fib4((24l))\n        // (49150l)\n        // >>>\
    \ fib4((25l))\n        // (79924l)\n        // >>> fib4((26l))\n        // (129070l)\n\
    \        // >>> fib4((27l))\n        // (209094l)\n        // >>> fib4((28l))\n\
    \        // (338214l)\n        // >>> fib4((29l))\n        // (547308l)\n    \
    \    // >>> fib4((30l))\n        // (885622l)\n        // >>> fib4((31l))\n  \
    \      // (1433230l)\n        // >>> fib4((32l))\n        // (2318852l)\n    \
    \    // >>> fib4((33l))\n       \n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3jwolzz.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long[]\
    \ fib4 = new long[(int) n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n\
    \        fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i = 4; i <= n; i++)\
    \ {\n            fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i -\
    \ 4];\n        }\n        return fib4[(int) n];\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n  \
    \      fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i = 4; i <= n; i++)\
    \ {\n            fib4[i % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i\
    \ - 3) % 4] + fib4[(i - 4) % 4];\n        }\n        return fib4[(int) (n % 4)];\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        long[] fib = new long[4];\n\
    \        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]\
    \ = 0;\n        if (n <= 3) {\n            return fib[(int) n];\n        }\n \
    \       for (int i = 4; i <= n; i++) {\n            long temp = fib[0] + fib[1]\
    \ + fib[2] + fib[3];\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n\
    \            fib[2] = fib[3];\n            fib[3] = temp;\n        }\n       \
    \ return fib[3];\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (122l)\n        // >>>\
    \ fib4((12l))\n        // (204l)\n        // >>> fib4((13l))\n        // (340l)\n\
    \        // >>> fib4((14l))\n        // (564l)\n        // >>> fib4((15l))\n \
    \       // (924l)\n        // >>> fib4((16l))\n        // (1520l)\n        //\
    \ >>> fib4((17l))\n        // (2484l)\n        // >>> fib4((18l))\n        //\
    \ (4088l)\n        // >>> fib4((19l))\n        // (6692l)\n        // >>> fib4((20l))\n\
    \        // (10980l)\n        // >>> fib4((21l))\n        // (17972l)\n      \
    \  // >>> fib4((22l))\n        // (29452l)\n        // >>> fib4((23l))\n     \
    \   // (48004l)\n        // >>> fib4((24l))\n        // (78456l)\n        // >>>\
    \ fib4((25l))\n        // (127908l)\n        // >>> fib4((26l))\n        // (208364l)\n\
    \        // >>> fib4((27l))\n        // (338260l)\n        // >>> fib4((28l))\n\
    \        // (556620l)\n        // >>> fib4((29l))\n        // (914880l)\n    \
    \    // >>> fib4((30l))\n        // (1480540l)\n        // >>> fib4((31l))\n \
    \       // (2405420l)\n        // >>> fib4((32l))\n        // (3905980l)\n   \
    \     // >>> fib4((33l\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfk2bsgdn.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (200l)\n        // >>> fib4((13l))\n        // (328l)\n\
    \        // >>> fib4((14l))\n        // (536l)\n        // >>> fib4((15l))\n \
    \       // (864l)\n        // >>> fib4((16l))\n        // (1400l)\n        //\
    \ >>> fib4((17l))\n        // (2264l)\n        // >>> fib4((18l))\n        //\
    \ (3664l)\n        // >>> fib4((19l))\n        // (5928l)\n        // >>> fib4((20l))\n\
    \        // (9632l)\n        // >>> fib4((21l))\n        // (15600l)\n       \
    \ // >>> fib4((22l))\n        // (25232l)\n        // >>> fib4((23l))\n      \
    \  // (41024l)\n        // >>> fib4((24l))\n        // (66464l)\n        // >>>\
    \ fib4((25l))\n        // (107520l)\n        // >>> fib4((26l))\n        // (174080l)\n\
    \        // >>> fib4((27l))\n        // (281680l)\n        // >>> fib4((28l))\n\
    \        // (455760l)\n        // >>> fib4((29l))\n        // (737440l)\n    \
    \    // >>> fib4((30l))\n        // (1193120l)\n        // >>> fib4((31l))\n \
    \       // (1930688l)\n        // >>> fib4((32l))\n        // (3125888l)\n   \
    \     // >>> fib4((33l))\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4e_1wrp.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> your code goes here <<<\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoodeahl0.java:27)\n"
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (200l)\n        // >>> fib4((13l))\n        // (328l)\n\
    \        // >>> fib4((14l))\n        // (536l)\n        // >>> fib4((15l))\n \
    \       // (864l)\n        // >>> fib4((16l))\n        // (1400l)\n        //\
    \ >>> fib4((17l))\n        // (2264l)\n        // >>> fib4((18l))\n        //\
    \ (3664l)\n        // >>> fib4((19l))\n        // (5928l)\n        // >>> fib4((20l))\n\
    \        // (9632l)\n        // >>> fib4((21l))\n        // (15600l)\n       \
    \ // >>> fib4((22l))\n        // (25232l)\n        // >>> fib4((23l))\n      \
    \  // (41024l)\n        // >>> fib4((24l))\n        // (66464l)\n        // >>>\
    \ fib4((25l))\n        // (107520l)\n        // >>> fib4((26l))\n        // (174080l)\n\
    \        // >>> fib4((27l))\n        // (281680l)\n        // >>> fib4((28l))\n\
    \        // (455760l)\n        // >>> fib4((29l))\n        // (737440l)\n    \
    \    // >>> fib4((30l))\n        // (1193120l)\n        // >>> fib4((31l))\n \
    \       // (1930960l)\n        // >>> fib4((32l))\n        // (3125080l)\n   \
    \     // >>> fib4((33l))\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpouhs830r.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (200l)\n        // >>> fib4((13l))\n        // (328l)\n\
    \        // >>> fib4((14l))\n        // (536l)\n        // >>> fib4((15l))\n \
    \       // (872l)\n        // >>> fib4((16l))\n        // (1408l)\n        //\
    \ >>> fib4((17l))\n        // (2280l)\n        // >>> fib4((18l))\n        //\
    \ (3768l)\n        // >>> fib4((19l))\n        // (6128l)\n        // >>> fib4((20l))\n\
    \        // (10056l)\n        // >>> fib4((21l))\n        // (16464l)\n      \
    \  // >>> fib4((22l))\n        // (26920l)\n        // >>> fib4((23l))\n     \
    \   // (43976l)\n        // >>> fib4((24l))\n        // (71680l)\n        // >>>\
    \ fib4((25l))\n        // (116656l)\n        // >>> fib4((26l))\n        // (190320l)\n\
    \        // >>> fib4((27l))\n        // (310496l)\n        // >>> fib4((28l))\n\
    \        // (504880l)\n        // >>> fib4((29l))\n        // (819376l)\n    \
    \    // >>> fib4((30l))\n        // (1324800l)\n        // >>> fib4((31l))\n \
    \       // (2144256l)\n        // >>> fib4((32l))\n        // (3469056l)\n   \
    \     // >>> fib4((33l\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxi4rg5sw.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib = new long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n     \
    \   fib[2] = 2;\n        fib[3] = 0;\n        long[] fib2 = new long[4];\n   \
    \     fib2[0] = 0;\n        fib2[1] = 0;\n        fib2[2] = 2;\n        fib2[3]\
    \ = 0;\n        long[] fib3 = new long[4];\n        fib3[0] = 0;\n        fib3[1]\
    \ = 0;\n        fib3[2] = 2;\n        fib3[3] = 0;\n        long[] fib4 = new\
    \ long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n\
    \        fib4[3] = 0;\n        long[] fib5 = new long[4];\n        fib5[0] = 0;\n\
    \        fib5[1] = 0;\n        fib5[2] = 2;\n        fib5[3] = 0;\n        long[]\
    \ fib6 = new long[4];\n        fib6[0] = 0;\n        fib6[1] = 0;\n        fib6[2]\
    \ = 2;\n        fib6[3] = 0;\n        long[] fib7 = new long[4];\n        fib7[0]\
    \ = 0;\n        fib7[1] = 0;\n        fib7[2] = 2;\n        fib7[3] = 0;\n   \
    \     long[] fib8 = new long[4];\n        fib8[0] = 0;\n        fib8[1] = 0;\n\
    \        fib8[2] = 2;\n        fib8[3] = 0;\n        long[] fib9 = new long[4];\n\
    \        fib9[0] = 0;\n        fib9[1] = 0;\n        fib9[2] = 2;\n        fib9[3]\
    \ = 0;\n        long[] fib10 = new long[4];\n        fib10[0] = 0;\n        fib10[1]\
    \ = 0;\n        fib10[2] = 2;\n        fib10[3]\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiw9te2o3.java:72: error: not a statement\n        fib10[3]\n  \
    \           ^\n/tmp/tmpiw9te2o3.java:72: error: ';' expected\n        fib10[3]\n\
    \                ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n  \
    \      fib4[2] = 2;\n        fib4[3] = 0;\n        if (n <= 3) {\n           \
    \ return fib4[(int)n];\n        }\n        for (int i = 4; i <= n; i++) {\n  \
    \          long temp = fib4[3];\n            fib4[3] = fib4[0] + fib4[1] + fib4[2]\
    \ + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1] = fib4[2];\n\
    \            fib4[2] = temp;\n        }\n        return fib4[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqx2qq1p.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        if (n == 0) {\n            return a;\n  \
    \      } else if (n == 1) {\n            return b;\n        } else if (n == 2)\
    \ {\n            return c;\n        } else if (n == 3) {\n            return d;\n\
    \        }\n        for (int i = 4; i <= n; i++) {\n            long temp = a\
    \ + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n \
    \           d = temp;\n        }\n        return d;\n        // END SOLUTION\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6to_bhe9.java:27)\n"
  stdout: ''
  timestamp: 1659797372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long[]\
    \ fibs = new long[4];\n        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2]\
    \ = 2;\n        fibs[3] = 0;\n        for (int i = 4; i <= n; i++) {\n       \
    \     long temp = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n            fibs[0]\
    \ = fibs[1];\n            fibs[1] = fibs[2];\n            fibs[2] = fibs[3];\n\
    \            fibs[3] = temp;\n        }\n        return fibs[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl9ksqqj.java:37)\n"
  stdout: ''
  timestamp: 1659797373
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqx2qq1p.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (40l)\n        // >>> fib4((10l))\n\
    \        // (64l)\n        // >>> fib4((11l))\n        // (104l)\n        // >>>\
    \ fib4((12l))\n        // (168l)\n        // >>> fib4((13l))\n        // (272l)\n\
    \        // >>> fib4((14l))\n        // (440l)\n        // >>> fib4((15l))\n \
    \       // (704l)\n        // >>> fib4((16l))\n        // (1120l)\n        //\
    \ >>> fib4((17l))\n        // (1792l)\n        // >>> fib4((18l))\n        //\
    \ (2880l)\n        // >>> fib4((19l))\n        // (4624l)\n        // >>> fib4((20l))\n\
    \        // (7456l)\n        // >>> fib4((21l))\n        // (12032l)\n       \
    \ // >>> fib4((22l))\n        // (19488l)\n        // >>> fib4((23l))\n      \
    \  // (31360l)\n        // >>> fib4((24l))\n        // (50448l)\n        // >>>\
    \ fib4((25l))\n        // (81808l)\n        // >>> fib4((26l))\n        // (132264l)\n\
    \        // >>> fib4((27l))\n        // (214080l)\n        // >>> fib4((28l))\n\
    \        // (346344l)\n        // >>> fib4((29l))\n        // (559104l)\n    \
    \    // >>> fib4((30l))\n        // (904448l)\n        // >>> fib4((31l))\n  \
    \      // (1463552l)\n        // >>> fib4((32l))\n        // (2367296l)\n    \
    \    // >>> fib4((33l))\n       \n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmvmceuw.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fibs = new long[4];\n        fibs[0] = 0;\n        fibs[1] = 0;\n  \
    \      fibs[2] = 2;\n        fibs[3] = 0;\n        for (int i = 4; i <= n; i++)\
    \ {\n            long temp = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n        \
    \    fibs[0] = fibs[1];\n            fibs[1] = fibs[2];\n            fibs[2] =\
    \ fibs[3];\n            fibs[3] = temp;\n        }\n        return fibs[3];\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 2;\n        }\n        if (n == 3) {\n            return\
    \ 0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n\
    \        long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long\
    \ temp = a + b + c + d;\n            a = b;\n            b = c;\n            c\
    \ = d;\n            d = temp;\n        }\n        return a + b + c + d;\n    \
    \    // END SOLUTION\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07z0qg44.java:51)\n"
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 2;\n        if (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n\
    \        long c = 2;\n        long d = 0;\n        long e = 0;\n        for (long\
    \ i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n\
    \            b = c;\n            c = d;\n            d = e;\n        }\n     \
    \   return e;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return 0;\n        }\n     \
    \   if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n \
    \           return 2;\n        }\n        if (n == 3) {\n            return 0;\n\
    \        }\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n       \
    \ fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i\
    \ = 4; i <= n; i++) {\n            long temp = fib4[0] + fib4[1] + fib4[2] + fib4[3];\n\
    \            fib4[0] = fib4[1];\n            fib4[1] = fib4[2];\n            fib4[2]\
    \ = fib4[3];\n            fib4[3] = temp;\n        }\n        return fib4[3];\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n  \
    \      fib4[2] = 2;\n        fib4[3] = 0;\n        if (n <= 3) {\n           \
    \ return fib4[(int)n];\n        }\n        for (int i = 4; i <= n; i++) {\n  \
    \          long temp = fib4[0] + fib4[1] + fib4[2] + fib4[3];\n            fib4[0]\
    \ = fib4[1];\n            fib4[1] = fib4[2];\n            fib4[2] = fib4[3];\n\
    \            fib4[3] = temp;\n        }\n        return fib4[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n  \
    \      fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i = 4; i <= n; i++)\
    \ {\n            fib4[3] = fib4[2] + fib4[1] + fib4[0] + fib4[3];\n          \
    \  fib4[0] = fib4[1];\n            fib4[1] = fib4[2];\n            fib4[2] = fib4[3];\n\
    \        }\n        return fib4[3];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptjqoojte.java:37)\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long i = 4;\n        while (i <= n) {\n            long temp = a + b + c\
    \ + d;\n            a = b;\n            b = c;\n            c = d;\n         \
    \   d = temp;\n            i += 1;\n        }\n        return a + b + c + d;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpck1hxy6v.java:51)\n"
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 3; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_weby00c.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib = new long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n     \
    \   fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            long temp = fib[3];\n            fib[3] = fib[2] + fib[1] + fib[0]\
    \ + fib[3];\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n    \
    \        fib[2] = temp;\n        }\n        return fib[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqx2qq1p.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6to_bhe9.java:27)\n"
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n  \
    \      fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i = 4; i <= n; i++)\
    \ {\n            fib4[3] = fib4[0] + fib4[1] + fib4[2] + fib4[3];\n          \
    \  fib4[0] = fib4[1];\n            fib4[1] = fib4[2];\n            fib4[2] = fib4[3];\n\
    \        }\n        return fib4[3];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw5ipyafl.java:37)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 3; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_weby00c.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 2;\n        if (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n\
    \        long c = 2;\n        long d = 0;\n        for (long i = 4; i <= n; i++)\
    \ {\n            long e = a + b + c + d;\n            a = b;\n            b =\
    \ c;\n            c = d;\n            d = e;\n        }\n        return a + b\
    \ + c + d;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnsemxi_3.java:41)\n"
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (44l)\n        // >>> fib4((10l))\n\
    \        // (80l)\n        // >>> fib4((11l))\n        // (144l)\n        // >>>\
    \ fib4((12l))\n        // (256l)\n        // >>> fib4((13l))\n        // (456l)\n\
    \        // >>> fib4((14l))\n        // (816l)\n        // >>> fib4((15l))\n \
    \       // (1472l)\n        // >>> fib4((16l))\n        // (2640l)\n        //\
    \ >>> fib4((17l))\n        // (4776l)\n        // >>> fib4((18l))\n        //\
    \ (8640l)\n        // >>> fib4((19l))\n        // (15696l)\n        // >>> fib4((20l))\n\
    \        // (28336l)\n        // >>> fib4((21l))\n        // (51616l)\n      \
    \  // >>> fib4((22l))\n        // (93760l)\n        // >>> fib4((23l))\n     \
    \   // (170176l)\n        // >>> fib4((24l))\n        // (306944l)\n        //\
    \ >>> fib4((25l))\n        // (557056l)\n        // >>> fib4((26l))\n        //\
    \ (1008448l)\n        // >>> fib4((27l))\n        // (1816704l)\n        // >>>\
    \ fib4((28l))\n        // (3279488l)\n        // >>> fib4((29l))\n        // (5949696l)\n\
    \        // >>> fib4((30l))\n        // (10731520l)\n        // >>> fib4((31l))\n\
    \        // (19447936l)\n        // >>> fib4((32l))\n        // (35161600l)\n\
    \        // >>>\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8svdsngm.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (22l)\n        // >>> fib4((9l))\n        // (36l)\n        // >>> fib4((10l))\n\
    \        // (58l)\n        // >>> fib4((11l))\n        // (94l)\n        // >>>\
    \ fib4((12l))\n        // (152l)\n        // >>> fib4((13l))\n        // (246l)\n\
    \        // >>> fib4((14l))\n        // (400l)\n        // >>> fib4((15l))\n \
    \       // (646l)\n        // >>> fib4((16l))\n        // (1046l)\n        //\
    \ >>> fib4((17l))\n        // (1692l)\n        // >>> fib4((18l))\n        //\
    \ (2738l)\n        // >>> fib4((19l))\n        // (4430l)\n        // >>> fib4((20l))\n\
    \        // (7168l)\n        // >>> fib4((21l))\n        // (11598l)\n       \
    \ // >>> fib4((22l))\n        // (18776l)\n        // >>> fib4((23l))\n      \
    \  // (30374l)\n        // >>> fib4((24l))\n        // (49150l)\n        // >>>\
    \ fib4((25l))\n        // (79924l)\n        // >>> fib4((26l))\n        // (129070l)\n\
    \        // >>> fib4((27l))\n        // (209044l)\n        // >>> fib4((28l))\n\
    \        // (338098l)\n        // >>> fib4((29l))\n        // (547142l)\n    \
    \    // >>> fib4((30l))\n        // (885260l)\n        // >>> fib4((31l))\n  \
    \      // (1432802l)\n        // >>> fib4((32l))\n        // (2318062l)\n    \
    \    // >>> fib4((33l))\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxiehr7e4.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6to_bhe9.java:27)\n"
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (204l)\n        // >>> fib4((13l))\n        // (340l)\n\
    \        // >>> fib4((14l))\n        // (568l)\n        // >>> fib4((15l))\n \
    \       // (932l)\n        // >>> fib4((16l))\n        // (1536l)\n        //\
    \ >>> fib4((17l))\n        // (2528l)\n        // >>> fib4((18l))\n        //\
    \ (4160l)\n        // >>> fib4((19l))\n        // (6824l)\n        // >>> fib4((20l))\n\
    \        // (11288l)\n        // >>> fib4((21l))\n        // (18504l)\n      \
    \  // >>> fib4((22l))\n        // (30392l)\n        // >>> fib4((23l))\n     \
    \   // (49896l)\n        // >>> fib4((24l))\n        // (81792l)\n        // >>>\
    \ fib4((25l))\n        // (134584l)\n        // >>> fib4((26l))\n        // (220480l)\n\
    \        // >>> fib4((27l))\n        // (365064l)\n        // >>> fib4((28l))\n\
    \        // (595552l)\n        // >>> fib4((29l))\n        // (970136l)\n    \
    \    // >>> fib4((30l))\n        // (1585680l)\n        // >>> fib4((31l))\n \
    \       // (2585776l)\n        // >>> fib4((32l))\n        // (4216448l)\n   \
    \     // >>> fib4((33l))\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnnb3j_nd.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 2;\n        if (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n\
    \        long c = 2;\n        long d = 0;\n        long e = 0;\n        for (long\
    \ i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n\
    \            b = c;\n            c = d;\n            d = e;\n        }\n     \
    \   return e;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> your code goes here <<<\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoodeahl0.java:27)\n"
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib = new long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n     \
    \   fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            long temp = fib[0] + fib[1] + fib[2] + fib[3];\n            fib[0]\
    \ = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n    \
    \        fib[3] = temp;\n        }\n        return fib[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        if (n == 0) {\n            return a;\n        }\n        if (n == 1)\
    \ {\n            return b;\n        }\n        if (n == 2) {\n            return\
    \ c;\n        }\n        if (n == 3) {\n            return d;\n        }\n   \
    \     for (int i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return d;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0, b = 0, c = 2, d = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            d = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = d;\n        }\n        return d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_avsv5l.java:34)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n  \
    \      fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i = 4; i <= n; i++)\
    \ {\n            fib4[i % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i\
    \ - 3) % 4] + fib4[(i - 4) % 4];\n        }\n        return fib4[(int) (n % 4)];\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h\
    \ = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n      \
    \  long l = 0;\n        long m = 0;\n        long o = 0;\n        long p = 0;\n\
    \        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t\
    \ = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n      \
    \  long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa = 0;\n\
    \        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long\
    \ ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n\
    \        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long\
    \ al = 0;\n        long am = 0;\n        long an = 0;\n        long ao = 0;\n\
    \        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n        long\
    \ as = 0;\n        long at = 0;\n        long au = 0;\n        long av = 0;\n\
    \        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n        long\
    \ az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc = 0;\n\
    \        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long\
    \ bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n\
    \        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long\
    \ bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long bq = 0;\n\
    \        long br = 0;\n        long bs = 0;\n        long b\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6tjnls9.java:93: error: ';' expected\n        long b\n       \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1659797369
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 2;\n        if (n == 3) return 0;\n        long[] fibs = new long[4];\n    \
    \    fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long newFib = fibs[0]\
    \ + fibs[1] + fibs[2] + fibs[3];\n            fibs[0] = fibs[1];\n           \
    \ fibs[1] = fibs[2];\n            fibs[2] = fibs[3];\n            fibs[3] = newFib;\n\
    \        }\n        return fibs[3];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 3; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_weby00c.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n < 0) {\n            throw new IllegalArgumentException(\"n must be >=\
    \ 0\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 2;\n        }\n        if (n == 3) {\n            return\
    \ 0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n\
    \        long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long\
    \ temp = a + b + c + d;\n            a = b;\n            b = c;\n            c\
    \ = d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4c2ir8s5.java:52)\n"
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return 0;\n        }\n     \
    \   if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n \
    \           return 2;\n        }\n        if (n == 3) {\n            return 0;\n\
    \        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n  \
    \      long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long\
    \ temp = a + b + c + d;\n            a = b;\n            b = c;\n            c\
    \ = d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb67zac9t.java:52)\n"
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6to_bhe9.java:27)\n"
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return 0;\n        }\n     \
    \   if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n \
    \           return 2;\n        }\n        if (n == 3) {\n            return 0;\n\
    \        }\n        long[] fibs = new long[4];\n        fibs[0] = 0;\n       \
    \ fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for (int i\
    \ = 4; i <= n; i++) {\n            long newFib = fibs[0] + fibs[1] + fibs[2] +\
    \ fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1] = fibs[2];\n \
    \           fibs[2] = fibs[3];\n            fibs[3] = newFib;\n        }\n   \
    \     return fibs[3];\n    }\n    public static void main(String[] args) {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib = new long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n     \
    \   fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            long temp = fib[0] + fib[1] + fib[2] + fib[3];\n            fib[0]\
    \ = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n    \
    \        fib[3] = temp;\n        }\n        return fib[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (200l)\n        // >>> fib4((13l))\n        // (328l)\n\
    \        // >>> fib4((14l))\n        // (536l)\n        // >>> fib4((15l))\n \
    \       // (872l)\n        // >>> fib4((16l))\n        // (1408l)\n        //\
    \ >>> fib4((17l))\n        // (2280l)\n        // >>> fib4((18l))\n        //\
    \ (3768l)\n        // >>> fib4((19l))\n        // (6148l)\n        // >>> fib4((20l))\n\
    \        // (10016l)\n        // >>> fib4((21l))\n        // (16164l)\n      \
    \  // >>> fib4((22l))\n        // (26180l)\n        // >>> fib4((23l))\n     \
    \   // (42344l)\n        // >>> fib4((24l))\n        // (68520l)\n        // >>>\
    \ fib4((25l))\n        // (110904l)\n        // >>> fib4((26l))\n        // (179228l)\n\
    \        // >>> fib4((27l))\n        // (290132l)\n        // >>> fib4((28l))\n\
    \        // (469364l)\n        // >>> fib4((29l))\n        // (759508l)\n    \
    \    // >>> fib4((30l))\n        // (1228972l)\n        // >>> fib4((31l))\n \
    \       // (1989880l)\n        // >>> fib4((32l))\n        // (3218852l)\n   \
    \     // >>> fib4((33l))\n       \n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpestclvk4.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long[]\
    \ fibs = new long[4];\n        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2]\
    \ = 2;\n        fibs[3] = 0;\n        for (int i = 4; i <= n; i++) {\n       \
    \     long sum = 0;\n            for (int j = 0; j < 4; j++) {\n             \
    \   sum += fibs[j];\n            }\n            for (int j = 0; j < 3; j++) {\n\
    \                fibs[j] = fibs[j + 1];\n            }\n            fibs[3] =\
    \ sum;\n        }\n        return fibs[3];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n  \
    \      fib4[2] = 2;\n        fib4[3] = 0;\n        if (n < 4) {\n            return\
    \ fib4[(int)n];\n        }\n        long[] fib4_n = new long[4];\n        fib4_n[0]\
    \ = fib4[0];\n        fib4_n[1] = fib4[1];\n        fib4_n[2] = fib4[2];\n   \
    \     fib4_n[3] = fib4[3];\n        for (long i = 4; i <= n; i++) {\n        \
    \    fib4[0] = fib4_n[1];\n            fib4[1] = fib4_n[2];\n            fib4[2]\
    \ = fib4_n[3];\n            fib4[3] = fib4_n[0] + fib4_n[1] + fib4_n[2] + fib4_n[3];\n\
    \            fib4_n[0] = fib4[0];\n            fib4_n[1] = fib4[1];\n        \
    \    fib4_n[2] = fib4[2];\n            fib4_n[3] = fib4[3];\n        }\n     \
    \   return fib4[3];\n    }\n    public static void main(String[] args) {\n   \
    \ assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6to_bhe9.java:27)\n"
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 3; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_weby00c.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        for (long i = 4; i <= n; i++) {\n            long temp = a + b + c +\
    \ d;\n            a = b;\n            b = c;\n            c = d;\n           \
    \ d = temp;\n        }\n        return a + b + c + d;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbhkla0ym.java:37)\n"
  stdout: ''
  timestamp: 1659797373
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h\
    \ = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n      \
    \  long l = 0;\n        long m = 0;\n        long o = 0;\n        long p = 0;\n\
    \        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t\
    \ = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n      \
    \  long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa = 0;\n\
    \        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long\
    \ ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n\
    \        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long\
    \ al = 0;\n        long am = 0;\n        long an = 0;\n        long ao = 0;\n\
    \        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n        long\
    \ as = 0;\n        long at = 0;\n        long au = 0;\n        long av = 0;\n\
    \        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n        long\
    \ az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc = 0;\n\
    \        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long\
    \ bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n\
    \        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long\
    \ bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long bq = 0;\n\
    \        long br = 0;\n        long bs = 0;\n        long b\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6tjnls9.java:93: error: ';' expected\n        long b\n       \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1659797369
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        if (n == 0) {\n        \
    \    return 0;\n        }\n        if (n == 1) {\n            return 0;\n    \
    \    }\n        if (n == 2) {\n            return 2;\n        }\n        if (n\
    \ == 3) {\n            return 0;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i\
    \ <= n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n \
    \           b = c;\n            c = d;\n            d = temp;\n        }\n   \
    \     return a + b + c + d;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkbur5o5s.java:55)\n"
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqx2qq1p.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h\
    \ = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n      \
    \  long l = 0;\n        long m = 0;\n        long o = 0;\n        long p = 0;\n\
    \        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t\
    \ = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n      \
    \  long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa = 0;\n\
    \        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long\
    \ ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n\
    \        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long\
    \ al = 0;\n        long am = 0;\n        long an = 0;\n        long ao = 0;\n\
    \        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n        long\
    \ as = 0;\n        long at = 0;\n        long au = 0;\n        long av = 0;\n\
    \        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n        long\
    \ az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc = 0;\n\
    \        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long\
    \ bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n\
    \        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long\
    \ bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long bq = 0;\n\
    \        long br = 0;\n        long bs = 0;\n        long b\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6tjnls9.java:93: error: ';' expected\n        long b\n       \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1659797369
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fibs = new long[4];\n        fibs[0] = 0;\n        fibs[1] = 0;\n  \
    \      fibs[2] = 2;\n        fibs[3] = 0;\n        for (int i = 4; i <= n; i++)\
    \ {\n            long temp = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n        \
    \    fibs[0] = fibs[1];\n            fibs[1] = fibs[2];\n            fibs[2] =\
    \ fibs[3];\n            fibs[3] = temp;\n        }\n        return fibs[3];\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n\
    \        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        for\
    \ (int i = 4; i <= n; i++) {\n            long temp = fib4[0] + fib4[1] + fib4[2]\
    \ + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1] = fib4[2];\n\
    \            fib4[2] = fib4[3];\n            fib4[3] = temp;\n        }\n    \
    \    return fib4[3];\n        // END SOLUTION\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (200l)\n        // >>> fib4((13l))\n        // (328l)\n\
    \        // >>> fib4((14l))\n        // (536l)\n        // >>> fib4((15l))\n \
    \       // (864l)\n        // >>> fib4((16l))\n        // (1400l)\n        //\
    \ >>> fib4((17l))\n        // (2264l)\n        // >>> fib4((18l))\n        //\
    \ (3664l)\n        // >>> fib4((19l))\n        // (5928l)\n        // >>> fib4((20l))\n\
    \        // (9632l)\n        // >>> fib4((21l))\n        // (15600l)\n       \
    \ // >>> fib4((22l))\n        // (25232l)\n        // >>> fib4((23l))\n      \
    \  // (40792l)\n        // >>> fib4((24l))\n        // (65920l)\n        // >>>\
    \ fib4((25l))\n        // (106812l)\n        // >>> fib4((26l))\n        // (172732l)\n\
    \        // >>> fib4((27l))\n        // (279452l)\n        // >>> fib4((28l))\n\
    \        // (452284l)\n        // >>> fib4((29l))\n        // (730236l)\n    \
    \    // >>> fib4((30l))\n        // (1180488l)\n        // >>> fib4((31l))\n \
    \       // (1910724l)\n        // >>> fib4((32l))\n        // (3091212l)\n   \
    \     // >>> fib4((33l))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22fjrg1f.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib = new long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n     \
    \   fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            long temp = fib[0] + fib[1] + fib[2] + fib[3];\n            fib[0]\
    \ = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n    \
    \        fib[3] = temp;\n        }\n        return fib[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0, b = 0, c = 2, d = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            d = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = d;\n        }\n        return d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_avsv5l.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib = new long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n     \
    \   fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            long temp = fib[0] + fib[1] + fib[2] + fib[3];\n            fib[0]\
    \ = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n    \
    \        fib[3] = temp;\n        }\n        return fib[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 2;\n        }\n        if (n == 3) {\n            return\
    \ 0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n\
    \        long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long\
    \ temp = a + b + c + d;\n            a = b;\n            b = c;\n            c\
    \ = d;\n            d = temp;\n        }\n        return a + b + c + d;\n    \
    \    // END SOLUTION\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07z0qg44.java:51)\n"
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0, b = 0, c = 2, d = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            d = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = d;\n        }\n        return d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_avsv5l.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (204l)\n        // >>> fib4((13l))\n        // (340l)\n\
    \        // >>> fib4((14l))\n        // (564l)\n        // >>> fib4((15l))\n \
    \       // (924l)\n        // >>> fib4((16l))\n        // (1520l)\n        //\
    \ >>> fib4((17l))\n        // (2484l)\n        // >>> fib4((18l))\n        //\
    \ (4084l)\n        // >>> fib4((19l))\n        // (6668l)\n        // >>> fib4((20l))\n\
    \        // (10948l)\n        // >>> fib4((21l))\n        // (17812l)\n      \
    \  // >>> fib4((22l))\n        // (29072l)\n        // >>> fib4((23l))\n     \
    \   // (47184l)\n        // >>> fib4((24l))\n        // (77256l)\n        // >>>\
    \ fib4((25l))\n        // (126420l)\n        // >>> fib4((26l))\n        // (205724l)\n\
    \        // >>> fib4((27l))\n        // (336044l)\n        // >>> fib4((28l))\n\
    \        // (547268l)\n        // >>> fib4((29l))\n        // (889512l)\n    \
    \    // >>> fib4((30l))\n        // (1436784l)\n        // >>> fib4((31l))\n \
    \       // (2326296l)\n        // >>> fib4((32l))\n        // (3763092l)\n   \
    \     // >>> fib4((33\n    }\n    public static void main(String[] args) {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsdv6fmrp.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797407
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        if (n == 0) {\n            return a;\n  \
    \      } else if (n == 1) {\n            return b;\n        } else if (n == 2)\
    \ {\n            return c;\n        } else if (n == 3) {\n            return d;\n\
    \        }\n        for (int i = 4; i <= n; i++) {\n            long temp = a\
    \ + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n \
    \           d = temp;\n        }\n        return d;\n        // END SOLUTION\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Your code here.\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvabajym7.java:27)\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (200l)\n        // >>> fib4((13l))\n        // (328l)\n\
    \        // >>> fib4((14l))\n        // (544l)\n        // >>> fib4((15l))\n \
    \       // (880l)\n        // >>> fib4((16l))\n        // (1424l)\n        //\
    \ >>> fib4((17l))\n        // (2320l)\n        // >>> fib4((18l))\n        //\
    \ (3744l)\n        // >>> fib4((19l))\n        // (6064l)\n        // >>> fib4((20l))\n\
    \        // (9864l)\n        // >>> fib4((21l))\n        // (15928l)\n       \
    \ // >>> fib4((22l))\n        // (25792l)\n        // >>> fib4((23l))\n      \
    \  // (41616l)\n        // >>> fib4((24l))\n        // (67408l)\n        // >>>\
    \ fib4((25l))\n        // (109024l)\n        // >>> fib4((26l))\n        // (176432l)\n\
    \        // >>> fib4((27l))\n        // (285440l)\n        // >>> fib4((28l))\n\
    \        // (461872l)\n        // >>> fib4((29l))\n        // (747329l)\n    \
    \    // >>> fib4((30l))\n        // (1209216l)\n        // >>> fib4((31l))\n \
    \       // (1956544l)\n        // >>> fib4((32l))\n        // (3161664l)\n   \
    \     // >>> fib4((33l))\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu55otm1b.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 0; i < n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg7rttgip.java:38)\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long next = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = next;\n\
    \        }\n        return a + b + c + d;\n        // END SOLUTION\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfr43y7ou.java:43)\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (122l)\n        // >>>\
    \ fib4((12l))\n        // (204l)\n        // >>> fib4((13l))\n        // (342l)\n\
    \        // >>> fib4((14l))\n        // (572l)\n        // >>> fib4((15l))\n \
    \       // (944l)\n        // >>> fib4((16l))\n        // (1556l)\n        //\
    \ >>> fib4((17l))\n        // (2580l)\n        // >>> fib4((18l))\n        //\
    \ (4236l)\n        // >>> fib4((19l))\n        // (7004l)\n        // >>> fib4((20l))\n\
    \        // (11588l)\n        // >>> fib4((21l))\n        // (19192l)\n      \
    \  // >>> fib4((22l))\n        // (31780l)\n        // >>> fib4((23l))\n     \
    \   // (52772l)\n        // >>> fib4((24l))\n        // (86952l)\n        // >>>\
    \ fib4((25l))\n        // (143724l)\n        // >>> fib4((26l))\n        // (237076l)\n\
    \        // >>> fib4((27l))\n        // (390800l)\n        // >>> fib4((28l))\n\
    \        // (644576l)\n        // >>> fib4((29l))\n        // (1055376l)\n   \
    \     // >>> fib4((30l))\n        // (1734976l)\n        // >>> fib4((31l))\n\
    \        // (2870352l)\n        // >>> fib4((32l))\n        // (4695328l)\n  \
    \      // >>> fib4((33\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe3ola51b.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return 0;\n        }\n     \
    \   if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n \
    \           return 2;\n        }\n        if (n == 3) {\n            return 0;\n\
    \        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n  \
    \      long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long\
    \ e = a + b + c + d;\n            a = b;\n            b = c;\n            c =\
    \ d;\n            d = e;\n        }\n        return a + b + c + d;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2hpzcqol.java:52)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n\
    \        if (n == 0) {\n            return 0;\n        }\n        if (n == 1)\
    \ {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n   \
    \     long a = 0;\n        long b = 0;\n        long c = 2;\n        long d =\
    \ 0;\n        for (long i = 4; i <= n; i++) {\n            long temp = a + b +\
    \ c + d;\n            a = b;\n            b = c;\n            c = d;\n       \
    \     d = temp;\n        }\n        return a + b + c + d;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi3re5v6m.java:58)\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (200l)\n        // >>> fib4((13l))\n        // (328l)\n\
    \        // >>> fib4((14l))\n        // (536l)\n        // >>> fib4((15l))\n \
    \       // (872l)\n        // >>> fib4((16l))\n        // (1408l)\n        //\
    \ >>> fib4((17l))\n        // (2280l)\n        // >>> fib4((18l))\n        //\
    \ (3768l)\n        // >>> fib4((19l))\n        // (6144l)\n        // >>> fib4((20l))\n\
    \        // (10016l)\n        // >>> fib4((21l))\n        // (16160l)\n      \
    \  // >>> fib4((22l))\n        // (26176l)\n        // >>> fib4((23l))\n     \
    \   // (42496l)\n        // >>> fib4((24l))\n        // (68672l)\n        // >>>\
    \ fib4((25l))\n        // (110848l)\n        // >>> fib4((26l))\n        // (179520l)\n\
    \        // >>> fib4((27l))\n        // (290328l)\n        // >>> fib4((28l))\n\
    \        // (479848l)\n        // >>> fib4((29l))\n        // (770176l)\n    \
    \    // >>> fib4((30l))\n        // (1250024l)\n        // >>> fib4((31l))\n \
    \       // (2020152l)\n        // >>> fib4((32l))\n        // (3270376l)\n   \
    \     // >>> fib4((33l))\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw28r16rb.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797407
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (22l)\n        // >>> fib4((9l))\n        // (36l)\n        // >>> fib4((10l))\n\
    \        // (58l)\n        // >>> fib4((11l))\n        // (94l)\n        // >>>\
    \ fib4((12l))\n        // (152l)\n        // >>> fib4((13l))\n        // (246l)\n\
    \        // >>> fib4((14l))\n        // (400l)\n        // >>> fib4((15l))\n \
    \       // (646l)\n        // >>> fib4((16l))\n        // (1046l)\n        //\
    \ >>> fib4((17l))\n        // (1692l)\n        // >>> fib4((18l))\n        //\
    \ (2738l)\n        // >>> fib4((19l))\n        // (4430l)\n        // >>> fib4((20l))\n\
    \        // (7168l)\n        // >>> fib4((21l))\n        // (11628l)\n       \
    \ // >>> fib4((22l))\n        // (18816l)\n        // >>> fib4((23l))\n      \
    \  // (30444l)\n        // >>> fib4((24l))\n        // (49260l)\n        // >>>\
    \ fib4((25l))\n        // (80104l)\n        // >>> fib4((26l))\n        // (129368l)\n\
    \        // >>> fib4((27l))\n        // (209432l)\n        // >>> fib4((28l))\n\
    \        // (338700l)\n        // >>> fib4((29l))\n        // (547132l)\n    \
    \    // >>> fib4((30l))\n        // (885832l)\n        // >>> fib4((31l))\n  \
    \      // (1432164l)\n        // >>> fib4((32l))\n        // (2318096l)\n    \
    \    // >>> fib4((33l))\n       \n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcgf_9upl.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (124l)\n        // >>>\
    \ fib4((12l))\n        // (208l)\n        // >>> fib4((13l))\n        // (352l)\n\
    \        // >>> fib4((14l))\n        // (592l)\n        // >>> fib4((15l))\n \
    \       // (976l)\n        // >>> fib4((16l))\n        // (1624l)\n        //\
    \ >>> fib4((17l))\n        // (2704l)\n        // >>> fib4((18l))\n        //\
    \ (4480l)\n        // >>> fib4((19l))\n        // (7384l)\n        // >>> fib4((20l))\n\
    \        // (12264l)\n        // >>> fib4((21l))\n        // (20304l)\n      \
    \  // >>> fib4((22l))\n        // (33576l)\n        // >>> fib4((23l))\n     \
    \   // (55280l)\n        // >>> fib4((24l))\n        // (90856l)\n        // >>>\
    \ fib4((25l))\n        // (149936l)\n        // >>> fib4((26l))\n        // (246800l)\n\
    \        // >>> fib4((27l))\n        // (406776l)\n        // >>> fib4((28l))\n\
    \        // (665576l)\n        // >>> fib4((29l))\n        // (1092352l)\n   \
    \     // >>> fib4((30l))\n        // (1798128l)\n        // >>> fib4((31l))\n\
    \        // (2969400l)\n        // >>> fib4((32l))\n        // (4867728l)\n  \
    \      // >>> fib4((33l\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnlh7_9av.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 3; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_weby00c.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> your code goes here <<<\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoodeahl0.java:27)\n"
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (200l)\n        // >>> fib4((13l))\n        // (328l)\n\
    \        // >>> fib4((14l))\n        // (536l)\n        // >>> fib4((15l))\n \
    \       // (872l)\n        // >>> fib4((16l))\n        // (1408l)\n        //\
    \ >>> fib4((17l))\n        // (2280l)\n        // >>> fib4((18l))\n        //\
    \ (3728l)\n        // >>> fib4((19l))\n        // (6080l)\n        // >>> fib4((20l))\n\
    \        // (9848l)\n        // >>> fib4((21l))\n        // (15928l)\n       \
    \ // >>> fib4((22l))\n        // (25776l)\n        // >>> fib4((23l))\n      \
    \  // (41824l)\n        // >>> fib4((24l))\n        // (67600l)\n        // >>>\
    \ fib4((25l))\n        // (109408l)\n        // >>> fib4((26l))\n        // (177008l)\n\
    \        // >>> fib4((27l))\n        // (286416l)\n        // >>> fib4((28l))\n\
    \        // (463424l)\n        // >>> fib4((29l))\n        // (749840l)\n    \
    \    // >>> fib4((30l))\n        // (1213264l)\n        // >>> fib4((31l))\n \
    \       // (1962176l)\n        // >>> fib4((32l))\n        // (3175440l)\n   \
    \     // >>> fib4((33l))\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g7s38v_.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6to_bhe9.java:27)\n"
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        for (long i = 3; i <= n; i++) {\n            long e = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return d;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp39txzv1j.java:37)\n"
  stdout: ''
  timestamp: 1659797373
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  throw new UnsupportedOperationException(\"Problem.fib4 has not been implemented\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem.fib4\
    \ has not been implemented\n\tat Problem.fib4(tmpx3kdhkhg.java:23)\n\tat Problem.main(tmpx3kdhkhg.java:26)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return 0;\n        }\n     \
    \   if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n \
    \           return 2;\n        }\n        if (n == 3) {\n            return 0;\n\
    \        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n  \
    \      long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)\
    \ {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n\
    \            c = d;\n            d = e;\n        }\n        return e;\n    }\n\
    \    public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib = new long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n     \
    \   fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            long temp = fib[3];\n            fib[3] = fib[2] + fib[1] + fib[0]\
    \ + fib[3];\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n    \
    \        fib[2] = temp;\n        }\n        return fib[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797407
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (204l)\n        // >>> fib4((13l))\n        // (340l)\n\
    \        // >>> fib4((14l))\n        // (564l)\n        // >>> fib4((15l))\n \
    \       // (924l)\n        // >>> fib4((16l))\n        // (1516l)\n        //\
    \ >>> fib4((17l))\n        // (2496l)\n        // >>> fib4((18l))\n        //\
    \ (4092l)\n        // >>> fib4((19l))\n        // (6688l)\n        // >>> fib4((20l))\n\
    \        // (10980l)\n        // >>> fib4((21l))\n        // (17968l)\n      \
    \  // >>> fib4((22l))\n        // (29448l)\n        // >>> fib4((23l))\n     \
    \   // (47416l)\n        // >>> fib4((24l))\n        // (77864l)\n        // >>>\
    \ fib4((25l))\n        // (126300l)\n        // >>> fib4((26l))\n        // (204064l)\n\
    \        // >>> fib4((27l))\n        // (332464l)\n        // >>> fib4((28l))\n\
    \        // (542528l)\n        // >>> fib4((29l))\n        // (885092l)\n    \
    \    // >>> fib4((30l))\n        // (1427680l)\n        // >>> fib4((31l))\n \
    \       // (2312772l)\n        // >>> fib4((32l))\n        // (3745452l)\n   \
    \     // >>> fib4((33l\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fsi5ynn.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // Your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6to_bhe9.java:27)\n"
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n  \
    \      fib4[2] = 2;\n        fib4[3] = 0;\n        long[] fib4_new = new long[4];\n\
    \        for (long i = 4; i <= n; i++) {\n            fib4_new[0] = fib4[1];\n\
    \            fib4_new[1] = fib4[2];\n            fib4_new[2] = fib4[3];\n    \
    \        fib4_new[3] = fib4[0] + fib4[1] + fib4[2] + fib4[3];\n            fib4\
    \ = fib4_new;\n        }\n        return fib4[3];\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_bs_k9rk.java:39)\n"
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqx2qq1p.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 2;\n        if (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n\
    \        long c = 2;\n        long d = 0;\n        for (long i = 4; i <= n; i++)\
    \ {\n            long temp = a + b + c + d;\n            a = b;\n            b\
    \ = c;\n            c = d;\n            d = temp;\n        }\n        return a\
    \ + b + c + d;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppjx33bu0.java:41)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e = a +\
    \ b + c + d;\n            a = b;\n            b = c;\n            c = d;\n   \
    \         d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqx2qq1p.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 3; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_weby00c.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (204l)\n        // >>> fib4((13l))\n        // (340l)\n\
    \        // >>> fib4((14l))\n        // (564l)\n        // >>> fib4((15l))\n \
    \       // (924l)\n        // >>> fib4((16l))\n        // (1516l)\n        //\
    \ >>> fib4((17l))\n        // (2488l)\n        // >>> fib4((18l))\n        //\
    \ (4092l)\n        // >>> fib4((19l))\n        // (6700l)\n        // >>> fib4((20l))\n\
    \        // (10988l)\n        // >>> fib4((21l))\n        // (17980l)\n      \
    \  // >>> fib4((22l))\n        // (29444l)\n        // >>> fib4((23l))\n     \
    \   // (48084l)\n        // >>> fib4((24l))\n        // (78520l)\n        // >>>\
    \ fib4((25l))\n        // (128524l)\n        // >>> fib4((26l))\n        // (210404l)\n\
    \        // >>> fib4((27l))\n        // (343908l)\n        // >>> fib4((28l))\n\
    \        // (559812l)\n        // >>> fib4((29l))\n        // (913720l)\n    \
    \    // >>> fib4((30l))\n        // (1473448l)\n        // >>> fib4((31l))\n \
    \       // (2387168l)\n        // >>> fib4((32l))\n        // (3870316l)\n   \
    \     // >>> fib4((33l))\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpexr5ml74.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 3; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_weby00c.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqx2qq1p.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 0; i < n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg7rttgip.java:38)\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (22l)\n        // >>> fib4((9l))\n        // (36l)\n        // >>> fib4((10l))\n\
    \        // (58l)\n        // >>> fib4((11l))\n        // (94l)\n        // >>>\
    \ fib4((12l))\n        // (152l)\n        // >>> fib4((13l))\n        // (246l)\n\
    \        // >>> fib4((14l))\n        // (400l)\n        // >>> fib4((15l))\n \
    \       // (646l)\n        // >>> fib4((16l))\n        // (1046l)\n        //\
    \ >>> fib4((17l))\n        // (1692l)\n        // >>> fib4((18l))\n        //\
    \ (2738l)\n        // >>> fib4((19l))\n        // (4430l)\n        // >>> fib4((20l))\n\
    \        // (7168l)\n        // >>> fib4((21l))\n        // (11618l)\n       \
    \ // >>> fib4((22l))\n        // (18846l)\n        // >>> fib4((23l))\n      \
    \  // (30474l)\n        // >>> fib4((24l))\n        // (49320l)\n        // >>>\
    \ fib4((25l))\n        // (80194l)\n        // >>> fib4((26l))\n        // (129514l)\n\
    \        // >>> fib4((27l))\n        // (209710l)\n        // >>> fib4((28l))\n\
    \        // (340824l)\n        // >>> fib4((29l))\n        // (551534l)\n    \
    \    // >>> fib4((30l))\n        // (892358l)\n        // >>> fib4((31l))\n  \
    \      // (1443992l)\n        // >>> fib4((32l))\n        // (2336390l)\n    \
    \    // >>> fib4((33l))\n       \n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi3dxe2d5.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // fib4(0) -> 0\n      \
    \  // fib4(1) -> 0\n        // fib4(2) -> 2\n        // fib4(3) -> 0\n       \
    \ // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n        // fib4(4)\
    \ -> fib4(3) + fib4(2) + fib4(1) + fib4(0)\n        // fib4(5) -> fib4(4) + fib4(3)\
    \ + fib4(2) + fib4(1)\n        // fib4(6) -> fib4(5) + fib4(4) + fib4(3) + fib4(2)\n\
    \        // fib4(7) -> fib4(6) + fib4(5) + fib4(4) + fib4(3)\n        // fib4(8)\
    \ -> fib4(7) + fib4(6) + fib4(5) + fib4(4)\n        // fib4(9) -> fib4(8) + fib4(7)\
    \ + fib4(6) + fib4(5)\n        // fib4(10) -> fib4(9) + fib4(8) + fib4(7) + fib4(6)\n\
    \        // fib4(11) -> fib4(10) + fib4(9) + fib4(8) + fib4(7)\n        // fib4(12)\
    \ -> fib4(11) + fib4(10) + fib4(9) + fib4(8)\n        // fib4(13) -> fib4(12)\
    \ + fib4(11) + fib4(10) + fib4(9)\n        // fib4(14) -> fib4(13) + fib4(12)\
    \ + fib4(11) + fib4(10)\n        // fib4(15) -> fib4(14) + fib4(13) + fib4(12)\
    \ + fib4\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66fovcfw.java:46: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        if (n == 0) {\n            return a;\n        }\n        if (n == 1)\
    \ {\n            return b;\n        }\n        if (n == 2) {\n            return\
    \ c;\n        }\n        if (n == 3) {\n            return d;\n        }\n   \
    \     for (int i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return d;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        for (long i = 3; i <= n; i++) {\n       \
    \     long e = a + b + c + d;\n            a = b;\n            b = c;\n      \
    \      c = d;\n            d = e;\n        }\n        return d;\n        // END\
    \ SOLUTION\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4nkk6lyg.java:39)\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 2;\n        if (n == 3) return 0;\n        long a = 0;\n        long b = 0;\n\
    \        long c = 2;\n        long d = 0;\n        for (long i = 4; i <= n; i++)\
    \ {\n            long temp = a + b + c + d;\n            a = b;\n            b\
    \ = c;\n            c = d;\n            d = temp;\n        }\n        return a\
    \ + b + c + d;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppjx33bu0.java:41)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    long i = 4;\n        while (i <= n) {\n            long temp = a + b + c\
    \ + d;\n            a = b;\n            b = c;\n            c = d;\n         \
    \   d = temp;\n            i += 1;\n        }\n        return a + b + c + d;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpck1hxy6v.java:51)\n"
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqx2qq1p.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long e = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqx2qq1p.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 3; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_weby00c.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        long e = 0;\n        long f = 0;\n      \
    \  long g = 0;\n        long h = 0;\n        long i = 0;\n        long j = 0;\n\
    \        long k = 0;\n        long l = 0;\n        long m = 0;\n        long o\
    \ = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n      \
    \  long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n\
    \        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z\
    \ = 0;\n        long aa = 0;\n        long ab = 0;\n        long ac = 0;\n   \
    \     long ad = 0;\n        long ae = 0;\n        long af = 0;\n        long ag\
    \ = 0;\n        long ah = 0;\n        long ai = 0;\n        long aj = 0;\n   \
    \     long ak = 0;\n        long al = 0;\n        long am = 0;\n        long an\
    \ = 0;\n        long ao = 0;\n        long ap = 0;\n        long aq = 0;\n   \
    \     long ar = 0;\n        long as = 0;\n        long at = 0;\n        long au\
    \ = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n   \
    \     long ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb\
    \ = 0;\n        long bc = 0;\n        long bd = 0;\n        long be = 0;\n   \
    \     long bf = 0;\n        long bg = 0;\n        long bh = 0;\n        long bi\
    \ = 0;\n        long bj = 0;\n        long bk = 0;\n        long bl = 0;\n   \
    \     long bm = 0;\n        long bn = 0;\n        long bo = 0;\n        long bp\
    \ = 0;\n        long bq = 0;\n        long br = 0;\n        long bs\n    }\n \
    \   public static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv7_vnuqt.java:93: error: ';' expected\n        long bs\n      \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659797373
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (24l)\n        // >>> fib4((9l))\n        // (42l)\n        // >>> fib4((10l))\n\
    \        // (72l)\n        // >>> fib4((11l))\n        // (120l)\n        // >>>\
    \ fib4((12l))\n        // (204l)\n        // >>> fib4((13l))\n        // (340l)\n\
    \        // >>> fib4((14l))\n        // (564l)\n        // >>> fib4((15l))\n \
    \       // (924l)\n        // >>> fib4((16l))\n        // (1520l)\n        //\
    \ >>> fib4((17l))\n        // (2484l)\n        // >>> fib4((18l))\n        //\
    \ (4088l)\n        // >>> fib4((19l))\n        // (6692l)\n        // >>> fib4((20l))\n\
    \        // (10980l)\n        // >>> fib4((21l))\n        // (17972l)\n      \
    \  // >>> fib4((22l))\n        // (29452l)\n        // >>> fib4((23l))\n     \
    \   // (47932l)\n        // >>> fib4((24l))\n        // (78084l)\n        // >>>\
    \ fib4((25l))\n        // (127036l)\n        // >>> fib4((26l))\n        // (207020l)\n\
    \        // >>> fib4((27l))\n        // (337056l)\n        // >>> fib4((28l))\n\
    \        // (544076l)\n        // >>> fib4((29l))\n        // (881132l)\n    \
    \    // >>> fib4((30l))\n        // (1425208l)\n        // >>> fib4((31l))\n \
    \       // (2316340l)\n        // >>> fib4((32l))\n        // (3751448l)\n   \
    \     // >>> fib4((33l\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqp4dyyw3.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797408
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // >>> fib4((5l))\n        // (4l)\n        // >>> fib4((6l))\n        // (8l)\n\
    \        // >>> fib4((7l))\n        // (14l)\n        // >>> fib4((8l))\n    \
    \    // (22l)\n        // >>> fib4((9l))\n        // (36l)\n        // >>> fib4((10l))\n\
    \        // (58l)\n        // >>> fib4((11l))\n        // (94l)\n        // >>>\
    \ fib4((12l))\n        // (152l)\n        // >>> fib4((13l))\n        // (246l)\n\
    \        // >>> fib4((14l))\n        // (400l)\n        // >>> fib4((15l))\n \
    \       // (646l)\n        // >>> fib4((16l))\n        // (1046l)\n        //\
    \ >>> fib4((17l))\n        // (1692l)\n        // >>> fib4((18l))\n        //\
    \ (2738l)\n        // >>> fib4((19l))\n        // (4430l)\n        // >>> fib4((20l))\n\
    \        // (7168l)\n        // >>> fib4((21l))\n        // (11598l)\n       \
    \ // >>> fib4((22l))\n        // (18776l)\n        // >>> fib4((23l))\n      \
    \  // (30374l)\n        // >>> fib4((24l))\n        // (49150l)\n        // >>>\
    \ fib4((25l))\n        // (79924l)\n        // >>> fib4((26l))\n        // (129070l)\n\
    \        // >>> fib4((27l))\n        // (209044l)\n        // >>> fib4((28l))\n\
    \        // (338098l)\n        // >>> fib4((29l))\n        // (547142l)\n    \
    \    // >>> fib4((30l))\n        // (885260l)\n        // >>> fib4((31l))\n  \
    \      // (1432802l)\n        // >>> fib4((32l))\n        // (2318062l)\n    \
    \    // >>> fib4((33l))\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxiehr7e4.java:81: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797406
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n  \
    \          return 0;\n        }\n        if (n == 2) {\n            return 2;\n\
    \        }\n        if (n == 3) {\n            return 0;\n        }\n        long\
    \ a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n    \
    \    for (long i = 4; i <= n; i++) {\n            long temp = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \        }\n        return a + b + c + d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n\
    \    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzje32ll.java:49)\n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  return 0;\n    }\n    public static void main(String[] args) {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb756mxp.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n\
    \        long e = 0;\n        for (long i = 4; i <= n; i++) {\n            e =\
    \ a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = e;\n        }\n        return e;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  // BEGIN SOLUTION\n        long a = 0;\n        long b = 0;\n        long c\
    \ = 2;\n        long d = 0;\n        long e = 0;\n        for (long i = 4; i <=\
    \ n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b\
    \ = c;\n            c = d;\n            d = e;\n        }\n        return e;\n\
    \        // END SOLUTION\n    }\n    public static void main(String[] args) {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797373
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    //\
    \ fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    //\
    \ >>> fib4((7l))\n    // (14l)\n    public static long fib4(long n) {\n      \
    \  long[] fib = new long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n     \
    \   fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n\
    \            long temp = fib[0] + fib[1] + fib[2] + fib[3];\n            fib[0]\
    \ = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n    \
    \        fib[3] = temp;\n        }\n        return fib[3];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797371
