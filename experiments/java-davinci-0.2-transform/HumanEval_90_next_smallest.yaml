name: HumanEval_90_next_smallest
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a list of integers.\n    // Write a function\
  \ next_smallest() that returns the 2nd smallest element of the list.\n    // Return\
  \ None if there is no such element.\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // 2l\n    // >>> nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l))))\n\
  \    // 2l\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList())))\n  \
  \  // Optional.empty()\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l))))\n    // Optional.empty()\n    public static Optional<Long> nextSmallest(ArrayList<Long>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(2l));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l,\
  \ (long)4l, (long)3l, (long)2l)))).equals(2l));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l,\
  \ (long)1l, (long)1l, (long)0l)))).equals(1l));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l,\
  \ (long)34l, (long)12l, (long)-45l)))).equals(-35l));\n    }\n\n}\n"
completions: ["        // Your code here\n        return Optional.empty();", "   \
    \     if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long min2 = lst.get(1);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long el = lst.get(i);\n    \
    \        if (el < min) {\n                min2 = min;\n                min = el;\n\
    \            } else if (el < min2) {\n                min2 = el;\n           \
    \ }\n        }\n        if (min2 == min) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(min2);", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        for (Long i : lst) {\n        \
    \    if (i < min) {\n                secondMin = min;\n                min = i;\n\
    \            } else if (i < secondMin) {\n                secondMin = i;\n   \
    \         }\n        }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        // Your code here\n\
    \        return Optional.empty();", "        // Your code here.\n        return\
    \ Optional.empty();", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long secondMin = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (x < min) {\n                secondMin = min;\n              \
    \  min = x;\n            } else if (x < secondMin) {\n                secondMin\
    \ = x;\n            }\n        }\n        if (min == secondMin) {\n          \
    \  return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  '        return null;', "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        Long min = lst.get(0);\n        Long secondMin = lst.get(1);\n\
    \        if (min > secondMin) {\n            Long tmp = min;\n            min\
    \ = secondMin;\n            secondMin = tmp;\n        }\n        for (int i =\
    \ 2; i < lst.size(); i++) {\n            Long cur = lst.get(i);\n            if\
    \ (cur < min) {\n                secondMin = min;\n                min = cur;\n\
    \            } else if (cur < secondMin) {\n                secondMin = cur;\n\
    \            }\n        }\n        return Optional.of(secondMin);", "        //\
    \ Write your code here\n        return Optional.empty();", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        Long min =\
    \ lst.get(0);\n        Long secondMin = lst.get(1);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            Long curr = lst.get(i);\n            if (curr\
    \ < min) {\n                secondMin = min;\n                min = curr;\n  \
    \          } else if (curr < secondMin) {\n                secondMin = curr;\n\
    \            }\n        }\n        if (min == secondMin) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(secondMin);", "   \
    \     if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long min2 = lst.get(1);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n   \
    \         if (cur < min) {\n                min2 = min;\n                min =\
    \ cur;\n            } else if (cur < min2) {\n                min2 = cur;\n  \
    \          }\n        }\n        if (min2 == min) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(min2);", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long x = lst.get(i);\n            if (x < min) {\n     \
    \           secondMin = min;\n                min = x;\n            } else if\
    \ (x < secondMin) {\n                secondMin = x;\n            }\n        }\n\
    \        if (min == secondMin) {\n            return Optional.empty();\n     \
    \   }\n        return Optional.of(secondMin);", "        // Your code here\n \
    \       return Optional.empty();", "        if (lst.size() < 2) {\n          \
    \  return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n \
    \       long secondMin = Long.MAX_VALUE;\n        for (long x : lst) {\n     \
    \       if (x < min) {\n                secondMin = min;\n                min\
    \ = x;\n            } else if (x < secondMin) {\n                secondMin = x;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        // Your code here\n        return\
    \ Optional.empty();", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = Collections.min(lst);\n        lst.remove(min);\n\
    \        return Optional.of(Collections.min(lst));", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long l : lst) {\n    \
    \        if (l < min) {\n                secondMin = min;\n                min\
    \ = l;\n            } else if (l < secondMin) {\n                secondMin = l;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  '        return null;', "        // Your code here\n        return Optional.empty();",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long l : lst) {\n            if (l < min) {\n                secondMin\
    \ = min;\n                min = l;\n            } else if (l < secondMin) {\n\
    \                secondMin = l;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        Long smallest = lst.get(0);\n\
    \        Long secondSmallest = null;\n        for (Long i : lst) {\n         \
    \   if (i < smallest) {\n                secondSmallest = smallest;\n        \
    \        smallest = i;\n            } else if (secondSmallest == null || i < secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        if (lst.size() < 2) {\n    \
    \        return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            Long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long nextMin = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long x = lst.get(i);\n            if (x < min) {\n     \
    \           nextMin = min;\n                min = x;\n            } else if (x\
    \ < nextMin) {\n                nextMin = x;\n            }\n        }\n     \
    \   if (nextMin == Long.MAX_VALUE) {\n            return Optional.empty();\n \
    \       }\n        return Optional.of(nextMin);", "        // Your code here\n\
    \        return Optional.empty();", "        // Your code here.\n        return\
    \ Optional.empty();", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long min2 = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < min) {\n                min2 = min;\n                min\
    \ = cur;\n            } else if (cur < min2) {\n                min2 = cur;\n\
    \            }\n        }\n        if (min2 == min) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(min2);", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            Long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        // Your code here\n\
    \        return Optional.empty();", "        // Your code here\n        return\
    \ Optional.empty();", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        Long min = lst.get(0);\n        Long min2 = lst.get(1);\n\
    \        if (min2 < min) {\n            Long tmp = min;\n            min = min2;\n\
    \            min2 = tmp;\n        }\n        for (int i = 2; i < lst.size(); i++)\
    \ {\n            Long val = lst.get(i);\n            if (val < min) {\n      \
    \          min2 = min;\n                min = val;\n            } else if (val\
    \ < min2) {\n                min2 = val;\n            }\n        }\n        return\
    \ Optional.of(min2);", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long min2 = lst.get(1);\n\
    \        if (min > min2) {\n            min = min2;\n            min2 = lst.get(0);\n\
    \        }\n        for (int i = 2; i < lst.size(); i++) {\n            long x\
    \ = lst.get(i);\n            if (x < min) {\n                min2 = min;\n   \
    \             min = x;\n            } else if (x < min2) {\n                min2\
    \ = x;\n            }\n        }\n        return Optional.of(min2);", "      \
    \  if (lst.size() < 2) {\n            return Optional.empty();\n        }\n  \
    \      long min = lst.get(0);\n        long min2 = lst.get(1);\n        if (min2\
    \ < min) {\n            long tmp = min;\n            min = min2;\n           \
    \ min2 = tmp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n   \
    \         long cur = lst.get(i);\n            if (cur < min) {\n             \
    \   min2 = min;\n                min = cur;\n            } else if (cur < min2)\
    \ {\n                min2 = cur;\n            }\n        }\n        return Optional.of(min2);",
  "        // Your code here\n        return Optional.empty();", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                secondMin = min;\n \
    \               min = i;\n            } else if (i < secondMin) {\n          \
    \      secondMin = i;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        // Your code here\n        return Optional.empty();", "        // Your\
    \ code here.\n        return Optional.empty();", "        // Your code here\n\
    \        return Optional.empty();", "        if (lst.size() < 2) {\n         \
    \   return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long i : lst) {\n    \
    \        if (i < min) {\n                secondMin = min;\n                min\
    \ = i;\n            } else if (i < secondMin) {\n                secondMin = i;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = lst.get(1);\n      \
    \  for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < min) {\n                secondMin = min;\n           \
    \     min = curr;\n            } else if (curr < secondMin) {\n              \
    \  secondMin = curr;\n            }\n        }\n        if (min == secondMin)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        Long min = lst.get(0);\n        Long min2 = lst.get(1);\n        if (min2\
    \ < min) {\n            min = min2;\n            min2 = lst.get(0);\n        }\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            Long cur = lst.get(i);\n\
    \            if (cur < min) {\n                min2 = min;\n                min\
    \ = cur;\n            } else if (cur < min2) {\n                min2 = cur;\n\
    \            }\n        }\n        return Optional.of(min2);", "        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        if (lst.size()\
    \ == 1) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long min2 = lst.get(1);\n        if (min2 < min) {\n  \
    \          long tmp = min;\n            min = min2;\n            min2 = tmp;\n\
    \        }\n        for (int i = 2; i < lst.size(); i++) {\n            long x\
    \ = lst.get(i);\n            if (x < min) {\n                min2 = min;\n   \
    \             min = x;\n            } else if (x < min2) {\n                min2\
    \ = x;\n            }\n        }\n        return Optional.of(min2);", "      \
    \  // Your code here\n        return Optional.empty();", "        // Your code\
    \ here\n        return Optional.empty();", "        // Your code here\n      \
    \  return Optional.empty();", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long min = lst.get(0);\n        long nextMin\
    \ = lst.get(1);\n        for (int i = 1; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) < min) {\n                nextMin = min;\n                min =\
    \ lst.get(i);\n            } else if (lst.get(i) < nextMin) {\n              \
    \  nextMin = lst.get(i);\n            }\n        }\n        if (min == nextMin)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(nextMin);",
  "        // Your code here\n        return null;", "        if (lst.size() < 2)\
    \ {\n            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = null;\n        for (Long i : lst) {\n            if\
    \ (i < min) {\n                secondMin = min;\n                min = i;\n  \
    \          } else if (secondMin == null || i < secondMin) {\n                secondMin\
    \ = i;\n            }\n        }\n        return Optional.of(secondMin);", " \
    \       if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long nextMin = lst.get(1);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n  \
    \              nextMin = min;\n                min = lst.get(i);\n           \
    \ } else if (lst.get(i) < nextMin) {\n                nextMin = lst.get(i);\n\
    \            }\n        }\n        if (min == nextMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(nextMin);", "        if (lst.size() < 2)\
    \ {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long min2 = lst.get(1);\n        if (min2 < min) {\n            long\
    \ tmp = min;\n            min = min2;\n            min2 = tmp;\n        }\n  \
    \      for (int i = 2; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (x < min) {\n                min2 = min;\n                min\
    \ = x;\n            } else if (x < min2) {\n                min2 = x;\n      \
    \      }\n        }\n        return Optional.of(min2);", "        // Your code\
    \ here\n        return Optional.empty();", "        // Your code here\n      \
    \  return Optional.empty();", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long min = lst.get(0);\n        long min2\
    \ = lst.get(1);\n        if (min2 < min) {\n            long tmp = min;\n    \
    \        min = min2;\n            min2 = tmp;\n        }\n        for (int i =\
    \ 2; i < lst.size(); i++) {\n            long x = lst.get(i);\n            if\
    \ (x < min) {\n                min2 = min;\n                min = x;\n       \
    \     } else if (x < min2) {\n                min2 = x;\n            }\n     \
    \   }\n        return Optional.of(min2);", '        return null;', "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n    \
    \    for (long x : lst) {\n            if (x < min) {\n                secondMin\
    \ = min;\n                min = x;\n            } else if (x < secondMin) {\n\
    \                secondMin = x;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        long min = lst.get(0);\n  \
    \      long min2 = lst.get(1);\n        if (min2 < min) {\n            long tmp\
    \ = min;\n            min = min2;\n            min2 = tmp;\n        }\n      \
    \  for (int i = 2; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < min) {\n                min2 = min;\n                min\
    \ = cur;\n            } else if (cur < min2) {\n                min2 = cur;\n\
    \            }\n        }\n        return Optional.of(min2);", "        // Write\
    \ your code here\n        return Optional.empty();", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long min2 = lst.get(1);\n        if (min2 < min) {\n            long\
    \ tmp = min;\n            min = min2;\n            min2 = tmp;\n        }\n  \
    \      for (int i = 2; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < min) {\n                min2 = min;\n                min\
    \ = cur;\n            } else if (cur < min2) {\n                min2 = cur;\n\
    \            }\n        }\n        return Optional.of(min2);", "        // YOUR\
    \ CODE HERE\n        return Optional.empty();", "        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long l : lst) {\n    \
    \        if (l < min) {\n                secondMin = min;\n                min\
    \ = l;\n            } else if (l < secondMin && l != min) {\n                secondMin\
    \ = l;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = lst.get(1);\n      \
    \  if (min > secondMin) {\n            long tmp = min;\n            min = secondMin;\n\
    \            secondMin = tmp;\n        }\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            long cur = lst.get(i);\n            if (cur < min) {\n \
    \               secondMin = min;\n                min = cur;\n            } else\
    \ if (cur < secondMin) {\n                secondMin = cur;\n            }\n  \
    \      }\n        return Optional.of(secondMin);", "        // Your code here\n\
    \        return Optional.empty();", "        if (lst.size() < 2) {\n         \
    \   return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long i : lst) {\n    \
    \        if (i < min) {\n                secondMin = min;\n                min\
    \ = i;\n            } else if (i < secondMin) {\n                secondMin = i;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = lst.get(1);\n      \
    \  for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < min) {\n                secondMin = min;\n           \
    \     min = curr;\n            } else if (curr < secondMin) {\n              \
    \  secondMin = curr;\n            }\n        }\n        if (min == secondMin)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        Long min = lst.get(0);\n  \
    \      Long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            Long curr = lst.get(i);\n            if (curr < min) {\n    \
    \            secondMin = min;\n                min = curr;\n            } else\
    \ if (curr < secondMin) {\n                secondMin = curr;\n            }\n\
    \        }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        // Your code here.\n\
    \        return Optional.empty();", "        if (lst.size() < 2) {\n         \
    \   return Optional.empty();\n        }\n        long min = lst.get(0);\n    \
    \    long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            long curr = lst.get(i);\n            if (curr < min) {\n    \
    \            secondMin = min;\n                min = curr;\n            } else\
    \ if (curr < secondMin) {\n                secondMin = curr;\n            }\n\
    \        }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        Long min = Collections.min(lst);\n\
    \        Long secondMin = Collections.max(lst);\n        for (Long l : lst) {\n\
    \            if (l < secondMin && l > min) {\n                secondMin = l;\n\
    \            }\n        }\n        if (secondMin == Collections.max(lst)) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        // Write your code here\n        return Optional.empty();", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n    \
    \    for (long l : lst) {\n            if (l < min) {\n                secondMin\
    \ = min;\n                min = l;\n            } else if (l < secondMin) {\n\
    \                secondMin = l;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        long min = lst.get(0);\n  \
    \      long min2 = lst.get(1);\n        if (min2 < min) {\n            long tmp\
    \ = min;\n            min = min2;\n            min2 = tmp;\n        }\n      \
    \  for (int i = 2; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (x < min) {\n                min2 = min;\n                min\
    \ = x;\n            } else if (x < min2) {\n                min2 = x;\n      \
    \      }\n        }\n        return Optional.of(min2);", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ Long.MAX_VALUE;\n        long min2 = Long.MAX_VALUE;\n        for (long i :\
    \ lst) {\n            if (i < min) {\n                min2 = min;\n          \
    \      min = i;\n            } else if (i < min2) {\n                min2 = i;\n\
    \            }\n        }\n        if (min2 == Long.MAX_VALUE) {\n           \
    \ return Optional.empty();\n        }\n        return Optional.of(min2);", " \
    \       if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long x : lst) {\n            if (x < min) {\n                secondMin\
    \ = min;\n                min = x;\n            } else if (x < secondMin) {\n\
    \                secondMin = x;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        // Your code goes here\n      \
    \  return Optional.empty();", "        // Your code here\n        return Optional.empty();",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long min2 = lst.get(1);\n        if (min\
    \ > min2) {\n            min = min2;\n            min2 = lst.get(0);\n       \
    \ }\n        for (int i = 2; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (x < min) {\n                min2 = min;\n                min\
    \ = x;\n            } else if (x < min2) {\n                min2 = x;\n      \
    \      }\n        }\n        return Optional.of(min2);", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                secondMin = min;\n \
    \               min = i;\n            } else if (i < secondMin) {\n          \
    \      secondMin = i;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        // Your code here\n        return\
    \ Optional.empty();", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long nextMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                nextMin\
    \ = min;\n                min = i;\n            } else if (i < nextMin && i !=\
    \ min) {\n                nextMin = i;\n            }\n        }\n        if (nextMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(nextMin);", "        if (lst.size() < 2) {\n         \
    \   return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long i : lst) {\n    \
    \        if (i < min) {\n                secondMin = min;\n                min\
    \ = i;\n            } else if (i < secondMin) {\n                secondMin = i;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        // Your code here\n        return Optional.empty();", "        // Your\
    \ code here\n        return Optional.empty();", "        // Your code here\n \
    \       return Optional.empty();", "        if (lst.size() < 2) {\n          \
    \  return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n \
    \       long secondMin = Long.MAX_VALUE;\n        for (long l : lst) {\n     \
    \       if (l < min) {\n                secondMin = min;\n                min\
    \ = l;\n            } else if (l < secondMin) {\n                secondMin = l;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        // Your code here\n        return Optional.empty();", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        Long min =\
    \ lst.get(0);\n        Long secondMin = null;\n        for (Long l : lst) {\n\
    \            if (l < min) {\n                secondMin = min;\n              \
    \  min = l;\n            } else if (l < secondMin || secondMin == null) {\n  \
    \              secondMin = l;\n            }\n        }\n        return Optional.ofNullable(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < min) {\n                secondMin = min;\n           \
    \     min = curr;\n            } else if (curr < secondMin) {\n              \
    \  secondMin = curr;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        Long min = lst.get(0);\n  \
    \      Long secondMin = min;\n        for (Long l : lst) {\n            if (l\
    \ < min) {\n                secondMin = min;\n                min = l;\n     \
    \       } else if (l < secondMin) {\n                secondMin = l;\n        \
    \    }\n        }\n        if (secondMin == min) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        // Write your code\
    \ here\n        return Optional.empty();", "        // Your code here\n      \
    \  return Optional.empty();", "        // YOUR CODE HERE\n        return Optional.empty();",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n  \
    \      for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < min) {\n                secondMin = min;\n           \
    \     min = curr;\n            } else if (curr < secondMin) {\n              \
    \  secondMin = curr;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long nextSmallest = Long.MAX_VALUE;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                nextSmallest = smallest;\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) < nextSmallest) {\n       \
    \         nextSmallest = lst.get(i);\n            }\n        }\n        if (nextSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(nextSmallest);", "        if (lst.size() < 2) {\n    \
    \        return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long l : lst) {\n    \
    \        if (l < min) {\n                secondMin = min;\n                min\
    \ = l;\n            } else if (l < secondMin) {\n                secondMin = l;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        Long min = lst.get(0);\n        Long secondMin = lst.get(1);\n      \
    \  if (min > secondMin) {\n            min = secondMin;\n            secondMin\
    \ = lst.get(0);\n        }\n        for (int i = 2; i < lst.size(); i++) {\n \
    \           Long curr = lst.get(i);\n            if (curr < min) {\n         \
    \       secondMin = min;\n                min = curr;\n            } else if (curr\
    \ < secondMin) {\n                secondMin = curr;\n            }\n        }\n\
    \        return Optional.of(secondMin);", "        if (lst.size() < 2) {\n   \
    \         return Optional.empty();\n        }\n        Long min = Collections.min(lst);\n\
    \        lst.remove(min);\n        return Optional.of(Collections.min(lst));",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = lst.get(1);\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n\
    \                secondMin = min;\n                min = lst.get(i);\n       \
    \     } else if (lst.get(i) < secondMin) {\n                secondMin = lst.get(i);\n\
    \            }\n        }\n        if (min == secondMin) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(secondMin);", "   \
    \     if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        Long min = Collections.min(lst);\n        Long min2 = null;\n       \
    \ for (Long l : lst) {\n            if (l > min) {\n                if (min2 ==\
    \ null || l < min2) {\n                    min2 = l;\n                }\n    \
    \        }\n        }\n        if (min2 == null) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(min2);", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long smallest = Long.MAX_VALUE;\n\
    \        long secondSmallest = Long.MAX_VALUE;\n        for (long i : lst) {\n\
    \            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        if (secondSmallest\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondSmallest);", "        if (lst.size() < 2) {\n  \
    \          return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long cur = lst.get(i);\n            if (cur < min) {\n \
    \               secondMin = min;\n                min = cur;\n            } else\
    \ if (cur < secondMin) {\n                secondMin = cur;\n            }\n  \
    \      }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        // Your code here\n\
    \        return Optional.empty();", "        // Your code here\n        return\
    \ Optional.empty();", "        // Your code here\n        return Optional.empty();",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        Long min = Long.MAX_VALUE;\n        Long secondMin = Long.MAX_VALUE;\n\
    \        for (Long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        Long smallest = lst.get(0);\n\
    \        Long secondSmallest = null;\n        for (Long l : lst) {\n         \
    \   if (l < smallest) {\n                secondSmallest = smallest;\n        \
    \        smallest = l;\n            } else if (secondSmallest == null || l < secondSmallest)\
    \ {\n                secondSmallest = l;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        if (lst.size() < 2) {\n    \
    \        return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long nextMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            if (lst.get(i) < min) {\n                nextMin = min;\n   \
    \             min = lst.get(i);\n            } else if (lst.get(i) < nextMin)\
    \ {\n                nextMin = lst.get(i);\n            }\n        }\n       \
    \ if (min == nextMin) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(nextMin);", "        if (lst.size() < 2) {\n        \
    \    return Optional.empty();\n        }\n        long min = lst.get(0);\n   \
    \     long nextSmallest = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < min) {\n\
    \                nextSmallest = min;\n                min = curr;\n          \
    \  } else if (curr < nextSmallest) {\n                nextSmallest = curr;\n \
    \           }\n        }\n        if (nextSmallest == Long.MAX_VALUE) {\n    \
    \        return Optional.empty();\n        }\n        return Optional.of(nextSmallest);",
  "        // Your code here\n        return Optional.empty();", '        return null;',
  "        // Write your code here\n        return Optional.empty();", "        //\
    \ Your code here\n        return Optional.empty();", "        if (lst.size() ==\
    \ 0) {\n            return Optional.empty();\n        }\n        if (lst.size()\
    \ == 1) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long nextMin = lst.get(1);\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            if (lst.get(i) < min) {\n                nextMin\
    \ = min;\n                min = lst.get(i);\n            }\n            else if\
    \ (lst.get(i) < nextMin && lst.get(i) != min) {\n                nextMin = lst.get(i);\n\
    \            }\n        }\n        if (nextMin == min) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(nextMin);", "        // Your code here\n\
    \        return Optional.empty();", "        // Your code here\n        return\
    \ Optional.empty();", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        Long min = lst.get(0);\n        Long secondMin = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            Long el = lst.get(i);\n\
    \            if (el < min) {\n                secondMin = min;\n             \
    \   min = el;\n            } else if (el < secondMin) {\n                secondMin\
    \ = el;\n            }\n        }\n        if (min == secondMin) {\n         \
    \   return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        // Your code here\n        return Optional.empty();", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        Long min =\
    \ lst.get(0);\n        Long secondMin = lst.get(1);\n        if (min > secondMin)\
    \ {\n            Long tmp = min;\n            min = secondMin;\n            secondMin\
    \ = tmp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n        \
    \    Long val = lst.get(i);\n            if (val < min) {\n                secondMin\
    \ = min;\n                min = val;\n            } else if (val < secondMin)\
    \ {\n                secondMin = val;\n            }\n        }\n        return\
    \ Optional.of(secondMin);", "        // Your code here\n        return Optional.empty();",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        if (lst.size() == 0) {\n      \
    \      return Optional.empty();\n        }\n        if (lst.size() == 1) {\n \
    \           return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst.get(i);\n            } else if (lst.get(i)\
    \ < secondSmallest) {\n                secondSmallest = lst.get(i);\n        \
    \    }\n        }\n        if (smallest == secondSmallest) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(secondSmallest);",
  "        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        if (lst.size() == 1) {\n            return Optional.empty();\n      \
    \  }\n        if (lst.size() == 2) {\n            if (lst.get(0) == lst.get(1))\
    \ {\n                return Optional.empty();\n            }\n            if (lst.get(0)\
    \ < lst.get(1)) {\n                return Optional.of(lst.get(0));\n         \
    \   }\n            return Optional.of(lst.get(1));\n        }\n        ArrayList<Long>\
    \ lst2 = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            lst2.add(lst.get(i));\n        }\n        Collections.sort(lst2);\n\
    \        for (int i = 0; i < lst2.size() - 1; i++) {\n            if (lst2.get(i)\
    \ != lst2.get(i + 1)) {\n                return Optional.of(lst2.get(i + 1));\n\
    \            }\n        }\n        return Optional.empty();", "        // Your\
    \ code here\n        return Optional.empty();", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long min2 = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            long x = lst.get(i);\n            if (x < min) {\n          \
    \      min2 = min;\n                min = x;\n            } else if (x < min2)\
    \ {\n                min2 = x;\n            }\n        }\n        if (min2 ==\
    \ min) {\n            return Optional.empty();\n        }\n        return Optional.of(min2);",
  '        return null;', "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long secondMin = lst.get(1);\n\
    \        if (secondMin < min) {\n            long tmp = min;\n            min\
    \ = secondMin;\n            secondMin = tmp;\n        }\n        for (int i =\
    \ 2; i < lst.size(); i++) {\n            long n = lst.get(i);\n            if\
    \ (n < min) {\n                secondMin = min;\n                min = n;\n  \
    \          } else if (n < secondMin) {\n                secondMin = n;\n     \
    \       }\n        }\n        return Optional.of(secondMin);", "        // Your\
    \ code here\n        return Optional.empty();", "        // Your code here\n \
    \       return Optional.empty();", "        // Your code here\n        return\
    \ null;", "        // Your code here.\n        return Optional.empty();", "  \
    \      if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        long min = lst.get(0);\n  \
    \      long min2 = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            long x = lst.get(i);\n            if (x < min) {\n          \
    \      min2 = min;\n                min = x;\n            } else if (x < min2)\
    \ {\n                min2 = x;\n            }\n        }\n        if (min2 ==\
    \ Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n       \
    \ return Optional.of(min2);", "        // Your code here\n        return Optional.empty();",
  "        // Your code here.\n        return Optional.empty();", "        // Your\
    \ code here\n        return Optional.empty();", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(secondMin);", "   \
    \     // Your code here\n        return Optional.empty();", "        // Write\
    \ your code here\n        return Optional.empty();", "        // Your code here\n\
    \        return Optional.empty();", "        if (lst.size() < 2) {\n         \
    \   return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long min2 = Long.MAX_VALUE;\n        for (long x : lst) {\n         \
    \   if (x < min) {\n                min2 = min;\n                min = x;\n  \
    \          } else if (x < min2) {\n                min2 = x;\n            }\n\
    \        }\n        if (min2 == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(min2);", "        if (lst.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        if (lst.size() ==\
    \ 1) {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long min2 = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            if (lst.get(i) < min) {\n                min2 = min;\n      \
    \          min = lst.get(i);\n            } else if (lst.get(i) < min2) {\n  \
    \              min2 = lst.get(i);\n            }\n        }\n        if (min2\
    \ == min) {\n            return Optional.empty();\n        }\n        return Optional.of(min2);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (long i : lst) {\n            if (i < min) {\n                secondMin\
    \ = min;\n                min = i;\n            } else if (i < secondMin) {\n\
    \                secondMin = i;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", "        // Your code here\n        return\
    \ Optional.empty();", "        // Your code here\n        return Optional.empty();",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long secondMin = lst.get(1);\n      \
    \  if (min > secondMin) {\n            long tmp = min;\n            min = secondMin;\n\
    \            secondMin = tmp;\n        }\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        return Optional.of(secondMin);", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ Long.MAX_VALUE;\n        long min2 = Long.MAX_VALUE;\n        for (long x :\
    \ lst) {\n            if (x < min) {\n                min2 = min;\n          \
    \      min = x;\n            } else if (x < min2) {\n                min2 = x;\n\
    \            }\n        }\n        if (min2 == Long.MAX_VALUE) {\n           \
    \ return Optional.empty();\n        }\n        return Optional.of(min2);", " \
    \       // Your code goes here.\n        return Optional.empty();", "        //\
    \ Your code here\n        return Optional.empty();", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        for (Long i : lst) {\n        \
    \    if (i < min) {\n                secondMin = min;\n                min = i;\n\
    \            } else if (i < secondMin) {\n                secondMin = i;\n   \
    \         }\n        }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        // Your code here\n\
    \        return Optional.empty();", "        if (lst.size() < 2) {\n         \
    \   return Optional.empty();\n        }\n        Long min = Collections.min(lst);\n\
    \        lst.remove(min);\n        return Optional.of(Collections.min(lst));",
  "        // Your code here\n        return Optional.empty();", "        // Your\
    \ code here\n        return Optional.empty();", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            Long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long cur = lst.get(i);\n            if (cur < min) {\n \
    \               secondMin = min;\n                min = cur;\n            } else\
    \ if (cur < secondMin) {\n                secondMin = cur;\n            }\n  \
    \      }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        // Your code here\n\
    \        return Optional.empty();", "        // Your code here\n        return\
    \ Optional.empty();", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long secondMin = Long.MAX_VALUE;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long num = lst.get(i);\n\
    \            if (num < min) {\n                secondMin = min;\n            \
    \    min = num;\n            } else if (num < secondMin) {\n                secondMin\
    \ = num;\n            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  '        return null;', "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        Long min = lst.get(0);\n        Long min2 = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            Long x = lst.get(i);\n\
    \            if (x < min) {\n                min2 = min;\n                min\
    \ = x;\n            } else if (x < min2) {\n                min2 = x;\n      \
    \      }\n        }\n        if (min == min2) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(min2);", "        // return Optional.empty();\n\
    \        // return Optional.of((long)2l);\n        // return Optional.of((long)1l);\n\
    \        // return Optional.of((long)0l);\n        // return Optional.of((long)3l);\n\
    \        // return Optional.of((long)4l);\n        // return Optional.of((long)5l);\n\
    \        // return Optional.of((long)6l);\n        // return Optional.of((long)7l);\n\
    \        // return Optional.of((long)8l);\n        // return Optional.of((long)9l);\n\
    \        // return Optional.of((long)10l);\n        // return Optional.of((long)11l);\n\
    \        // return Optional.of((long)12l);\n        // return Optional.of((long)13l);\n\
    \        // return Optional.of((long)14l);\n        // return Optional.of((long)15l);\n\
    \        // return Optional.of((long)16l);\n        // return Optional.of((long)17l);\n\
    \        // return Optional.of((long)18l);\n        // return Optional.of((long)19l);\n\
    \        // return Optional.of((long)20l);\n        // return Optional.of((long)21l);\n\
    \        // return Optional.of((long)22l);\n        // return Optional.of((long)23l);\n\
    \        // return Optional.of((long)24l);\n        // return Optional.of((long)25l);\n\
    \        // return Optional.of((long)26l);\n        // return Optional.of((long)27l);\n\
    \        // return Optional.of((long)28l);\n        // return Optional.of((long)29l);\n\
    \        // return Optional.of((long)30l);\n        // return Optional.of((long)31l);\n\
    \        // return Optional.of((long)32l);\n        // return Optional.of((long)33l);\n\
    \        // return Optional.of((long)34l);\n        // return Optional.of((long)35l);\n\
    \        // return Optional.of((long)36l);\n        // return Optional.of((long)37l);\n\
    \        // return Optional.of((long)", "        if (lst.size() < 2) {\n     \
    \       return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long l : lst) {\n    \
    \        if (l < min) {\n                secondMin = min;\n                min\
    \ = l;\n            } else if (l < secondMin) {\n                secondMin = l;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = Long.MAX_VALUE;\n        long min2 = Long.MAX_VALUE;\n   \
    \     for (long i : lst) {\n            if (i < min) {\n                min2 =\
    \ min;\n                min = i;\n            } else if (i < min2) {\n       \
    \         min2 = i;\n            }\n        }\n        if (min2 == Long.MAX_VALUE)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(min2);",
  "        // Your code here\n        return null;", "        if (lst.size() < 2)\
    \ {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long min2 = lst.get(1);\n        if (min2 < min) {\n            long\
    \ tmp = min;\n            min = min2;\n            min2 = tmp;\n        }\n  \
    \      for (int i = 2; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (x < min) {\n                min2 = min;\n                min\
    \ = x;\n            } else if (x < min2) {\n                min2 = x;\n      \
    \      }\n        }\n        return Optional.of(min2);", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ Long.MAX_VALUE;\n        long min2 = Long.MAX_VALUE;\n        for (long x :\
    \ lst) {\n            if (x < min) {\n                min2 = min;\n          \
    \      min = x;\n            } else if (x < min2) {\n                min2 = x;\n\
    \            }\n        }\n        if (min2 == Long.MAX_VALUE) {\n           \
    \ return Optional.empty();\n        }\n        return Optional.of(min2);", '        return
    null;', "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long min2 = lst.get(1);\n\
    \        if (min > min2) {\n            min = min2;\n            min2 = lst.get(0);\n\
    \        }\n        for (int i = 2; i < lst.size(); i++) {\n            long x\
    \ = lst.get(i);\n            if (x < min) {\n                min2 = min;\n   \
    \             min = x;\n            } else if (x < min2) {\n                min2\
    \ = x;\n            }\n        }\n        return Optional.of(min2);", "      \
    \  if (lst.size() < 2) {\n            return Optional.empty();\n        }\n  \
    \      long min = lst.get(0);\n        long min2 = lst.get(1);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long el = lst.get(i);\n         \
    \   if (el < min) {\n                min2 = min;\n                min = el;\n\
    \            } else if (el < min2) {\n                min2 = el;\n           \
    \ }\n        }\n        if (min2 == min) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(min2);", "        // Your code here\n \
    \       return Optional.empty();", "        if (lst.size() < 2) {\n          \
    \  return Optional.empty();\n        }\n        long min = lst.get(0);\n     \
    \   long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++)\
    \ {\n            long val = lst.get(i);\n            if (val < min) {\n      \
    \          secondMin = min;\n                min = val;\n            } else if\
    \ (val < secondMin) {\n                secondMin = val;\n            }\n     \
    \   }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long min2 = lst.get(1);\n        if (min2 < min) {\n            long\
    \ tmp = min;\n            min = min2;\n            min2 = tmp;\n        }\n  \
    \      for (int i = 2; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (x < min) {\n                min2 = min;\n                min\
    \ = x;\n            } else if (x < min2) {\n                min2 = x;\n      \
    \      }\n        }\n        return Optional.of(min2);", "        // Your code\
    \ here\n        return Optional.empty();", "        // Your code here\n      \
    \  return null;", "        if (lst.size() < 2) {\n            return Optional.empty();\n\
    \        }\n        long min = lst.get(0);\n        long min2 = lst.get(1);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < min) {\n                min2 = min;\n                min\
    \ = cur;\n            } else if (cur < min2) {\n                min2 = cur;\n\
    \            }\n        }\n        if (min2 == min) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(min2);", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long cur = lst.get(i);\n            if (cur < min) {\n \
    \               secondMin = min;\n                min = cur;\n            } else\
    \ if (cur < secondMin) {\n                secondMin = cur;\n            }\n  \
    \      }\n        if (secondMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        if (min > secondMin) {\n      \
    \      Long tmp = min;\n            min = secondMin;\n            secondMin =\
    \ tmp;\n        }\n        for (int i = 2; i < lst.size(); i++) {\n          \
    \  Long cur = lst.get(i);\n            if (cur < min) {\n                secondMin\
    \ = min;\n                min = cur;\n            } else if (cur < secondMin)\
    \ {\n                secondMin = cur;\n            }\n        }\n        return\
    \ Optional.of(secondMin);", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        long smallest = lst.get(0);\n        long\
    \ secondSmallest = lst.get(1);\n        if (smallest > secondSmallest) {\n   \
    \         smallest = secondSmallest;\n            secondSmallest = lst.get(0);\n\
    \        }\n        for (int i = 2; i < lst.size(); i++) {\n            long current\
    \ = lst.get(i);\n            if (current < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = current;\n            } else if (current\
    \ < secondSmallest) {\n                secondSmallest = current;\n           \
    \ }\n        }\n        return Optional.of(secondSmallest);", "        // Your\
    \ code here\n        return Optional.empty();", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long secondMin = lst.get(1);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            Long curr = lst.get(i);\n            if (curr < min) {\n\
    \                secondMin = min;\n                min = curr;\n            }\
    \ else if (curr < secondMin) {\n                secondMin = curr;\n          \
    \  }\n        }\n        if (min == secondMin) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", '        return null;', " \
    \       if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long min2 = lst.get(1);\n        if (min\
    \ > min2) {\n            min = min2;\n            min2 = lst.get(0);\n       \
    \ }\n        for (int i = 2; i < lst.size(); i++) {\n            long cur = lst.get(i);\n\
    \            if (cur < min) {\n                min2 = min;\n                min\
    \ = cur;\n            } else if (cur < min2) {\n                min2 = cur;\n\
    \            }\n        }\n        return Optional.of(min2);", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long nextSmallest = lst.get(1);\n        for (int i =\
    \ 1; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n      \
    \          nextSmallest = smallest;\n                smallest = lst.get(i);\n\
    \            } else if (lst.get(i) < nextSmallest) {\n                nextSmallest\
    \ = lst.get(i);\n            }\n        }\n        if (nextSmallest == smallest)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(nextSmallest);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        Long min = Long.MAX_VALUE;\n        Long secondMin = Long.MAX_VALUE;\n\
    \        for (Long l : lst) {\n            if (l < min) {\n                secondMin\
    \ = min;\n                min = l;\n            } else if (l < secondMin) {\n\
    \                secondMin = l;\n            }\n        }\n        if (secondMin\
    \ == Long.MAX_VALUE) {\n            return Optional.empty();\n        }\n    \
    \    return Optional.of(secondMin);", '        return null;', "        // Your\
    \ code here.\n        return Optional.empty();", "        if (lst.size() < 2)\
    \ {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long cur = lst.get(i);\n            if (cur < min) {\n \
    \               secondMin = min;\n                min = cur;\n            } else\
    \ if (cur < secondMin) {\n                secondMin = cur;\n            }\n  \
    \      }\n        if (secondMin == Long.MAX_VALUE) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(secondMin);", "        if (lst.size() <\
    \ 2) {\n            return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long i : lst) {\n    \
    \        if (i < min) {\n                secondMin = min;\n                min\
    \ = i;\n            } else if (i < secondMin) {\n                secondMin = i;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        // Your code here\n        return Optional.empty();", "        if (lst.size()\
    \ < 2) {\n            return Optional.empty();\n        }\n        long min =\
    \ lst.get(0);\n        long min2 = lst.get(1);\n        if (min2 < min) {\n  \
    \          long tmp = min;\n            min = min2;\n            min2 = tmp;\n\
    \        }\n        for (int i = 2; i < lst.size(); i++) {\n            long x\
    \ = lst.get(i);\n            if (x < min) {\n                min2 = min;\n   \
    \             min = x;\n            } else if (x < min2) {\n                min2\
    \ = x;\n            }\n        }\n        return Optional.of(min2);", "      \
    \  // Your code here.\n        if (lst.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        if (lst.size() == 1) {\n            return Optional.empty();\n\
    \        }\n        if (lst.size() == 2) {\n            if (lst.get(0) == lst.get(1))\
    \ {\n                return Optional.empty();\n            }\n            return\
    \ Optional.of(Math.min(lst.get(0), lst.get(1)));\n        }\n        long min\
    \ = lst.get(0);\n        long min2 = lst.get(1);\n        for (int i = 1; i <\
    \ lst.size(); i++) {\n            long cur = lst.get(i);\n            if (cur\
    \ < min) {\n                min2 = min;\n                min = cur;\n        \
    \    } else if (cur < min2) {\n                min2 = cur;\n            }\n  \
    \      }\n        if (min2 == min) {\n            return Optional.empty();\n \
    \       }\n        return Optional.of(min2);", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long nextMin = lst.get(1);\n        for (Long i : lst) {\n          \
    \  if (i < min) {\n                nextMin = min;\n                min = i;\n\
    \            } else if (i < nextMin) {\n                nextMin = i;\n       \
    \     }\n        }\n        return Optional.of(nextMin);", "        // Your code\
    \ here\n        return Optional.empty();", "        if (lst.size() < 2) {\n  \
    \          return Optional.empty();\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long secondMin = Long.MAX_VALUE;\n        for (long l : lst) {\n    \
    \        if (l < min) {\n                secondMin = min;\n                min\
    \ = l;\n            } else if (l < secondMin) {\n                secondMin = l;\n\
    \            }\n        }\n        if (secondMin == Long.MAX_VALUE) {\n      \
    \      return Optional.empty();\n        }\n        return Optional.of(secondMin);",
  "        // Your code here.\n        return Optional.empty();", "        // Your\
    \ code here\n        return Optional.empty();", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        ArrayList<Long> lst2\
    \ = new ArrayList<Long>(lst);\n        Collections.sort(lst2);\n        for (int\
    \ i = 1; i < lst2.size(); i++) {\n            if (lst2.get(i) != lst2.get(i -\
    \ 1)) {\n                return Optional.of(lst2.get(i));\n            }\n   \
    \     }\n        return Optional.empty();"]
stop_tokens:
- "\n    }\n"
