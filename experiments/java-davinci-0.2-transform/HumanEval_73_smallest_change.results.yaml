language: java
name: HumanEval_73_smallest_change
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        long result = 0;\n        for (int i = 0; i < arr.size() / 2;\
    \ i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - 1 - i))) {\n\
    \                result++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        int n = arr.size();\n        int[][] dp = new int[n][n];\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++)\
    \ {\n                dp[i][j] = -1;\n            }\n        }\n        return\
    \ smallestChange(arr, 0, n - 1, dp);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp970d09kj.java:27: error: method smallestChange in class Problem\
    \ cannot be applied to given types;\n        return smallestChange(arr, 0, n -\
    \ 1, dp);\n               ^\n  required: ArrayList<Long>\n  found: ArrayList<Long>,int,int,int[][]\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() / 2;\
    \ i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - 1 - i))) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthllyfop.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        long result = 0l;\n        // Write your code here.\n      \
    \  int n = arr.size();\n        int[][] dp = new int[n][n];\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n          \
    \      dp[i][j] = -1;\n            }\n        }\n        result = (long)smallestChange(arr,\
    \ 0, n - 1, dp);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_5krozw.java:29: error: method smallestChange in class Problem\
    \ cannot be applied to given types;\n        result = (long)smallestChange(arr,\
    \ 0, n - 1, dp);\n                       ^\n  required: ArrayList<Long>\n  found:\
    \ ArrayList<Long>,int,int,int[][]\n  reason: actual and formal argument lists\
    \ differ in length\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0m7f06m.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthllyfop.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthllyfop.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthllyfop.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthllyfop.java:24)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        long ans = 0;\n        int n = arr.size();\n        for (int\
    \ i = 0; i < n / 2; i++) {\n            if (arr.get(i) != arr.get(n - i - 1))\
    \ {\n                ans++;\n            }\n        }\n        return ans;\n \
    \   }\n    public static void main(String[] args) {\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l,\
    \ (long)7l, (long)9l, (long)6l)))) == (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        long ans = 0;\n        int i = 0;\n        int j = arr.size()\
    \ - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n\
    \                ans++;\n            }\n            i++;\n            j--;\n \
    \       }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        long ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++)\
    \ {\n            if (!arr.get(i).equals(arr.get(arr.size() - 1 - i))) {\n    \
    \            ans++;\n            }\n        }\n        return ans;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        long ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++)\
    \ {\n            if (!arr.get(i).equals(arr.get(arr.size() - 1 - i))) {\n    \
    \            ans++;\n            }\n        }\n        return ans;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthllyfop.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthllyfop.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        long result = 0;\n        for (int i = 0; i < arr.size() / 2;\
    \ i++) {\n            result += Math.abs(arr.get(i) - arr.get(arr.size() - 1 -\
    \ i));\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoj0fl84g.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) == (4l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_au0899q.java:23)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0m7f06m.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers, find the minimum number\
    \ of elements that\n    // need to be changed to make the array palindromic. A\
    \ palindromic array is an array that\n    // is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\n    // For\
    \ example:\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))\n \
    \   // (4l)\n    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))\n    // (1l)\n\
    \    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)2l, (long)1l))))\n    // (0l)\n    public static long smallestChange(ArrayList<Long>\
    \ arr) {\n        // Your code here.\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l)))) ==\
    \ (4l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l)))) == (1l));\n \
    \   assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)4l, (long)2l)))) == (1l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)1l)))) == (0l));\n    assert(smallestChange((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)1l, (long)3l)))) ==\
    \ (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (0l));\n    assert(smallestChange((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp75k7t3s1.java:24)\n"
  stdout: ''
