language: java
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bl7i2gy.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ YOUR CODE HERE <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplp66f9e_.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeof_r2gn.java:27)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, RoundingMode.HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjzkv88mh.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, RoundingMode.HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long) (d + 0.5);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8cggphyv.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.6\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.5\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.4\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n\
    \        // >>> closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.6\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.5\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-12.4\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-12.1\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-12.0\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6b2t1wl.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20b6m3po.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxle2pd65.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj3ff5b3_.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        long l = (long) d;\n        if (d -\
    \ l > 0.5) {\n            return l + 1;\n        } else {\n            return\
    \ l;\n        }\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpeffgcw.java:33)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.4\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf26dq39g.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi5hz9c33.java:27)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bl7i2gy.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxle2pd65.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long)Math.round(d);\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1syyopjb.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.6\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.5\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.4\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n\
    \        // >>> closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.6\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.5\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-12.4\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-12.1\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-12.0\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6b2t1wl.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bl7i2gy.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.8\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx4e72hfj.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpry8t7n2o.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.6\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.5\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.4\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n\
    \        // >>> closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.6\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.5\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-12.4\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-12.1\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-12.0\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6b2t1wl.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code goes here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0at5c__d.java:27)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.10\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.11\"))\n \
    \       // (-15l)\n        // >>> closestInteger((\"-14.12\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.13\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.14\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.15\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.16\"))\n \
    \       // (-15l)\n        // >>> closestInteger((\"-14.17\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.18\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.19\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5a791s1.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805209
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjzkv88mh.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.1\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.9\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.5\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.5\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-12.1\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-12.0\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-11.9\"))\n        // (-12l)\n        // >>> closestInteger((\"\
    -11.5\"))\n        // (-12l)\n        // >>> closestInteger((\"-11.1\"))\n   \
    \     // (-11l)\n        // >>> closestInteger((\"-11.0\"))\n        // (-11l)\n\
    \        // >>> closestInteger((\"-10.9\"))\n        // (-11l)\n        // >>>\
    \ closestInteger((\"-10.5\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy5seqx7g.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return Math.round(d);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwfetizb.java:29)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqqvpna7.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       long l = (long) d;\n        if (d - l >= 0.5) {\n            return l\
    \ + 1;\n        } else {\n            return l;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx869vhyw.java:43)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return Math.round(d);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwfetizb.java:29)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return Math.round(d);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwfetizb.java:29)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long) Math.round(d);\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnf03tog.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeof_r2gn.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.longValue();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       if (d > 0) {\n            return Math.round(d);\n        } else {\n  \
    \          return Math.round(d - 1);\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyqkbi8ik.java:44)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"15.6\"))\n        // (16l)\n        // >>> closestInteger((\"\
    15.5\"))\n        // (16l)\n        // >>> closestInteger((\"-15.4\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"15.4\"))\n        // (15l)\n \
    \       // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"15.7\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"15.8\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.9\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"15.0\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.1\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"15.2\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"15.4\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger(\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_9n8nvc0.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.6\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"14.5\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"14.5\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"14.5\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"14.5\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx82_dyi5.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        long l = (long) d;\n        if (d -\
    \ l > 0.5) {\n            return l + 1;\n        } else {\n            return\
    \ l;\n        }\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpeffgcw.java:33)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.6\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.9\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.95\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.96\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.97\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.98\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.99\"))\n \
    \       // (-16l)\n        // >>> closestInteger((\"-15.995\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.996\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.997\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.998\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.999\"))\n\
    \        // (-16l)\n        // >>> closestInteger((\"-15.9995\"))\n        //\
    \ (-16l)\n        // >>> closestInteger((\"-15.9996\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.9997\"))\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfuno9ovj.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuf1gsepy.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpry8t7n2o.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.4\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3dr2ichp.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeof_r2gn.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        long l = (long) d;\n        if (d -\
    \ l > 0.5) {\n            return l + 1;\n        } else {\n            return\
    \ l;\n        }\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpeffgcw.java:33)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       if (d < 0) {\n            return (long) Math.ceil(d);\n        } else\
    \ {\n            return (long) Math.floor(d);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoqwcvecx.java:41)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.1\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.6\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.5\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.4\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-13.1\"))\n        // (-13l)\n\
    \        // >>> closestInteger((\"-13.0\"))\n        // (-13l)\n        // >>>\
    \ closestInteger((\"-12.9\"))\n        // (-13l)\n        // >>> closestInteger((\"\
    -12.6\"))\n        // (-13l)\n        // >>> closestInteger((\"-12.5\"))\n   \
    \     // (-13l)\n        // >>> closestInteger((\"-12.4\"))\n        // (-12l)\n\
    \        // >>> closestInteger((\"-12.1\"))\n        // (-12l)\n        // >>>\
    \ closestInteger((\"-12.0\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6b2t1wl.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, BigDecimal.ROUND_HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0l;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79z201c8.java:35)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return Math.round(d);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwfetizb.java:29)\n"
  stdout: ''
  timestamp: 1659805166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       if (d < 0) {\n            return Math.round(d - 0.5);\n        } else\
    \ {\n            return Math.round(d + 0.5);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6t7jeuu4.java:40)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-14.5\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"14.5\"))\n        // (15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"14.4\"))\n    \
    \    // (14l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"14.6\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"14.4\"))\n        // (14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"14.5\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"14.6\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"14.4\"))\n    \
    \    // (14l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"14.5\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -14.6\"))\n        // (-15l)\n        // >>> closestInteger((\"14.6\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-14.4\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"14.4\"))\n        // (14l)\n        // >>> closestInteger((\"\
    \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp137y24eh.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        BigDecimal bd = new BigDecimal(value);\n\
    \        bd = bd.setScale(0, RoundingMode.HALF_UP);\n        return bd.longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.6\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"15.5\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"15.4\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"15.0\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.1\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-16l)\n        // >>> closestInteger((\"15.2\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"15.3\"))\n        // (15l)\n        // >>> closestInteger((\"\
    -15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"15.4\"))\n    \
    \    // (15l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.5\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"15.6\"))\n    \
    \    // (16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"15.7\"))\n        // (16l)\n        // >>> closestInteger((\"\
    -15.8\"))\n        // (-16l)\n        // >>> closestInteger(\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3_dgd0od.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        long l = (long) d;\n        if (d -\
    \ l >= 0.5) {\n            return l + 1;\n        } else {\n            return\
    \ l;\n        }\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_da3giue.java:34)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return (long) Math.round(Double.parseDouble(value));\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6vq297_r.java:37)\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqrvqai5.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.2\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.7\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.4\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.3\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.2\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.0\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.9\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.8\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -13.7\"))\n        // (-14l)\n        // >>> closestInteger((\"-13.6\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-13.5\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-13.4\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-13.3\"))\n        //\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzqu3nkgw.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long) Math.round(d);\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnf03tog.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bl7i2gy.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bl7i2gy.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bl7i2gy.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        long l = Math.round(d);\n        return\
    \ l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjt5qnvm4.java:30)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bl7i2gy.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, RoundingMode.HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n \
    \       // >>> closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.6\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.0\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.9\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.5\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmputb3j1yi.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"15.5\"))\n        // (16l)\n        // >>> closestInteger((\"\
    15.6\"))\n        // (16l)\n        // >>> closestInteger((\"15.7\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"15.8\"))\n        // (16l)\n   \
    \     // >>> closestInteger((\"15.9\"))\n        // (16l)\n        // >>> closestInteger((\"\
    16.0\"))\n        // (16l)\n        // >>> closestInteger((\"16.1\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"16.2\"))\n        // (16l)\n   \
    \     // >>> closestInteger((\"16.3\"))\n        // (16l)\n        // >>> closestInteger((\"\
    16.4\"))\n        // (16l)\n        // >>> closestInteger((\"16.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"16.6\"))\n        // (16l)\n   \
    \     // >>> closestInteger((\"16.7\"))\n        // (16l)\n        // >>> closestInteger((\"\
    16.8\"))\n        // (16l)\n        // >>> closestInteger((\"16.9\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"17.0\"))\n        // (17l)\n   \
    \     // >>> closestInteger((\"17.1\"))\n        // (17l)\n        // >>> closestInteger((\"\
    17.2\"))\n        // (17l)\n        // >>> closestInteger((\"17.3\"))\n      \
    \  // (17l)\n        // >>> closestInteger((\"17.4\"))\n        // (17l)\n   \
    \     // >>> closestInteger((\"17.5\"))\n        // (17l)\n        // >>> closestInteger((\"\
    17.6\"))\n        // (17\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfbdaafru.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ YOUR CODE HERE <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplp66f9e_.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        long l = (long) d;\n        if (d -\
    \ l > 0.5) {\n            return l + 1;\n        } else {\n            return\
    \ l;\n        }\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpeffgcw.java:33)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       long l = (long) d;\n        if (d - l > 0.5) {\n            return l +\
    \ 1;\n        } else {\n            return l;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpud9nr3xe.java:42)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        return (long) Math.round(d);\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnf03tog.java:29)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqh75orhy.java:27)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjzkv88mh.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, RoundingMode.HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvnu5ri.java:35)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeof_r2gn.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Write\
    \ your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfyyzvq4q.java:27)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"-15.3\"))\n     \
    \   // (-15l)\n        // >>> closestInteger((\"-15.6\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.5\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    15.6\"))\n        // (16l)\n        // >>> closestInteger((\"15.5\"))\n      \
    \  // (16l)\n        // >>> closestInteger((\"15.4\"))\n        // (15l)\n   \
    \     // >>> closestInteger((\"0.4\"))\n        // (0l)\n        // >>> closestInteger((\"\
    0.5\"))\n        // (1l)\n        // >>> closestInteger((\"0.6\"))\n        //\
    \ (1l)\n        // >>> closestInteger((\"-0.4\"))\n        // (0l)\n        //\
    \ >>> closestInteger((\"-0.5\"))\n        // (-1l)\n        // >>> closestInteger((\"\
    -0.6\"))\n        // (-1l)\n        // >>> closestInteger((\"0.0\"))\n       \
    \ // (0l)\n        // >>> closestInteger((\"-0.0\"))\n        // (0l)\n      \
    \  // >>> closestInteger((\"-0.0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.0\"))\n        // (0l)\n        // >>> closestInteger((\"-0.0\"))\n       \
    \ // (0l)\n        // >>> closestInteger((\"-0.0\"))\n        // (0l)\n      \
    \  // >>> closestInteger((\"-0.0\"))\n        // (0l)\n        // >>> closestInteger((\"\
    -0.0\"))\n        // (0l)\n        // >>> closestInteger((\"-0.0\"))\n       \
    \ // (0l)\n        // >>> closestInteger((\"-0.0\"))\n        // (0l)\n      \
    \  // >>> closestInteger((\"-0.0\"))\n        // (0l)\n        //\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc8yr1_hn.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        return bd.longValue();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        BigDecimal\
    \ bd = new BigDecimal(value);\n        return bd.setScale(0, RoundingMode.HALF_UP).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // >>> closestInteger((\"14.5\"))\n      \
    \  // (15l)\n        // >>> closestInteger((\"-14.5\"))\n        // (-15l)\n \
    \       // >>> closestInteger((\"-14.6\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.0\"))\n        // (-14l)\n        // >>> closestInteger((\"-14.1\"))\n   \
    \     // (-14l)\n        // >>> closestInteger((\"-14.2\"))\n        // (-14l)\n\
    \        // >>> closestInteger((\"-14.3\"))\n        // (-14l)\n        // >>>\
    \ closestInteger((\"-14.4\"))\n        // (-14l)\n        // >>> closestInteger((\"\
    -14.5\"))\n        // (-15l)\n        // >>> closestInteger((\"-14.6\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-14.7\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-14.8\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-14.9\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.0\"))\n        // (-15l)\n        // >>> closestInteger((\"-15.1\"))\n   \
    \     // (-15l)\n        // >>> closestInteger((\"-15.2\"))\n        // (-15l)\n\
    \        // >>> closestInteger((\"-15.3\"))\n        // (-15l)\n        // >>>\
    \ closestInteger((\"-15.4\"))\n        // (-15l)\n        // >>> closestInteger((\"\
    -15.5\"))\n        // (-16l)\n        // >>> closestInteger((\"-15.6\"))\n   \
    \     // (-16l)\n        // >>> closestInteger((\"-15.7\"))\n        // (-16l)\n\
    \        // >>> closestInteger((\"-15.8\"))\n        // (-16l)\n        // >>>\
    \ closestInteger((\"-15.9\"))\n        // (-\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolyfn0c4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1bl7i2gy.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> closestInteger((\"10\"))\n        // (10l)\n        //\
    \ >>> closestInteger((\"15.3\"))\n        // (15l)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> closestInteger((\"10\"))\n       \
    \ // (10l)\n        // >>> closestInteger((\"15.3\"))\n        // (15l)\n    \
    \    // Note:\n        // Rounding away from\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbshcwtpd.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        double\
    \ d = Double.parseDouble(value);\n        if (d > 0) {\n            return Math.round(d);\n\
    \        } else {\n            return Math.round(d - 1);\n        }\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpegbsq9lg.java:35)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_wwgpin.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ closestInteger((\"10\"))\n        // (10l)\n        // >>> closestInteger((\"\
    15.3\"))\n        // (15l)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        double d = Double.parseDouble(value);\n \
    \       return Math.round(d);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzskl7y5o.java:38)\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        return\
    \ Math.round(Double.parseDouble(value));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaf6h6s2.java:28)\n"
  stdout: ''
  timestamp: 1659805164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // >>>\
    \ your code here <<<\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi5hz9c33.java:27)\n"
  stdout: ''
  timestamp: 1659805166
