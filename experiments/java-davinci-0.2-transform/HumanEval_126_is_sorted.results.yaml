language: java
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        else {\n            long last = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                long curr\
    \ = lst.get(i);\n                if (curr < last) {\n                    return\
    \ false;\n                }\n                else {\n                    last\
    \ = curr;\n                }\n            }\n            return true;\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgl5isyj5.java:57)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ < lst.get(1);\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n\
    \            if (lst.get(i) >= lst.get(i + 1)) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkx6rnxmo.java:58)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Fill in code here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppvbcxnu9.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        else {\n            long prev = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                long curr\
    \ = lst.get(i);\n                if (curr < prev) {\n                    return\
    \ false;\n                }\n                else {\n                    prev\
    \ = curr;\n                }\n            }\n            return true;\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzs7ewx4l.java:57)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ < lst.get(1);\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n\
    \            if (lst.get(i) >= lst.get(i + 1)) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkx6rnxmo.java:58)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        else {\n            long prev = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                long curr\
    \ = lst.get(i);\n                if (curr < prev) {\n                    return\
    \ false;\n                }\n                prev = curr;\n            }\n   \
    \         return true;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjcztnja9.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        Long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            Long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3um_10_.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        if (lst.size()\
    \ == 0) {\n            return true;\n        }\n        long prev = lst.get(0);\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n\
    \            if (curr < prev) {\n                return false;\n            }\n\
    \            prev = curr;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_2pf6c0n.java:54)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long last = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < last) {\n                return false;\n            }\n            last =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnp25o0qg.java:56)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ < lst.get(1);\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       if (curr == prev) {\n                return false;\n            }\n  \
    \          prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1c_dzdtu.java:64)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean sorted = true;\n        for\
    \ (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i\
    \ + 1)) {\n                sorted = false;\n            }\n        }\n       \
    \ return sorted;\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3w7w28m.java:48)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n          \
    \  return true;\n        }\n        else {\n            long prev = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                long curr\
    \ = lst.get(i);\n                if (curr < prev) {\n                    return\
    \ false;\n                }\n                else if (curr == prev) {\n      \
    \              return false;\n                }\n                else {\n    \
    \                prev = curr;\n                }\n            }\n            return\
    \ true;\n        }\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpssvug5vg.java:62)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        else {\n            long prev = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                long curr\
    \ = lst.get(i);\n                if (curr < prev) {\n                    return\
    \ false;\n                }\n                else {\n                    prev\
    \ = curr;\n                }\n            }\n            return true;\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzs7ewx4l.java:57)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxo4q_cd.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code goes here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeq08noim.java:34)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ < lst.get(1);\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n\
    \            if (lst.get(i) >= lst.get(i + 1)) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkx6rnxmo.java:58)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        for (int i = 0; i < lst.size() - 1;\
    \ i++) {\n            if (lst.get(i) >= lst.get(i + 1)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsolldg9w.java:49)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n          \
    \  return true;\n        }\n        Long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            Long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfi15uw7o.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9is2q3ao.java:35)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ <= lst.get(1);\n        }\n        for (int i = 0; i < lst.size() - 1; i++)\
    \ {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp51ldnbgv.java:56)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n    \
    \        if (current < last) {\n                return false;\n            }\n\
    \            last = current;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeot_j31t.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxo4q_cd.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long last = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < last) {\n                return false;\n            }\n            last =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnp25o0qg.java:56)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvg27jlai.java:34)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // YOUR CODE HERE\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwe9t125.java:34)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ < lst.get(1);\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n\
    \            if (lst.get(i) >= lst.get(i + 1)) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkx6rnxmo.java:58)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        Long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            Long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4rokhort.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ <= lst.get(1);\n        }\n        if (lst.size() == 3) {\n            return\
    \ lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2);\n        }\n        if\
    \ (lst.size() == 4) {\n            return lst.get(0) <= lst.get(1) && lst.get(1)\
    \ <= lst.get(2) && lst.get(2) <= lst.get(3);\n        }\n        if (lst.size()\
    \ == 5) {\n            return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2)\
    \ && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4);\n        }\n      \
    \  if (lst.size() == 6) {\n            return lst.get(0) <= lst.get(1) && lst.get(1)\
    \ <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4)\
    \ <= lst.get(5);\n        }\n        if (lst.size() == 7) {\n            return\
    \ lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3)\
    \ && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6);\n\
    \        }\n        if (lst.size() == 8) {\n            return lst.get(0) <= lst\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwaqv44z.java:55: error: ';' expected\n            return lst.get(0)\
    \ <= lst\n                                    ^\n/tmp/tmpkwaqv44z.java:57: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800340
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        else {\n            long last = lst.get(0);\n\
    \            int count = 1;\n            for (int i = 1; i < lst.size(); i++)\
    \ {\n                if (lst.get(i) < last) {\n                    return false;\n\
    \                }\n                else if (lst.get(i) == last) {\n         \
    \           count += 1;\n                    if (count > 1) {\n              \
    \          return false;\n                    }\n                }\n         \
    \       else {\n                    last = lst.get(i);\n                    count\
    \ = 1;\n                }\n            }\n            return true;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpihaqels9.java:66)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ <= lst.get(1);\n        }\n        long prev = lst.get(0);\n        long curr\
    \ = lst.get(1);\n        if (prev > curr) {\n            return false;\n     \
    \   }\n        for (int i = 2; i < lst.size(); i++) {\n            long next =\
    \ lst.get(i);\n            if (prev == curr && curr == next) {\n             \
    \   return false;\n            }\n            if (curr > next) {\n           \
    \     return false;\n            }\n            prev = curr;\n            curr\
    \ = next;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr <= prev) {\n                return false;\n            }\n    \
    \        prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8g0qdpd.java:55)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb10kjxm1.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() < 2) {\n           \
    \ return true;\n        }\n        long last = lst.get(0);\n        for (int i\
    \ = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n         \
    \   if (curr < last) {\n                return false;\n            }\n       \
    \     last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvh7duxdq.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxo4q_cd.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // YOUR CODE HERE\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwe9t125.java:34)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        for (int i = 0; i < lst.size() - 1;\
    \ i++) {\n            if (lst.get(i) >= lst.get(i + 1)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsolldg9w.java:49)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvg27jlai.java:34)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() <= 1) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb10kjxm1.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code goes here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeq08noim.java:34)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        throw new RuntimeException(\"Not yet\
    \ implemented\");\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not yet implemented\n\
    \tat Problem.isSorted(tmpuwhxcbfw.java:30)\n\tat Problem.main(tmpuwhxcbfw.java:33)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr <= prev) {\n                return false;\n            }\n    \
    \        prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8g0qdpd.java:55)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Write your code here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2tisbbn.java:34)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ <= lst.get(1);\n        }\n        long prev = lst.get(0);\n        long curr\
    \ = lst.get(1);\n        if (prev >= curr) {\n            return false;\n    \
    \    }\n        for (int i = 2; i < lst.size(); i++) {\n            prev = curr;\n\
    \            curr = lst.get(i);\n            if (prev >= curr) {\n           \
    \     return false;\n            }\n        }\n        return true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqat7_b5p.java:65)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() < 2) {\n           \
    \ return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n\
    \            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxaj1bcde.java:50)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < prev) {\n                return false;\n   \
    \         }\n            prev = i;\n        }\n        return true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpljmj95v7.java:52)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        if (lst.size() == 2) {\n            return lst.get(0)\
    \ <= lst.get(1);\n        }\n        long prev = lst.get(0);\n        long curr\
    \ = lst.get(1);\n        if (prev > curr) {\n            return false;\n     \
    \   }\n        for (int i = 2; i < lst.size(); i++) {\n            long next =\
    \ lst.get(i);\n            if (curr > next) {\n                return false;\n\
    \            }\n            if (curr == next) {\n                return false;\n\
    \            }\n            prev = curr;\n            curr = next;\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpryl1k48_.java:69)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        else {\n            long prev = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                long curr\
    \ = lst.get(i);\n                if (curr < prev) {\n                    return\
    \ false;\n                }\n                else {\n                    prev\
    \ = curr;\n                }\n            }\n            return true;\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzs7ewx4l.java:57)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean sorted = true;\n        long\
    \ prev = 0;\n        for (long num : lst) {\n            if (num < prev) {\n \
    \               sorted = false;\n                break;\n            }\n     \
    \       prev = num;\n        }\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbpk34pu5.java:51)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        else {\n            long prev = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                long curr\
    \ = lst.get(i);\n                if (curr < prev) {\n                    return\
    \ false;\n                }\n                else {\n                    prev\
    \ = curr;\n                }\n            }\n            return true;\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzs7ewx4l.java:57)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        else {\n            long prev = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                long curr\
    \ = lst.get(i);\n                if (curr < prev) {\n                    return\
    \ false;\n                }\n                prev = curr;\n            }\n   \
    \         return true;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjcztnja9.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        for (int i = 1; i\
    \ < lst.size(); i++) {\n            long curr = lst.get(i);\n            if (curr\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2mgepvp1.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n    \
    \        if (current < last) {\n                return false;\n            }\n\
    \            last = current;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeot_j31t.java:53)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgegvf6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvuqoqq_.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < prev) {\n                return false;\n            }\n     \
    \       prev = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu9ccsax.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        long last = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < last) {\n                return false;\n            }\n     \
    \       last = curr;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2y0l9iv.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 0) {\n          \
    \  return true;\n        }\n        if (lst.size() == 1) {\n            return\
    \ true;\n        }\n        long prev = lst.get(0);\n        long curr = lst.get(1);\n\
    \        if (prev > curr) {\n            return false;\n        }\n        for\
    \ (int i = 1; i < lst.size() - 1; i++) {\n            prev = lst.get(i);\n   \
    \         curr = lst.get(i + 1);\n            if (prev > curr) {\n           \
    \     return false;\n            }\n        }\n        return true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_rrf42ua.java:60)\n"
  stdout: ''
  timestamp: 1659800341
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        // Your code goes here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeq08noim.java:34)\n"
  stdout: ''
  timestamp: 1659800341
