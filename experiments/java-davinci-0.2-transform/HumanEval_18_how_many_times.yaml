name: HumanEval_18_how_many_times
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Find how many times a given substring can be found in the\
  \ original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"\
  a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n \
  \   // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long\
  \ howManyTimes(String string, String substring) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
  \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
completions: ['        return (long) string.chars().mapToObj(c -> (char) c).collect(Collectors.toList()).stream().map(c
    -> c.toString()).collect(Collectors.joining()).split(substring).length - 1;',
  "        long count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
    \ index)) != -1) {\n            index += substring.length();\n            count++;\n\
    \        }\n        return count;", "        long count = 0;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;", "        long count = 0;\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  '        return string.chars().mapToObj(c -> (char) c).collect(Collectors.joining()).split(substring).length
    - 1;', "        long count = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (string.charAt(i) == substring.charAt(0)) {\n       \
    \         if (string.substring(i, i + substring.length()).equals(substring)) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       return count;", "        long count = 0;\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (string.substring(i).startsWith(substring)) {\n              \
    \  count++;\n            }\n        }\n        return count;", '        return
    string.chars().mapToObj(x -> (char) x).collect(Collectors.toList()).stream().map(x
    -> x.toString()).collect(Collectors.joining()).split(substring).length - 1;',
  "        long count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
    \ index)) != -1) {\n            index += substring.length();\n            count++;\n\
    \        }\n        return count;", "        int count = 0;\n        int index\
    \ = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n \
    \           index++;\n            count++;\n        }\n        return count;",
  "        long count = 0;\n        int i = 0;\n        while (i < string.length())\
    \ {\n            if (string.substring(i).startsWith(substring)) {\n          \
    \      count++;\n                i += substring.length();\n            } else\
    \ {\n                i++;\n            }\n        }\n        return count;", " \
    \       long count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
    \ index)) != -1) {\n            index += substring.length();\n            count++;\n\
    \        }\n        return count;", "        long count = 0;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                if (string.length() - i >= substring.length()) {\n      \
    \              if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;", "        long count = 0;\n\
    \        int index = 0;\n        while ((index = string.indexOf(substring, index))\
    \ != -1) {\n            index += substring.length();\n            count++;\n \
    \       }\n        return count;", "        long count = 0;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (string.charAt(i) == substring.charAt(0)) {\n                if\
    \ (string.substring(i, i + substring.length()).equals(substring)) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;", "        long count = 0;\n        int index = 0;\n        while ((index\
    \ = string.indexOf(substring, index)) != -1) {\n            index += substring.length();\n\
    \            count++;\n        }\n        return count;", '        return 0;',
  "        long count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
    \ index)) != -1) {\n            index += substring.length();\n            count++;\n\
    \        }\n        return count;"]
stop_tokens:
- "\n    }\n"
