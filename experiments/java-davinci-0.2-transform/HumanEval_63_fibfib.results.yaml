language: java
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // BEGIN SOLUTION\n        if\
    \ (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 1;\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for\
    \ (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a\
    \ = b;\n            b = c;\n            c = d;\n        }\n        return c;\n\
    \        // END SOLUTION\n    }\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6bqo_0f.java:25)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        for (long i = 3; i <= n; i++)\
    \ {\n            long d = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = d;\n        }\n        return c;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // BEGIN SOLUTION\n        if\
    \ (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 1;\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for\
    \ (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a\
    \ = b;\n            b = c;\n            c = d;\n        }\n        return c;\n\
    \        // END SOLUTION\n    }\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        long d = 0;\n        for (long\
    \ i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return d;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        for (long i = 3; i <= n; i++)\
    \ {\n            long d = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = d;\n        }\n        return c;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // BEGIN SOLUTION\n        if\
    \ (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return\
    \ 1;\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for\
    \ (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a\
    \ = b;\n            b = c;\n            c = d;\n        }\n        return c;\n\
    \        // END SOLUTION\n    }\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        for (long i = 3; i <= n; i++)\
    \ {\n            long d = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = d;\n        }\n        return c;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        long d = 0;\n        for (long\
    \ i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return d;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        long d = 0;\n        for (long\
    \ i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return d;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        long d = 0;\n        for (long\
    \ i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return d;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long a = 0;\n        long b\
    \ = 0;\n        long c = 1;\n        long d = 0;\n        for (long i = 2; i <=\
    \ n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = d;\n        }\n        return d;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3i4r6gx2.java:37)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long a = 0, b = 0, c = 1;\n\
    \        for (int i = 0; i < n; i++) {\n            long d = a + b + c;\n    \
    \        a = b;\n            b = c;\n            c = d;\n        }\n        return\
    \ a;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        long d = 0;\n        for (long\
    \ i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return d;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Your code here.\n       \
    \ return 0;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpumh86opw.java:26)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0;\n    \
    \    if (n == 1) return 0;\n        if (n == 2) return 1;\n        long a = 0;\n\
    \        long b = 0;\n        long c = 1;\n        long d = 0;\n        for (long\
    \ i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return d;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        for (long i = 3; i <= n; i++)\
    \ {\n            long d = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = d;\n        }\n        return c;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0;\n    \
    \    if (n == 1) return 0;\n        if (n == 2) return 1;\n        long a = 0;\n\
    \        long b = 0;\n        long c = 1;\n        long d = 0;\n        for (long\
    \ i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return d;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long a = 0;\n        long b\
    \ = 0;\n        long c = 1;\n        long d = 0;\n        for (long i = 2; i <=\
    \ n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = d;\n        }\n        return d;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3i4r6gx2.java:37)\n"
  stdout: ''
