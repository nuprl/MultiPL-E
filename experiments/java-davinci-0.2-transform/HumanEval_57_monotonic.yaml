name: HumanEval_57_monotonic
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return True is list elements are monotonically increasing\
  \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)20l, (long)4l, (long)10l))))\n    // (false)\n    // >>> monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n \
  \   // (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n\
  \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
  \ (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
  \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
completions: ["        if (l.size() < 2) {\n            return true;\n        }\n\
    \        boolean increasing = l.get(0) < l.get(1);\n        for (int i = 1; i\
    \ < l.size() - 1; i++) {\n            if (increasing && l.get(i) > l.get(i + 1))\
    \ {\n                return false;\n            }\n            if (!increasing\
    \ && l.get(i) < l.get(i + 1)) {\n                return false;\n            }\n\
    \        }\n        return true;", "        if (l.size() == 0) return true;\n\
    \        long prev = l.get(0);\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   long curr = l.get(i);\n            if (curr > prev) {\n                decreasing\
    \ = false;\n            } else if (curr < prev) {\n                increasing\
    \ = false;\n            }\n            prev = curr;\n        }\n        return\
    \ increasing || decreasing;", '        return l.stream().reduce((a, b) -> a *
    b).get() >= 0;', "        if (l.size() < 2) {\n            return true;\n    \
    \    }\n        long prev = l.get(0);\n        boolean increasing = true;\n  \
    \      boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr < prev) {\n     \
    \           increasing = false;\n            }\n            if (curr > prev) {\n\
    \                decreasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <\
    \ 2) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;",
  "        // Your code here\n        return false;", "        if (l.size() == 0)\
    \ {\n            return true;\n        }\n        long prev = l.get(0);\n    \
    \    boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n      \
    \      if (curr > prev) {\n                decreasing = false;\n            }\n\
    \            if (curr < prev) {\n                increasing = false;\n       \
    \     }\n            prev = curr;\n        }\n        return increasing || decreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n  \
    \              increasing = false;\n            }\n            if (l.get(i) <\
    \ l.get(i + 1)) {\n                decreasing = false;\n            }\n      \
    \  }\n        return increasing || decreasing;", "        boolean increasing =\
    \ true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size()\
    \ - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n      \
    \          decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", '        return l.stream().reduce((a, b) -> b - a).get() >=
    0;', "        if (l.size() <= 1) {\n            return true;\n        }\n    \
    \    boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;", "        if (l.size() < 2)\
    \ {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        // Your code here.\n        return false;", "        if (l.size() < 2)\
    \ {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 2; i < l.size(); i++) {\n            if (increasing)\
    \ {\n                if (l.get(i - 1) > l.get(i)) {\n                    return\
    \ false;\n                }\n            } else {\n                if (l.get(i\
    \ - 1) < l.get(i)) {\n                    return false;\n                }\n \
    \           }\n        }\n        return true;", "        if (l.size() == 0) {\n\
    \            return true;\n        }\n        long prev = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            long curr = l.get(i);\n            if (curr\
    \ > prev) {\n                decreasing = false;\n            }\n            if\
    \ (curr < prev) {\n                increasing = false;\n            }\n      \
    \      prev = curr;\n        }\n        return increasing || decreasing;", " \
    \       if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;", "        if (l.size() == 0) {\n            return true;\n\
    \        }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr > prev) {\n     \
    \           decreasing = false;\n            }\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <\
    \ 2) {\n            return true;\n        }\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing =\
    \ false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n        \
    \        decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;"]
stop_tokens:
- "\n    }\n"
