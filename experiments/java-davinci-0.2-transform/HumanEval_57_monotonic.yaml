name: HumanEval_57_monotonic
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return True is list elements are monotonically increasing\
  \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)20l, (long)4l, (long)10l))))\n    // (false)\n    // >>> monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n \
  \   // (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n\
  \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
  \ (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
  \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
completions: ["        if (l.size() < 2) {\n            return true;\n        }\n\
    \        boolean increasing = l.get(0) < l.get(1);\n        for (int i = 1; i\
    \ < l.size() - 1; i++) {\n            if (increasing && l.get(i) > l.get(i + 1))\
    \ {\n                return false;\n            }\n            if (!increasing\
    \ && l.get(i) < l.get(i + 1)) {\n                return false;\n            }\n\
    \        }\n        return true;", "        if (l.size() == 0) return true;\n\
    \        long prev = l.get(0);\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   long curr = l.get(i);\n            if (curr > prev) {\n                decreasing\
    \ = false;\n            } else if (curr < prev) {\n                increasing\
    \ = false;\n            }\n            prev = curr;\n        }\n        return\
    \ increasing || decreasing;", '        return l.stream().reduce((a, b) -> a *
    b).get() >= 0;', "        if (l.size() < 2) {\n            return true;\n    \
    \    }\n        long prev = l.get(0);\n        boolean increasing = true;\n  \
    \      boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr < prev) {\n     \
    \           increasing = false;\n            }\n            if (curr > prev) {\n\
    \                decreasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <\
    \ 2) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;",
  "        // Your code here\n        return false;", "        if (l.size() == 0)\
    \ {\n            return true;\n        }\n        long prev = l.get(0);\n    \
    \    boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n      \
    \      if (curr > prev) {\n                decreasing = false;\n            }\n\
    \            if (curr < prev) {\n                increasing = false;\n       \
    \     }\n            prev = curr;\n        }\n        return increasing || decreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n  \
    \              increasing = false;\n            }\n            if (l.get(i) <\
    \ l.get(i + 1)) {\n                decreasing = false;\n            }\n      \
    \  }\n        return increasing || decreasing;", "        boolean increasing =\
    \ true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size()\
    \ - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n      \
    \          decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", '        return l.stream().reduce((a, b) -> b - a).get() >=
    0;', "        if (l.size() <= 1) {\n            return true;\n        }\n    \
    \    boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;", "        if (l.size() < 2)\
    \ {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        // Your code here.\n        return false;", "        if (l.size() < 2)\
    \ {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 2; i < l.size(); i++) {\n            if (increasing)\
    \ {\n                if (l.get(i - 1) > l.get(i)) {\n                    return\
    \ false;\n                }\n            } else {\n                if (l.get(i\
    \ - 1) < l.get(i)) {\n                    return false;\n                }\n \
    \           }\n        }\n        return true;", "        if (l.size() == 0) {\n\
    \            return true;\n        }\n        long prev = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            long curr = l.get(i);\n            if (curr\
    \ > prev) {\n                decreasing = false;\n            }\n            if\
    \ (curr < prev) {\n                increasing = false;\n            }\n      \
    \      prev = curr;\n        }\n        return increasing || decreasing;", " \
    \       if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;", "        if (l.size() == 0) {\n            return true;\n\
    \        }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr > prev) {\n     \
    \           decreasing = false;\n            }\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <\
    \ 2) {\n            return true;\n        }\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing =\
    \ false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n        \
    \        decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() < 2) {\n            return true;\n  \
    \      }\n        boolean increasing = l.get(0) < l.get(1);\n        for (int\
    \ i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n           \
    \     if (l.get(i) > l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            } else {\n                if (l.get(i) < l.get(i +\
    \ 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;", "        if (l.size() <= 1) {\n           \
    \ return true;\n        }\n        long prev = l.get(0);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long curr = l.get(i);\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            if (curr > prev)\
    \ {\n                decreasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size()\
    \ - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n      \
    \          decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() <= 1) {\n            return true;\n \
    \       }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr > prev) {\n                if (!increasing) {\n        \
    \            return false;\n                }\n            } else if (curr < prev)\
    \ {\n                if (increasing) {\n                    increasing = false;\n\
    \                }\n            }\n            prev = curr;\n        }\n     \
    \   return true;", '        return l.stream().reduce((a, b) -> a == b ? a : a
    * b).get() >= 0;', "        if (l.size() == 0) {\n            return true;\n \
    \       }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr > prev) {\n     \
    \           decreasing = false;\n            }\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <=\
    \ 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        if (l.size() == 0) {\n            return true;\n        }\n        long\
    \ prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() <= 1) {\n            return true;\n \
    \       }\n        boolean increasing = l.get(0) < l.get(1);\n        for (int\
    \ i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n           \
    \     if (l.get(i) > l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            } else {\n                if (l.get(i) < l.get(i +\
    \ 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;", "        if (l.size() == 0) {\n           \
    \ return true;\n        }\n        long prev = l.get(0);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long curr = l.get(i);\n            if (curr > prev) {\n\
    \                decreasing = false;\n            }\n            if (curr < prev)\
    \ {\n                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <=\
    \ 1) {\n            return true;\n        }\n        long prev = l.get(0);\n \
    \       boolean increasing = true;\n        boolean decreasing = true;\n     \
    \   for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr < prev) {\n                increasing = false;\n       \
    \     }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() < 2) {\n            return true;\n  \
    \      }\n        boolean inc = l.get(0) < l.get(1);\n        for (int i = 1;\
    \ i < l.size() - 1; i++) {\n            if (inc && l.get(i) > l.get(i + 1)) {\n\
    \                return false;\n            }\n            if (!inc && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;", '        return l.stream().reduce((a, b) -> a.equals(b)
    ? a : null) != null;', "        if (l.size() <= 1) {\n            return true;\n\
    \        }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr > prev) {\n     \
    \           decreasing = false;\n            }\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        return l.stream().reduce((x,\
    \ y) -> {\n            if (x > y) {\n                return (long) -1l;\n    \
    \        } else if (x < y) {\n                return (long) 1l;\n            }\
    \ else {\n                return (long) 0l;\n            }\n        }).get() !=\
    \ (long) 0l;", "        if (l.size() == 0) {\n            return true;\n     \
    \   }\n        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i\
    \ - 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        long prev = l.get(0);\n\
    \        boolean increasing = true;\n        boolean decreasing = true;\n    \
    \    for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr < prev) {\n                increasing = false;\n       \
    \     }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() == 0) {\n            return true;\n \
    \       }\n        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i\
    \ - 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        if (l.size()\
    \ == 0) {\n            return true;\n        }\n        long prev = l.get(0);\n\
    \        boolean increasing = true;\n        boolean decreasing = true;\n    \
    \    for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr > prev) {\n                decreasing = false;\n       \
    \     }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        return l.stream().reduce((acc, x) -> {\n         \
    \   if (acc == null) {\n                return x;\n            } else {\n    \
    \            if (acc > x) {\n                    return acc - x;\n           \
    \     } else {\n                    return acc + x;\n                }\n     \
    \       }\n        }).get() >= 0;", "        if (l.size() == 0) {\n          \
    \  return true;\n        }\n        long prev = l.get(0);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long curr = l.get(i);\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            if (curr > prev)\
    \ {\n                decreasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <=\
    \ 1) {\n            return true;\n        }\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing =\
    \ false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n        \
    \        decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;", '        return l.stream().reduce((a,
    b) -> a.equals(b) ? a : null) != null;', "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1;\
    \ i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n      \
    \          decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() <= 1) {\n            return true;\n \
    \       }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr < prev) {\n     \
    \           increasing = false;\n            }\n            if (curr > prev) {\n\
    \                decreasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() ==\
    \ 0) {\n            return true;\n        }\n        long first = l.get(0);\n\
    \        long last = l.get(l.size() - 1);\n        if (first < last) {\n     \
    \       for (int i = 1; i < l.size(); i++) {\n                if (l.get(i) < l.get(i\
    \ - 1)) {\n                    return false;\n                }\n            }\n\
    \        } else {\n            for (int i = 1; i < l.size(); i++) {\n        \
    \        if (l.get(i) > l.get(i - 1)) {\n                    return false;\n \
    \               }\n            }\n        }\n        return true;", "        if\
    \ (l.size() <= 1) {\n            return true;\n        }\n        long prev =\
    \ l.get(0);\n        boolean increasing = true;\n        boolean decreasing =\
    \ true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr =\
    \ l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;",
  "        if (l.size() == 0) {\n            return true;\n        }\n        long\
    \ prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() < 2) {\n            return true;\n        }\n        boolean increasing\
    \ = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n \
    \           if (increasing && l.get(i) > l.get(i + 1)) {\n                return\
    \ false;\n            }\n            if (!increasing && l.get(i) < l.get(i + 1))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        long\
    \ prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() <= 1) {\n            return true;\n \
    \       }\n        boolean increasing = l.get(0) < l.get(1);\n        for (int\
    \ i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n           \
    \     if (l.get(i) > l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            } else {\n                if (l.get(i) < l.get(i +\
    \ 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;", "        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        long prev = l.get(0);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long curr = l.get(i);\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            if (curr > prev)\
    \ {\n                decreasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <=\
    \ 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;", "        // Your\
    \ code here\n        return false;", "        if (l.size() == 0) {\n         \
    \   return true;\n        }\n        long prev = l.get(0);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long curr = l.get(i);\n            if (curr > prev) {\n\
    \                decreasing = false;\n            }\n            if (curr < prev)\
    \ {\n                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        return l.stream().reduce((a,\
    \ b) -> a <= b ? b : a).get() == l.get(l.size() - 1) ||\n               l.stream().reduce((a,\
    \ b) -> a >= b ? b : a).get() == l.get(l.size() - 1);", "        if (l.size()\
    \ == 0) {\n            return true;\n        }\n        long prev = l.get(0);\n\
    \        boolean increasing = true;\n        boolean decreasing = true;\n    \
    \    for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr < prev) {\n                increasing = false;\n       \
    \     }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;", "        if (l.size() == 0) {\n     \
    \       return true;\n        }\n        long prev = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            long curr = l.get(i);\n            if (curr\
    \ > prev) {\n                decreasing = false;\n            }\n            if\
    \ (curr < prev) {\n                increasing = false;\n            }\n      \
    \      prev = curr;\n        }\n        return increasing || decreasing;", " \
    \       if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            increasing = increasing && (l.get(i) >=\
    \ l.get(i - 1));\n            decreasing = decreasing && (l.get(i) <= l.get(i\
    \ - 1));\n        }\n        return increasing || decreasing;", '        return
    l.stream().reduce((a, b) -> a.equals(b) ? a : null) != null;', "        if (l.size()\
    \ < 2) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        if (l.size() == 0) {\n            return true;\n        }\n        long\
    \ prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() <= 1) {\n            return true;\n \
    \       }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr > prev) {\n     \
    \           decreasing = false;\n            }\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", '        return true;',
  '        return l.stream().reduce((a, b) -> a <= b ? b : -1l).get() != -1l;', " \
    \       if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i - 1) > l.get(i)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i - 1) <\
    \ l.get(i)) {\n                decreasing = false;\n            }\n        }\n\
    \        return increasing || decreasing;", "        if (l.size() <= 1) {\n  \
    \          return true;\n        }\n        boolean increasing = true;\n     \
    \   boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n\
    \            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n\
    \            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;",
  "        return l.stream().reduce((a, b) -> a <= b ? b : -1l).get() != -1l ||\n\
    \            l.stream().reduce((a, b) -> a >= b ? b : -1l).get() != -1l;", " \
    \       boolean increasing = true;\n        boolean decreasing = true;\n     \
    \   for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", '        return l.stream().reduce((a,
    b) -> a.equals(b) ? a : null) != null;', "        if (l.size() == 0) {\n     \
    \       return true;\n        }\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n    \
    \        }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;", '        return false;', "        return l.stream().reduce((x,\
    \ y) -> x <= y ? y : null) != null ||\n               l.stream().reduce((x, y)\
    \ -> x >= y ? y : null) != null;", '        return l.stream().reduce((a, b) ->
    a.equals(b) ? a : null) != null;', "        boolean increasing = true;\n     \
    \   boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++)\
    \ {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing =\
    \ false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n        \
    \        decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() == 0) {\n            return true;\n \
    \       }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (long i : l) {\n            if\
    \ (i < prev) {\n                increasing = false;\n            }\n         \
    \   if (i > prev) {\n                decreasing = false;\n            }\n    \
    \        prev = i;\n        }\n        return increasing || decreasing;", "  \
    \      int i = 0;\n        while (i < l.size() - 1) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                break;\n            }\n            i = i\
    \ + 1;\n        }\n        if (i == l.size() - 1) {\n            return true;\n\
    \        }\n        i = 0;\n        while (i < l.size() - 1) {\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                break;\n            }\n       \
    \     i = i + 1;\n        }\n        if (i == l.size() - 1) {\n            return\
    \ true;\n        }\n        return false;", "        if (l.size() <= 1) {\n  \
    \          return true;\n        }\n        boolean increasing = true;\n     \
    \   boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n\
    \            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n\
    \            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.size() == 0) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;", "        if (l.size() <= 1) {\n     \
    \       return true;\n        }\n        long prev = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            long curr = l.get(i);\n            if (curr\
    \ < prev) {\n                increasing = false;\n            }\n            if\
    \ (curr > prev) {\n                decreasing = false;\n            }\n      \
    \      prev = curr;\n        }\n        return increasing || decreasing;", " \
    \       boolean increasing = true;\n        boolean decreasing = true;\n     \
    \   for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing =\
    \ false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n        \
    \        increasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() <= 1) {\n            return true;\n        }\n        long last\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > last) {\n                decreasing = false;\n\
    \            }\n            if (curr < last) {\n                increasing = false;\n\
    \            }\n            last = curr;\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;", "        return l.stream().reduce((a,\
    \ b) -> {\n            if (a == null) {\n                return b;\n         \
    \   } else if (b == null) {\n                return a;\n            } else {\n\
    \                return (a > b) ? (a - b) : (b - a);\n            }\n        }).get()\
    \ == 0;", "        if (l.size() < 2) {\n            return true;\n        }\n\
    \        boolean increasing = l.get(0) < l.get(1);\n        for (int i = 1; i\
    \ < l.size() - 1; i++) {\n            if (increasing && l.get(i) > l.get(i + 1))\
    \ {\n                return false;\n            }\n            if (!increasing\
    \ && l.get(i) < l.get(i + 1)) {\n                return false;\n            }\n\
    \        }\n        return true;", '        return l.stream().reduce((a, b) ->
    a <= b ? b : null) != null || l.stream().reduce((a, b) -> a >= b ? b : null) !=
    null;', '        return l.stream().reduce((a, b) -> a.equals(b) ? a : b + 1).get()
    == l.get(l.size() - 1);', "        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n     \
    \       if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n\
    \            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.size() == 0) {\n            return true;\n        }\n        long\
    \ last = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ > last) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) < last) {\n                increasing = false;\n            }\n  \
    \          last = l.get(i);\n        }\n        return increasing || decreasing;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;", "        if (l.size() < 2) {\n            return true;\n\
    \        }\n        boolean increasing = l.get(0) < l.get(1);\n        for (int\
    \ i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n           \
    \     if (l.get(i) > l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            } else {\n                if (l.get(i) < l.get(i +\
    \ 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;", "        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ < l.get(i - 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", '        return
    l.stream().reduce((x, y) -> x.longValue() == y.longValue() ? x : null).isPresent();',
  "        if (l.size() == 0) {\n            return true;\n        }\n        long\
    \ prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() == 0) {\n            return true;\n \
    \       }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr > prev) {\n     \
    \           decreasing = false;\n            }\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() ==\
    \ 0) {\n            return true;\n        }\n        long prev = l.get(0);\n \
    \       boolean increasing = true;\n        boolean decreasing = true;\n     \
    \   for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr < prev) {\n                increasing = false;\n       \
    \     }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() == 0) {\n            return true;\n \
    \       }\n        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i\
    \ - 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;", '        return
    l.stream().reduce((a, b) -> a == null ? b : (a > b ? -1 : (a < b ? 1 : 0))).get()
    == 0;', "        if (l.size() < 2) {\n            return true;\n        }\n  \
    \      boolean increasing = l.get(0) < l.get(1);\n        for (int i = 1; i <\
    \ l.size() - 1; i++) {\n            if (increasing) {\n                if (l.get(i)\
    \ > l.get(i + 1)) {\n                    return false;\n                }\n  \
    \          } else {\n                if (l.get(i) < l.get(i + 1)) {\n        \
    \            return false;\n                }\n            }\n        }\n    \
    \    return true;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() < 2) {\n            return true;\n        }\n        boolean increasing\
    \ = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n \
    \           if (increasing && l.get(i) > l.get(i + 1)) {\n                return\
    \ false;\n            }\n            if (!increasing && l.get(i) < l.get(i + 1))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i - 1) > l.get(i)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i - 1) <\
    \ l.get(i)) {\n                decreasing = false;\n            }\n        }\n\
    \        return increasing || decreasing;", "        if (l.size() == 0) {\n  \
    \          return true;\n        }\n        long last = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            long current = l.get(i);\n            if\
    \ (current > last) {\n                decreasing = false;\n            }\n   \
    \         if (current < last) {\n                increasing = false;\n       \
    \     }\n            last = current;\n        }\n        return increasing ||\
    \ decreasing;", "        if (l.size() == 0) {\n            return true;\n    \
    \    }\n        if (l.size() == 1) {\n            return true;\n        }\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i -\
    \ 1)) {\n                decreasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i - 1)) {\n                increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;", "        if (l.size() <= 1)\
    \ {\n            return true;\n        }\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i - 1) > l.get(i)) {\n                increasing =\
    \ false;\n            }\n            if (l.get(i - 1) < l.get(i)) {\n        \
    \        decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() == 0) {\n            return true;\n \
    \       }\n        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i\
    \ - 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        if (l.size()\
    \ < 2) {\n            return true;\n        }\n        long prev = l.get(0);\n\
    \        boolean increasing = true;\n        boolean decreasing = true;\n    \
    \    for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr < prev) {\n                increasing = false;\n       \
    \     }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        return l.stream().reduce((x, y) -> x <= y ? y : null)\
    \ != null ||\n            l.stream().reduce((x, y) -> x >= y ? y : null) != null;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        long\
    \ prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() <= 1) {\n            return true;\n \
    \       }\n        boolean increasing = l.get(0) < l.get(1);\n        for (int\
    \ i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n           \
    \     if (l.get(i) > l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            } else {\n                if (l.get(i) < l.get(i +\
    \ 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;", "        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n      \
    \  for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n \
    \               if (l.get(i) > l.get(i + 1)) {\n                    return false;\n\
    \                }\n            } else {\n                if (l.get(i) < l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;", "        if (l.size() == 0) {\n           \
    \ return true;\n        }\n        long prev = l.get(0);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long curr = l.get(i);\n            if (curr > prev) {\n\
    \                decreasing = false;\n            }\n            if (curr < prev)\
    \ {\n                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <=\
    \ 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;", "        if (l.size()\
    \ < 2) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;", "        if (l.size()\
    \ == 0) {\n            return true;\n        }\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            increasing = increasing && (l.get(i) >= l.get(i - 1));\n    \
    \        decreasing = decreasing && (l.get(i) <= l.get(i - 1));\n        }\n \
    \       return increasing || decreasing;", "        if (l.size() <= 1) {\n   \
    \         return true;\n        }\n        long prev = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            long curr = l.get(i);\n            if (curr\
    \ > prev) {\n                decreasing = false;\n            }\n            if\
    \ (curr < prev) {\n                increasing = false;\n            }\n      \
    \      prev = curr;\n        }\n        return increasing || decreasing;", " \
    \       if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;",
  "        if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;", "        if (l.size() <= 1) {\n     \
    \       return true;\n        }\n        long prev = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            long curr = l.get(i);\n            if (curr\
    \ > prev) {\n                decreasing = false;\n            }\n            if\
    \ (curr < prev) {\n                increasing = false;\n            }\n      \
    \      prev = curr;\n        }\n        return increasing || decreasing;", " \
    \       if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        if (l.size()\
    \ == 0) {\n            return true;\n        }\n        long prev = l.get(0);\n\
    \        boolean increasing = true;\n        boolean decreasing = true;\n    \
    \    for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr > prev) {\n                decreasing = false;\n       \
    \     }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() <= 1) {\n            return true;\n \
    \       }\n        boolean increasing = l.get(0) < l.get(1);\n        for (int\
    \ i = 1; i < l.size() - 1; i++) {\n            if (increasing && l.get(i) > l.get(i\
    \ + 1)) {\n                return false;\n            }\n            if (!increasing\
    \ && l.get(i) < l.get(i + 1)) {\n                return false;\n            }\n\
    \        }\n        return true;", "        boolean increasing = true;\n     \
    \   boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++)\
    \ {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing =\
    \ false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n        \
    \        decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        long last = l.get(0);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long curr = l.get(i);\n            if (curr > last) {\n\
    \                decreasing = false;\n            } else if (curr < last) {\n\
    \                increasing = false;\n            }\n            last = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <\
    \ 2) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        if (l.size() == 0) {\n            return true;\n        }\n        long\
    \ prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ < prev) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) > prev) {\n                decreasing = false;\n            }\n  \
    \          prev = l.get(i);\n        }\n        return increasing || decreasing;",
  "        if (l.size() == 0) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;", "        if (l.size() <= 1) {\n     \
    \       return true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n\
    \        for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing\
    \ && l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n\
    \            if (!increasing && l.get(i) < l.get(i + 1)) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size()\
    \ - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n      \
    \          decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() == 0) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;", "        if (l.size() == 0) {\n     \
    \       return true;\n        }\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n    \
    \        }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() <= 1) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() <= 1) {\n            return true;\n \
    \       }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr > prev) {\n     \
    \           decreasing = false;\n            }\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <=\
    \ 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;", "        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        if (l.size() == 0) {\n            return true;\n        }\n        long\
    \ prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() == 0) {\n            return true;\n \
    \       }\n        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        return l.stream().reduce((a,\
    \ b) -> {\n            if (a == null) {\n                return b;\n         \
    \   } else if (b == null) {\n                return a;\n            } else if\
    \ (a < b) {\n                return (long)1l;\n            } else if (a > b) {\n\
    \                return (long)-1l;\n            } else {\n                return\
    \ (long)0l;\n            }\n        }).get() != (long)0l;", "        return l.stream().reduce((a,\
    \ b) -> {\n            if (a > b) {\n                return b - a;\n         \
    \   } else {\n                return a - b;\n            }\n        }).get() >=\
    \ 0;", "        if (l.size() == 0) {\n            return true;\n        }\n  \
    \      long prev = l.get(0);\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   long curr = l.get(i);\n            if (curr > prev) {\n                decreasing\
    \ = false;\n            }\n            if (curr < prev) {\n                increasing\
    \ = false;\n            }\n            prev = curr;\n        }\n        return\
    \ increasing || decreasing;", "        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n     \
    \       if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n\
    \            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        long\
    \ last = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ > last) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) < last) {\n                increasing = false;\n            }\n  \
    \          last = l.get(i);\n        }\n        return increasing || decreasing;",
  '        return l.stream().reduce((a, b) -> a <= b ? b : (long)0).get() != 0 ||
    l.stream().reduce((a, b) -> a >= b ? b : (long)0).get() != 0;', "        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;", "        if (l.size()\
    \ == 0) {\n            return true;\n        }\n        long last = l.get(0);\n\
    \        boolean increasing = true;\n        boolean decreasing = true;\n    \
    \    for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr < last) {\n                increasing = false;\n       \
    \     }\n            if (curr > last) {\n                decreasing = false;\n\
    \            }\n            last = curr;\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            increasing = increasing && (l.get(i) >=\
    \ l.get(i - 1));\n            decreasing = decreasing && (l.get(i) <= l.get(i\
    \ - 1));\n        }\n        return increasing || decreasing;", "        if (l.size()\
    \ == 0) {\n            return true;\n        }\n        long prev = l.get(0);\n\
    \        boolean increasing = true;\n        boolean decreasing = true;\n    \
    \    for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr < prev) {\n                increasing = false;\n       \
    \     }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                increasing = false;\n            }\n    \
    \        if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;", "      \
    \  if (l.size() < 2) {\n            return true;\n        }\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing\
    \ = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n      \
    \          decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() == 0) {\n            return true;\n \
    \       }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr < prev) {\n     \
    \           increasing = false;\n            }\n            if (curr > prev) {\n\
    \                decreasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <\
    \ 2) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;", "        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n  \
    \              increasing = false;\n            }\n            if (l.get(i) <\
    \ l.get(i + 1)) {\n                decreasing = false;\n            }\n      \
    \  }\n        return increasing || decreasing;", "        if (l.size() < 2) {\n\
    \            return true;\n        }\n        long diff = l.get(1) - l.get(0);\n\
    \        for (int i = 1; i < l.size() - 1; i++) {\n            long newDiff =\
    \ l.get(i + 1) - l.get(i);\n            if (newDiff * diff < 0) {\n          \
    \      return false;\n            }\n        }\n        return true;", "     \
    \   if (l.size() == 0) {\n            return true;\n        }\n        long prev\
    \ = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long curr\
    \ = l.get(i);\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", '        return l.stream().reduce((a, b) -> a.longValue() ==
    b.longValue() ? a : null).isPresent();', "        if (l.size() <= 1) {\n     \
    \       return true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n\
    \        for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing)\
    \ {\n                if (l.get(i) > l.get(i + 1)) {\n                    return\
    \ false;\n                }\n            } else {\n                if (l.get(i)\
    \ < l.get(i + 1)) {\n                    return false;\n                }\n  \
    \          }\n        }\n        return true;", "        boolean increasing =\
    \ true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size()\
    \ - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n      \
    \          decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        // Your code here\n        return false;", "     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;", "        if (l.size() <= 1)\
    \ {\n            return true;\n        }\n        boolean increasing = false;\n\
    \        boolean decreasing = false;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) > l.get(i - 1)) {\n                increasing =\
    \ true;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n         \
    \       decreasing = true;\n            }\n        }\n        return increasing\
    \ ^ decreasing;", "        if (l.size() <= 1) {\n            return true;\n  \
    \      }\n        boolean increasing = l.get(0) < l.get(1);\n        for (int\
    \ i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n           \
    \     if (l.get(i) > l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            } else {\n                if (l.get(i) < l.get(i +\
    \ 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;", "        if (l.size() <= 1) {\n           \
    \ return true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n\
    \        for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing)\
    \ {\n                if (l.get(i) > l.get(i + 1)) {\n                    return\
    \ false;\n                }\n            } else {\n                if (l.get(i)\
    \ < l.get(i + 1)) {\n                    return false;\n                }\n  \
    \          }\n        }\n        return true;", "        if (l.size() < 2) {\n\
    \            return true;\n        }\n        boolean increasing = l.get(0) <\
    \ l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n  \
    \              increasing = false;\n            }\n            if (l.get(i) <\
    \ l.get(i + 1)) {\n                decreasing = false;\n            }\n      \
    \  }\n        return increasing || decreasing;", "        if (l.size() <= 1) {\n\
    \            return true;\n        }\n        long prev = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            long curr = l.get(i);\n            if (curr\
    \ > prev) {\n                decreasing = false;\n            }\n            if\
    \ (curr < prev) {\n                increasing = false;\n            }\n      \
    \      prev = curr;\n        }\n        return increasing || decreasing;", " \
    \       if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;", "        if (l.size() <= 1) {\n     \
    \       return true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n\
    \        for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing\
    \ && l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n\
    \            if (!increasing && l.get(i) < l.get(i + 1)) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;", "        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        long prev = l.get(0);\n\
    \        boolean increasing = true;\n        boolean decreasing = true;\n    \
    \    for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            if (curr < prev) {\n                increasing = false;\n       \
    \     }\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;", "        if (l.size() <= 1) {\n            return true;\n \
    \       }\n        long prev = l.get(0);\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (curr > prev) {\n     \
    \           decreasing = false;\n            }\n            if (curr < prev) {\n\
    \                increasing = false;\n            }\n            prev = curr;\n\
    \        }\n        return increasing || decreasing;", "        if (l.size() <\
    \ 2) {\n            return true;\n        }\n        boolean increasing = l.get(0)\
    \ < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          increasing = false;\n            }\n            if (l.get(i) > l.get(i\
    \ - 1)) {\n                decreasing = false;\n            }\n        }\n   \
    \     return increasing || decreasing;", "        if (l.size() == 0) {\n     \
    \       return true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n\
    \        for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing)\
    \ {\n                if (l.get(i) > l.get(i + 1)) {\n                    return\
    \ false;\n                }\n            } else {\n                if (l.get(i)\
    \ < l.get(i + 1)) {\n                    return false;\n                }\n  \
    \          }\n        }\n        return true;", "        if (l.size() < 2) {\n\
    \            return true;\n        }\n        boolean increasing = l.get(0) <\
    \ l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing && l.get(i) > l.get(i + 1)) {\n                return false;\n \
    \           }\n            if (!increasing && l.get(i) < l.get(i + 1)) {\n   \
    \             return false;\n            }\n        }\n        return true;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;"]
stop_tokens:
- "\n    }\n"
