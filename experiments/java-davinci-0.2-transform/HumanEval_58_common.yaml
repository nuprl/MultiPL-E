name: HumanEval_58_common
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return sorted unique common elements for two lists.\n  \
  \  // >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l,\
  \ (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))\n    // (new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))\n    // >>> common((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)3l)))\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long>\
  \ l2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l,\
  \ (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l,\
  \ (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n\
  \    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l,\
  \ (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long e : l1) {\n            if (l2.contains(e)) {\n                result.add(e);\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long l :\
    \ l1) {\n            if (l2.contains(l)) {\n                result.add(l);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long l :\
    \ l1) {\n            if (l2.contains(l)) {\n                result.add(l);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Collections.sort(l1);\n\
    \        Collections.sort(l2);\n        int i = 0;\n        int j = 0;\n     \
    \   while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i).equals(l2.get(j)))\
    \ {\n                result.add(l1.get(i));\n                i++;\n          \
    \      j++;\n            } else if (l1.get(i) < l2.get(j)) {\n               \
    \ i++;\n            } else {\n                j++;\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> l3 = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    l3.add(l);\n            }\n        }\n        Collections.sort(l3);\n   \
    \     return l3;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (Long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    res.add(i);\n            }\n        }\n        Collections.sort(res);\n \
    \       return res;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    res.add(l);\n            }\n        }\n        Collections.sort(res);\n \
    \       return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    result.add(l);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> l3 = new ArrayList<Long>();\n\
    \        for (Long x : l1) {\n            if (l2.contains(x)) {\n            \
    \    l3.add(x);\n            }\n        }\n        Collections.sort(l3);\n   \
    \     return l3;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : l1) {\n\
    \            set.add(i);\n        }\n        for (Long i : l2) {\n           \
    \ if (set.contains(i)) {\n                result.add(i);\n            }\n    \
    \    }\n        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ l3 = new ArrayList<Long>();\n        for (Long i : l1) {\n            if (l2.contains(i))\
    \ {\n                l3.add(i);\n            }\n        }\n        Collections.sort(l3);\n\
    \        return l3;", "        ArrayList<Long> l = new ArrayList<Long>();\n  \
    \      for (Long i : l1) {\n            if (l2.contains(i)) {\n              \
    \  l.add(i);\n            }\n        }\n        Collections.sort(l);\n       \
    \ return l;", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   for (Long l : l1) {\n            if (l2.contains(l)) {\n                result.add(l);\n\
    \            }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Long> l3 = new ArrayList<Long>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                l3.add(i);\n         \
    \   }\n        }\n        Collections.sort(l3);\n        return l3;", "      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i : l1)\
    \ {\n            if (l2.contains(i)) {\n                result.add(i);\n     \
    \       }\n        }\n        Collections.sort(result);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long i :\
    \ l1) {\n            if (l2.contains(i)) {\n                result.add(i);\n \
    \           }\n        }\n        Collections.sort(result);\n        return result;"]
stop_tokens:
- "\n    }\n"
