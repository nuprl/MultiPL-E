name: HumanEval_4_mean_absolute_deviation
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
  \ is the average absolute difference between each\n    // element and a centerpoint\
  \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\n\
  \    // (1.0f)\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers)\
  \ {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\
  \ == (1.0f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))) == (1.2f));\n    }\n\n\
  }\n"
completions: ["        float mean = mean(numbers);\n        float sum = 0;\n     \
    \   for (float number : numbers) {\n            sum += Math.abs(number - mean);\n\
    \        }\n        return sum / numbers.size();", "        float mean = mean(numbers);\n\
    \        float sum = 0;\n        for (float number : numbers) {\n            sum\
    \ += Math.abs(number - mean);\n        }\n        return sum / numbers.size();",
  "        float mean = 0.0f;\n        for (float number : numbers) {\n          \
    \  mean += number;\n        }\n        mean /= numbers.size();\n        float\
    \ sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.abs(number\
    \ - mean);\n        }\n        return sum / numbers.size();", "        float mean\
    \ = numbers.stream().reduce((float)0.0f, (a, b) -> a + b) / numbers.size();\n\
    \        float sum = numbers.stream().map((x) -> Math.abs(x - mean)).reduce((a,\
    \ b) -> a + b).get();\n        return sum / numbers.size();", "        float mean\
    \ = mean(numbers);\n        float sum = 0;\n        for (float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();", "        float mean = numbers.stream().reduce((float)0.0f,\
    \ (a, b) -> a + b) / numbers.size();\n        float sum = numbers.stream().map((n)\
    \ -> Math.abs(n - mean)).reduce((a, b) -> a + b).get();\n        return sum /\
    \ numbers.size();", "        float mean = mean(numbers);\n        float sum =\
    \ 0;\n        for (float number : numbers) {\n            sum += Math.abs(number\
    \ - mean);\n        }\n        return sum / numbers.size();", "        float mean\
    \ = numbers.stream().reduce((float)0.0f, (a, b) -> a + b) / numbers.size();\n\
    \        float sum = numbers.stream().map((x) -> Math.abs(x - mean)).reduce((a,\
    \ b) -> a + b).get();\n        return sum / numbers.size();", "        float mean\
    \ = mean(numbers);\n        float sum = 0;\n        for (float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();", "        float mean = mean(numbers);\n        float sum\
    \ = 0;\n        for (Float number : numbers) {\n            sum += Math.abs(number\
    \ - mean);\n        }\n        return sum / numbers.size();", "        float mean\
    \ = 0.0f;\n        for (float number : numbers) {\n            mean += number;\n\
    \        }\n        mean /= numbers.size();\n        float mad = 0.0f;\n     \
    \   for (float number : numbers) {\n            mad += Math.abs(number - mean);\n\
    \        }\n        mad /= numbers.size();\n        return mad;", "        float\
    \ mean = numbers.stream().reduce((float)0.0f, (a, b) -> a + b) / numbers.size();\n\
    \        float sum = numbers.stream().map((x) -> Math.abs(x - mean)).reduce((a,\
    \ b) -> a + b).get();\n        return sum / numbers.size();", "        float mean\
    \ = mean(numbers);\n        ArrayList<Float> deviations = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            deviations.add(Math.abs(number\
    \ - mean));\n        }\n        return mean(deviations);", "        float mean\
    \ = mean(numbers);\n        float sum = 0;\n        for (float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();", "        float mean = mean(numbers);\n        float sum\
    \ = 0;\n        for (float number : numbers) {\n            sum += Math.abs(number\
    \ - mean);\n        }\n        return sum / numbers.size();", "        float mean\
    \ = mean(numbers);\n        float sum = 0;\n        for (float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();", "        float mean = 0;\n        for (float number : numbers)\
    \ {\n            mean += number;\n        }\n        mean /= numbers.size();\n\
    \        float mad = 0;\n        for (float number : numbers) {\n            mad\
    \ += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n   \
    \     return mad;", "        float mean = mean(numbers);\n        float sum =\
    \ 0;\n        for (float number : numbers) {\n            sum += Math.abs(number\
    \ - mean);\n        }\n        return sum / numbers.size();", "        float mean\
    \ = mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers)\
    \ {\n            sum += Math.abs(number - mean);\n        }\n        return sum\
    \ / numbers.size();", "        float mean = mean(numbers);\n        float sum\
    \ = 0;\n        for (Float number : numbers) {\n            sum += Math.abs(number\
    \ - mean);\n        }\n        return sum / numbers.size();"]
stop_tokens:
- "\n    }\n"
