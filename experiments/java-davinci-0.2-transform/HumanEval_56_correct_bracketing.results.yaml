language: java
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // TODO: implement this function.\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6be4p2_a.java:24)\n"
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppsf1s91m.java:23)\n"
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi7m9n6cb.java:27)\n"
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                stack.push(c);\n            } else\
    \ {\n                if (stack.empty()) {\n                    return false;\n\
    \                }\n                stack.pop();\n            }\n        }\n \
    \       return stack.empty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count++;\n            } else {\n\
    \                count--;\n            }\n            if (count < 0) {\n     \
    \           return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int n = brackets.length();\n \
    \       int count = 0;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (brackets.charAt(i) == '<') {\n                count++;\n            } else\
    \ {\n                count--;\n            }\n            if (count < 0) {\n \
    \               return false;\n            }\n        }\n        return count\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // YOUR CODE HERE\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpme4tf8pw.java:24)\n"
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count++;\n            } else {\n\
    \                count--;\n            }\n            if (count < 0) {\n     \
    \           return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count++;\n            } else {\n\
    \                count--;\n            }\n            if (count < 0) {\n     \
    \           return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count++;\n            } else {\n\
    \                count--;\n            }\n            if (count < 0) {\n     \
    \           return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799766
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
