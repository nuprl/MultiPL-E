language: java
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        if (n <= 2) {\n            return res;\n\
    \        }\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0)\
    \ {\n                res.add((long)(1 + i / 2));\n            } else {\n     \
    \           res.add((long)(res.get(i - 1) + res.get(i - 2) + res.get(i + 1)));\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp6gjz19y4.java:37)\n\tat Problem.main(tmp6gjz19y4.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> list\
    \ = new ArrayList<Long>();\n        long a = 1;\n        long b = 3;\n       \
    \ long c = 2;\n        long d = 0;\n        list.add(a);\n        list.add(b);\n\
    \        list.add(c);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                d = 1 + i / 2;\n            } else {\n     \
    \           d = a + b + c;\n            }\n            a = b;\n            b =\
    \ c;\n            c = d;\n            list.add(d);\n        }\n        return\
    \ list;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsv1vdbmn.java:48)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        long a = 1;\n        long b = 3;\n   \
    \     long c = 2;\n        for (int i = 0; i < n; i++) {\n            long d =\
    \ a + b + c;\n            result.add(d);\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1osz5i4k.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        result.add((long)1l);\n        if (n == 1) {\n           \
    \ return result;\n        }\n        result.add((long)3l);\n        if (n == 2)\
    \ {\n            return result;\n        }\n        result.add((long)2l);\n  \
    \      if (n == 3) {\n            return result;\n        }\n        for (long\
    \ i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9v9glp9b.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> list\
    \ = new ArrayList<Long>();\n        list.add((long)1l);\n        list.add((long)3l);\n\
    \        list.add((long)2l);\n        if (n == 0) {\n            return list;\n\
    \        }\n        for (int i = 3; i <= n; i++) {\n            long a = list.get(i\
    \ - 1);\n            long b = list.get(i - 2);\n            long c = list.get(i\
    \ - 3);\n            if (i % 2 == 0) {\n                list.add((long)1l + (i\
    \ / 2));\n            } else {\n                list.add(a + b + c);\n       \
    \     }\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc98074d_.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        long res = 0;\n            if (i % 2 == 0) {\n                res = 1\
    \ + i / 2;\n            } else {\n                res = result.get((int)(i - 1))\
    \ + result.get((int)(i - 2)) + result.get((int)(i + 1));\n            }\n    \
    \        result.add(res);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp_xcqnik1.java:35)\n\tat Problem.main(tmp_xcqnik1.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> list\
    \ = new ArrayList<Long>();\n        list.add((long)1l);\n        list.add((long)3l);\n\
    \        list.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n       \
    \     if (i % 2 == 0) {\n                list.add((long)1l + (long)i / (long)2l);\n\
    \            } else {\n                list.add(list.get(i - 1) + list.get(i -\
    \ 2) + list.get(i + 1));\n            }\n        }\n        return list;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpiuuri_ao.java:34)\n\tat Problem.main(tmpiuuri_ao.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long a = 1;\n        long b = 3;\n       \
    \ long c = 2;\n        long d = 0;\n        result.add(a);\n        result.add(b);\n\
    \        result.add(c);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                d = 1 + i / 2;\n            } else {\n     \
    \           d = a + b + c;\n            }\n            a = b;\n            b =\
    \ c;\n            c = d;\n            result.add(d);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzy1kweyt.java:48)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n > 2) {\n            for (int i =\
    \ 3; i <= n; i++) {\n                if (i % 2 == 0) {\n                    result.add((long)(1\
    \ + i / 2));\n                } else {\n                    result.add((long)(result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1)));\n                }\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp8m2_f0e5.java:35)\n\tat Problem.main(tmp8m2_f0e5.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3l; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpv21a8vla.java:43)\n\tat Problem.main(tmpv21a8vla.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long a = 1;\n        long b = 3;\n       \
    \ long c = 2;\n        result.add(a);\n        result.add(b);\n        result.add(c);\n\
    \        for (int i = 3; i < n; i++) {\n            long d = 0;\n            if\
    \ (i % 2 == 0) {\n                d = 1 + i / 2;\n            } else {\n     \
    \           d = a + b + c;\n            }\n            result.add(d);\n      \
    \      a = b;\n            b = c;\n            c = d;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6o0nwl4s.java:48)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        result.add((long)1l);\n        if (n == 1) {\n           \
    \ return result;\n        }\n        result.add((long)3l);\n        if (n == 2)\
    \ {\n            return result;\n        }\n        result.add((long)2l);\n  \
    \      if (n == 3) {\n            return result;\n        }\n        for (long\
    \ i = (long)4l; i <= n; i++) {\n            if (i % (long)2l == (long)0l) {\n\
    \                result.add((long)1l + i / (long)2l);\n            } else {\n\
    \                result.add(result.get((int)(i - (long)1l)) + result.get((int)(i\
    \ - (long)2l)) + result.get((int)(i + (long)1l)));\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqz_5uqx7.java:52)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        long a = 1l;\n        long b = 3l;\n \
    \       long c = 2l;\n        for (long i = 3l; i <= n; i++) {\n            long\
    \ d = 0l;\n            if (i % 2 == 0) {\n                d = 1l + i / 2;\n  \
    \          } else {\n                d = a + b + c;\n            }\n         \
    \   result.add(d);\n            a = b;\n            b = c;\n            c = d;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4dqvq5i.java:48)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long) 1l);\n        if (n == 0)\
    \ {\n            return result;\n        }\n        result.add((long) 3l);\n \
    \       if (n == 1) {\n            return result;\n        }\n        result.add((long)\
    \ 2l);\n        if (n == 2) {\n            return result;\n        }\n       \
    \ for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n            \
    \    result.add((long) 1l + (long) i / 2);\n            } else {\n           \
    \     result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpu4gg4_7f.java:43)\n\tat Problem.main(tmpu4gg4_7f.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> ans\
    \ = new ArrayList<Long>();\n        ans.add((long)1l);\n        ans.add((long)3l);\n\
    \        ans.add((long)2l);\n        for (long i = 3l; i <= n; i++) {\n      \
    \      if (i % 2 == 0) {\n                ans.add((long)1l + i / 2);\n       \
    \     } else {\n                ans.add(ans.get((int)(i - 1)) + ans.get((int)(i\
    \ - 2)) + ans.get((int)(i + 1)));\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpy3s6_c0e.java:34)\n\tat Problem.main(tmpy3s6_c0e.java:40)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        long a = 1;\n\
    \        long b = 3;\n        long c = 2;\n        for (long i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                long d = 1 + i / 2;\n    \
    \            result.add(d);\n                a = b;\n                b = c;\n\
    \                c = d;\n            } else {\n                long d = a + b\
    \ + c;\n                result.add(d);\n                a = b;\n             \
    \   b = c;\n                c = d;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfq45uj8a.java:60)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        if (n == 0)\
    \ {\n            return result;\n        }\n        result.add((long)3l);\n  \
    \      if (n == 1) {\n            return result;\n        }\n        result.add((long)2l);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp97v06q_p.java:43)\n\tat Problem.main(tmp97v06q_p.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        long a = 1l;\n\
    \        long b = 3l;\n        long c = 2l;\n        for (long i = 3l; i <= n;\
    \ i++) {\n            long d = 0l;\n            if (i % 2 == 0) {\n          \
    \      d = 1l + i / 2;\n            } else {\n                d = a + b + c;\n\
    \            }\n            a = b;\n            b = c;\n            c = d;\n \
    \           result.add(d);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflm8jwrn.java:57)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        result.add((long)1l);\n        if (n == 1) {\n           \
    \ return result;\n        }\n        result.add((long)3l);\n        if (n == 2)\
    \ {\n            return result;\n        }\n        result.add((long)2l);\n  \
    \      if (n == 3) {\n            return result;\n        }\n        for (long\
    \ i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9v9glp9b.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        result.add((long)1l);\n        if (n == 1) {\n           \
    \ return result;\n        }\n        result.add((long)3l);\n        if (n == 2)\
    \ {\n            return result;\n        }\n        result.add((long)2l);\n  \
    \      if (n == 3) {\n            return result;\n        }\n        for (long\
    \ i = (long)4l; i <= n; i++) {\n            if (i % (long)2l == (long)0l) {\n\
    \                result.add((long)1l + i / (long)2l);\n            } else {\n\
    \                result.add(result.get((int)(i - (long)1l)) + result.get((int)(i\
    \ - (long)2l)) + result.get((int)(i + (long)1l)));\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqz_5uqx7.java:52)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        result.add((long)1l);\n        if (n == 1) {\n           \
    \ return result;\n        }\n        result.add((long)3l);\n        if (n == 2)\
    \ {\n            return result;\n        }\n        result.add((long)2l);\n  \
    \      for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n      \
    \          result.add((long)1l + i / 2);\n            } else {\n             \
    \   result.add(result.get((int)(i - 1)) + result.get((int)(i - 2)) + result.get((int)(i\
    \ + 1)));\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpyw9qj_ce.java:43)\n\tat Problem.main(tmpyw9qj_ce.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        long a = 1l;\n\
    \        long b = 3l;\n        long c = 2l;\n        for (long i = 3l; i <= n;\
    \ i++) {\n            if (i % 2 == 0) {\n                long d = 1l + i / 2;\n\
    \                result.add(d);\n                a = b;\n                b = c;\n\
    \                c = d;\n            } else {\n                long d = a + b\
    \ + c;\n                result.add(d);\n                a = b;\n             \
    \   b = c;\n                c = d;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_0oydy5m.java:60)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            long x = result.get((int)(i - (long)1l));\n            long y = result.get((int)(i\
    \ - (long)2l));\n            long z = result.get((int)(i - (long)3l));\n     \
    \       if (i % (long)2l == (long)0l) {\n                result.add((long)1l +\
    \ i / (long)2l);\n            } else {\n                result.add(x + y + z);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp65z1ghod.java:43)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0l) {\n            return result;\n\
    \        }\n        if (n == 1l) {\n            return result;\n        }\n  \
    \      if (n == 2l) {\n            return result;\n        }\n        long a =\
    \ 1l;\n        long b = 3l;\n        long c = 2l;\n        long d = 0l;\n    \
    \    for (long i = 3l; i <= n; i++) {\n            if (i % 2l == 0l) {\n     \
    \           d = 1l + i / 2l;\n            } else {\n                d = a + b\
    \ + c;\n            }\n            a = b;\n            b = c;\n            c =\
    \ d;\n            result.add(d);\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwf3nkvwk.java:57)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> ans\
    \ = new ArrayList<Long>();\n        ans.add((long)1l);\n        ans.add((long)3l);\n\
    \        ans.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n       \
    \     if (i % 2 == 0) {\n                ans.add((long)1l + i / 2);\n        \
    \    } else {\n                ans.add(ans.get((int)(i - 1)) + ans.get((int)(i\
    \ - 2)) + ans.get((int)(i + 1)));\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp3t7yjk5a.java:34)\n\tat Problem.main(tmp3t7yjk5a.java:40)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        result.add((long)1l);\n        if (n == 1) {\n           \
    \ return result;\n        }\n        result.add((long)3l);\n        if (n == 2)\
    \ {\n            return result;\n        }\n        result.add((long)2l);\n  \
    \      if (n == 3) {\n            return result;\n        }\n        for (long\
    \ i = (long)3l; i < n; i++) {\n            if (i % (long)2l == (long)0l) {\n \
    \               result.add((long)1l + i / (long)2l);\n            } else {\n \
    \               result.add(result.get((int)(i - (long)1l)) + result.get((int)(i\
    \ - (long)2l)) + result.get((int)(i + (long)1l)));\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjg20qea.java:52)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> list\
    \ = new ArrayList<Long>();\n        list.add((long)1l);\n        list.add((long)3l);\n\
    \        list.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n       \
    \     if (i % 2 == 0) {\n                list.add((long)1l + (long)i / (long)2l);\n\
    \            } else {\n                list.add(list.get(i - 1) + list.get(i -\
    \ 2) + list.get(i + 1));\n            }\n        }\n        return list;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpiuuri_ao.java:34)\n\tat Problem.main(tmpiuuri_ao.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpzjh9mi_p.java:43)\n\tat Problem.main(tmpzjh9mi_p.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        long a = 1l;\n        long b = 3l;\n \
    \       long c = 2l;\n        long d = 0l;\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2;\n         \
    \   } else {\n                d = a + b + c;\n            }\n            a = b;\n\
    \            b = c;\n            c = d;\n            result.add(d);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5wd5csf.java:48)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        if (n == 0)\
    \ {\n            return result;\n        }\n        result.add((long)3l);\n  \
    \      if (n == 1) {\n            return result;\n        }\n        result.add((long)2l);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            long next = 0;\n            if (i % 2 ==\
    \ 0) {\n                next = 1 + i / 2;\n            } else {\n            \
    \    next = result.get((int)(i - 1)) + result.get((int)(i - 2)) + result.get((int)(i\
    \ + 1));\n            }\n            result.add(next);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp4arr_wud.java:44)\n\tat Problem.main(tmp4arr_wud.java:51)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (long i = 0; i <= n; i++) {\n        \
    \    result.add(tri_helper(i));\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvgya9d9y.java:28: error: cannot find symbol\n            result.add(tri_helper(i));\n\
    \                       ^\n  symbol:   method tri_helper(long)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        if (n == 0) {\n\
    \            return res;\n        }\n        res.add((long)3l);\n        if (n\
    \ == 1) {\n            return res;\n        }\n        res.add((long)2l);\n  \
    \      if (n == 2) {\n            return res;\n        }\n        for (int i =\
    \ 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add((long)(1\
    \ + i / 2));\n            } else {\n                res.add((long)(res.get(i -\
    \ 1) + res.get(i - 2) + res.get(i + 1)));\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpkuobvd_7.java:43)\n\tat Problem.main(tmpkuobvd_7.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0l) {\n            return result;\n\
    \        }\n        if (n == 1l) {\n            return result;\n        }\n  \
    \      if (n == 2l) {\n            return result;\n        }\n        long i =\
    \ (long)3l;\n        while (i <= n) {\n            long a = result.get((int)(i\
    \ - (long)1l));\n            long b = result.get((int)(i - (long)2l));\n     \
    \       long c = result.get((int)(i - (long)3l));\n            long d = (long)0l;\n\
    \            if (i % (long)2l == (long)0l) {\n                d = (long)1l + i\
    \ / (long)2l;\n            } else {\n                d = a + b + c;\n        \
    \    }\n            result.add(d);\n            i = i + (long)1l;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphs43h5z7.java:56)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        result.add((long)1l);\n        if (n == 1) {\n           \
    \ return result;\n        }\n        result.add((long)3l);\n        if (n == 2)\
    \ {\n            return result;\n        }\n        result.add((long)2l);\n  \
    \      if (n == 3) {\n            return result;\n        }\n        for (long\
    \ i = (long)4l; i <= n; i++) {\n            if (i % (long)2l == (long)0l) {\n\
    \                result.add((long)1l + i / (long)2l);\n            } else {\n\
    \                result.add(result.get((int)(i - (long)1l)) + result.get((int)(i\
    \ - (long)2l)) + result.get((int)(i + (long)1l)));\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqz_5uqx7.java:52)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return res;\n \
    \       }\n        res.add((long)1l);\n        if (n == 1) {\n            return\
    \ res;\n        }\n        res.add((long)3l);\n        if (n == 2) {\n       \
    \     return res;\n        }\n        res.add((long)2l);\n        if (n == 3)\
    \ {\n            return res;\n        }\n        for (long i = (long)4l; i <=\
    \ n; i++) {\n            if (i % (long)2l == (long)0l) {\n                res.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                res.add(res.get((int)(i\
    \ - (long)1l)) + res.get((int)(i - (long)2l)) + res.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7wbn0lwc.java:52)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        long last = result.get((int)(result.size() - 1));\n            long second_last\
    \ = result.get((int)(result.size() - 2));\n            long third_last = result.get((int)(result.size()\
    \ - 3));\n            if (i % 2 == 0) {\n                result.add((long)1l +\
    \ i / 2);\n            } else {\n                result.add(last + second_last\
    \ + third_last);\n            }\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1w_ne_za.java:43)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (long i = 0; i <= n; i++) {\n        \
    \    if (i == 0) {\n                result.add((long)1l);\n            } else\
    \ if (i == 1) {\n                result.add((long)3l);\n            } else if\
    \ (i == 2) {\n                result.add((long)2l);\n            } else if (i\
    \ % 2 == 0) {\n                result.add((long)1l + i / 2);\n            } else\
    \ {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpcq26f6y9.java:37)\n\tat Problem.main(tmpcq26f6y9.java:43)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3l; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpv21a8vla.java:43)\n\tat Problem.main(tmpv21a8vla.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (long i = 0; i <= n; i++) {\n        \
    \    if (i == 0) {\n                result.add((long)1l);\n            } else\
    \ if (i == 1) {\n                result.add((long)3l);\n            } else if\
    \ (i == 2) {\n                result.add((long)2l);\n            } else if (i\
    \ % 2 == 0) {\n                result.add((long)1l + i / 2);\n            } else\
    \ {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpcq26f6y9.java:37)\n\tat Problem.main(tmpcq26f6y9.java:43)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        if (n == 0)\
    \ {\n            return result;\n        }\n        result.add((long)3l);\n  \
    \      if (n == 1) {\n            return result;\n        }\n        result.add((long)2l);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp97v06q_p.java:43)\n\tat Problem.main(tmp97v06q_p.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        long x = result.get((int)(i - 1));\n            long y = result.get((int)(i\
    \ - 2));\n            long z = result.get((int)(i - 3));\n            if (i %\
    \ 2 == 0) {\n                result.add((long)(1 + i / 2));\n            } else\
    \ {\n                result.add((long)(x + y + z));\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_fbsijbn.java:43)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        if (n == 0)\
    \ {\n            return result;\n        }\n        result.add((long)3l);\n  \
    \      if (n == 1) {\n            return result;\n        }\n        result.add((long)2l);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp97v06q_p.java:43)\n\tat Problem.main(tmp97v06q_p.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        long a = 1l;\n        long b = 3l;\n \
    \       long c = 2l;\n        for (long i = 3l; i <= n; i++) {\n            long\
    \ d = 0l;\n            if (i % 2 == 0) {\n                d = 1l + i / 2;\n  \
    \          } else {\n                d = a + b + c;\n            }\n         \
    \   result.add(d);\n            a = b;\n            b = c;\n            c = d;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4dqvq5i.java:48)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n       \
    \     if (i % 2 == 0) {\n                res.add((long)1l + i / 2);\n        \
    \    } else {\n                res.add(res.get((int)(i - 1)) + res.get((int)(i\
    \ - 2)) + res.get((int)(i + 1)));\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpk4jd9lme.java:34)\n\tat Problem.main(tmpk4jd9lme.java:40)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        result.add((long)1l);\n        if (n == 1) {\n           \
    \ return result;\n        }\n        result.add((long)3l);\n        if (n == 2)\
    \ {\n            return result;\n        }\n        result.add((long)2l);\n  \
    \      if (n == 3) {\n            return result;\n        }\n        for (long\
    \ i = (long)4l; i <= n; i++) {\n            if (i % (long)2l == (long)0l) {\n\
    \                result.add((long)1l + i / (long)2l);\n            } else {\n\
    \                result.add(result.get((int)(i - (long)1l)) + result.get((int)(i\
    \ - (long)2l)) + result.get((int)(i + (long)1l)));\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqz_5uqx7.java:52)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0l) {\n            return result;\n\
    \        }\n        if (n == 1l) {\n            return result;\n        }\n  \
    \      if (n == 2l) {\n            return result;\n        }\n        long i =\
    \ 3l;\n        while (i <= n) {\n            if (i % 2l == 0l) {\n           \
    \     result.add((long)1l + i / (long)2l);\n            } else {\n           \
    \     result.add(result.get((int)(i - 1l)) + result.get((int)(i - 2l)) + result.get((int)(i\
    \ + 1l)));\n            }\n            i = i + 1l;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpddi4rzfx.java:44)\n\tat Problem.main(tmpddi4rzfx.java:51)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> ans\
    \ = new ArrayList<Long>();\n        ans.add((long)1l);\n        ans.add((long)3l);\n\
    \        ans.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n       \
    \     if (i % 2 == 0) {\n                ans.add((long)1l + i / 2);\n        \
    \    } else {\n                ans.add(ans.get((int)(i - 1)) + ans.get((int)(i\
    \ - 2)) + ans.get((int)(i + 1)));\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp3t7yjk5a.java:34)\n\tat Problem.main(tmp3t7yjk5a.java:40)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpzjh9mi_p.java:43)\n\tat Problem.main(tmpzjh9mi_p.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        if (n <= 2) {\n            return res;\n\
    \        }\n        for (long i = 3; i <= n; i++) {\n            if (i % 2 ==\
    \ 0) {\n                res.add((long)1l + i / 2);\n            } else {\n   \
    \             res.add(res.get((int)(i - 1)) + res.get((int)(i - 2)) + res.get((int)(i\
    \ + 1)));\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp0kch7t42.java:37)\n\tat Problem.main(tmp0kch7t42.java:43)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long a = 1;\n        long b = 3;\n       \
    \ long c = 2;\n        long d = 0;\n        result.add(a);\n        result.add(b);\n\
    \        result.add(c);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                d = 1 + i / 2;\n            } else {\n     \
    \           d = a + b + c;\n            }\n            a = b;\n            b =\
    \ c;\n            c = d;\n            result.add(d);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzy1kweyt.java:48)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0l) {\n            return result;\n\
    \        }\n        long a = 1l;\n        long b = 3l;\n        long c = 2l;\n\
    \        long d = 0l;\n        for (long i = 3l; i <= n; i++) {\n            if\
    \ (i % 2l == 0l) {\n                d = 1l + i / 2l;\n            } else {\n \
    \               d = a + b + c;\n            }\n            a = b;\n          \
    \  b = c;\n            c = d;\n            result.add(d);\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt6k0bi3t.java:51)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            return res;\n \
    \       }\n        res.add((long)1l);\n        if (n == 1) {\n            return\
    \ res;\n        }\n        res.add((long)3l);\n        if (n == 2) {\n       \
    \     return res;\n        }\n        res.add((long)2l);\n        if (n == 3)\
    \ {\n            return res;\n        }\n        long a = 2l;\n        long b\
    \ = 3l;\n        long c = 2l;\n        for (long i = 4l; i <= n; i++) {\n    \
    \        long d = 0l;\n            if (i % 2 == 0) {\n                d = 1l +\
    \ i / 2l;\n            } else {\n                d = a + b + c;\n            }\n\
    \            a = b;\n            b = c;\n            c = d;\n            res.add(d);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kp8fcxq.java:60)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> l =\
    \ new ArrayList<Long>();\n        l.add((long)1l);\n        l.add((long)3l);\n\
    \        l.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n          \
    \  if (i % 2 == 0) {\n                l.add((long)1l + (long)(i / 2));\n     \
    \       } else {\n                l.add(l.get(i - 1) + l.get(i - 2) + l.get(i\
    \ + 1));\n            }\n        }\n        return l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmphpdetvzo.java:34)\n\tat Problem.main(tmphpdetvzo.java:40)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        long a = 1l;\n\
    \        long b = 3l;\n        long c = 2l;\n        long d = 0l;\n        for\
    \ (long i = 3l; i <= n; i++) {\n            if (i % 2 == 0) {\n              \
    \  d = 1 + i / 2;\n            } else {\n                d = a + b + c;\n    \
    \        }\n            a = b;\n            b = c;\n            c = d;\n     \
    \       result.add(d);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0strpejz.java:57)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpzjh9mi_p.java:43)\n\tat Problem.main(tmpzjh9mi_p.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpzjh9mi_p.java:43)\n\tat Problem.main(tmpzjh9mi_p.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        long x = result.get((int)(i - 1));\n            long y = result.get((int)(i\
    \ - 2));\n            long z = result.get((int)(i - 3));\n            if (i %\
    \ 2 == 0) {\n                result.add((long)(1 + i / 2));\n            } else\
    \ {\n                result.add((long)(x + y + z));\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_fbsijbn.java:43)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        long a = 1;\n\
    \        long b = 3;\n        long c = 2;\n        for (long i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                long d = 1 + i / 2;\n    \
    \            result.add(d);\n                a = b;\n                b = c;\n\
    \                c = d;\n            } else {\n                long d = a + b\
    \ + c;\n                result.add(d);\n                a = b;\n             \
    \   b = c;\n                c = d;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfq45uj8a.java:60)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> ret\
    \ = new ArrayList<Long>();\n        ret.add((long)1l);\n        ret.add((long)3l);\n\
    \        ret.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n       \
    \     if (i % 2 == 0) {\n                ret.add((long)1l + i / 2);\n        \
    \    } else {\n                ret.add(ret.get((int)(i - 1)) + ret.get((int)(i\
    \ - 2)) + ret.get((int)(i + 1)));\n            }\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpcyg9m_kd.java:34)\n\tat Problem.main(tmpcyg9m_kd.java:40)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> ans\
    \ = new ArrayList<Long>();\n        ans.add((long)1l);\n        ans.add((long)3l);\n\
    \        ans.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                ans.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                ans.add(ans.get((int)(i\
    \ - (long)1l)) + ans.get((int)(i - (long)2l)) + ans.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp7cbbba2_.java:34)\n\tat Problem.main(tmp7cbbba2_.java:40)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        if (n == 0l) {\n            return res;\n\
    \        }\n        if (n == 1l) {\n            return res;\n        }\n     \
    \   if (n == 2l) {\n            return res;\n        }\n        long a = 1l;\n\
    \        long b = 3l;\n        long c = 2l;\n        long d = 0l;\n        for\
    \ (long i = 3l; i <= n; i++) {\n            if (i % 2l == 0l) {\n            \
    \    d = 1l + i / 2l;\n            } else {\n                d = a + b + c;\n\
    \            }\n            a = b;\n            b = c;\n            c = d;\n \
    \           res.add(d);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptd9auuju.java:57)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpzjh9mi_p.java:43)\n\tat Problem.main(tmpzjh9mi_p.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> ans\
    \ = new ArrayList<Long>();\n        ans.add((long)1l);\n        ans.add((long)3l);\n\
    \        ans.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n       \
    \     if (i % 2 == 0) {\n                ans.add((long)1l + i / 2);\n        \
    \    } else {\n                ans.add(ans.get((int)(i - 1)) + ans.get((int)(i\
    \ - 2)) + ans.get((int)(i + 1)));\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp3t7yjk5a.java:34)\n\tat Problem.main(tmp3t7yjk5a.java:40)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        long i = 3;\n\
    \        while (i <= n) {\n            long x = 0;\n            if (i % 2 == 0)\
    \ {\n                x = 1 + i / 2;\n            } else {\n                x =\
    \ result.get((int)(i - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1));\n\
    \            }\n            result.add(x);\n            i = i + 1;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpho3ww0vp.java:45)\n\tat Problem.main(tmpho3ww0vp.java:53)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n > 3) {\n            for (int i =\
    \ 3; i < n; i++) {\n                if (i % 2 == 0) {\n                    result.add((long)(1\
    \ + i / 2));\n                } else {\n                    result.add((long)(result.get(i\
    \ - 1) + result.get(i - 2) + result.get(i + 1)));\n                }\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2z7n7gtb.java:42)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0l) {\n            return result;\n\
    \        }\n        if (n == 1l) {\n            return result;\n        }\n  \
    \      if (n == 2l) {\n            return result;\n        }\n        for (long\
    \ i = 3l; i <= n; i++) {\n            if (i % 2l == 0l) {\n                result.add((long)1l\
    \ + i / 2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1l)) + result.get((int)(i - 2l)) + result.get((int)(i + 1l)));\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpt9abcj1g.java:43)\n\tat Problem.main(tmpt9abcj1g.java:49)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        result.add((long)8l);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ockt86b.java:35)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        long a = 1l;\n        long b = 3l;\n \
    \       long c = 2l;\n        for (long i = 3l; i <= n; i++) {\n            long\
    \ d = 0l;\n            if (i % 2 == 0) {\n                d = 1l + i / 2;\n  \
    \          } else {\n                d = a + b + c;\n            }\n         \
    \   result.add(d);\n            a = b;\n            b = c;\n            c = d;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4dqvq5i.java:48)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    long x = res.get(i - 1) + res.get(i - 2) + res.get(i - 3);\n            res.add(x);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_dws_pp.java:37)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        long x = result.get((int)(i - 1));\n            long y = result.get((int)(i\
    \ - 2));\n            long z = result.get((int)(i - 3));\n            if (i %\
    \ 2 == 0) {\n                result.add((long)(1 + i / 2));\n            } else\
    \ {\n                result.add((long)(x + y + z));\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_fbsijbn.java:43)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3l; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add((long)1l\
    \ + i / 2);\n            } else {\n                result.add(result.get((int)(i\
    \ - 1)) + result.get((int)(i - 2)) + result.get((int)(i + 1)));\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmpv21a8vla.java:43)\n\tat Problem.main(tmpv21a8vla.java:49)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = (long)3l; i <= n; i++) {\n\
    \            if (i % (long)2l == (long)0l) {\n                result.add((long)1l\
    \ + i / (long)2l);\n            } else {\n                result.add(result.get((int)(i\
    \ - (long)1l)) + result.get((int)(i - (long)2l)) + result.get((int)(i + (long)1l)));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmp1y69ds_f.java:34)\n\tat Problem.main(tmp1y69ds_f.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> ans\
    \ = new ArrayList<Long>();\n        ans.add((long)1l);\n        ans.add((long)3l);\n\
    \        ans.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n       \
    \     long last = ans.get((int)(i - 1));\n            long secondLast = ans.get((int)(i\
    \ - 2));\n            long thirdLast = ans.get((int)(i - 3));\n            if\
    \ (i % 2 == 0) {\n                ans.add((long)(1 + i / 2));\n            } else\
    \ {\n                ans.add((long)(last + secondLast + thirdLast));\n       \
    \     }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02fc03vc.java:43)\n"
  stdout: ''
  timestamp: 1659794421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        res.add((long)1l);\n        res.add((long)3l);\n\
    \        res.add((long)2l);\n        for (int i = 3; i <= n; i++) {\n        \
    \    if (i % 2 == 0) {\n                res.add((long)(1 + i / 2));\n        \
    \    } else {\n                res.add((long)(res.get(i - 1) + res.get(i - 2)\
    \ + res.get(i + 1)));\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmproiephgm.java:34)\n\tat Problem.main(tmproiephgm.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add((long)1l);\n        result.add((long)3l);\n\
    \        result.add((long)2l);\n        for (long i = 3; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.add((long)1l + i / 2);\n  \
    \          } else {\n                result.add(result.get((int)(i - 1)) + result.get((int)(i\
    \ - 2)) + result.get((int)(i + 1)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 4, Size: 3\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpwc0sny7d.java:34)\n\tat Problem.main(tmpwc0sny7d.java:40)\n"
  stdout: ''
