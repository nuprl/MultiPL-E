name: HumanEval_84_solve
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer N, return the total sum of its\
  \ digits in binary.\n    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n\
  \    // >>> solve((150l))\n    // (\"110\")\n    // >>> solve((147l))\n    // (\"\
  1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264\
  \ 10000.\n    // Output:\n    // a string of binary number\n    public static String\
  \ solve(long N) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ['        return Long.toBinaryString(N);', "        StringBuilder sb\
    \ = new StringBuilder();\n        while (N > 0) {\n            sb.append(N % 2);\n\
    \            N /= 2;\n        }\n        return sb.reverse().toString();", '        return
    Long.toBinaryString(N);', '        return Long.toBinaryString(N);', "        String\
    \ binary = Long.toBinaryString(N);\n        int sum = 0;\n        for (int i =\
    \ 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);", '        return
    Long.toBinaryString(N);', '        return Long.toBinaryString(N);', '        return
    Long.toBinaryString(N);', '        return Long.toBinaryString(N);', '        return
    Long.toBinaryString(N);', '        return Long.toBinaryString(N);', "        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();",
  '        return Long.toBinaryString(N);', "        // Your code here\n        String\
    \ binary = Long.toBinaryString(N);\n        int sum = 0;\n        for (int i =\
    \ 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);", '        return Long.toBinaryString(N);',
  '        return Long.toBinaryString(N);', "        StringBuilder sb = new StringBuilder();\n\
    \        while (N > 0) {\n            sb.append(N % 2);\n            N /= 2;\n\
    \        }\n        return sb.reverse().toString();", '        return Long.toBinaryString(N);',
  "        StringBuilder sb = new StringBuilder();\n        while (N > 0) {\n    \
    \        sb.append(N % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();",
  "        String binary = Long.toBinaryString(N);\n        int sum = 0;\n       \
    \ for (int i = 0; i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return Integer.toString(sum);"]
stop_tokens:
- "\n    }\n"
