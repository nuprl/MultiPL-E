name: HumanEval_70_strange_sort_list
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given list of integers, return list in strange order.\n\
  \    // Strange sorting, is when you start with the minimum value,\n    // then\
  \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
  \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
  \ (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
  \ strangeSortList(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n \
  \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
  \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
  \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
  \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n \
  \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)8l, (long)2l, (long)7l, (long)3l, (long)6l, (long)4l, (long)5l)))));\n \
  \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l,\
  \ (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l,\
  \ (long)5l, (long)-5l, (long)5l, (long)0l, (long)2l, (long)2l, (long)2l)))));\n\
  \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
