name: HumanEval_49_modp
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
  \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
  \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    //\
  \ (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long modp(long\
  \ n, long p) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
  \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
  \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
  \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
  \ (5l)) == (3l));\n    }\n\n}\n"
completions: ["        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n % 2 == 0) {\n            long t = modp(n / 2, p);\n            return (t\
    \ * t) % p;\n        } else {\n            return (modp(n - 1, p) * n) % p;\n\
    \        }", "        long r = 1;\n        long b = 2;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                r = (r * b) % p;\n     \
    \       }\n            n = n >> 1;\n            b = (b * b) % p;\n        }\n\
    \        return r;", "        long res = 1;\n        while (n > 0) {\n       \
    \     if ((n & 1) == 1) {\n                res = (res * n) % p;\n            }\n\
    \            n = n >> 1;\n            n = (n * n) % p;\n        }\n        return\
    \ res;", "        long res = 1;\n        long cur = n;\n        while (p > 0)\
    \ {\n            if ((p & 1) == 1) {\n                res = (res * cur) % MOD;\n\
    \            }\n            cur = (cur * cur) % MOD;\n            p >>= 1;\n \
    \       }\n        return res;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n\
    \ / 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) * 2 % p;\n        }", "        long res = 1;\n        long b = 2;\n  \
    \      while (n > 0) {\n            if ((n & 1) == 1) {\n                res =\
    \ (res * b) % p;\n            }\n            b = (b * b) % p;\n            n >>=\
    \ 1;\n        }\n        return res;", "        long res = 1;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n\
    \            }\n            n >>= 1;\n        }\n        return res;", "     \
    \   if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n\
    \            long x = modp(n / 2, p);\n            return (x * x) % p;\n     \
    \   } else {\n            return (modp(n - 1, p) * n) % p;\n        }", "    \
    \    if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n\
    \            return n;\n        }\n        long half = modp(n / 2, p);\n     \
    \   long result = (half * half) % p;\n        if (n % 2 == 1) {\n            result\
    \ = (result * 2) % p;\n        }\n        return result;", "        long r = 1;\n\
    \        long b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                r = (r * b) % p;\n            }\n            n >>= 1;\n     \
    \       b = (b * b) % p;\n        }\n        return r;", "        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ n;\n        }\n        long half = modp(n / 2, p);\n        if (n % 2 == 0)\
    \ {\n            return (half * half) % p;\n        } else {\n            return\
    \ (half * half * n) % p;\n        }", "        long res = 1;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) {\n                res = (res * n) % p;\n\
    \            }\n            n = n >> 1;\n            n = (n * n) % p;\n      \
    \  }\n        return res;", "        long result = 1;\n        long base = n %\
    \ p;\n        long exponent = n;\n        while (exponent > 0) {\n           \
    \ if ((exponent & 1) == 1) {\n                result = (result * base) % p;\n\
    \            }\n            exponent >>= 1;\n            base = (base * base)\
    \ % p;\n        }\n        return result;", "        if (n == 0) {\n         \
    \   return 1;\n        }\n        if (n % 2 == 0) {\n            long x = modp(n\
    \ / 2, p);\n            return (x * x) % p;\n        } else {\n            return\
    \ (modp(n - 1, p) * n) % p;\n        }", "        long res = 1;\n        while\
    \ (n > 0) {\n            if ((n & 1) != 0) {\n                res = (res * n)\
    \ % p;\n            }\n            n = n >> 1;\n            n = (n * n) % p;\n\
    \        }\n        return res;", "        long res = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                res = (res * n) % p;\n \
    \           }\n            n = n >> 1;\n            n = (n * n) % p;\n       \
    \ }\n        return res;", "        if (n == 0) {\n            return 1;\n   \
    \     }\n        if (n == 1) {\n            return n;\n        }\n        if (n\
    \ % 2 == 0) {\n            long x = modp(n / 2, p);\n            return (x * x)\
    \ % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n     \
    \   }", "        if (n == 0) {\n            return 1;\n        }\n        long\
    \ res = modp(n / 2, p);\n        res = (res * res) % p;\n        if (n % 2 ==\
    \ 1) {\n            res = (res * 2) % p;\n        }\n        return res;", " \
    \       if (n == 0) {\n            return 1;\n        }\n        long res = modp(n\
    \ / 2, p);\n        res = (res * res) % p;\n        if (n % 2 == 1) {\n      \
    \      res = (res * 2) % p;\n        }\n        return res;", "        long result\
    \ = 1;\n        long base = n % p;\n        long exponent = n;\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p;\n            }\n            exponent >>= 1;\n       \
    \     base = (base * base) % p;\n        }\n        return result;", "       \
    \ if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n\
    \            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n \
    \           return modp(n / 2, p) * modp(n / 2, p) * n % p;\n        }", "   \
    \     long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \       }\n        return res;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n\
    \        if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n    \
    \    return res;", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n           \
    \ return (x * x) % p;\n        } else {\n            return (modp(n - 1, p) *\
    \ n) % p;\n        }", "        if (n == 0) {\n            return 1;\n       \
    \ }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        long result = half * half % p;\n        if (n % 2\
    \ == 1) {\n            result = result * 2 % p;\n        }\n        return result;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n\
    \            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n        }", "  \
    \      long result = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\
    \ {\n                result = (result * n) % p;\n            }\n            n\
    \ = n >> 1;\n        }\n        return result;", "        long res = 1;\n    \
    \    while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * n) % p;\n            }\n            n = n >> 1;\n            n = (n * n) %\
    \ p;\n        }\n        return res;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }", "        long result = 1;\n        long base = n\
    \ % p;\n        long exponent = n;\n        while (exponent > 0) {\n         \
    \   if ((exponent & 1) == 1) {\n                result = (result * base) % p;\n\
    \            }\n            exponent >>= 1;\n            base = (base * base)\
    \ % p;\n        }\n        return result;", "        if (n == 0) {\n         \
    \   return 1;\n        }\n        if (n == 1) {\n            return n;\n     \
    \   }\n        if (n % 2 == 0) {\n            long res = modp(n / 2, p);\n   \
    \         return (res * res) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n \
    \       }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n\
    \ / 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) * n % p;\n        }", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }", "        long res = 1;\n        for (long i = 0;\
    \ i < n; i++) {\n            res = (res * 2) % p;\n        }\n        return res;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n \
    \       } else {\n            return (n * modp(n - 1, p)) % p;\n        }", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n % 2 ==\
    \ 0) {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n\
    \        } else {\n            return (modp(n - 1, p) * n) % p;\n        }", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n % 2 ==\
    \ 0) {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n\
    \        } else {\n            return (modp(n - 1, p) * n) % p;\n        }", " \
    \       long res = 1;\n        long cur = 2;\n        while (n > 0) {\n      \
    \      if ((n & 1) == 1) {\n                res = (res * cur) % p;\n         \
    \   }\n            cur = (cur * cur) % p;\n            n >>= 1;\n        }\n \
    \       return res;", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n           \
    \ return (x * x) % p;\n        } else {\n            return (n * modp(n - 1, p))\
    \ % p;\n        }", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n == 1) {\n            return n;\n        }\n        long half =\
    \ modp(n / 2, p);\n        long half2 = (half * half) % p;\n        if (n % 2\
    \ == 0) {\n            return half2;\n        } else {\n            return (half2\
    \ * n) % p;\n        }", "        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) != 0) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n   \
    \     return res;", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n == 1) {\n            return n;\n        }\n        long half =\
    \ modp(n / 2, p);\n        long result = half * half % p;\n        if (n % 2 ==\
    \ 1) {\n            result = result * 2 % p;\n        }\n        return result;",
  "        if (n == 0) return 1;\n        if (n == 1) return n;\n        long res\
    \ = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     res = (res * n) % p;\n            }\n            n = n >> 1;\n         \
    \   n = (n * n) % p;\n        }\n        return res;", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n % 2 == 0) {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return modp(n\
    \ / 2, p) * modp(n / 2, p) * n % p;\n        }", "        if (n == 0) {\n    \
    \        return 1;\n        }\n        if (n % 2 == 0) {\n            long t =\
    \ modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (n * modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n \
    \           return 1;\n        }\n        if (n % 2 == 0) {\n            long\
    \ t = modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n   \
    \         return (modp(n - 1, p) * n) % p;\n        }", "        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * n) % p;\n            }\n            n = n >> 1;\n            n = (n\
    \ * n) % p;\n        }\n        return res;", "        if (n == 0) return 1;\n\
    \        if (n == 1) return n;\n        long res = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * n) % p;\n     \
    \       }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n\
    \        return res;", "        long res = 1;\n        long base = n;\n      \
    \  while (p > 0) {\n            if ((p & 1) == 1) {\n                res = (res\
    \ * base) % MOD;\n            }\n            base = (base * base) % MOD;\n   \
    \         p >>= 1;\n        }\n        return res;", "        if (n == 0) {\n\
    \            return 1;\n        }\n        long x = modp(n / 2, p);\n        x\
    \ = (x * x) % p;\n        if (n % 2 == 1) {\n            x = (x * 2) % p;\n  \
    \      }\n        return x;", "        long res = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n     \
    \       }\n            n >>= 1;\n        }\n        return res;", "        if\
    \ (n == 0) {\n            return 1;\n        }\n        long x = modp(n / 2, p);\n\
    \        x = (x * x) % p;\n        if (n % 2 == 1) {\n            x = (x * 2)\
    \ % p;\n        }\n        return x;", "        long res = 1;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) {\n                res = (res * n) % p;\n\
    \            }\n            n = n >> 1;\n            n = (n * n) % p;\n      \
    \  }\n        return res;", "        if (n == 0) {\n            return 1;\n  \
    \      }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n\
    \ / 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) * n % p;\n        }", "        long res = 1;\n        long base = n;\n\
    \        while (p > 0) {\n            if ((p & 1) == 1) {\n                res\
    \ = (res * base) % MOD;\n            }\n            base = (base * base) % MOD;\n\
    \            p >>= 1;\n        }\n        return res;", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n == 1) {\n            return n;\n\
    \        }\n        long half = modp(n / 2, p);\n        long result = (half *\
    \ half) % p;\n        if (n % 2 == 1) {\n            result = (result * 2) % p;\n\
    \        }\n        return result;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n == 1) {\n            return n;\n        }\n   \
    \     if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n            return\
    \ (x * x) % p;\n        } else {\n            return (modp(n - 1, p) * n) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  long x = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (x\
    \ * x) % p;\n        } else {\n            return (((x * x) % p) * 2) % p;\n \
    \       }", "        long res = 1;\n        long pow = n;\n        while (p >\
    \ 0) {\n            if ((p & 1) == 1) {\n                res = (res * pow) % p;\n\
    \            }\n            pow = (pow * pow) % p;\n            p >>= 1;\n   \
    \     }\n        return res;", "        long result = 1;\n        long base =\
    \ n % p;\n        long exponent = n;\n        while (exponent > 0) {\n       \
    \     if ((exponent & 1) == 1) {\n                result = (result * base) % p;\n\
    \            }\n            exponent >>= 1;\n            base = (base * base)\
    \ % p;\n        }\n        return result;", "        if (n == 0) {\n         \
    \   return 1;\n        }\n        if (n % 2 == 0) {\n            long x = modp(n\
    \ / 2, p);\n            return (x * x) % p;\n        } else {\n            return\
    \ (n * modp(n - 1, p)) % p;\n        }", "        long res = 1;\n        long\
    \ base = n;\n        while (p > 0) {\n            if ((p & 1) == 1) {\n      \
    \          res = (res * base) % MOD;\n            }\n            base = (base\
    \ * base) % MOD;\n            p >>= 1;\n        }\n        return res;", "   \
    \     if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n\
    \            return modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }", "  \
    \      long res = 1;\n        long a = 2;\n        while (n > 0) {\n         \
    \   if ((n & 1) == 1) {\n                res = (res * a) % p;\n            }\n\
    \            a = (a * a) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n == 1) {\n            return n;\n        }\n        long result = 1;\n   \
    \     long base = n;\n        while (p > 0) {\n            if ((p & 1) == 1) {\n\
    \                result = (result * base) % MOD;\n            }\n            base\
    \ = (base * base) % MOD;\n            p >>= 1;\n        }\n        return result;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n \
    \       } else {\n            return (n * modp(n - 1, p)) % p;\n        }", " \
    \       long res = 1;\n        for (int i = 0; i < n; i++) {\n            res\
    \ = (res * 2) % p;\n        }\n        return res;", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n % 2 == 0) {\n            long\
    \ x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n   \
    \         return (modp(n - 1, p) * n) % p;\n        }", "        long res = 1;\n\
    \        long base = n;\n        while (p > 0) {\n            if ((p & 1) == 1)\
    \ {\n                res = (res * base) % MOD;\n            }\n            base\
    \ = (base * base) % MOD;\n            p >>= 1;\n        }\n        return res;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n \
    \       } else {\n            return (modp(n - 1, p) * n) % p;\n        }", " \
    \       long result = 1;\n        long base = n % p;\n        long exponent =\
    \ n;\n        while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n\
    \                result = (result * base) % p;\n            }\n            exponent\
    \ >>= 1;\n            base = (base * base) % p;\n        }\n        return result;",
  "        long res = 1;\n        long b = 2;\n        while (n > 0) {\n         \
    \   if ((n & 1) == 1) {\n                res = (res * b) % p;\n            }\n\
    \            b = (b * b) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        if (n == 0) {\n            return 1;\n        }\n        long\
    \ res = modp(n / 2, p);\n        res = (res * res) % p;\n        if (n % 2 ==\
    \ 1) {\n            res = (res * 2) % p;\n        }\n        return res;", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n % 2 ==\
    \ 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else\
    \ {\n            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n        }",
  "        long res = 1;\n        long b = 2;\n        while (n > 0) {\n         \
    \   if ((n & 1) == 1) {\n                res = (res * b) % p;\n            }\n\
    \            b = (b * b) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n == 1) {\n            return n;\n        }\n        long res = 1;\n      \
    \  long cur = n;\n        while (p > 0) {\n            if ((p & 1) == 1) {\n \
    \               res = (res * cur) % MOD;\n            }\n            cur = (cur\
    \ * cur) % MOD;\n            p >>= 1;\n        }\n        return res;", "    \
    \    if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n \
    \       } else {\n            return (n * modp(n - 1, p)) % p;\n        }", " \
    \       long ret = 1;\n        long base = n;\n        while (p > 0) {\n     \
    \       if ((p & 1) == 1) {\n                ret = (ret * base) % MOD;\n     \
    \       }\n            base = (base * base) % MOD;\n            p >>= 1;\n   \
    \     }\n        return ret;", "        long res = 1;\n        long b = n;\n \
    \       while (p > 0) {\n            if ((p & 1) == 1) {\n                res\
    \ = (res * b) % MOD;\n            }\n            b = (b * b) % MOD;\n        \
    \    p >>= 1;\n        }\n        return res;", "        long res = 1;\n     \
    \   long b = n;\n        while (p > 0) {\n            if ((p & 1) == 1) {\n  \
    \              res = (res * b) % MOD;\n            }\n            b = (b * b)\
    \ % MOD;\n            p >>= 1;\n        }\n        return res;", "        if (n\
    \ == 0) {\n            return 1;\n        }\n        if (n == 1) {\n         \
    \   return n;\n        }\n        long res = 1;\n        long cur = n;\n     \
    \   while (p > 0) {\n            if ((p & 1) == 1) {\n                res = (res\
    \ * cur) % MOD;\n            }\n            cur = (cur * cur) % MOD;\n       \
    \     p >>= 1;\n        }\n        return res;", "        if (n == 0) {\n    \
    \        return 1;\n        }\n        if (n % 2 == 0) {\n            long t =\
    \ modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (n * modp(n - 1, p)) % p;\n        }", "        long res = 1;\n \
    \       long b = n;\n        while (p > 0) {\n            if ((p & 1) == 1) {\n\
    \                res = (res * b) % MOD;\n            }\n            b = (b * b)\
    \ % MOD;\n            p >>= 1;\n        }\n        return res;", "        long\
    \ res = 1;\n        long b = 2;\n        while (n > 0) {\n            if ((n &\
    \ 1) == 1) {\n                res = (res * b) % p;\n            }\n          \
    \  b = (b * b) % p;\n            n >>= 1;\n        }\n        return res;", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n % 2 ==\
    \ 0) {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n\
    \        } else {\n            return (modp(n - 1, p) * n) % p;\n        }", " \
    \       long res = 1;\n        long b = 2;\n        while (n > 0) {\n        \
    \    if ((n & 1) == 1) {\n                res = (res * b) % p;\n            }\n\
    \            b = (b * b) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        long res = 1;\n        long b = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * b) % p;\n     \
    \       }\n            b = (b * b) % p;\n            n >>= 1;\n        }\n   \
    \     return res;", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n == 1) {\n            return n;\n        }\n        long half =\
    \ modp(n / 2, p);\n        long result = (half * half) % p;\n        if (n % 2\
    \ == 1) {\n            result = (result * n) % p;\n        }\n        return result;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n\
    \            return n;\n        }\n        long res = 1;\n        long a = n;\n\
    \        while (p > 0) {\n            if ((p & 1) == 1) {\n                res\
    \ = (res * a) % MOD;\n            }\n            a = (a * a) % MOD;\n        \
    \    p >>= 1;\n        }\n        return res;", "        if (n == 0) {\n     \
    \       return 1;\n        }\n        if (n == 1) {\n            return n;\n \
    \       }\n        long half = modp(n / 2, p);\n        long halfhalf = (half\
    \ * half) % p;\n        if (n % 2 == 0) {\n            return halfhalf;\n    \
    \    } else {\n            return (halfhalf * n) % p;\n        }", "        if\
    \ (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n  \
    \          return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n   \
    \         return modp(n / 2, p) * modp(n / 2, p) * n % p;\n        }", "     \
    \   if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n\
    \            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n \
    \           return modp(n / 2, p) * modp(n / 2, p) * n % p;\n        }", "   \
    \     if (n == 0) {\n            return 1;\n        }\n        long res = modp(n\
    \ / 2, p);\n        res = (res * res) % p;\n        if (n % 2 == 1) {\n      \
    \      res = (res * 2) % p;\n        }\n        return res;", "        if (n ==\
    \ 0) return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n   \
    \         long x = modp(n / 2, p);\n            return (x * x) % p;\n        }\
    \ else {\n            return (n * modp(n - 1, p)) % p;\n        }", "        if\
    \ (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n  \
    \          long t = modp(n / 2, p);\n            return (t * t) % p;\n       \
    \ } else {\n            return (n * modp(n - 1, p)) % p;\n        }", "      \
    \  long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n \
    \               res = (res * 2) % p;\n            }\n            n >>= 1;\n  \
    \      }\n        return res;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n == 1) {\n            return n;\n        }\n        if\
    \ (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n  \
    \      } else {\n            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n\
    \        }", "        long result = 1;\n        long base = n % p;\n        long\
    \ exponent = n;\n        while (exponent > 0) {\n            if ((exponent & 1)\
    \ == 1) {\n                result = (result * base) % p;\n            }\n    \
    \        exponent >>= 1;\n            base = (base * base) % p;\n        }\n \
    \       return result;", "        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long ans\
    \ = 1;\n        long base = n;\n        while (p > 0) {\n            if ((p &\
    \ 1) == 1) {\n                ans = (ans * base) % MOD;\n            }\n     \
    \       base = (base * base) % MOD;\n            p >>= 1;\n        }\n       \
    \ return ans;", "        if (n == 0) {\n            return 1;\n        }\n   \
    \     if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) %\
    \ p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2, p) * n\
    \ % p;\n        }", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n           \
    \ return (t * t) % p;\n        } else {\n            return (n * modp(n - 1, p))\
    \ % p;\n        }", "        long res = 1;\n        for (long i = 0; i < n; i++)\
    \ {\n            res = (res * 2) % p;\n        }\n        return res;", "    \
    \    if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n\
    \            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n        }", "  \
    \      if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n\
    \            return n;\n        }\n        long half = modp(n / 2, p);\n     \
    \   long result = (half * half) % p;\n        if (n % 2 == 1) {\n            result\
    \ = (result * 2) % p;\n        }\n        return result;", "        long res =\
    \ 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n             \
    \   res = (res * n) % p;\n            }\n            n = n >> 1;\n           \
    \ n = (n * n) % p;\n        }\n        return res;", "        long result = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                result\
    \ = (result * n) % p;\n            }\n            n = n >> 1;\n        }\n   \
    \     return result;", "        if (n == 0) {\n            return 1;\n       \
    \ }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n       \
    \     return (t * t) % p;\n        } else {\n            return (modp(n - 1, p)\
    \ * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n \
    \       }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n \
    \           return (t * t) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n\
    \ / 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) * n % p;\n        }", "        long result = 1;\n        long base = n\
    \ % p;\n        long exponent = n;\n        while (exponent > 0) {\n         \
    \   if ((exponent & 1) == 1) {\n                result = (result * base) % p;\n\
    \            }\n            exponent >>= 1;\n            base = (base * base)\
    \ % p;\n        }\n        return result;", "        if (n == 0) {\n         \
    \   return 1;\n        }\n        if (n % 2 == 0) {\n            long t = modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (modp(n - 1, p) * n) % p;\n        }", "        long result = 1;\n        long\
    \ base = n % p;\n        long exponent = n;\n        while (exponent > 0) {\n\
    \            if ((exponent & 1) == 1) {\n                result = (result * base)\
    \ % p;\n            }\n            exponent >>= 1;\n            base = (base *\
    \ base) % p;\n        }\n        return result;", "        if (n == 0) {\n   \
    \         return 1;\n        }\n        if (n == 1) {\n            return n;\n\
    \        }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n \
    \       }\n        if (n % 2 == 0) {\n            long tmp = modp(n / 2, p);\n\
    \            return (tmp * tmp) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        long res = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                res = (res * n) % p;\n \
    \           }\n            n = n >> 1;\n            n = (n * n) % p;\n       \
    \ }\n        return res;", "        if (n == 0) {\n            return 1;\n   \
    \     }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n   \
    \         return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n \
    \       }\n        if (n == 1) {\n            return n;\n        }\n        if\
    \ (n % 2 == 0) {\n            long x = modp(n / 2, p);\n            return (x\
    \ * x) % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n\
    \        }", "        long res = 1;\n        long b = 2;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                res = (res * b) % p;\n \
    \           }\n            b = (b * b) % p;\n            n >>= 1;\n        }\n\
    \        return res;", "        if (n == 0) {\n            return 1;\n       \
    \ }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2, p)\
    \ * n % p;\n        }", "        if (n == 0) {\n            return 1;\n      \
    \  }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (n * modp(n -\
    \ 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n   \
    \     }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n\
    \ / 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) * n % p;\n        }", "        long res = 1;\n        long b = 2;\n  \
    \      while (n > 0) {\n            if ((n & 1) == 1) {\n                res =\
    \ (res * b) % p;\n            }\n            b = (b * b) % p;\n            n >>=\
    \ 1;\n        }\n        return res;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            long r = modp(n / 2, p);\n\
    \            return (r * r) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * (n % p)) % p;\n        }", "        long res = 1;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) {\n                res = (res * n) % p;\n\
    \            }\n            n = n >> 1;\n            n = (n * n) % p;\n      \
    \  }\n        return res;", "        if (n == 0) {\n            return 1;\n  \
    \      }\n        if (n == 1) {\n            return n;\n        }\n        if\
    \ (n % 2 == 0) {\n            long x = modp(n / 2, p);\n            return (x\
    \ * x) % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n == 1) {\n            return n;\n        }\n        long half = modp(n\
    \ / 2, p);\n        long half_sq = (half * half) % p;\n        if (n % 2 == 0)\
    \ {\n            return half_sq;\n        } else {\n            return (half_sq\
    \ * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }", "        long res = 1;\n        long base = n;\n \
    \       while (p > 0) {\n            if ((p & 1) == 1) {\n                res\
    \ = (res * base) % MOD;\n            }\n            base = (base * base) % MOD;\n\
    \            p >>= 1;\n        }\n        return res;", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n      \
    \      return (x * x) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n  \
    \      }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n  \
    \          return (x * x) % p;\n        } else {\n            return (modp(n -\
    \ 1, p) * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n == 1) {\n            return n;\n        }\n        long\
    \ x = modp(n / 2, p);\n        x = (x * x) % p;\n        if (n % 2 == 1) {\n \
    \           x = (x * 2) % p;\n        }\n        return x;", "        if (n ==\
    \ 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n        \
    \    long x = modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (modp(n - 1, p) * n) % p;\n        }", "        if (n\
    \ == 0) {\n            return 1;\n        }\n        if (n == 1) {\n         \
    \   return n;\n        }\n        long res = modp(n / 2, p);\n        res = (res\
    \ * res) % p;\n        if (n % 2 == 1) {\n            res = (res * 2) % p;\n \
    \       }\n        return res;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n\
    \ / 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) * n % p;\n        }", "        if (n == 0) {\n            return 1;\n\
    \        }\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n\
    \        if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n    \
    \    return res;", "        long r = 1;\n        long b = 2;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) {\n                r = (r * b) % p;\n\
    \            }\n            n >>= 1;\n            b = (b * b) % p;\n        }\n\
    \        return r;", "        long res = 1;\n        while (n > 0) {\n       \
    \     if ((n & 1) != 0) {\n                res = (res * n) % p;\n            }\n\
    \            n = n >> 1;\n            n = (n * n) % p;\n        }\n        return\
    \ res;", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n % 2 == 0) {\n            long x = modp(n / 2, p);\n            return (x\
    \ * x) % p;\n        } else {\n            return (modp(n - 1, p) * n) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n == 1) {\n            return n;\n        }\n        long half = modp(n\
    \ / 2, p);\n        long result = (half * half) % p;\n        if (n % 2 == 1)\
    \ {\n            result = (result * 2) % p;\n        }\n        return result;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n\
    \            return n;\n        }\n        if (n % 2 == 0) {\n            long\
    \ x = modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n   \
    \         return (n * modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n == 1) {\n            return n;\n\
    \        }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }", "        long res = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * n) % p;\n     \
    \       }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n\
    \        return res;", "        long res = 1;\n        for (int i = 0; i < n;\
    \ i++) {\n            res = (res * 2) % p;\n        }\n        return res;", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n % 2 ==\
    \ 0) {\n            long t = modp(n / 2, p);\n            return (t * t) % p;\n\
    \        } else {\n            return (n * modp(n - 1, p)) % p;\n        }", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n % 2 ==\
    \ 0) {\n            long t = modp(n / 2, p);\n            return (t * t) % p;\n\
    \        } else {\n            return (modp(n - 1, p) * n) % p;\n        }", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n % 2 ==\
    \ 0) {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n\
    \        } else {\n            return (n * modp(n - 1, p)) % p;\n        }", " \
    \       if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long x =\
    \ modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n       \
    \     return (modp(n - 1, p) * n) % p;\n        }", "        if (n == 0) {\n \
    \           return 1;\n        }\n        if (n % 2 == 0) {\n            return\
    \ modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return modp(n\
    \ / 2, p) * modp(n / 2, p) * n % p;\n        }", "        if (n == 0) {\n    \
    \        return 1;\n        }\n        if (n % 2 == 0) {\n            return modp(n\
    \ / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return modp(n /\
    \ 2, p) * modp(n / 2, p) * n % p;\n        }", "        if (n == 0) {\n      \
    \      return 1;\n        }\n        if (n % 2 == 0) {\n            long m = modp(n\
    \ / 2, p);\n            return (m * m) % p;\n        } else {\n            return\
    \ (n * modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n == 1) {\n            return n;\n        }\n   \
    \     long a = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return\
    \ (a * a) % p;\n        } else {\n            return (a * a * n) % p;\n      \
    \  }", "        if (n == 0) {\n            return 1;\n        }\n        if (n\
    \ == 1) {\n            return n;\n        }\n        long half = modp(n / 2, p);\n\
    \        long halfhalf = (half * half) % p;\n        if (n % 2 == 0) {\n     \
    \       return halfhalf;\n        } else {\n            return (halfhalf * n)\
    \ % p;\n        }", "        long res = 1;\n        long b = 2;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * b)\
    \ % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n  \
    \      }\n        return res;", "        long res = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                res = (res * n) % p;\n \
    \           }\n            n = n >> 1;\n            n = (n * n) % p;\n       \
    \ }\n        return res;", "        long res = 1;\n        long b = n;\n     \
    \   while (p > 0) {\n            if ((p & 1) == 1) {\n                res = (res\
    \ * b) % MOD;\n            }\n            b = (b * b) % MOD;\n            p >>=\
    \ 1;\n        }\n        return res;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n == 1) {\n            return n;\n        }\n   \
    \     long half = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return\
    \ (half * half) % p;\n        } else {\n            return (half * half * n) %\
    \ p;\n        }", "        if (n == 0) {\n            return 1;\n        }\n \
    \       long res = modp(n / 2, p);\n        res = (res * res) % p;\n        if\
    \ (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n        return\
    \ res;", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n  \
    \      } else {\n            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n\
    \        } else {\n            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n            return\
    \ (x * x) % p;\n        } else {\n            return (modp(n - 1, p) * n) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n            return\
    \ (x * x) % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n == 1) {\n            return n;\n        }\n        long res = 1;\n  \
    \      long cur = n;\n        while (p > 0) {\n            if ((p & 1) == 1) {\n\
    \                res = res * cur % MOD;\n            }\n            cur = cur\
    \ * cur % MOD;\n            p >>= 1;\n        }\n        return res;", "     \
    \   long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \       }\n        return res;", "        long result = 1;\n        long base\
    \ = n % p;\n        long exponent = n;\n        while (exponent > 0) {\n     \
    \       if ((exponent & 1) == 1) {\n                result = (result * base) %\
    \ p;\n            }\n            exponent >>= 1;\n            base = (base * base)\
    \ % p;\n        }\n        return result;", "        long res = 1;\n        long\
    \ b = n;\n        while (p > 0) {\n            if ((p & 1) == 1) {\n         \
    \       res = (res * b) % MOD;\n            }\n            b = (b * b) % MOD;\n\
    \            p >>= 1;\n        }\n        return res;", "        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n == 1) {\n            return n;\n\
    \        }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n \
    \       }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n \
    \           return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        long res = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n \
    \           }\n            n >>= 1;\n        }\n        return res;", "      \
    \  if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n\
    \            long x = modp(n / 2, p);\n            return (x * x) % p;\n     \
    \   } else {\n            return (modp(n - 1, p) * n) % p;\n        }", "    \
    \    long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * n) % p;\n            }\n            n = n >> 1;\n\
    \            n = (n * n) % p;\n        }\n        return res;", "        long\
    \ res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n       \
    \         res = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n\
    \        return res;", "        if (n == 0) {\n            return 1;\n       \
    \ }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2, p)\
    \ * n % p;\n        }", "        if (n == 0) {\n            return 1;\n      \
    \  }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n      \
    \      return (x * x) % p;\n        } else {\n            return (n * modp(n -\
    \ 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n   \
    \     }\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n\
    \        if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n    \
    \    return res;", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n           \
    \ return (t * t) % p;\n        } else {\n            return (modp(n - 1, p) *\
    \ n) % p;\n        }", "        if (n == 0) {\n            return 1;\n       \
    \ }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2, p)\
    \ * n % p;\n        }", "        long res = 1;\n        while (n > 0) {\n    \
    \        if ((n & 1) == 1) {\n                res = (res * n) % p;\n         \
    \   }\n            n = n >> 1;\n            n = (n * n) % p;\n        }\n    \
    \    return res;", "        long res = 1;\n        while (n > 0) {\n         \
    \   if ((n & 1) != 0) {\n                res = (res * n) % p;\n            }\n\
    \            n = n >> 1;\n            n = (n * n) % p;\n        }\n        return\
    \ res;", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n % 2 == 0) {\n            long x = modp(n / 2, p);\n            return (x\
    \ * x) % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n\
    \        } else {\n            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n\
    \        }", "        long res = 1;\n        while (n > 0) {\n            if ((n\
    \ & 1) == 1) {\n                res = (res * n) % p;\n            }\n        \
    \    n = n >> 1;\n            n = (n * n) % p;\n        }\n        return res;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n\
    \            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n        }", "  \
    \      if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            long t = modp(n / 2, p);\n            return (t * t) % p;\n \
    \       } else {\n            return (modp(n - 1, p) * n) % p;\n        }", " \
    \       if (n == 0) return 1;\n        long ans = modp(n / 2, p);\n        ans\
    \ = (ans * ans) % p;\n        if (n % 2 == 1) ans = (ans * 2) % p;\n        return\
    \ ans;", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n % 2 == 0) {\n            long r = modp(n / 2, p);\n            return (r\
    \ * r) % p;\n        } else {\n            return (modp(n - 1, p) * n) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n == 1) {\n            return n;\n        }\n        long x = modp(n /\
    \ 2, p);\n        if (n % 2 == 0) {\n            return (x * x) % p;\n       \
    \ } else {\n            return (((x * x) % p) * n) % p;\n        }", "       \
    \ long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n  \
    \              res = (res * n) % p;\n            }\n            n = n >> 1;\n\
    \            n = (n * n) % p;\n        }\n        return res;", "        if (n\
    \ == 0) return 1;\n        if (n % 2 == 0) {\n            long x = modp(n / 2,\
    \ p);\n            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }", "        long result = 1;\n        long power\
    \ = n % p;\n        long divisor = p;\n        while (power > 0) {\n         \
    \   if ((power & 1) != 0) {\n                result = (result * power) % divisor;\n\
    \            }\n            power >>= 1;\n            power %= divisor;\n    \
    \        power *= power;\n            power %= divisor;\n        }\n        return\
    \ result;", "        long result = 1;\n        long base = n % p;\n        long\
    \ exponent = n;\n        while (exponent > 0) {\n            if ((exponent & 1)\
    \ == 1) {\n                result = (result * base) % p;\n            }\n    \
    \        exponent >>= 1;\n            base = (base * base) % p;\n        }\n \
    \       return result;", "        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2\
    \ == 0) {\n            long x = modp(n / 2, p);\n            return (x * x) %\
    \ p;\n        } else {\n            return (modp(n - 1, p) * n) % p;\n       \
    \ }", "        long res = 1;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * 2) % p;\n            }\n            n\
    \ >>= 1;\n        }\n        return res;"]
stop_tokens:
- "\n    }\n"
