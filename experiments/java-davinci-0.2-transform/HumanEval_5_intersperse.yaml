name: HumanEval_5_intersperse
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Insert a number 'delimeter' between every two consecutive\
  \ elements of input list `numbers'\n    // >>> intersperse((new ArrayList<Long>(Arrays.asList())),\
  \ (4l))\n    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> intersperse((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l))\n    // (new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)4l, (long)3l)))\n\
  \    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter)\
  \ {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(intersperse((new\
  \ ArrayList<Long>(Arrays.asList())), (7l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(intersperse((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l,\
  \ (long)2l))), (8l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l,\
  \ (long)6l, (long)8l, (long)3l, (long)8l, (long)2l)))));\n    assert(intersperse((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l, (long)2l, (long)2l)))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i != numbers.size()\
    \ - 1) {\n                result.add(delimeter);\n            }\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i < numbers.size() -\
    \ 1) {\n                result.add(delimeter);\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i != numbers.size()\
    \ - 1) {\n                result.add(delimeter);\n            }\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i < numbers.size() -\
    \ 1) {\n                result.add(delimeter);\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i < numbers.size() -\
    \ 1) {\n                result.add(delimeter);\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i != numbers.size()\
    \ - 1) {\n                result.add(delimeter);\n            }\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i < numbers.size() -\
    \ 1) {\n                result.add(delimeter);\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i < numbers.size() -\
    \ 1) {\n                result.add(delimeter);\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i != numbers.size()\
    \ - 1) {\n                result.add(delimeter);\n            }\n        }\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n\
    \            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            result.add(numbers.get(i));\n            if (i < numbers.size() -\
    \ 1) {\n                result.add(delimeter);\n            }\n        }\n   \
    \     return result;"]
stop_tokens:
- "\n    }\n"
