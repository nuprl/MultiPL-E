name: HumanEval_115_max_fill
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
  \    // Each well has a corresponding bucket that can be used to extract water from\
  \ it, \n    // and all buckets have the same capacity.\n    // Your task is to use\
  \ the buckets to empty the wells.\n    // Output the number of times you need to\
  \ lower the buckets.\n    // Example 1:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (1l))\n\
  \    // (6l)\n    // Example 2:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\n\
  \    // (5l)\n    // Example 3:\n    // >>> maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l))\n    //\
  \ (0l)\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
  \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
  \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static long maxFill(ArrayList<ArrayList<Long>>\
  \ grid, long capacity) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)0l, (long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l, (long)1l, (long)1l))))), (1l)) == (6l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)1l))))), (2l))\
  \ == (5l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l))))), (5l)) == (0l));\n\
  \    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (2l))\
  \ == (4l));\n    assert(maxFill((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))))), (9l))\
  \ == (2l));\n    }\n\n}\n"
completions: ["        // your code here\n        return 0l;", "        // your code\
    \ here\n        return 0l;", "        // Your code here\n        return 0l;",
  "        // your code goes here\n        return 0l;", "        // your code goes\
    \ here\n        return 0l;", "        // your code here\n        return 0l;",
  "        // your code here\n        return 0;", "        long result = 0;\n    \
    \    // your code here\n        return result;", "        // Your code here\n\
    \        return 0l;", "        // your code goes here\n        return 0;", " \
    \       // your code here\n        return 0l;", "        // your code here\n \
    \       return 0l;", "        // Your code here\n        return (long)0l;", " \
    \       // Your code goes here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        // Fill in the code here\n        return 0l;", " \
    \       // your code here\n        return 0l;", "        // Your code here\n \
    \       return 0l;", "        long maxFill = 0;\n        for (ArrayList<Long>\
    \ row : grid) {\n            long rowFill = 0;\n            for (Long well : row)\
    \ {\n                if (well == 1) {\n                    rowFill += 1;\n   \
    \             }\n            }\n            maxFill += rowFill / capacity;\n \
    \           if (rowFill % capacity != 0) {\n                maxFill += 1;\n  \
    \          }\n        }\n        return maxFill;", "        // your code here\n\
    \        return 0l;", "        // your code here\n        return 0l;", "     \
    \   // your code goes here\n        return 0l;", "        // Your code here\n\
    \        return 0l;", '        return 0;', "        // your code here\n      \
    \  return 0l;", "        // your code here\n        return 0l;", "        // your\
    \ code here\n        return 0l;", "        // your code goes here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        long maxFill\
    \ = 0;\n        long rowLength = grid.get(0).size();\n        long colLength =\
    \ grid.size();\n        long[][] gridArray = new long[(int)colLength][(int)rowLength];\n\
    \        for (int i = 0; i < colLength; i++) {\n            for (int j = 0; j\
    \ < rowLength; j++) {\n                gridArray[i][j] = grid.get(i).get(j);\n\
    \            }\n        }\n        for (int i = 0; i < colLength; i++) {\n   \
    \         for (int j = 0; j < rowLength; j++) {\n                if (gridArray[i][j]\
    \ == 1) {\n                    maxFill += capacity;\n                    for (int\
    \ k = 0; k < colLength; k++) {\n                        if (gridArray[k][j] ==\
    \ 1) {\n                            gridArray[k][j] = 0;\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \        return maxFill;", "        // Fill in your solution here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // fill in your\
    \ solution here\n        return 0l;", "        // Your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // your code\
    \ here\n        return 0l;", "        // your code goes here\n        return 0;",
  "        // your code here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        // Your code here\n        return 0l;", "       \
    \ // Your code here\n        return 0;", "        // your code here\n        return\
    \ 0l;", "        // Your code here\n        return 0l;", "        // your code\
    \ here\n        return 0l;", "        long result = 0;\n        // Your code goes\
    \ here\n        return result;", "        long maxFill = 0;\n        for (ArrayList<Long>\
    \ row : grid) {\n            long rowFill = 0;\n            for (Long well : row)\
    \ {\n                if (well == 1) {\n                    rowFill += 1;\n   \
    \             }\n            }\n            maxFill += (rowFill / capacity) +\
    \ ((rowFill % capacity) > 0 ? 1 : 0);\n        }\n        return maxFill;", " \
    \       long result = 0;\n        // Your code here\n        return result;",
  "        // your code here\n        return 0;", "        // your code here\n   \
    \     return 0l;", "        // Your code here\n        return 0;", "        //\
    \ your code here\n        return 0l;", "        // Your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // your code\
    \ here\n        return 0l;", "        // your code here\n        return 0l;",
  "        // your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        // your code goes here\n        return (long)0l;",
  "        // Your code here\n        return 0;", "        // Your code here\n   \
    \     return 0l;", "        // your code here\n        return 0l;", "        //\
    \ your code here\n        return 0l;", "        // your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        long maxFill\
    \ = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int\
    \ j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;", "        // your code here\n \
    \       return 0l;", "        // your code here\n        return 0;", "       \
    \ // Your code here\n        return 0;", "        // Your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        long maxFill\
    \ = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int\
    \ j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;", "        // your code here\n \
    \       return 0l;", "        // Fill in the code here\n        return 0l;", " \
    \       // your code here\n        return 0l;", "        // your code goes here\n\
    \        return 0l;", "        // your code here\n        return 0l;", "     \
    \   // your code goes here\n        return 0l;", "        // Your code here\n\
    \        return 0l;", "        // Your code here\n        return 0l;", "     \
    \   // your code here\n        return 0l;", "        // Your code here\n     \
    \   return 0l;", "        // your code here\n        return 0l;", '        return
    0l;', "        // Fill in your code here\n        return 0;", '        return
    0;', "        // Your code here\n        return 0l;", "        long total = 0;\n\
    \        for (ArrayList<Long> row : grid) {\n            for (Long col : row)\
    \ {\n                total += col;\n            }\n        }\n        return total\
    \ / capacity;", "        // fill in code here\n        return 0l;", "        //\
    \ Your code here\n        return (long)0l;", "        // Your code here\n    \
    \    return 0l;", "        // your code here\n        return 0l;", "        long\
    \ result = 0;\n        long max = 0;\n        for (int i = 0; i < grid.size();\
    \ i++) {\n            max = 0;\n            for (int j = 0; j < grid.get(i).size();\
    \ j++) {\n                if (grid.get(i).get(j) == 1) {\n                   \
    \ max++;\n                }\n            }\n            if (max > capacity) {\n\
    \                result += max - capacity;\n            }\n        }\n       \
    \ return result;", "        // Your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        // Your code here\n        return\
    \ 0l;", "        long result = 0;\n        for (int i = 0; i < grid.size(); i++)\
    \ {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n            \
    \    if (grid.get(i).get(j) == 1) {\n                    result += capacity;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // your code goes here\n        return 0l;", "        // Your code here\n\
    \        return 0;", "        long maxFill = 0;\n        for (ArrayList<Long>\
    \ row : grid) {\n            long rowFill = 0;\n            for (Long well : row)\
    \ {\n                if (well == 1) {\n                    rowFill += 1;\n   \
    \             }\n            }\n            if (rowFill > capacity) {\n      \
    \          maxFill += capacity;\n            } else {\n                maxFill\
    \ += rowFill;\n            }\n        }\n        return maxFill;", "        //\
    \ your code goes here\n        return 0l;", "        // Your code here\n     \
    \   return 0;", "        // Your code here\n        return 0l;", "        // your\
    \ code here\n        return 0l;", "        // your code here\n        return 0l;",
  "        // your code here\n        return 0l;", "        // Your code here\n  \
    \      return 0;", "        long maxFill = 0;\n        for (ArrayList<Long> row\
    \ : grid) {\n            maxFill += row.stream().filter(x -> x == 1).count();\n\
    \        }\n        return maxFill / capacity;", "        // Your code here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ // your code here\n        return 0l;", "        // your code goes here\n  \
    \      return 0l;", "        // your code here\n        return 0l;", "       \
    \ // Fill in your solution here\n        return 0l;", "        // your code here\n\
    \        return 0l;", "        // Fill in the code here\n        return 0;", " \
    \       // your code here\n        return 0;", "        // Your code here\n  \
    \      return 0l;", '        return 0;', "        // your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // your code\
    \ here\n        return 0l;", "        // your code here\n        return 0;", " \
    \       // Fill in the code here\n        return 0l;", "        // your code here\n\
    \        return 0l;", "        // Your code here\n        return 0l;", "     \
    \   // Your code here\n        return 0l;", "        // your code here\n     \
    \   return 0l;", "        long count = 0;\n        for (int i = 0; i < grid.size();\
    \ i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n       \
    \         if (grid.get(i).get(j) == 1) {\n                    count += capacity;\n\
    \                    for (int k = i + 1; k < grid.size(); k++) {\n           \
    \             if (grid.get(k).get(j) == 1) {\n                            count--;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return count;", "        long count = 0;\n       \
    \ for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size();\
    \ j++) {\n                if (grid.get(i).get(j) == 1) {\n                   \
    \ count += 1;\n                }\n            }\n        }\n        return count\
    \ / capacity;", "        // Fill in your code here\n        return 0l;", "   \
    \     // Your code goes here\n        return 0l;", "        long maxFill = 0;\n\
    \        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0;\
    \ j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1)\
    \ {\n                    maxFill += capacity;\n                }\n           \
    \ }\n        }\n        return maxFill;", "        // your code here\n       \
    \ return 0l;", "        // your code here\n        return 0l;", '        return
    0l;', "        // your code here\n        return 0l;", "        // your code here\n\
    \        return 0l;", "        // Your code here\n        return 0l;", "     \
    \   // Your code here\n        return 0;", "        // your code goes here\n \
    \       return 0l;", "        // Your code here\n        return 0l;", "      \
    \  // your code here\n        return 0l;", "        // your code here\n      \
    \  return 0l;", "        // your code goes here\n        return 0;", "       \
    \ long maxFill = 0;\n        for (int i = 0; i < grid.size(); i++) {\n       \
    \     for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;", "        // Your code here\n \
    \       return 0l;", "        // your code here\n        return 0l;", "      \
    \  // your code here\n        return 0l;", '        return 0;', "        // Your\
    \ code here\n        return 0l;", "        // your code here\n        return 0l;",
  "        // Your code here\n        return 0l;", '        return 0;', "        long\
    \ result = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for\
    \ (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ == 1) {\n                    result += capacity;\n                }\n      \
    \      }\n        }\n        return result;", "        // your code here\n   \
    \     return 0l;", "        // your code here\n        return 0l;", "        //\
    \ your code here\n        return 0l;", "        // your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // your code\
    \ here\n        return 0l;", "        // Your code here\n        return 0l;",
  "        // your code here\n        return 0l;", "        // your code here\n  \
    \      return 0l;", "        // Your code here\n        return 0l;", "       \
    \ // your code here\n        return 0l;", '        return 0;', "        // your\
    \ code here\n        return 0l;", "        // your code here\n        return 0l;",
  "        // Your code here\n        return 0l;", "        // Your code here\n  \
    \      return 0;", "        // Your code here\n        return 0;", "        //\
    \ your code here\n        return 0l;", "        // your code here\n        return\
    \ 0l;", "        // your code here\n        return 0l;", "        // your code\
    \ here\n        return 0;", "        // your code here\n        return 0;", " \
    \       // Your code here\n        return 0;", "        // Your code here\n  \
    \      return 0l;", "        // Your code here\n        return 0l;", "       \
    \ long result = 0;\n        // Your code here\n        return result;", "    \
    \    long count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n      \
    \      for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j)\
    \ == 1) {\n                    count++;\n                }\n            }\n  \
    \      }\n        return count / capacity + (count % capacity == 0 ? 0 : 1);",
  "        // Your code here\n        return 0;", "        // your code here\n   \
    \     return 0l;", "        // your code goes here\n        return 0l;", "   \
    \     // Your code here\n        return 0l;", "        // your code here\n   \
    \     return 0l;", "        // your code here\n        return 0l;", "        //\
    \ your code here\n        return 0l;", "        // Your code here\n        return\
    \ 0l;", "        // Your code here\n        return 0l;", "        // Your code\
    \ here\n        return 0l;", "        // Your code here\n        return 0;", " \
    \       // your code goes here\n        return 0;", "        // your code here\n\
    \        return 0l;", "        // your code here\n        return 0;", "      \
    \  // your code goes here\n        return 0l;", "        long result = 0;\n  \
    \      // your code goes here\n        return result;", "        // your code\
    \ here\n        return 0l;", "        long result = 0;\n        for (int i = 0;\
    \ i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size();\
    \ j++) {\n                if (grid.get(i).get(j) == 1) {\n                   \
    \ result += capacity;\n                }\n            }\n        }\n        return\
    \ result;", "        // Your code here\n        return 0l;"]
stop_tokens:
- "\n    }\n"
