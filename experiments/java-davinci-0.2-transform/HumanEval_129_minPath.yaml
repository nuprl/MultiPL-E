name: HumanEval_129_minPath
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a grid with N rows and N columns (N >= 2) and a positive\
  \ integer k, \n    // each cell of the grid contains a value. Every integer in the\
  \ range [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n\
  \    // You have to find the minimum path of length k in the grid. You can start\n\
  \    // from any cell, and in each step you can move to any of the neighbor cells,\n\
  \    // in other words, you can go to cells which share an edge with you current\n\
  \    // cell.\n    // Please note that a path of length k means visiting exactly\
  \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
  \    // A path A (of length k) is considered less than a path B (of length k) if\n\
  \    // after making the ordered lists of the values on the cells that A and B go\n\
  \    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n\
  \    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\
  \    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    //\
  \ lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n   \
  \ // Return an ordered list of the values on the cells that the minimum path go\
  \ through.\n    // Examples:    \n    // >>> minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))))), (3l))\n    //\
  \ (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))\n    // >>>\
  \ minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)9l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)8l, (long)2l))))), (1l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l)))\n\
  \    public static ArrayList<Long> minPath(ArrayList<ArrayList<Long>> grid, long\
  \ k) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(minPath((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)8l, (long)9l))))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)3l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l))))), (1l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l, (long)16l))))),\
  \ (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l,\
  \ (long)2l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)10l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)12l, (long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)16l, (long)11l, (long)15l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l))))), (7l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)1l, (long)10l, (long)1l,\
  \ (long)10l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)8l, (long)14l, (long)9l, (long)2l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)13l, (long)15l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)1l, (long)12l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)11l, (long)16l))))),\
  \ (5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)1l,\
  \ (long)7l, (long)1l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)7l, (long)2l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)10l, (long)1l))))),\
  \ (9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)1l,\
  \ (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l)))));\n    assert(minPath((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l,\
  \ (long)13l, (long)10l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l,\
  \ (long)3l, (long)15l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)16l, (long)14l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l,\
  \ (long)8l, (long)7l, (long)2l))))), (12l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l, (long)6l, (long)1l,\
  \ (long)6l, (long)1l, (long)6l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)5l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)9l))))), (8l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)1l,\
  \ (long)3l, (long)1l, (long)3l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)5l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)8l, (long)9l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)4l))))), (8l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)1l, (long)5l, (long)1l,\
  \ (long)5l, (long)1l, (long)5l)))));\n    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)4l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l, (long)1l, (long)2l)))));\n\
  \    assert(minPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)2l))))), (10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
  \ (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l, (long)3l)))));\n\
  \    }\n\n}\n"
completions: ["        // Your code here.\n        return null;", "        // Your\
    \ code here\n        return null;", "        // Your code here\n        return\
    \ null;", "        // Your code goes here.\n        return null;", '        return
    null;', "        // Your code here\n        return null;", "        int n = grid.size();\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        ArrayList<ArrayList<Long>>\
    \ dp = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < n; i++)\
    \ {\n            dp.add(new ArrayList<Long>());\n            for (int j = 0; j\
    \ < n; j++) {\n                dp.get(i).add((long)0);\n            }\n      \
    \  }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n;\
    \ j++) {\n                if (i == 0 && j == 0) {\n                    dp.get(i).set(j,\
    \ (long)1);\n                } else if (i == 0) {\n                    dp.get(i).set(j,\
    \ dp.get(i).get(j - 1));\n                } else if (j == 0) {\n             \
    \       dp.get(i).set(j, dp.get(i - 1).get(j));\n                } else {\n  \
    \                  dp.get(i).set(j, dp.get(i - 1).get(j) + dp.get(i).get(j - 1));\n\
    \                }\n            }\n        }\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = 0; j < n; j++) {\n                System.out.print(dp.get(i).get(j)\
    \ + \" \");\n            }\n            System.out.println();\n        }\n   \
    \     return ans;", "        // Your code goes here.\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ here\n        return null;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        return res;", "        // Your code here\n        return null;", "  \
    \      // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code here\n        return new ArrayList<Long>();", "        //\
    \ Your code here\n        return null;", "        int n = grid.size();\n     \
    \   long[][] dist = new long[n][n];\n        for (int i = 0; i < n; i++) {\n \
    \           for (int j = 0; j < n; j++) {\n                dist[i][j] = Long.MAX_VALUE;\n\
    \            }\n        }\n        dist[0][0] = 0;\n        PriorityQueue<Pair<Long,\
    \ Pair<Integer, Integer>>> pq = new PriorityQueue<Pair<Long, Pair<Integer, Integer>>>(new\
    \ Comparator<Pair<Long, Pair<Integer, Integer>>>() {\n            public int compare(Pair<Long,\
    \ Pair<Integer, Integer>> a, Pair<Long, Pair<Integer, Integer>> b) {\n       \
    \         if (a.getValue0().equals(b.getValue0())) {\n                    if (a.getValue1().getValue0().equals(b.getValue1().getValue0()))\
    \ {\n                        return a.getValue1().getValue1().compareTo(b.getValue1().getValue1());\n\
    \                    }\n                    return a.getValue1().getValue0().compareTo(b.getValue1().getValue0());\n\
    \                }\n                return a.getValue0().compareTo(b.getValue0());\n\
    \            }\n        });\n        pq.add(new Pair<Long, Pair<Integer, Integer>>(0l,\
    \ new Pair<Integer, Integer>(0, 0)));\n        while (!pq.isEmpty()) {\n     \
    \       Pair<Long, Pair<Integer, Integer>> p = pq.poll();\n            long d\
    \ = p.getValue0();\n            int i = p.getValue1().getValue0();\n         \
    \   int j = p.getValue1().getValue1();\n            if (d > dist[i][j]) {\n  \
    \              continue;\n            }\n            if (i > 0) {\n          \
    \      if (d + grid.get(i - 1).get(j) < dist[i - 1][j]) {\n                  \
    \  dist[i - 1][j] = d + grid.get(i - 1).get(j);\n                    pq.add(new\
    \ Pair<Long, Pair<Integer, Integer>>", "        // Your code goes here.\n    \
    \    return null;", "        ArrayList<Long> ans = new ArrayList<Long>();\n  \
    \      return ans;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code here\n        return null;", "        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return null;",
  "        // Your code here\n        return null;", '        return null;', "   \
    \     // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ goes here.\n        return null;", "        // Your code goes here.\n      \
    \  return null;", "        int n = grid.size();\n        long[][] dp = new long[n][n];\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++)\
    \ {\n                dp[i][j] = Long.MAX_VALUE;\n            }\n        }\n  \
    \      dp[0][0] = grid.get(0).get(0);\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = 0; j < n; j++) {\n                if (i > 0) {\n   \
    \                 dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + grid.get(i).get(j));\n\
    \                }\n                if (j > 0) {\n                    dp[i][j]\
    \ = Math.min(dp[i][j], dp[i][j - 1] + grid.get(i).get(j));\n                }\n\
    \            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        ans.add(grid.get(0).get(0));\n        int i = 0;\n        int j = 0;\n\
    \        while (k > 1) {\n            if (i + 1 < n && dp[i + 1][j] + grid.get(i\
    \ + 1).get(j) == dp[i][j]) {\n                i++;\n            } else {\n   \
    \             j++;\n            }\n            ans.add(grid.get(i).get(j));\n\
    \            k--;\n        }\n        return ans;", "        // Your code here\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return null;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        return res;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here\n        return null;", "        // Your code here.\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code here\n        return null;", "        ArrayList<Long> res\
    \ = new ArrayList<Long>();\n        return res;", "        // Your code goes here.\n\
    \        return null;", '        return new ArrayList<Long>();', "        // Your\
    \ code goes here.\n        return null;", '        return new ArrayList<Long>();',
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code goes here\n        return null;",
  "        // Your code here\n        return null;", '        return new ArrayList<Long>();',
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code here\n        return null;",
  "        // Your code goes here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", '        return new ArrayList<Long>();',
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (int i = 0; i < k; i++) {\n            res.add((long)0);\n      \
    \  }\n        return res;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        return res;", "        // Your code here\n        return null;", "  \
    \      // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        return ans;", "        // Your code here\n        return null;", "  \
    \      // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ here\n        return null;", "        // Your code here\n        return null;",
  "        // Your code here\n        return null;", "        // Your code goes here.\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code here\n        return null;", '        return null;', "  \
    \      // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return null;", "        // Your code goes here.\n  \
    \      return null;", "        // Your code goes here\n        return null;",
  "        // Your code here\n        return null;", "        // Your code goes here.\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", '        return null;', "        // Your code here\n \
    \       return null;", "        // Your code here\n        return null;", "  \
    \      // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ here\n        return null;", "        int n = grid.size();\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n      \
    \      ans.add((long)0);\n        }\n        long[][] dp = new long[n][n];\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++)\
    \ {\n                dp[i][j] = Long.MAX_VALUE;\n            }\n        }\n  \
    \      for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++)\
    \ {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n\
    \                } else if (i == 0) {\n                    dp[i][j] = dp[i][j\
    \ - 1] + grid.get(i).get(j);\n                } else if (j == 0) {\n         \
    \           dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n                } else\
    \ {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n\
    \                }\n            }\n        }\n        int i = n - 1;\n       \
    \ int j = n - 1;\n        while (k > 0) {\n            ans.set(k - 1, grid.get(i).get(j));\n\
    \            if (i == 0) {\n                j--;\n            } else if (j ==\
    \ 0) {\n                i--;\n            } else {\n                if (dp[i -\
    \ 1][j] < dp[i][j - 1]) {\n                    i--;\n                } else {\n\
    \                    j--;\n                }\n            }\n            k--;\n\
    \        }\n        return ans;", '        return null;', "        // Your code\
    \ here\n        return null;", "        // Your code here\n        return null;",
  "        // Your code here\n        return null;", '        return null;', "   \
    \     // Your code here\n        return null;", "        // Your code here\n \
    \       return null;", "        // Your code goes here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        return result;", "        // Your code\
    \ here\n        return null;", "        // Your code here\n        return null;",
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Your code here\n        return null;", '        return null;', "  \
    \      // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       ArrayList<Long> ans = new ArrayList<Long>();\n        // Your code here.\n\
    \        return ans;", "        // Your code here\n        return null;", "  \
    \      ArrayList<Long> res = new ArrayList<Long>();\n        return res;", " \
    \       // Your code here\n        return null;", '        return new ArrayList<Long>();',
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", '        return null;', '        return new ArrayList<Long>();',
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code here\n        return null;",
  "        // Your code here\n        return null;", '        return null;', "   \
    \     // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return null;", "        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        return ans;", "        int n = grid.size();\n        int[][] dp = new\
    \ int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j =\
    \ 0; j < n; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n          \
    \  }\n        }\n        dp[0][0] = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = 0; j < n; j++) {\n                if (i > 0) {\n   \
    \                 dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n         \
    \       }\n                if (j > 0) {\n                    dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n                }\n            }\n        }\n        for\
    \ (int i = n - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--)\
    \ {\n                if (i < n - 1) {\n                    dp[i][j] = Math.min(dp[i][j],\
    \ dp[i + 1][j] + 1);\n                }\n                if (j < n - 1) {\n  \
    \                  dp[i][j] = Math.min(dp[i][j], dp[i][j + 1] + 1);\n        \
    \        }\n            }\n        }\n        ArrayList<Pair<Integer, Integer>>\
    \ q = new ArrayList<Pair<Integer, Integer>>();\n        q.add(new Pair<Integer,\
    \ Integer>(0, 0));\n        int[][] dist = new int[n][n];\n        for (int i\
    \ = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n            \
    \    dist[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        dist[0][0]\
    \ = 0;\n        for (int i = 0; i < q.size(); i++) {\n            int x = q.get(i).getValue0();\n\
    \            int y", '        return new ArrayList<Long>();', "        // Your\
    \ code here\n        return new ArrayList<Long>();", "        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        // Write your code here.\n        return\
    \ ans;", "        // Your code here\n        return null;", "        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return null;", '        return new ArrayList<Long>();', "        //\
    \ Your code goes here\n        return null;", "        // Your code here\n   \
    \     return null;", "        // Your code here\n        return null;", "    \
    \    // Your code goes here.\n        return null;", "        // Your code goes\
    \ here\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code here\n        return null;", "        // Your\
    \ code goes here.\n        return null;", "        // Write your code here\n \
    \       // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return new\
    \ ArrayList<Long>();", "        // Your code here\n        return null;", "  \
    \      // Your code here\n        return null;", "        // Your code goes here\n\
    \        return null;", "        // Your code here\n        return null;", '        return
    new ArrayList<Long>();', "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        return res;", "        // Your code goes here.\n        return null;",
  "        ArrayList<Long> res = new ArrayList<Long>();\n        return res;", " \
    \       // Your code goes here\n        return null;", '        return new ArrayList<Long>();',
  "        // Your code goes here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here\n        return null;", "        // Your code here\n\
    \        return null;", '        return null;', "        // Your code here\n \
    \       return null;", '        return null;', "        // Your code here\n  \
    \      return null;", "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        return null;", "        // Your\
    \ code here\n        return new ArrayList<Long>();", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;", " \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return null;", '        return null;', "        // Your\
    \ code here\n        return null;", "        // Your code goes here.\n       \
    \ return null;", "        // Your code here\n        return new ArrayList<Long>();",
  "        // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        return null;"]
stop_tokens:
- "\n    }\n"
