name: HumanEval_34_unique
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return sorted unique elements in a list\n    // >>> unique((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l,\
  \ (long)3l, (long)9l, (long)0l, (long)123l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))\n    public static ArrayList<Long>\
  \ unique(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(unique((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l,\
  \ (long)3l, (long)9l, (long)0l, (long)123l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)2l, (long)3l, (long)5l, (long)9l, (long)123l)))));\n    }\n\n}\n"
completions: ["        Collections.sort(l);\n        ArrayList<Long> r = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l.size(); i++) {\n            if (i == 0 || l.get(i)\
    \ != l.get(i - 1)) {\n                r.add(l.get(i));\n            }\n      \
    \  }\n        return r;", "        ArrayList<Long> r = new ArrayList<Long>();\n\
    \        for (Long x : l) {\n            if (!r.contains(x)) {\n             \
    \   r.add(x);\n            }\n        }\n        Collections.sort(r);\n      \
    \  return r;", "        ArrayList<Long> r = new ArrayList<Long>();\n        for\
    \ (Long i : l) {\n            if (!r.contains(i)) {\n                r.add(i);\n\
    \            }\n        }\n        Collections.sort(r);\n        return r;", " \
    \       ArrayList<Long> r = new ArrayList<Long>();\n        for (Long i : l) {\n\
    \            if (!r.contains(i)) {\n                r.add(i);\n            }\n\
    \        }\n        Collections.sort(r);\n        return r;", '        return
    new ArrayList<Long>(new TreeSet<Long>(l));', "        ArrayList<Long> res = new\
    \ ArrayList<Long>();\n        for (Long i : l) {\n            if (!res.contains(i))\
    \ {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n\
    \        return res;", "        ArrayList<Long> r = new ArrayList<Long>();\n \
    \       for (Long i : l) {\n            if (!r.contains(i)) {\n              \
    \  r.add(i);\n            }\n        }\n        Collections.sort(r);\n       \
    \ return r;", "        ArrayList<Long> r = new ArrayList<Long>();\n        for\
    \ (Long i : l) {\n            if (!r.contains(i)) {\n                r.add(i);\n\
    \            }\n        }\n        Collections.sort(r);\n        return r;", " \
    \       ArrayList<Long> ret = new ArrayList<Long>();\n        for (Long i : l)\
    \ {\n            if (!ret.contains(i)) {\n                ret.add(i);\n      \
    \      }\n        }\n        Collections.sort(ret);\n        return ret;", '        return
    new ArrayList<Long>(new HashSet<Long>(l));', "        ArrayList<Long> ret = new\
    \ ArrayList<Long>();\n        for (Long x : l) {\n            if (!ret.contains(x))\
    \ {\n                ret.add(x);\n            }\n        }\n        Collections.sort(ret);\n\
    \        return ret;", '        return new ArrayList<Long>(new HashSet<Long>(l));',
  "        ArrayList<Long> ret = new ArrayList<Long>();\n        Collections.sort(l);\n\
    \        for (int i = 0; i < l.size(); i++) {\n            if (i == 0 || l.get(i)\
    \ != l.get(i - 1)) {\n                ret.add(l.get(i));\n            }\n    \
    \    }\n        return ret;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long i : l) {\n            if (!result.contains(i)) {\n        \
    \        result.add(i);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (Long i : l) {\n            if (!res.contains(i)) {\n           \
    \     res.add(i);\n            }\n        }\n        Collections.sort(res);\n\
    \        return res;", "        ArrayList<Long> r = new ArrayList<Long>();\n \
    \       for (Long i : l) {\n            if (!r.contains(i)) {\n              \
    \  r.add(i);\n            }\n        }\n        Collections.sort(r);\n       \
    \ return r;", "        ArrayList<Long> res = new ArrayList<Long>();\n        for\
    \ (Long i : l) {\n            if (!res.contains(i)) {\n                res.add(i);\n\
    \            }\n        }\n        Collections.sort(res);\n        return res;",
  "        ArrayList<Long> ret = new ArrayList<Long>();\n        for (Long i : l)\
    \ {\n            if (!ret.contains(i)) {\n                ret.add(i);\n      \
    \      }\n        }\n        Collections.sort(ret);\n        return ret;", " \
    \       ArrayList<Long> r = new ArrayList<Long>();\n        for (Long i : l) {\n\
    \            if (!r.contains(i)) {\n                r.add(i);\n            }\n\
    \        }\n        Collections.sort(r);\n        return r;", "        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long x : l) {\n            if (!ret.contains(x))\
    \ {\n                ret.add(x);\n            }\n        }\n        Collections.sort(ret);\n\
    \        return ret;"]
stop_tokens:
- "\n    }\n"
