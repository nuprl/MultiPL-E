name: HumanEval_133_sum_squares
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a list of numbers.\n    // You need to return\
  \ the sum of squared numbers in the given list,\n    // round each element in the\
  \ list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f,\
  \ (float)4.2f, (float)0.0f))))\n    // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
  \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n\
  \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
  \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29l));\n\
  \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f,\
  \ (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
  \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
  \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
  \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
  \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2l));\n\
  \    }\n\n}\n"
completions: ['        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x
    * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', "        // Your code here\n        return 0l;", '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x
    * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().mapToLong(x ->
    (long)Math.ceil(x)).map(x -> x * x).sum();', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();',
  '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (a, b) -> a + b);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (a, b) -> a + b);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (a, b) -> a + b);', '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().mapToLong(x
    -> Math.round(x) * Math.round(x)).sum();', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();',
  '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();',
  '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();',
  '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', "        // Your code here\n        return 0;", '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', "        // Your code here\n        return 0;", '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).mapToLong(x
    -> x).sum();', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)
    * (long)Math.ceil(x)).sum();', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)
    * (long)Math.ceil(x)).sum();', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)
    * (long)Math.ceil(x)).sum();', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', "        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long sum =\
    \ 0;\n        for (float f : lst) {\n            sum += Math.round(f) * Math.round(f);\n\
    \        }\n        return sum;", '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (a, b) -> a + b);', '        return lst.stream().mapToLong(x
    -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();', '        return lst.stream().map(x
    -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x
    * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)
    * (long)Math.ceil(x)).sum();', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)
    * (long)Math.ceil(x)).sum();', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();',
  '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', "        // Your code here\n        return 0;", '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();',
  '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return (long)lst.stream().map(x -> Math.ceil(x)).map(x
    -> Math.pow(x, 2)).reduce((x, y) -> x + y).get();', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).mapToLong(x -> x).sum();', '        return lst.stream().mapToLong(x
    -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().mapToLong(f -> (long)Math.ceil(f)).map(l
    -> l * l).sum();', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', "        // Your code here\n        return\
    \ 0;", '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)).map(x
    -> x * x).sum();', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().mapToLong(x -> (long)Math.ceil(x)).map(x -> x * x).sum();', '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x
    * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().mapToLong(x -> Math.round(x) * Math.round(x)).sum();', '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().mapToLong(x -> Math.round(x) * Math.round(x)).sum();', '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x
    * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();',
  '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)
    * (long)Math.ceil(x)).sum();', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().mapToLong(e
    -> (long)Math.ceil(e) * (long)Math.ceil(e)).sum();', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().mapToLong(x
    -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (a, b) ->
    a + b);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x
    * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x
    * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)).map(x
    -> x * x).sum();', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (a, b) -> a + b);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (a, b) -> a +
    b);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().mapToLong(x
    -> (long) Math.ceil(x) * (long) Math.ceil(x)).sum();', '        return lst.stream().map(x
    -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n        for (Float\
    \ f : lst) {\n            sum += Math.round(f) * Math.round(f);\n        }\n \
    \       return sum;", '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x ->
    (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().mapToLong(x -> Math.round(x) * Math.round(x)).sum();', '        return
    lst.stream().map(x -> (long) Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)
    * (long)Math.ceil(x)).sum();', '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);']
stop_tokens:
- "\n    }\n"
