language: java
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long value = arr.get(i);\n            if (value % 2 == 0 && value < min)\
    \ {\n                min = value;\n                minIndex = i;\n           \
    \ }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n\
    \            result.add((long)minIndex);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index != -1) {\n            result.add(min);\n          \
    \  result.add((long)index);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)min_index);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpjz23m1dy.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index >= 0) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          long val = arr.get(i);\n            if (val % 2 == 0 && val < minEven)\
    \ {\n                minEven = val;\n                minEvenIndex = i;\n     \
    \       }\n        }\n        if (minEvenIndex != -1) {\n            result.add(minEven);\n\
    \            result.add(minEvenIndex);\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpjz23m1dy.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add(index);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              min_idx = i;\n            }\n        }\n        if (min_idx ==\
    \ -1) {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_idx);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpjz23m1dy.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return ret;\n        }\n     \
    \   ret.add(min);\n        ret.add((long)minIndex);\n        return ret;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         min_index = i;\n            }\n        }\n        if (min_index == -1)\
    \ {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_index);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                minIndex = i;\n            }\n  \
    \      }\n        if (minIndex != -1) {\n            result.add(min);\n      \
    \      result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long v = arr.get(i);\n\
    \            if (v % 2 == 0 && v < min) {\n                min = v;\n        \
    \        min_index = i;\n            }\n        }\n        if (min_index == -1)\
    \ {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_index);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add(min_index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return new ArrayList<Long>();\n        }\n        ArrayList<Long>\
    \ evens = new ArrayList<Long>();\n        for (Long l : arr) {\n            if\
    \ (l % 2 == 0) {\n                evens.add(l);\n            }\n        }\n  \
    \      if (evens.size() == 0) {\n            return new ArrayList<Long>();\n \
    \       }\n        Long min = evens.get(0);\n        for (Long l : evens) {\n\
    \            if (l < min) {\n                min = l;\n            }\n       \
    \ }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        ret.add(min);\n\
    \        ret.add((long)arr.indexOf(min));\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ n = arr.get(i);\n            if (n % 2 == 0 && n < min) {\n                min\
    \ = n;\n                index = i;\n            }\n        }\n        if (index\
    \ != -1) {\n            result.add(min);\n            result.add(index);\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        Long minEven = null;\n        int minEvenIndex\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            Long val\
    \ = arr.get(i);\n            if (val % 2 == 0) {\n                if (minEven\
    \ == null || val < minEven) {\n                    minEven = val;\n          \
    \          minEvenIndex = i;\n                }\n            }\n        }\n  \
    \      if (minEven == null) {\n            return result;\n        }\n       \
    \ result.add(minEven);\n        result.add((long)minEvenIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpjz23m1dy.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  long index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n        \
    \    if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.add(min);\n            result.add(index);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            res.add(min);\n            res.add((long)index);\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n    \
    \            min = value;\n                index = i;\n            }\n       \
    \ }\n        if (index == -1) {\n            return result;\n        }\n     \
    \   result.add(min);\n        result.add(index);\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  long minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (min != Long.MAX_VALUE)\
    \ {\n            result.add(min);\n            result.add(minIndex);\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3g1_i82.java:39)\n"
  stdout: ''
  timestamp: 1659798474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        return\
    \ new ArrayList<Long>();\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbsdizt2e.java:38)\n"
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add(index);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        return\
    \ new ArrayList<Long>();\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbsdizt2e.java:38)\n"
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n         \
    \       min = v;\n                index = i;\n            }\n        }\n     \
    \   if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         min_index = i;\n            }\n        }\n        if (min_index == -1)\
    \ {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_index);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.add(min);\n            result.add((long)index);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallestEven = Long.MAX_VALUE;\n  \
    \      int smallestEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < smallestEven) {\n                smallestEven = value;\n                smallestEvenIndex\
    \ = i;\n            }\n        }\n        if (smallestEvenIndex == -1) {\n   \
    \         return result;\n        }\n        result.add(smallestEven);\n     \
    \   result.add((long)smallestEvenIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n    \
    \            min = value;\n                index = i;\n            }\n       \
    \ }\n        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return res;\n        }\n        res.add(min);\n\
    \        res.add((long)min_index);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n    \
    \            min = value;\n                index = i;\n            }\n       \
    \ }\n        if (index == -1) {\n            return result;\n        }\n     \
    \   result.add(min);\n        result.add(index);\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         long value = arr.get(i);\n            if (value % 2 == 0 && value <\
    \ minEven) {\n                minEven = value;\n                minEvenIndex =\
    \ i;\n            }\n        }\n        if (minEvenIndex == -1) {\n          \
    \  return result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                minIndex = i;\n            }\n  \
    \      }\n        if (minIndex != -1) {\n            result.add(min);\n      \
    \      result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpjz23m1dy.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        if (arr.size()\
    \ == 0) {\n            return new ArrayList<Long>();\n        }\n        long\
    \ min = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            long val = arr.get(i);\n            if (val\
    \ % 2 == 0 && val < min) {\n                min = val;\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ new ArrayList<Long>();\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        res.add(min);\n        res.add((long)minIndex);\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add(min_index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long v = arr.get(i);\n\
    \            if (v % 2 == 0 && v < min) {\n                min = v;\n        \
    \        min_index = i;\n            }\n        }\n        if (min_index != -1)\
    \ {\n            ret.add(min);\n            ret.add((long)min_index);\n      \
    \  }\n        return ret;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        Long minEven = null;\n        int minEvenIndex\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            Long val\
    \ = arr.get(i);\n            if (val % 2 == 0) {\n                if (minEven\
    \ == null || val < minEven) {\n                    minEven = val;\n          \
    \          minEvenIndex = i;\n                }\n            }\n        }\n  \
    \      if (minEven != null) {\n            result.add(minEven);\n            result.add((long)minEvenIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpjz23m1dy.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         long value = arr.get(i);\n            if (value % 2 == 0 && value <\
    \ minEven) {\n                minEven = value;\n                minEvenIndex =\
    \ i;\n            }\n        }\n        if (minEvenIndex == -1) {\n          \
    \  return result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index != -1) {\n            ret.add(min);\n            ret.add((long)min_index);\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         long val = arr.get(i);\n            if (val % 2 == 0 && val < minEven)\
    \ {\n                minEven = val;\n                minEvenIndex = i;\n     \
    \       }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int min_idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              min_idx = i;\n            }\n        }\n        if (min_idx ==\
    \ -1) {\n            return res;\n        }\n        res.add(min);\n        res.add((long)min_idx);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return res;\n        }\n        res.add(min);\n\
    \        res.add((long)minIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n   \
    \             min = val;\n                index = i;\n            }\n        }\n\
    \        if (index != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        Long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            Long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)min_index);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.add(min);\n            result.add((long)index);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < min) {\n                min = arr.get(i);\n            }\n        }\n    \
    \    if (min == Long.MAX_VALUE) {\n            return result;\n        }\n   \
    \     result.add(min);\n        result.add((long) arr.indexOf(min));\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Long minEven = Long.MAX_VALUE;\n  \
    \      Long minEvenIndex = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Long value = arr.get(i);\n            if (value % 2 == 0\
    \ && value < minEven) {\n                minEven = value;\n                minEvenIndex\
    \ = (long)i;\n            }\n        }\n        if (minEven != Long.MAX_VALUE)\
    \ {\n            result.add(minEven);\n            result.add(minEvenIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index != -1) {\n            res.add(min);\n           \
    \ res.add((long)min_index);\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n          \
    \      min = v;\n                min_index = i;\n            }\n        }\n  \
    \      if (min_index == -1) {\n            return result;\n        }\n       \
    \ result.add(min);\n        result.add((long)min_index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         long value = arr.get(i);\n            if (value % 2 == 0 && value <\
    \ minEven) {\n                minEven = value;\n                minEvenIndex =\
    \ i;\n            }\n        }\n        if (minEvenIndex == -1) {\n          \
    \  return result;\n        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return res;\n        }\n        res.add(min);\n\
    \        res.add((long)min_index);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.add(min);\n            result.add((long)index);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n          \
    \      min = v;\n                min_index = i;\n            }\n        }\n  \
    \      if (min_index == -1) {\n            return result;\n        }\n       \
    \ result.add(min);\n        result.add((long)min_index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long n = arr.get(i);\n            if (n % 2 == 0 && n < min) {\n           \
    \     min = n;\n                minIndex = i;\n            }\n        }\n    \
    \    if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n    \
    \            min = value;\n                minIndex = i;\n            }\n    \
    \    }\n        if (min == Long.MAX_VALUE) {\n            return result;\n   \
    \     }\n        result.add(min);\n        result.add((long)minIndex);\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         min_index = i;\n            }\n        }\n        if (min_index == -1)\
    \ {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_index);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                minIndex = i;\n            }\n  \
    \      }\n        if (minIndex >= 0) {\n            result.add(min);\n       \
    \     result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          long curr = arr.get(i);\n            if (curr % 2 == 0 && curr < minEven)\
    \ {\n                minEven = curr;\n                minEvenIndex = i;\n    \
    \        }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n                min\
    \ = v;\n                index = i;\n            }\n        }\n        if (index\
    \ != -1) {\n            result.add(min);\n            result.add((long)index);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         long val = arr.get(i);\n            if (val % 2 == 0 && val < minEven)\
    \ {\n                minEven = val;\n                minEvenIndex = i;\n     \
    \       }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        return\
    \ new ArrayList<Long>();\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbsdizt2e.java:38)\n"
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.add(min);\n       \
    \ result.add((long)index);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = arr.get(0);\n        int index\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min\
    \ = arr.get(i);\n                    index = i;\n                }\n         \
    \   }\n        }\n        if (min % 2 == 0) {\n            result.add(min);\n\
    \            result.add((long)index);\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq2eomyq3.java:57)\n"
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index != -1) {\n            result.add(min);\n          \
    \  result.add((long)index);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ long minEvenIndex = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long val = arr.get(i);\n            if (val % 2 == 0 &&\
    \ val < minEven) {\n                minEven = val;\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEven == Long.MAX_VALUE) {\n \
    \           return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index != -1) {\n            result.add(min);\n        \
    \    result.add((long)min_index);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         min_index = i;\n            }\n        }\n        if (min_index == -1)\
    \ {\n            return res;\n        }\n        res.add(min);\n        res.add((long)min_index);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long elem = arr.get(i);\n            if (elem % 2 == 0 && elem < min) {\n  \
    \              min = elem;\n                minIndex = i;\n            }\n   \
    \     }\n        if (minIndex == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index != -1) {\n            result.add(min);\n        \
    \    result.add((long)min_index);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long v = arr.get(i);\n\
    \            if (v % 2 == 0 && v < min) {\n                min = v;\n        \
    \        min_index = i;\n            }\n        }\n        if (min == Long.MAX_VALUE)\
    \ {\n            return res;\n        }\n        res.add(min);\n        res.add((long)min_index);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != -1) {\n            result.add(min);\n    \
    \        result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       long value = arr.get(i);\n            if (value % 2 == 0 && value < min)\
    \ {\n                min = value;\n                min_index = i;\n          \
    \  }\n        }\n        if (min_index != -1) {\n            result.add(min);\n\
    \            result.add((long)min_index);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3g1_i82.java:39)\n"
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex != -1) {\n            result.add(min);\n           \
    \ result.add((long)minIndex);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         long val = arr.get(i);\n            if (val % 2 == 0 && val < minEven)\
    \ {\n                minEven = val;\n                minEvenIndex = i;\n     \
    \       }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n    \
    \            min = value;\n                index = i;\n            }\n       \
    \ }\n        if (index == -1) {\n            return result;\n        }\n     \
    \   result.add(min);\n        result.add((long)index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n         \
    \   long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (index != -1) {\n            result.add(min);\n          \
    \  result.add((long)index);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3g1_i82.java:39)\n"
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          long val = arr.get(i);\n            if (val % 2 == 0 && val < minEven)\
    \ {\n                minEven = val;\n                minEvenIndex = i;\n     \
    \       }\n        }\n        if (minEvenIndex == -1) {\n            return result;\n\
    \        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n           \
    \     min = v;\n                minIndex = i;\n            }\n        }\n    \
    \    if (minIndex == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)minIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n               \
    \ minEven = arr.get(i);\n                minEvenIndex = i;\n            }\n  \
    \      }\n        if (minEvenIndex == -1) {\n            return result;\n    \
    \    }\n        result.add(minEven);\n        result.add((long)minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              min_idx = i;\n            }\n        }\n        if (min_idx ==\
    \ -1) {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_idx);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              min_idx = i;\n            }\n        }\n        if (min_idx ==\
    \ -1) {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_idx);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add((long)index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        Long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ Long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)min_index);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ evens = new ArrayList<Long>();\n        for (Long i : arr) {\n            if\
    \ (i % 2 == 0) {\n                evens.add(i);\n            }\n        }\n  \
    \      if (evens.size() == 0) {\n            return new ArrayList<Long>();\n \
    \       }\n        Long min = evens.get(0);\n        for (Long i : evens) {\n\
    \            if (i < min) {\n                min = i;\n            }\n       \
    \ }\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(min);\n\
    \        result.add((long)arr.indexOf(min));\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add((long)minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpetrgaaj7.java:39)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n       \
    \         min_index = i;\n            }\n        }\n        if (min_index == -1)\
    \ {\n            return res;\n        }\n        res.add(min);\n        res.add((long)min_index);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798476
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        Long min = Long.MAX_VALUE;\n        Long\
    \ minIndex = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            Long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = (long)i;\n       \
    \     }\n        }\n        if (min == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long minEven = Long.MAX_VALUE;\n       \
    \ long minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          long value = arr.get(i);\n            if (value % 2 == 0 && value <\
    \ minEven) {\n                minEven = value;\n                minEvenIndex =\
    \ i;\n            }\n        }\n        if (minEvenIndex == -1) {\n          \
    \  return result;\n        }\n        result.add(minEven);\n        result.add(minEvenIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              min_index = i;\n            }\n        }\n        if (min == Long.MAX_VALUE)\
    \ {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_index);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_idx = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              min_idx = i;\n            }\n        }\n        if (min_idx ==\
    \ -1) {\n            return ret;\n        }\n        ret.add(min);\n        ret.add((long)min_idx);\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ res;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              minIndex = i;\n            }\n        }\n        if (min == Long.MAX_VALUE)\
    \ {\n            return res;\n        }\n        res.add(min);\n        res.add((long)minIndex);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n      \
    \  int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n\
    \                min = val;\n                minIndex = i;\n            }\n  \
    \      }\n        if (minIndex != -1) {\n            result.add(min);\n      \
    \      result.add((long)minIndex);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798474
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        result.add(min);\n        result.add(minIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) return result;\n\
    \        long min = Long.MAX_VALUE;\n        int min_index = -1;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n   \
    \         if (val % 2 == 0 && val < min) {\n                min = val;\n     \
    \           min_index = i;\n            }\n        }\n        if (min_index ==\
    \ -1) return result;\n        result.add(min);\n        result.add((long)min_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        long\
    \ index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n          \
    \      min = val;\n                index = i;\n            }\n        }\n    \
    \    if (index == -1) {\n            return result;\n        }\n        result.add(min);\n\
    \        result.add(index);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798475
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallestEven = Long.MAX_VALUE;\n  \
    \      int smallestEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEven) {\n   \
    \             smallestEven = arr.get(i);\n                smallestEvenIndex =\
    \ i;\n            }\n        }\n        if (smallestEvenIndex == -1) {\n     \
    \       return result;\n        }\n        result.add(smallestEven);\n       \
    \ result.add((long)smallestEvenIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)minIndex);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n    \
    \            min = val;\n                min_index = i;\n            }\n     \
    \   }\n        if (min_index == -1) {\n            return result;\n        }\n\
    \        result.add(min);\n        result.add((long)min_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ long val = arr.get(i);\n            if (val % 2 == 0 && val < min) {\n     \
    \           min = val;\n                minIndex = i;\n            }\n       \
    \ }\n        if (minIndex == -1) {\n            return result;\n        }\n  \
    \      result.add(min);\n        result.add((long)minIndex);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long min = arr.get(0);\n        int minIndex\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value\
    \ = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n          \
    \      min = value;\n                minIndex = i;\n            }\n        }\n\
    \        if (min % 2 == 0) {\n            result.add(min);\n            result.add((long)minIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00km4fzc.java:56)\n"
  stdout: ''
  timestamp: 1659798477
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
    \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ ret;\n        }\n        long min = Long.MAX_VALUE;\n        int min_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val =\
    \ arr.get(i);\n            if (val % 2 == 0 && val < min) {\n                min\
    \ = val;\n                min_index = i;\n            }\n        }\n        if\
    \ (min_index == -1) {\n            return ret;\n        }\n        ret.add(min);\n\
    \        ret.add((long)min_index);\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
