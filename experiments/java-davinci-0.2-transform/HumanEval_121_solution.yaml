name: HumanEval_121_solution
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a non-empty list of integers, return the sum of all\
  \ of the odd elements that are in even positions.\n    // Examples\n    // >>> solution((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l))))\n   \
  \ // (12l)\n    // >>> solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l,\
  \ (long)3l, (long)3l, (long)3l))))\n    // (9l)\n    // >>> solution((new ArrayList<Long>(Arrays.asList((long)30l,\
  \ (long)13l, (long)24l, (long)321l))))\n    // (0l)\n    public static long solution(ArrayList<Long>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(solution((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l)))) == (12l));\n\
  \    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l,\
  \ (long)3l, (long)3l)))) == (9l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l,\
  \ (long)13l, (long)24l, (long)321l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)9l)))) == (5l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)8l)))) == (0l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)30l,\
  \ (long)13l, (long)23l, (long)32l)))) == (23l));\n    assert(solution((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)13l, (long)2l, (long)9l)))) == (3l));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum\
    \ += lst.get(i);\n            }\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n   \
    \         }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).filter(x
    -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x)
    % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x ->
    x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 != 0).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x)
    % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x ->
    x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n    \
    \        if (lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n    \
    \        }\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).filter(x
    -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x)
    % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x ->
    x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return
    lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return 0l;', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().filter(x -> x % 2 != 0).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', '        return lst.stream().filter(x -> x % 2 == 1).filter(x ->
    lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 != 0).mapToLong(x -> x).sum();', "        long sum = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).filter(x
    -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', "        long sum = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 &&\
    \ lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1)\
    \ {\n                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum\
    \ += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x)
    % 2 == 0).mapToLong(x -> x).sum();', "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2\
    \ == 1) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", '        return lst.stream().filter(e -> e % 2 == 1).filter(e
    -> lst.indexOf(e) % 2 == 0).mapToLong(e -> e).sum();', '        return lst.stream().filter(x
    -> x % 2 != 0).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x)
    % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x ->
    x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return
    lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n   \
    \         }\n        }\n        return sum;", "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().filter(x -> x % 2 == 1).filter(x
    -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return 0l;', '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().filter(x -> x % 2 == 1).filter(x
    -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n   \
    \         }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return (long)lst.stream().filter((x) -> (x % 2)
    == 1).filter((x) -> (lst.indexOf(x) % 2) == 0).mapToLong((x) -> x).sum();', '        return
    lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i += 2) {\n            if (lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n    \
    \        if (lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n    \
    \        }\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 1)\
    \ {\n                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", '        return lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x)
    % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x ->
    x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().filter(x -> x % 2 == 1).filter(x
    -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x)
    % 2 == 0).mapToLong(x -> x).sum();', "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2\
    \ == 1) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x)
    % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x ->
    (x % 2 != 0 && lst.indexOf(x) % 2 == 0)).mapToLong(x -> x).sum();', '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', '        return lst.stream().filter(x -> x % 2 == 1).filter(x ->
    lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    // Your code here\n        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l, (x, y) -> x + y);',
  '        return lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x)
    % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x ->
    x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).filter(x
    -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 != 0).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().filter(x -> x % 2 == 1).filter(x
    -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", '        return lst.stream().filter(x -> x % 2 == 1).reduce(0l,
    (x, y) -> x + y);', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 != 0).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();',
  "        long result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n    \
    \        if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                result += lst.get(i);\n\
    \            }\n        }\n        return result;", "        long res = 0;\n \
    \       for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 &&\
    \ lst.get(i) % 2 == 1) {\n                res += lst.get(i);\n            }\n\
    \        }\n        return res;", "        long sum = 0;\n        for (int i =\
    \ 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 1) {\n     \
    \           sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        // Your code here\n        return 0;", '        return
    0;', '        return lst.stream().filter(x -> (x % 2) == 1).reduce(0l, (x, y)
    -> x + y);', "        long res = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                res\
    \ += lst.get(i);\n            }\n        }\n        return res;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n   \
    \         }\n        }\n        return sum;", "        long sum = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i)\
    \ % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> x % 2 == 1).filter(x -> lst.indexOf(x) % 2 == 0).mapToLong(x
    -> x).sum();', '        return lst.stream().filter(x -> x % 2 == 1).filter(x ->
    lst.indexOf(x) % 2 == 0).mapToLong(x -> x).sum();', "        long sum = 0;\n \
    \       for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 &&\
    \ lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n\
    \        }\n        return sum;", '        return lst.stream().filter(x -> x %
    2 == 1).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x ->
    x % 2 != 0).reduce(0l, (x, y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 != 0).reduce(0l, (x, y) -> x + y);']
stop_tokens:
- "\n    }\n"
