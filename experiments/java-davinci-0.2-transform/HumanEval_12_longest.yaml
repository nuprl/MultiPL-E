name: HumanEval_12_longest
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Out of list of strings, return the longest one. Return the\
  \ first one in case of multiple\n    // strings of the same length. Return None\
  \ in case the input list is empty.\n    // >>> longest((new ArrayList<String>(Arrays.asList())))\n\
  \    // Optional.empty()\n    // >>> longest((new ArrayList<String>(Arrays.asList((String)\"\
  a\", (String)\"b\", (String)\"c\"))))\n    // \"a\"\n    // >>> longest((new ArrayList<String>(Arrays.asList((String)\"\
  a\", (String)\"bb\", (String)\"ccc\"))))\n    // \"ccc\"\n    public static Optional<String>\
  \ longest(ArrayList<String> strings) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(longest((new\
  \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
  \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(\"\
  x\"));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
  yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"abc\")))).equals(\"\
  zzzz\"));\n    }\n\n}\n"
completions: ["        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        int max_length = 0;\n        String max_string = \"\";\n \
    \       for (String s : strings) {\n            if (s.length() > max_length) {\n\
    \                max_length = s.length();\n                max_string = s;\n \
    \           }\n        }\n        return Optional.of(max_string);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       Optional<String> longest = Optional.of(strings.get(0));\n        for (String\
    \ s : strings) {\n            if (s.length() > longest.get().length()) {\n   \
    \             longest = Optional.of(s);\n            }\n        }\n        return\
    \ longest;", "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    null;', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        } else {\n            String longest = strings.get(0);\n            for\
    \ (String s : strings) {\n                if (s.length() > longest.length()) {\n\
    \                    longest = s;\n                }\n            }\n        \
    \    return Optional.of(longest);\n        }", '        return strings.stream().max(Comparator.comparing(String::length));',
  '        return strings.stream().max(Comparator.comparing(String::length));', '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        int maxLength = 0;\n        String maxString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                maxString = s;\n   \
    \         }\n        }\n        return Optional.of(maxString);", '        return
    Optional.empty();', '        return null;', "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String longestString = \"\";\n        for (String string : strings)\
    \ {\n            if (string.length() > maxLength) {\n                maxLength\
    \ = string.length();\n                longestString = string;\n            }\n\
    \        }\n        return Optional.of(longestString);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        int max_length\
    \ = 0;\n        String max_string = \"\";\n        for (String s : strings) {\n\
    \            if (s.length() > max_length) {\n                max_length = s.length();\n\
    \                max_string = s;\n            }\n        }\n        return Optional.of(max_string);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.of(strings.get(0));\n     \
    \   for (String s : strings) {\n            if (s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max_length = 0;\n        String max_string = null;\n     \
    \   for (String s : strings) {\n            if (s.length() > max_length) {\n \
    \               max_length = s.length();\n                max_string = s;\n  \
    \          }\n        }\n        return Optional.of(max_string);", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", '        return strings.stream().reduce((a,
    b) -> a.length() > b.length() ? a : b);', "        if (strings.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        int max_length = 0;\n\
    \        String max_string = null;\n        for (String s : strings) {\n     \
    \       if (s.length() > max_length) {\n                max_length = s.length();\n\
    \                max_string = s;\n            }\n        }\n        return Optional.of(max_string);",
  '        return strings.stream().max(Comparator.comparing(String::length));', " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        int maxLength = 0;\n        String maxString = \"\";\n      \
    \  for (String s : strings) {\n            if (s.length() > maxLength) {\n   \
    \             maxLength = s.length();\n                maxString = s;\n      \
    \      }\n        }\n        return Optional.of(maxString);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", '        return null;', '        return
    Optional.empty();', '        return null;', '        return strings.stream().max(Comparator.comparing(String::length));',
  '        return strings.stream().max(Comparator.comparing(String::length));', " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    null;', '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String maxString = \"\";\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                maxString = s;\n           \
    \ }\n        }\n        return Optional.of(maxString);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", '        return Optional.empty();',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String result = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > result.length()) {\n                result =\
    \ s;\n            }\n        }\n        return Optional.of(result);", '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return strings.stream().max(Comparator.comparing(String::length));', '        return
    strings.stream().max(Comparator.comparingInt(String::length));', '        return
    strings.stream().max(Comparator.comparing(String::length));', '        return
    strings.stream().max(Comparator.comparing(String::length));', '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        Optional<String> result =\
    \ Optional.empty();\n        if (strings.size() > 0) {\n            result = Optional.of(strings.get(0));\n\
    \            for (String s : strings) {\n                if (s.length() > result.get().length())\
    \ {\n                    result = Optional.of(s);\n                }\n       \
    \     }\n        }\n        return result;", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        Optional<String>\
    \ longest = Optional.of(strings.get(0));\n        for (String s : strings) {\n\
    \            if (s.length() > longest.get().length()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;", '        return
    Optional.empty();', '        return null;', "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int max_len = 0;\n\
    \        String max_str = null;\n        for (String s : strings) {\n        \
    \    if (s.length() > max_len) {\n                max_len = s.length();\n    \
    \            max_str = s;\n            }\n        }\n        return Optional.of(max_str);",
  '        return Optional.empty();', '        return Optional.empty();', '        return
    Optional.empty();', '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    null;', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        int max_length = 0;\n        String max_string = \"\";\n \
    \       for (String s : strings) {\n            if (s.length() > max_length) {\n\
    \                max_length = s.length();\n                max_string = s;\n \
    \           }\n        }\n        return Optional.of(max_string);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int maxLength = 0;\n        String maxString = null;\n        for (String\
    \ s : strings) {\n            if (s.length() > maxLength) {\n                maxLength\
    \ = s.length();\n                maxString = s;\n            }\n        }\n  \
    \      return Optional.of(maxString);", "        if (strings.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        int max = strings.get(0).length();\n\
    \        String maxString = strings.get(0);\n        for (int i = 1; i < strings.size();\
    \ i++) {\n            if (strings.get(i).length() > max) {\n                max\
    \ = strings.get(i).length();\n                maxString = strings.get(i);\n  \
    \          }\n        }\n        return Optional.of(maxString);", '        return
    null;', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String max = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > max.length()) {\n                max = s;\n\
    \            }\n        }\n        return Optional.of(max);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", '        return Optional.empty();',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max_length = 0;\n        String max_string = \"\";\n     \
    \   for (String s : strings) {\n            if (s.length() > max_length) {\n \
    \               max_length = s.length();\n                max_string = s;\n  \
    \          }\n        }\n        return Optional.of(max_string);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", "        //\
    \ YOUR CODE HERE\n        return Optional.empty();", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String longestString = null;\n        for (String s : strings) {\n\
    \            if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                longestString = s;\n            }\n        }\n        return\
    \ Optional.of(longestString);", "        if (strings.size() == 0) {\n        \
    \    return Optional.empty();\n        }\n        Optional<String> longest = Optional.of(strings.get(0));\n\
    \        for (String s : strings) {\n            if (s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;", "        Optional<String> result = Optional.empty();\n\
    \        int maxLength = 0;\n        for (String s : strings) {\n            if\
    \ (s.length() > maxLength) {\n                maxLength = s.length();\n      \
    \          result = Optional.of(s);\n            }\n        }\n        return\
    \ result;", '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    Optional.empty();', '        return Optional.empty();', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", '        return Optional.empty();',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int max_length =\
    \ 0;\n        String longest_string = null;\n        for (String s : strings)\
    \ {\n            if (s.length() > max_length) {\n                max_length =\
    \ s.length();\n                longest_string = s;\n            }\n        }\n\
    \        return Optional.of(longest_string);", '        return Optional.empty();',
  '        return Optional.empty();', "        if (strings.size() == 0) {\n      \
    \      return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparingInt(String::length));', '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return Optional.empty();', '        return Optional.empty();', "      \
    \  if (strings.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", '        return strings.stream().reduce((a,
    b) -> a.length() >= b.length() ? a : b);', "        if (strings.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return null;', '        return strings.stream().reduce((a, b) -> a.length()
    >= b.length() ? a : b);', "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        else {\n            return Optional.of(strings.stream().max(Comparator.comparing(String::length)).get());\n\
    \        }", "        // your code here\n        return null;", '        return
    null;', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    Optional.empty();', '        return null;', "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int max_len = 0;\n\
    \        String max_str = \"\";\n        for (String s : strings) {\n        \
    \    if (s.length() > max_len) {\n                max_len = s.length();\n    \
    \            max_str = s;\n            }\n        }\n        return Optional.of(max_str);",
  '        return null;', "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        int max_length = 0;\n        String max_string\
    \ = \"\";\n        for (String s : strings) {\n            if (s.length() > max_length)\
    \ {\n                max_length = s.length();\n                max_string = s;\n\
    \            }\n        }\n        return Optional.of(max_string);", "       \
    \ if (strings.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        else {\n            String longest = strings.get(0);\n            for\
    \ (String s : strings) {\n                if (s.length() > longest.length()) {\n\
    \                    longest = s;\n                }\n            }\n        \
    \    return Optional.of(longest);\n        }", '        return strings.stream().max(Comparator.comparing(String::length));',
  "        Optional<String> longest = Optional.empty();\n        for (String s : strings)\
    \ {\n            if (longest.isPresent()) {\n                if (s.length() >\
    \ longest.get().length()) {\n                    longest = Optional.of(s);\n \
    \               }\n            } else {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;", '        return null;', " \
    \       // YOUR CODE HERE\n        return Optional.empty();", '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return null;', "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String max = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > max.length()) {\n                max = s;\n\
    \            }\n        }\n        return Optional.of(max);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        Optional<String>\
    \ longest = Optional.of(strings.get(0));\n        for (String s : strings) {\n\
    \            if (s.length() > longest.get().length()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : strings) {\n          \
    \  if (longest.isPresent()) {\n                if (s.length() > longest.get().length())\
    \ {\n                    longest = Optional.of(s);\n                }\n      \
    \      } else {\n                longest = Optional.of(s);\n            }\n  \
    \      }\n        return longest;", "        if (strings.size() == 0) {\n    \
    \        return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return Optional.empty();', "        if (strings.size() == 0) {\n      \
    \      return Optional.empty();\n        }\n        String longest = strings.get(0);\n\
    \        for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    Optional.empty();', '        return Optional.empty();', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        int max =\
    \ 0;\n        String maxString = \"\";\n        for (String s : strings) {\n \
    \           if (s.length() > max) {\n                max = s.length();\n     \
    \           maxString = s;\n            }\n        }\n        return Optional.of(maxString);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int maxLength = 0;\n        String maxString = null;\n        for\
    \ (String s : strings) {\n            if (s.length() > maxLength) {\n        \
    \        maxLength = s.length();\n                maxString = s;\n           \
    \ }\n        }\n        return Optional.of(maxString);", '        return null;',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        else {\n            String longest = strings.get(0);\n        \
    \    for (String s : strings) {\n                if (s.length() > longest.length())\
    \ {\n                    longest = s;\n                }\n            }\n    \
    \        return Optional.of(longest);\n        }", '        return Optional.empty();',
  "        Optional<String> longest = Optional.empty();\n        for (String s : strings)\
    \ {\n            if (longest.isPresent()) {\n                if (s.length() >\
    \ longest.get().length()) {\n                    longest = Optional.of(s);\n \
    \               }\n            } else {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;", "        // TODO: implement\n\
    \        return Optional.empty();", "        if (strings.size() == 0) {\n    \
    \        return Optional.empty();\n        }\n        int maxLength = 0;\n   \
    \     String longestString = \"\";\n        for (String s : strings) {\n     \
    \       if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                longestString = s;\n            }\n        }\n        return\
    \ Optional.of(longestString);", '        return strings.stream().max(Comparator.comparing(String::length));',
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String result\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > result.length()) {\n                result = s;\n            }\n        }\n\
    \        return Optional.of(result);", '        return null;', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String max\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > max.length()) {\n                max = s;\n            }\n        }\n    \
    \    return Optional.of(max);", '        return Optional.empty();', "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       String longest = strings.get(0);\n        for (String s : strings) {\n\
    \            if (s.length() > longest.length()) {\n                longest = s;\n\
    \            }\n        }\n        return Optional.of(longest);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       int max_length = 0;\n        String max_string = \"\";\n        for (String\
    \ s : strings) {\n            if (s.length() > max_length) {\n               \
    \ max_length = s.length();\n                max_string = s;\n            }\n \
    \       }\n        return Optional.of(max_string);", '        return strings.stream().max(Comparator.comparing(String::length));',
  '        return strings.stream().max(Comparator.comparing(String::length));', '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.of(strings.get(0));\n\
    \        for (String s : strings) {\n            if (s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return strings.stream().max(Comparator.comparing(String::length));', " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return strings.stream().max(Comparator.comparing(String::length));', '        return
    strings.stream().max(Comparator.comparing(String::length));', "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        String longest\
    \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String longest = \"\";\n        for (String s : strings) {\n   \
    \         if (s.length() > maxLength) {\n                maxLength = s.length();\n\
    \                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  '        return Optional.empty();', "        if (strings.size() == 0) {\n      \
    \      return Optional.empty();\n        }\n        int max_length = 0;\n    \
    \    String max_string = \"\";\n        for (String s : strings) {\n         \
    \   if (s.length() > max_length) {\n                max_length = s.length();\n\
    \                max_string = s;\n            }\n        }\n        return Optional.of(max_string);",
  '        return strings.stream().max(Comparator.comparing(String::length));', " \
    \       if (strings.size() == 0) {\n            return Optional.empty();\n   \
    \     }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        int max_length = 0;\n        String max_string = \"\";\n      \
    \  for (String s : strings) {\n            if (s.length() > max_length) {\n  \
    \              max_length = s.length();\n                max_string = s;\n   \
    \         }\n        }\n        return Optional.of(max_string);", '        return
    Optional.empty();']
stop_tokens:
- "\n    }\n"
