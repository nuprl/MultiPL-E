name: HumanEval_12_longest
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Out of list of strings, return the longest one. Return the\
  \ first one in case of multiple\n    // strings of the same length. Return None\
  \ in case the input list is empty.\n    // >>> longest((new ArrayList<String>(Arrays.asList())))\n\
  \    // Optional.empty()\n    // >>> longest((new ArrayList<String>(Arrays.asList((String)\"\
  a\", (String)\"b\", (String)\"c\"))))\n    // \"a\"\n    // >>> longest((new ArrayList<String>(Arrays.asList((String)\"\
  a\", (String)\"bb\", (String)\"ccc\"))))\n    // \"ccc\"\n    public static Optional<String>\
  \ longest(ArrayList<String> strings) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(longest((new\
  \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
  \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))).equals(\"\
  x\"));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
  yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"abc\")))).equals(\"\
  zzzz\"));\n    }\n\n}\n"
completions: ["        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        int max_length = 0;\n        String max_string = \"\";\n \
    \       for (String s : strings) {\n            if (s.length() > max_length) {\n\
    \                max_length = s.length();\n                max_string = s;\n \
    \           }\n        }\n        return Optional.of(max_string);", "        if\
    \ (strings.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       Optional<String> longest = Optional.of(strings.get(0));\n        for (String\
    \ s : strings) {\n            if (s.length() > longest.get().length()) {\n   \
    \             longest = Optional.of(s);\n            }\n        }\n        return\
    \ longest;", "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        String longest = strings.get(0);\n        for (String s :\
    \ strings) {\n            if (s.length() > longest.length()) {\n             \
    \   longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", '        return
    null;', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        } else {\n            String longest = strings.get(0);\n            for\
    \ (String s : strings) {\n                if (s.length() > longest.length()) {\n\
    \                    longest = s;\n                }\n            }\n        \
    \    return Optional.of(longest);\n        }", '        return strings.stream().max(Comparator.comparing(String::length));',
  '        return strings.stream().max(Comparator.comparing(String::length));', '        return
    Optional.empty();', "        if (strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        int maxLength = 0;\n        String maxString = \"\";\n   \
    \     for (String s : strings) {\n            if (s.length() > maxLength) {\n\
    \                maxLength = s.length();\n                maxString = s;\n   \
    \         }\n        }\n        return Optional.of(maxString);", '        return
    Optional.empty();', '        return null;', "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        String longest =\
    \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
    \ > longest.length()) {\n                longest = s;\n            }\n       \
    \ }\n        return Optional.of(longest);", "        if (strings.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        int maxLength =\
    \ 0;\n        String longestString = \"\";\n        for (String string : strings)\
    \ {\n            if (string.length() > maxLength) {\n                maxLength\
    \ = string.length();\n                longestString = string;\n            }\n\
    \        }\n        return Optional.of(longestString);", "        if (strings.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        int max_length\
    \ = 0;\n        String max_string = \"\";\n        for (String s : strings) {\n\
    \            if (s.length() > max_length) {\n                max_length = s.length();\n\
    \                max_string = s;\n            }\n        }\n        return Optional.of(max_string);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        String longest = strings.get(0);\n        for (String s : strings)\
    \ {\n            if (s.length() > longest.length()) {\n                longest\
    \ = s;\n            }\n        }\n        return Optional.of(longest);", "   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.of(strings.get(0));\n     \
    \   for (String s : strings) {\n            if (s.length() > longest.get().length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;", "        if (strings.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        String longest = strings.get(0);\n   \
    \     for (String s : strings) {\n            if (s.length() > longest.length())\
    \ {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
  "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
    \    }\n        int max_length = 0;\n        String max_string = null;\n     \
    \   for (String s : strings) {\n            if (s.length() > max_length) {\n \
    \               max_length = s.length();\n                max_string = s;\n  \
    \          }\n        }\n        return Optional.of(max_string);"]
stop_tokens:
- "\n    }\n"
