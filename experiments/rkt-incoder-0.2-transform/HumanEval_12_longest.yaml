name: HumanEval_12_longest
language: rkt
prompt: "#lang racket\n\n;; Out of list of strings, return the longest one. Return\
  \ the first one in case of multiple\n;; strings of the same length. Return None\
  \ in case the input list is empty.\n;; >>> (longest (list ))\n;; #f\n;; >>> (longest\
  \ (list \"a\" \"b\" \"c\"))\n;; \"a\"\n;; >>> (longest (list \"a\" \"bb\" \"ccc\"\
  ))\n;; \"ccc\"\n(define (longest strings)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longest))\n\
  \    (check-equal? (candidate (list )) #f)\n    (check-equal? (candidate (list \"\
  x\" \"y\" \"z\")) \"x\")\n    (check-equal? (candidate (list \"x\" \"yyy\" \"zzzz\"\
  \ \"www\" \"kkkk\" \"abc\")) \"zzzz\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? strings) None]\n    [(equal? (length strings)\
    \ 1) (strings 0)]\n    [else (longest (cdr strings))]))\n", "  (cond [(empty?\
    \ strings) None]\n        [(equal? (length strings) 1) (strings 0)]\n        [else\
    \ (longest (rest strings))]))\n", "  (cond\n    [(empty? strings) None]\n    [(equal?\
    \ (length strings) 1) (first strings)]\n    [else (longest (rest strings))]))\n",
  "  (cond [(empty? strings) None]\n        [(equal? (string-length strings) (longest\
    \ (rest strings))) (first strings)]\n        [else (longest (rest strings))]))\n",
  "  (cond\n    [(empty? strings) None]\n    [(equal? (length strings) 1) (first strings)]\n\
    \    [else (longest (rest strings))]))\n", "  (cond\n    [(empty? strings) None]\n\
    \    [(equal? (length strings) 1) (strings 0)]\n    [else (longest (rest strings))]))\n",
  "  (cond\n    [(empty? strings) None]\n    [(equal? (length strings) 1) (strings\
    \ 0)]\n    [else (longest (append (longest (subseq strings 0 (length strings)))\
    \ (subseq strings 1 (length strings))))]))\n", "  (cond\n    [(empty? strings)\
    \ None]\n    [(equal? (length strings) 1) (first strings)]\n    [else (longest\
    \ (rest strings))]))\n", "  (cond\n    [(empty? strings) None]\n    [(equal? (length\
    \ strings) 1) (strings 0)]\n    [else (longest (rest strings))]))\n", "  (cond\n\
    \    [(empty? strings) None]\n    [(> (length strings) 1) (first strings)]\n \
    \   [else (longest (rest strings))]))\n", "  (cond [(empty? strings) None]\n \
    \       [(equal? (length strings) 1) (first strings)]\n        [else (longest\
    \ (rest strings))]))\n", "  (cond [(empty? strings) None]\n        [(equal? (length\
    \ strings) 1) (first strings)]\n        [else (longest (rest strings))]))\n",
  "  (cond [(empty? strings) None]\n        [(equal? (length strings) 1) (first strings)]\n\
    \        [else (longest (rest strings))]))\n", "  (cond [(empty? strings) None]\n\
    \        [(equal? (length strings) 1) (strings 0)]\n        [else (longest (rest\
    \ strings))]))\n", "  (cond\n    [(empty? strings) None]\n    [(equal? (length\
    \ strings) 1) (first strings)]\n    [else (longest (rest strings))]))\n", "  (cond\n\
    \    [(empty? strings) None]\n    [(equal? (length strings) 1) (strings 0)]\n\
    \    [else (longest (cdr strings))]))\n", "  (cond\n    [(empty? strings) None]\n\
    \    [(equal? (length strings) 1) (first strings)]\n    [else (longest (rest strings))]))\n",
  "  (cond\n    [(empty? strings) None]\n    [(equal? (length strings) 1) (strings\
    \ 0)]\n    [else (let ([longest (first strings)])\n            (cond\n       \
    \       [(empty? (rest strings)) longest]\n              [(equal? (length strings)\
    \ (length longest)) (longest strings)]\n              [else (longest (rest strings))])))]))\n",
  "  (cond\n    [(empty? strings) None]\n    [(equal? (length strings) 1) (first strings)]\n\
    \    [else (longest (rest strings))]))\n", "  (cond\n    [(empty? strings) None]\n\
    \    [(equal? (length strings) 1) (strings 0)]\n    [else (let ([longest (first\
    \ strings)])\n            (cond\n              [(empty? (rest strings)) longest]\n\
    \              [(equal? (length strings) (length longest)) (longest strings)]\n\
    \              [else (longest (rest strings))])))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
