name: HumanEval_26_remove_duplicates
language: rkt
prompt: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
  \ more than once.\n;; Keep order of elements left the same as in the input.\n;;\
  \ >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 1 2 3 2 4 3 5))\
  \ (list 1 4 5))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? numbers) numbers]\n    [(member (first numbers)\
    \ (remove_duplicates rest)) (cons (first numbers) (remove_duplicates rest))]\n\
    \    [else (remove_duplicates rest)]))\n", "  (cond\n    [(empty? numbers) numbers]\n\
    \    [(member (first numbers) (remove_duplicates rest)) (cons (first numbers)\
    \ (remove_duplicates rest))]\n    [else (cons (first numbers) (remove_duplicates\
    \ rest))]))\n", "  (if (null? numbers)\n      '()\n      (let ((result (make-array\
    \ (length numbers) (lambda (x) (= x 0)))))\n        (do ((i 0 (+ i 1))\n     \
    \        (j (+ i 1))\n             (result result))\n            ((< i j) (set!\
    \ result (make-array (length numbers) (lambda (x) (= x 0)))))\n          (set!\
    \ result (assoc i result (+ j 1))))\n        (reverse result))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((head (car numbers))\n            (tail (cdr\
    \ numbers)))\n        (if (null? tail)\n            (cons head (remove_duplicates\
    \ tail))\n            (if (equal? (car tail) head)\n                (remove_duplicates\
    \ tail)\n                (cons head (remove_duplicates tail)))))))\n", "  (cond\n\
    \    [(empty? numbers) '()]\n    [(member (first numbers) (remove_duplicates (rest\
    \ numbers))) \n     (cons (first numbers) (remove_duplicates (rest numbers)))]\n\
    \    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n", " \
    \ (if (null? numbers)\n      '()\n      (cons (car numbers)\n            (remove_duplicates\
    \ (cdr numbers)))))\n", "  (cond\n    [(empty? numbers) numbers]\n    [(member\
    \ (first numbers) (remove_duplicates (rest numbers))) \n     (cons (first numbers)\
    \ (remove_duplicates (rest numbers)))]\n    [else (remove_duplicates (rest numbers))]))\n",
  "  (if (null? numbers)\n      '()\n      (let ((head (car numbers))\n          \
    \  (tail (cdr numbers)))\n        (if (null? tail)\n            (cons head (remove_duplicates\
    \ '()))\n            (if (equal? (car tail) head)\n                (remove_duplicates\
    \ tail)\n                (cons head (remove_duplicates tail)))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (cons (car numbers)\n            (remove_duplicates\
    \ (cdr numbers)))))\n", "  (cond [(empty? numbers) numbers]\n        [(member\
    \ (first numbers) (remove_duplicates (rest numbers))) \n         (cons (first\
    \ numbers) (remove_duplicates (rest numbers)))]\n        [else (remove_duplicates\
    \ (rest numbers))]))\n", "  (cond\n    [(empty? numbers) numbers]\n    [(member\
    \ (first numbers) (remove_duplicates (rest numbers))) \n     (cons (first numbers)\
    \ (remove_duplicates (rest numbers)))]\n    [else (remove_duplicates (rest numbers))]))\n",
  "  (cond\n    [(empty? numbers) numbers]\n    [(member (first numbers) (remove_duplicates\
    \ (rest numbers))) \n     (cons (first numbers) (remove_duplicates (rest numbers)))]\n\
    \    [else (remove_duplicates (rest numbers))]))\n", "  (cond [(empty? numbers)\
    \ numbers]\n        [(member (first numbers) (remove_duplicates (rest numbers)))\
    \ \n         (cons (first numbers) (remove_duplicates (rest numbers)))]\n    \
    \    [else (remove_duplicates (rest numbers))]))\n", "  (if (null? numbers)\n\
    \      '()\n      (cons (first numbers)\n            (remove_duplicates (rest\
    \ numbers)))))\n", "  (if (null? numbers)\n      '()\n      (cons (car numbers)\n\
    \            (remove_duplicates (cdr numbers)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (cons (car numbers)\n            (remove_duplicates (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((head (car numbers))\n          \
    \  (tail (cdr numbers)))\n        (if (null? tail)\n            (cons head (remove_duplicates\
    \ '()))\n            (if (equal? (car tail) head)\n                (remove_duplicates\
    \ tail)\n                (cons head (remove_duplicates tail)))))\n      )\n  )\n",
  "  (if (null? numbers)\n      '()\n      (let ((result (make-array (length numbers)\
    \ #:initial-contents numbers)))\n        (do ((i 0 (+ i 1))\n             (j (+\
    \ i 1)))\n            ((< i j) (set! result (copy-array result j result)))\n \
    \           (set! result (copy-array result i (+ j 1))\n                   (do\
    \ ((k i (+ k 1))\n                         (l j (+ l 1)))\n                  \
    \    ((< k l) (set! result (copy-array result l result)))\n                  \
    \    (set! result (copy-array result k (+ l 1))\n                            \
    \ (do ((m i (+ m 1))\n                                   (n j (+ n 1)))\n    \
    \                              ((< m n) (set! result (copy-array result n result)))\n\
    \                                  (set! result (copy-array result m result))\n\
    \                                  (set! result (copy-array result i result))\n\
    \                                  (set! result (copy-array result j result))\n\
    \                                  (set! result (copy-array result k result))\n\
    \                                  (set! result (copy-array result l result))\n\
    \                                  (set! result (copy-array result m result))\n\
    \                                  (set! result (copy-array result n result))\n\
    \                                  (set! result (copy-array result i result))\n\
    \                                  (set! result (copy-array result j result))\n\
    \                                  (set! result (copy-array result k result))\n\
    \                                  (set! result (copy-array result l result))\n\
    \                                  (set! result (copy-array result m result))\n\
    \                                  (set! result (copy-array result n result))\n\
    \                                  (set! result (copy-array result i result))\n\
    \                                  (set! result (copy-array result j result))\n\
    \                                  (set! result (copy-array result k result))\n\
    \                                  (set! result (copy-array result l result))\n\
    \                                  (set! result (copy-array result m result))\n\
    \                                  (set! result (copy-array result n result))\n\
    \                                  (set! result (copy-array result i result))\n\
    \                                  (set! result (copy-array result j result))\n\
    \                                  (set! result (copy-array result k result))\n\
    \                                  (set! result (copy-array result l result))\n\
    \                                  (set! result (copy-array result m result))\n\
    \                                  (set! result (", "  (if (null? numbers)\n \
    \     '()\n      (cons (first numbers)\n            (remove_duplicates (rest numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((head (car numbers))\n          \
    \  (tail (cdr numbers)))\n        (if (null? tail)\n            (cons head (remove_duplicates\
    \ '()))\n            (if (equal? (car tail) head)\n                (remove_duplicates\
    \ tail)\n                (cons head (remove_duplicates tail)))))\n  )\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
