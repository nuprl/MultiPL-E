name: HumanEval_65_circular_shift
language: rkt
prompt: "#lang racket\n\n;; Circular shift the digits of the integer x, shift the\
  \ digits right by shift\n;; and return the result as a string.\n;; If shift > number\
  \ of digits, return digits reversed.\n;; >>> (circular_shift 12 1)\n;; \"21\"\n\
  ;; >>> (circular_shift 12 2)\n;; \"12\"\n(define (circular_shift x shift)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n\
  \    (check-equal? (candidate 100 2) \"001\")\n    (check-equal? (candidate 12 2)\
  \ \"12\")\n    (check-equal? (candidate 97 8) \"79\")\n    (check-equal? (candidate\
  \ 12 1) \"21\")\n    (check-equal? (candidate 11 101) \"11\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< shift (length x))\n     (reverse (substring x 0 (-\
    \ shift (length x))))]\n    [else\n     (substring x (+ shift (length x)) (length\
    \ x))]))\n", "  (let loop ((x x) (shift shift))\n    (cond\n      [(< shift (length\
    \ x))\n       (reverse (substring x 0 (- shift (length x))))]\n      [else\n \
    \      (loop (substring x (+ shift (length x))) (- shift (length x)))]\n     \
    \ )))\n", "  (let loop ((x x) (shift shift) (digits '()))\n    (cond ((< shift\
    \ (length x))\n           (reverse digits))\n          ((< shift 0)\n        \
    \   (reverse digits))\n          (else\n           (let ((digits (append (substring\
    \ digits 0 shift) (substring digits shift (length digits)))))\n             (loop\
    \ (substring x shift (length x)) (- shift 1) digits)))))\n", "  (let loop ((x\
    \ x) (shift shift))\n    (cond\n      [(< shift (length x))\n       (reverse (substring\
    \ x 0 (- shift (length x))))]\n      [(< shift 0)\n       (reverse (substring\
    \ x 0 (- shift 0)))]\n      [else\n       (loop (substring x 0 (- shift (length\
    \ x))) (- shift 1))]))))\n", "  (let loop ((x x) (shift shift))\n    (cond ((=\
    \ shift 0) (list x))\n          ((< shift (length x)) (loop (sub1 x) (sub1 shift)))\n\
    \          (else (loop (sub1 x) (sub1 shift)))))\n  ", "  (let loop ((x x) (shift\
    \ shift))\n    (if (< shift (length x))\n        (string-append (substring x 0\
    \ (- shift (length x)))\n                      (substring x shift (length x)))\n\
    \        (substring x 0 (- shift (length x)))))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a tags=racket,scheme |>\n<code>", "  (let loop ((x x) (shift shift) (digits\
    \ '()))\n    (cond\n      [(< shift (length x)) (cons (reverse digits) digits)]\n\
    \      [(< shift (length digits)) (loop (quotient x 10) (- shift 1))]\n      [(>\
    \ shift (length digits)) (loop (quotient x 10) (- shift (length digits)))]\n \
    \     [else (cons (quotient x 10) digits)])))\n", "  (if (< shift (length x))\n\
    \      (let ([s (substring x 0 shift)]\n            [r (substring x shift (length\
    \ x))])\n        (string-append s (reverse r)))))\n", "  (let loop ((x x) (shift\
    \ shift))\n    (cond\n      [(zero? shift) '()]\n      [(zero? (modulo x 10))\
    \ (cons (modulo x 10) '())]\n      [else (loop (quotient x 10) (- shift 1))]\n\
    \    )))\n", "  (let loop ((x x) (shift shift) (acc '()))\n    (cond\n      [(<\
    \ shift (length x)) (append acc (reverse x))]\n      [(< shift 0) (append acc\
    \ (reverse x))]\n      [else (loop (quotient x shift) (- shift 1) (cons x acc))])))\n",
  "  (if (< shift (length x))\n      (cons (substring x 0 (- shift (length x))) (circular_shift\
    \ (substring x (+ shift (length x)) (length x)) shift))\n      (substring x (-\
    \ shift (length x)) (length x))))\n", "  (let loop ((x x) (shift shift))\n   \
    \ (cond ((< shift (length x))\n           (reverse (substring x 0 (- shift (length\
    \ x))))\n           (loop (substring x shift) (- shift 1)))\n          ((< shift\
    \ 1)\n           (substring x 0 shift)\n           (loop (substring x shift) (-\
    \ shift 1)))\n          (else\n           (substring x 0 shift)\n           (loop\
    \ (substring x shift) (- shift 1))))))\n", "  (if (= shift 0)\n      (list x)\n\
    \      (let ([digits (list-ref (list-ref x shift) 0)])\n        (cons (string-append\
    \ (list-ref digits shift) (circular_shift (list-ref x shift) (sub1 shift)))\n\
    \              (circular_shift (list-ref x shift) (sub1 shift))))))\n", "  (let\
    \ loop ((x x) (shift shift))\n    (cond\n      [(< shift (length x))\n       (reverse\
    \ (substring x 0 (- shift (length x))))]\n      [(< shift 0)\n       (reverse\
    \ (substring x 0 shift))]\n      [else\n       (loop (substring x shift) (- shift\
    \ 1))])))\n", "  (let loop ((x x) (shift shift) (acc '()))\n    (cond ((< shift\
    \ (length acc)) (cons acc (loop (remainder x 10) shift (cons (remainder x 10)\
    \ acc))))\n          ((< shift (length acc)) (loop (remainder x 10) shift (cons\
    \ (remainder x 10) acc)))\n          (else (loop (quotient x 10) shift (cons (quotient\
    \ x 10) acc))))))\n", "  (if (= shift 0)\n      '()\n      (cons (mod x 10)\n\
    \            (circular_shift (/ x 10) shift))))\n", "  (let loop ((x x) (shift\
    \ shift) (digits '()))\n    (cond ((< shift (length x))\n           (reverse digits))\n\
    \          ((< shift 0)\n           (reverse digits))\n          (else\n     \
    \      (let ((digit (modulo (modulo x 10) (* 10 shift))))\n             (set!\
    \ digits (cons digit digits))\n             (loop (modulo x 10) (- (+ shift 1)\
    \ shift) digits)))))\n", "  (let loop ((x x) (shift shift) (result '()))\n   \
    \ (cond ((< shift (length x))\n           (reverse result))\n          ((< shift\
    \ 0)\n           (reverse result))\n          (else\n           (loop (quotient\
    \ x 10) (quotient shift 10)\n                 (cons (modulo x 10) result))))))\n",
  "  (if (< shift (length x))\n      (cons (substring x 0 shift) (circular_shift (substring\
    \ x shift) shift))\n      (substring x (- shift (length x)))))\n", "  (cond\n\
    \    [(< shift (length x))\n     (string-append (substring x 0 shift) (substring\
    \ x shift (length x)))]\n    [else\n     (string-append (substring x 0 shift)\
    \ (substring x shift (length x)))]\n    [else\n     (string-append (substring\
    \ x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))]\n    [else\n     (string-append\
    \ (substring x 0 shift) (substring x shift (length x)))"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
