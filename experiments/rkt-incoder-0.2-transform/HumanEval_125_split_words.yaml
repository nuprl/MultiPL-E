name: HumanEval_125_split_words
language: rkt
prompt: "#lang racket\n\n;; Given a string of words, return a list of words split\
  \ on whitespace, if no whitespaces exists in the text you\n;; should split on commas\
  \ ',' if no commas exists you should return the number of lower-case letters with\
  \ odd order in the\n;; alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
  ;; Examples\n;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\"\
  )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
  \ (split_words \"abcdef\")\n;; 3\n(define (split_words txt)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n\
  \    (check-equal? (candidate \"Hello world!\") (list \"Hello\" \"world!\"))\n \
  \   (check-equal? (candidate \"Hello,world!\") (list \"Hello\" \"world!\"))\n  \
  \  (check-equal? (candidate \"Hello world,!\") (list \"Hello\" \"world,!\"))\n \
  \   (check-equal? (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\"\
  \ \"!\"))\n    (check-equal? (candidate \"abcdef\") 3)\n    (check-equal? (candidate\
  \ \"aaabb\") 2)\n    (check-equal? (candidate \"aaaBb\") 1)\n    (check-equal? (candidate\
  \ \"\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? txt) '()]\n    [(whitespace? txt) (list txt)]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [(equal? (first\
    \ txt) '-) (split_words (rest txt))]\n    [(equal? (first txt) '!) (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') '()]\n    [(equal?\
    \ (first txt) '-) '()]\n    [(equal? (first txt) '(') '()]\n    [(equal? (first\
    \ txt) ')') '()]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let ([words (string->list txt)])\n    (cond\n      [(empty? words) (list '())]\n\
    \      [(not (whitespace? first (first words))) (list '())]\n      [else (cons\
    \ (first words) (split_words (rest words)))])))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(empty? (rest txt)) (list (first txt))]\n    [(equal? (first txt)\
    \ ',') (list (first txt) (split_words (rest txt)))]\n    [else (list (first txt)\
    \ (split_words (rest txt)))]))\n", "  (let ([chars (string->list (string->symbol\
    \ txt))])\n    (cond\n      [(empty? chars) '()]\n      [(not (whitespace? chars))\
    \ '()]\n      [(not (comma? chars)) (string->list txt)]\n      [else (cons (first\
    \ chars) (split_words (rest chars)))])))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [(equal? (first\
    \ txt) '-) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let\
    \ ([split-char (char->string #\\Space)])\n    (cond\n      [(empty? txt) empty]\n\
    \      [(char->string=? #\\Space (first txt)) (split_words txt)]\n      [(char->string=?\
    \ #\\Comma (first txt)) (split_words txt)]\n      [(char->string=? #\\Lower (first\
    \ txt)) (+ 1 ((length txt) (rest txt)))]\n      [(char->string=? #\\Upper (first\
    \ txt)) (+ 1 ((length txt) (rest txt)))]\n      [(char->string=? #\\Number (first\
    \ txt)) (+ 1 ((length txt) (rest txt)))]\n      [else (cons (first txt) (split_words\
    \ (rest txt)))])))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (let ([letters (string->list txt)]\n        [words (list->string\
    \ letters)])\n    (cond\n      [(empty? letters) words]\n      [(not (whitespace?\
    \ letters)) (list->string letters)]\n      [else (let ([split (split-on whitespace?\
    \ letters)])\n               (cond\n                 [(empty? split) (list->string\
    \ letters)]\n                 [(not (empty? split)) (cons (first split) (split_words\
    \ (rest split)))]\n                 [else (cons (first split) (split_words (rest\
    \ split)))]))]))))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ empty]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (let ([chars (string->list (string->symbol\
    \ txt))])\n    (cond\n      [(empty? chars) '()]\n      [(not (whitespace? chars))\
    \ (list->string chars)]\n      [else (let ([chars (string->list (string->symbol\
    \ txt))])\n               (cond\n                 [(empty? chars) '()]\n     \
    \            [(not (comma? chars)) (list->string chars)]\n                 [else\
    \ (let ([chars (string->list (string->symbol txt))])\n                       \
    \    (cond\n                             [(empty? chars) '()]\n              \
    \               [(not (comma? chars)) (list->string chars)]\n                \
    \             [(not (even? chars)) (list->string chars)]\n                   \
    \          [(not (odd? chars)) (list->string chars)]\n                       \
    \      [else (let ([chars (string->list (string->symbol txt))])\n            \
    \                           (cond\n                                         [(empty?\
    \ chars) '()]\n                                         [(not (comma? chars))\
    \ (list->string chars)]\n                                         [(not (even?\
    \ chars)) (list->string chars)]\n                                         [(not\
    \ (odd? chars)) (list->string chars)]\n                                      \
    \   [(not (even? (cdr chars))) (list->string chars)]\n                       \
    \                  [(not (odd? (cdr chars))) (list->string chars)]\n         \
    \                                [(not (even? (cddr chars))) (list->string chars)]\n\
    \                                         [(not (odd? (cddr chars))) (list->string\
    \ chars)]\n                                         [(not (even? (caddr chars)))\
    \ (list->string chars)]\n                                         [(not (odd?\
    \ (caddr chars))) (list->string chars)]\n                                    \
    \     [(not (even? (cadddr chars))) (list->string chars)]\n                  \
    \                       [(not (odd? (cadddr chars))) (list->string chars)]\n \
    \                                        [(not (even? (cadddlr chars))) (list->string\
    \ chars)]\n                                         [(not (odd? (cadddlr chars)))\
    \ (list->string chars)]\n                                         [(not (even?\
    \ (cadddlrr chars))) (list->string chars)]\n                                 \
    \        [(not (odd? (cadddlrr chars))) (list->string chars)]\n              \
    \                           [(not (even? (cadddlrlr chars))) (list->string chars)]\n\
    \                                         [(not (odd? (cadddlrlr chars))) (list->string\
    \ chars)]\n                                         [(not (even? (c", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (list\
    \ txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty? (rest txt)) (", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first\
    \ txt) whitespace) (rest txt)]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [(equal? (first txt) '-) (split_words (rest txt))]\n\
    \    [(equal? (first txt) '!) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (if (empty? txt)\n      '()\n     \
    \ (let ((chars (string->list txt)))\n        (if (or (empty? chars) (null? chars))\n\
    \            (length chars)\n            (let ((char (first chars)))\n       \
    \       (if (or (char-whitespace? char) (char-comma? char))\n                \
    \  (cons char chars)\n                  (let ((chars (split_words (string->list\
    \ char))))\n                    (cons char chars)))))))\n", "  (let ([chars (string->list\
    \ txt)])\n    (cond\n      [(empty? chars) '()]\n      [(string=? (first chars)\
    \ \",\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \" \")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"!\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"?\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"!\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"!\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"?\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"!\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"?\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"!\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"!\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"?\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"!\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"?\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"!\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars\
    \ (string->list (string->symbol txt))])\n    (cond\n      [(empty? chars) '()]\n\
    \      [(char=? (first chars) #\\Space) '()]\n      [(char=? (first chars) #\\\
    Comma) ',']\n      [(char=? (first chars) #\\Newline) '()]\n      [else (append\
    \ (split_words (rest chars)) (list (first chars))])))\n  )\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (let loop ((text txt) (words\
    \ nil))\n    (if (string-empty? text)\n        words\n        (loop (substring\
    \ text 0 (string-length text)) (cons (substring text 0 (string-length text)) words)))))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let\
    \ ([chars (string->list txt)])\n    (cond\n      [(empty? chars) '()]\n      [(string=?\
    \ (first chars) \",\") (cons (first chars) (split_words (rest chars)))]\n    \
    \  [(string=? (first chars) \"\\n\") (cons (first chars) (split_words (rest chars)))]\n\
    \      [else (cons (first chars) (split_words (rest chars)))])))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let loop ((text\
    \ txt) (words ()))\n    (cond ((null? text) words)\n          ((char=? (car text)\
    \ ',) (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-) (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '!) (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '?) (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '(') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ ')') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '=') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car text) words)))\n          ((char=? (car text)\
    \ '-') (loop (cdr text) (cons (car ", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let loop ((text\
    \ txt) (words ()))\n    (cond\n      [(empty? text) words]\n      [(char=? (first\
    \ text) ',) (loop (rest text) (cons (first text) words))]\n      [else (loop (rest\
    \ text) (cons (first text) (cons (first text) (loop (rest text) words))))])))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(whitespace? txt) (list txt)]\n    [else\
    \ (append (split_words (substring txt 0 (string-length txt)))\n              \
    \    (list (substring txt (string-length txt))))]))\n", "  (let ([chars (string->list\
    \ (string->symbol txt))])\n    (cond\n      [(empty? chars) (list '())]\n    \
    \  [(string=? (first chars) #\\space) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\,) (split_words (rest chars))]\n      [(string=? (first chars)\
    \ #\\;) (split_words (rest chars))]\n      [(string=? (first chars) #\\:) (split_words\
    \ (rest chars))]\n      [(string=? (first chars) #\\!) (split_words (rest chars))]\n\
    \      [(string=? (first chars) #\\?) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\;) (split_words (rest chars))]\n      [(string=? (first chars)\
    \ #\\<) (split_words (rest chars))]\n      [(string=? (first chars) #\\>) (split_words\
    \ (rest chars))]\n      [(string=? (first chars) #\\@) (split_words (rest chars))]\n\
    \      [(string=? (first chars) #\\#) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\^) (split_words (rest chars))]\n      [(string=? (first chars)\
    \ #\\_) (split_words (rest chars))]\n      [(string=? (first chars) #\\&) (split_words\
    \ (rest chars))]\n      [(string=? (first chars) #\\|) (split_words (rest chars))]\n\
    \      [(string=? (first chars) #\\~) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\^) (split_words (rest chars))]\n      [(string=? (first chars)\
    \ #\\%) (split_words (rest chars))]\n      [(string=? (first chars) #\\*) (split_words\
    \ (rest chars))]\n      [(string=? (first chars) #\\?) (split_words (rest chars))]\n\
    \      [(string=? (first chars) #\\;) (split_words (rest chars))]\n      [(string=?\
    \ (first chars) #\\:) (split_words (rest chars))]\n      [(string=? (first chars)\
    \ #\\;) (split_words (rest chars))]\n      [(string=? (first chars) #\\;) (split_words\
    \ (rest chars))]\n      [(string=", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let ([words (string->list txt)])\n    (cond\n      [(empty? words) '()]\n  \
    \    [(string=? (first words) \",\")\n       (append (split_words (rest words))\n\
    \              (list (first words)))]\n      [(string=? (first words) \" \")\n\
    \       (append (split_words (rest words))\n              (list (first words)))]\n\
    \      [else\n       (append (split_words (rest words))\n              (list (first\
    \ words))\n              (list (rest words))\n              (list (string->list\
    \ (string-append (first words) \",\" (first words) (first words)))))]\n      )))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [(equal? (first txt) '-) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (let ([chars (string->list (string->symbol\
    \ txt))])\n    (cond\n      [(empty? chars) '()]\n      [(string=? (first chars)\
    \ #\\space) '()]\n      [(string=? (first chars) #\\,) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\:) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first ", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (let ([chars (string->list (string->string txt))])\n    (cond\n      [(empty?\
    \ chars) '()]\n      [(char=? (first chars) #\\Space) '()]\n      [(char=? (first\
    \ chars) #\\Comma) ',']\n      [(char=? (first chars) #\\Newline) '()]\n     \
    \ [(char=? (first chars) #\\Tab) '()]\n      [(char=? (first chars) #\\Return)\
    \ '()]\n      [(char=? (first chars) #\\Newline) '()]\n      [(char=? (first chars)\
    \ #\\Space) '()]\n      [(char=? (first chars) #\\Newline) '()]\n      [(char=?\
    \ (first chars) #\\Tab) '()]\n      [(char=? (first chars) #\\Return) '()]\n \
    \     [(char=? (first chars) #\\Space) '()]\n      [(char=? (first chars) #\\\
    Newline) '()]\n      [(char=? (first chars) #\\Tab) '()]\n      [(char=? (first\
    \ chars) #\\Return) '()]\n      [(char=? (first chars) #\\Space) '()]\n      [(char=?\
    \ (first chars) #\\Newline) '()]\n      [(char=? (first chars) #\\Tab) '()]\n\
    \      [(char=? (first chars) #\\Return) '()]\n      [(char=? (first chars) #\\\
    Space) '()]\n      [(char=? (first chars) #\\Newline) '()]\n      [(char=? (first\
    \ chars) #\\Tab) '()]\n      [(char=? (first chars) #\\Return) '()]\n      [(char=?\
    \ (first chars) #\\Space) '()]\n      [(char=? (first chars) #\\Newline) '()]\n\
    \      [(char=? (first chars) #\\Tab) '()]\n      [(char=? (first chars) #\\Return)\
    \ '()]\n      [(char=? (first chars) #\\Space) '()]\n      [(char=? (first chars)\
    \ #\\Newline) '()]\n      [(char=? (first chars) #\\Tab) '()]\n      [(char=?\
    \ (first chars) #\\Return) '()]\n      [(char=? (first chars) #\\Space) '()]\n\
    \      [(char=? (first chars) #\\New", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) whitespace) empty]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars (string->list\
    \ (string->string txt))])\n    (cond\n      [(empty? chars) '()]\n      [(string=?\
    \ (first chars) #\\space) '()]\n      [(string=? (first chars) #\\,) '()]\n  \
    \    [(string=? (first chars) #\\;) '()]\n      [(string=? (first chars) #\\:)\
    \ '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=? (first chars)\
    \ #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=? (first\
    \ chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first ", "  (cond\n    [(empty?\
    \ txt) empty]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (let loop ((i 0) (acc '()))\n\
    \    (if (or (char=? txt #\\Space)\n            (char=? txt #\\Newline)\n    \
    \        (char=? txt #\\Tab)\n            (char=? txt #\\Newline)\n          \
    \  (char=? txt #\\Space))\n        (cons txt acc)\n        (loop (+ i 1) (cons\
    \ (substring txt 0 i) acc)))))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let ([words (split-string txt #\\space)])\n    (cond\n      [(empty? words)\
    \ '()]\n      [(not (empty? words)) (cons (first words) (split_words (rest words)))]\n\
    \      [else (+ 1 (count (filter #(= (first %) 'a) (filter #(= (first %) 'b) (filter\
    \ #(= (first %) 'c) (filter #(= (first %) 'd) (filter #(= (first %) 'e) (filter\
    \ #(= (first %) 'f) (filter #(= (first %) 'g) (filter #(= (first %) 'h) (filter\
    \ #(= (first %) 'i) (filter #(= (first %) 'j) (filter #(= (first %) 'k) (filter\
    \ #(= (first %) 'l) (filter #(= (first %) 'm) (filter #(= (first %) 'n) (filter\
    \ #(= (first %) 'o) (filter #(= (first %) 'p) (filter #(= (first %) 'q) (filter\
    \ #(= (first %) 'r) (filter #(= (first %) 's) (filter #(= (first %) 't) (filter\
    \ #(= (first %) 'u) (filter #(= (first %) 'v) (filter #(= (first %) 'w) (filter\
    \ #(= (first %) 'x) (filter #(= (first %) 'y) (filter #(= (first %) 'z) (filter\
    \ #(= (first %) 'A) (filter #(= (first %) 'B) (filter #(= (first %) 'C) (filter\
    \ #(= (first %) 'D) (filter #(= (first %) 'E) (filter #(= (first %) 'F) (filter\
    \ #(= (first %) 'G) (filter #(= (first %) 'H) (filter #(= (first %) 'I) (filter\
    \ #(= (first %) 'J) (filter #(= (first %) 'K) (filter #(= (first %) 'L) (filter\
    \ #(= (first %) 'M) (filter #(= (first %) 'N) (filter #(= (first %) 'O) (filter\
    \ #(= (first %", "  (let ([chars (string->list txt)])\n    (cond\n      [(empty?\
    \ chars) '()]\n      [(not (whitespace? chars)) (split_words ',')]\n      [(not\
    \ (comma? chars)) (length (string->list txt))]\n      [else (cons (first chars)\
    \ (split_words (rest chars)))])))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [(equal? (first txt) '-) (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) empty]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') '()]\n    [else (append (split_words (rest txt)) (list\
    \ (first txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let\
    \ ([chars (string->list (string->string txt))])\n    (cond\n      [(empty? chars)\
    \ '()]\n      [(string=? (first chars) \",\")\n       (cond\n         [(empty?\
    \ (rest chars)) '()]\n         [(string=? (first chars) \" \")\n          (cond\n\
    \            [(empty? (rest chars)) '()]\n            [(even? (car chars)) (cons\
    \ (first chars) (split_words (rest chars)))]\n            [else (cons (first chars)\
    \ (split_words (rest chars)))])]\n         [else (cons (first chars) (split_words\
    \ (rest chars)))])]\n      [(string=? (first chars) \" \")\n       (cond\n   \
    \      [(empty? (rest chars)) '()]\n         [(string=? (first chars) \",\")\n\
    \          (cond\n            [(empty? (rest chars)) '()]\n            [(even?\
    \ (car chars)) (cons (first chars) (split_words (rest chars)))]\n            [else\
    \ (cons (first chars) (split_words (rest chars)))])]\n         [else (cons (first\
    \ chars) (split_words (rest chars)))])]\n      [(string=? (first chars) \"-\"\
    )\n       (cond\n         [(empty? (rest chars)) '()]\n         [(string=? (first\
    \ chars) \",\")\n          (cond\n            [(empty? (rest chars)) '()]\n  \
    \          [(even? (car chars)) (cons (first chars) (split_words (rest chars)))]\n\
    \            [else (cons (first chars) (split_words (rest chars)))])]\n      \
    \   [else (cons (first chars) (split_words (rest chars)))])]\n      [(string=?\
    \ (first chars) \"-\")\n       (cond\n         [(empty? (rest chars)) '()]\n \
    \        [(string=? (first chars) \",\")\n          (cond\n            [(empty?\
    \ (rest chars)) '()]\n            [(even? (car chars)) (cons (first chars) (split_words\
    \ (rest chars)))]\n            [else (cons (first chars) (split_words (rest chars)))])]\n\
    \         [else (cons (first chars) (split_words (rest chars)))])]\n      [(string=?\
    \ (first chars) \"-\")\n       (cond\n         [(empty? (rest chars)) '()]\n \
    \        [(string=? (first chars) \",\")\n          (cond\n            [(empty",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) empty]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (if (empty? txt)\n   \
    \   '()\n      (let ((chars (string->list txt)))\n        (if (or (empty? chars)\
    \ (null? (cdr chars)))\n            (append (list txt)\n                    (list\
    \ (length txt)))\n            (append (list (first chars))\n                 \
    \   (list (length txt))\n                    (split_words (rest chars)))))))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(empty? (rest txt)) (list txt)]\n    [(empty?\
    \ (first txt)) (list txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty?\
    \ (first txt)) (list txt)]\n    [(empty? (rest txt)) (list txt)]\n    [(empty?\
    \ (first txt)) (list txt)]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (if (string-empty? txt)\n      '()\n      (let ((chars (string->list txt)))\n\
    \        (if (string-empty? chars)\n            '()\n            (if (string-empty?\
    \ (string->list chars))\n                (length chars)\n                (let\
    \ ((chars (string->list chars)))\n                  (if (string-empty? chars)\n\
    \                      (length chars)\n                      (let ((chars (string->list\
    \ chars)))\n                        (if (string-empty? chars)\n              \
    \              (length chars)\n                            (let ((chars (string->list\
    \ chars)))\n                              (if (string-empty? chars)\n        \
    \                          (length chars)\n                                  (let\
    \ ((chars (string->list chars)))\n                                    (if (string-empty?\
    \ chars)\n                                        (length chars)\n           \
    \                             (let ((chars (string->list chars)))\n          \
    \                                (if (string-empty? chars)\n                 \
    \                             (length chars)\n                               \
    \               (let ((chars (string->list chars)))\n                        \
    \                        (if (string-empty? chars)\n                         \
    \                           (length chars)\n                                 \
    \                   (let ((chars (string->list chars)))\n                    \
    \                                  (if (string-empty? chars)\n               \
    \                                           (length chars)\n                 \
    \                                         (length chars))))))))))))))))))))))))\n",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) whitespace) (rest txt)]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [(equal? (first\
    \ txt) '-) (split_words (rest txt))]\n    [(equal? (first txt) '!) (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '#) (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '$) (split_words (rest txt))]\n    [(equal? (first txt) '%) (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '&) (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '(') (split_words (rest txt))]\n    [(equal? (first txt) ')') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '-) (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '=') (split_words (rest txt))]\n    [(equal? (first txt) '[') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) ']') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '^) (split_words (rest txt))]\n    [(equal? (first txt) '~') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '`) (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '|') (split_words (rest txt))]\n    [(equal? (first txt) '~') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '`') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '|') (split_words (rest txt))]\n    [(equal? (first txt) '~') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '`') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '|') (split_words (rest txt))]\n    [(equal? (first txt) '~') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '`') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '|') (split_words (rest txt))]\n    [(equal? (first txt) '~') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '`') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '|') (split_word", "  (cond\n    [(empty? txt) empty]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',)\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let\
    \ ([chars (string->list (string->symbol txt))])\n    (cond\n      [(empty? chars)\
    \ '()]\n      [(not (whitespace? chars)) (list txt)]\n      [else (append (split_words\
    \ (string->string chars)) (list (string->string chars)))]\n    )))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words ((rest txt)))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) empty]\n    [(equal? (first txt) whitespace) (rest txt)]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(empty?\
    \ (rest txt)) (list txt)]\n    [(empty? (rest txt)) (length txt)]\n    [(empty?\
    \ (rest txt)) (length txt)]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [(equal? (first txt) '-) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (let ([words (split-string (string txt)\
    \ \" \")])\n    (cond\n      [(empty? words) '()]\n      [(not (empty? words))\
    \ (cons (first words) (split_words (rest words)))]\n      [else (+ 1 (length (filter\
    \ (lambda (x) (char-alphabetic? x)) (split-string (string txt) \",\")))]\n   \
    \ )\n  )\n)\n", "  (if (string-empty? txt)\n      '()\n      (let ((chars (string->list\
    \ txt)))\n        (if (string-empty? (first chars))\n            (cons (first\
    \ chars) (split_words (rest chars)))\n            (let ((chars (string->list txt)))\n\
    \              (if (string-empty? (first chars))\n                  (cons (first\
    \ chars) (split_words (rest chars)))\n                  (let ((chars (string->list\
    \ txt)))\n                    (if (string-empty? (first chars))\n            \
    \            (cons (first chars) (split_words (rest chars)))\n               \
    \         (let ((chars (string->list txt)))\n                          (if (string-empty?\
    \ (first chars))\n                              (cons (first chars) (split_words\
    \ (rest chars)))\n                              (let ((chars (string->list txt)))\n\
    \                                (if (string-empty? (first chars))\n         \
    \                           (cons (first chars) (split_words (rest chars)))\n\
    \                                    (let ((chars (string->list txt)))\n     \
    \                                 (if (string-empty? (first chars))\n        \
    \                                  (cons (first chars) (split_words (rest chars)))\n\
    \                                          (let ((chars (string->list txt)))\n\
    \                                            (if (string-empty? (first chars))\n\
    \                                                (cons (first chars) (split_words\
    \ (rest chars)))\n                                                (let ((chars\
    \ (string->list txt)))\n                                                  (if\
    \ (string-empty? (first chars))\n                                            \
    \          (cons (first chars) (split_words (rest chars)))\n                 \
    \                                     (let ((chars (string->list txt)))\n    \
    \                                                    (if (string-empty? (first\
    \ chars))\n                                                            (cons (first\
    \ chars) (split_words (rest chars)))\n                                       \
    \                     (let ((chars (string->list txt)))\n                    \
    \                                          (if (string-empty? (first chars))\n\
    \                                                                  (cons (first\
    \ chars) (split_words (rest chars)))\n                                       \
    \                           (let ((chars (string->list txt)))\n              \
    \                                                      (if (string-empty? (first\
    \ chars))\n                                                                  \
    \      (cons (first chars) (split_words (rest chars)))\n                     \
    \                                                   (let ((chars (string->list\
    \ txt)))\n                                                                   \
    \       (if (string-empty? (first chars))\n                                  \
    \                                            (cons (first chars) (split_words\
    \ (rest chars)))\n                                                           \
    \                   (let ((chars (string->list txt)))\n                      \
    \                                                          (if (string-empty?\
    \ (first chars))\n                                                           \
    \                         (cons (first chars) (split_words (rest chars)))\n  \
    \                                                                            \
    \      (let ((chars (string->list txt)))\n                                   \
    \                                                   (if (string-empty? (first\
    \ char", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') '()]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',) (split_words ((rest txt)))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n \
    \   [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [(equal? (first txt)\
    \ '-) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (if (string-empty? txt)\n      '()\n      (let ([chars (string->list\
    \ (string->string txt))])\n        (if (string-empty? chars)\n            '()\n\
    \            (let ([char (first chars)])\n              (if (string-empty? char)\n\
    \                  '()\n                  (let ([chars (rest chars)])\n      \
    \              (if (string-empty? chars)\n                        (char->list\
    \ (char->string char))\n                        (let ([char (first chars)])\n\
    \                          (if (string-empty? char)\n                        \
    \      (char->list (char->string char))\n                              (let ([chars\
    \ (rest chars)])\n                                (if (string-empty? chars)\n\
    \                                    (char->list (char->string char))\n      \
    \                              (let ([char (first chars)])\n                 \
    \                     (if (string-empty? char)\n                             \
    \             (char->list (char->string char))\n                             \
    \             (let ([chars (rest chars)])\n                                  \
    \          (if (string-empty? chars)\n                                       \
    \         (char->list (char->string char))\n                                 \
    \               (let ([char (first chars)])\n                                \
    \                  (if (string-empty? char)\n                                \
    \                      (char->list (char->string char))\n                    \
    \                                  (let ([chars (rest chars)])\n             \
    \                                           (if (string-empty? chars)\n      \
    \                                                      (char->list (char->string\
    \ char))\n                                                            (let ([char\
    \ (first chars)])\n                                                          \
    \    (if (string-empty? char)\n                                              \
    \                    (char->list (char->string char))\n                      \
    \                                            (let ([chars (rest chars)])\n   \
    \                                                                 (if (string-empty?\
    \ chars)\n                                                                   \
    \   (char->list (char->string char))\n                                       \
    \                               (let ([char (first chars)])\n                \
    \                                                        (if (string-empty? char)\n\
    \                                                                            (char->list\
    \ (char->string char))\n                                                     \
    \                       (let ([chars (rest chars)])\n                        \
    \                                                      (if (string-empty? chars)\n\
    \                                                                            \
    \      (char->list (char->string char))\n                                    \
    \                                              (let ([char (first chars)])\n \
    \                                                                            \
    \       (if (string-empty? char)\n                                           \
    \                                           (char->list (char->string char))\n\
    \                                                                            \
    \          (let ([chars (rest chars)])\n                                     \
    \                                   (if (string-empty? chars)\n              \
    \                                                              (char->list (char->string\
    \ char))\n                                                                   \
    \         (let ([char (first chars)])\n                                      \
    \                                        (if (string-empty? char)\n          \
    \                                                                        (char->list\
    \ (char->string char))\n                                                     \
    \                             (let ([chars (rest chars)])\n                  \
    \                                                                  (if (string-empty?\
    \ chars)\n                                                                   \
    \                   (char->list (char->string char))\n                       \
    \                                                               (let ([char (first\
    \ chars)])\n                                                                 \
    \       (", "  (if (string-empty? txt)\n      '()\n      (let ([chars (string->list\
    \ (string->string txt))])\n        (if (string-empty? chars)\n            '()\n\
    \            (let ([char (first chars)])\n              (if (string-empty? char)\n\
    \                  (split_words \"\")\n                  (if (char->integer? char)\n\
    \                      (cons (first chars) (split_words (rest chars)))\n     \
    \                 (cons (first char) (split_words (rest chars))))))))))\n", " \
    \ (if (empty? txt)\n      '()\n      (let ([word (first txt)])\n        (if (not\
    \ (empty? word))\n            (cons word (split_words (rest txt)))\n         \
    \   (if (char-alphabetic? (first txt))\n                (+ 1 (count (filter (lambda\
    \ (c) (= (char c 97) 97)) (map char-alphabetic? (rest txt))))\n              \
    \  (+ 1 (count (filter (lambda (c) (= (char c 97) 97)) (map char-alphabetic? (rest\
    \ txt))))\n                (+ 1 (count (filter (lambda (c) (= (char c 97) 97))\
    \ (map char-alphabetic? (rest txt))))\n                (+ 1 (count (filter (lambda\
    \ (c) (= (char c 97) 97)) (map char-alphabetic? (rest txt))))\n              \
    \  (+ 1 (count (filter (lambda (c) (= (char c 97) 97)) (map char-alphabetic? (rest\
    \ txt))))\n                (+ 1 (count (filter (lambda (c) (= (char c 97) 97))\
    \ (map char-alphabetic? (rest txt))))\n                (+ 1 (count (filter (lambda\
    \ (c) (= (char c 97) 97)) (map char-alphabetic? (rest txt))))\n              \
    \  (+ 1 (count (filter (lambda (c) (= (char c 97) 97)) (map char-alphabetic? (rest\
    \ txt))))\n                (+ 1 (count (filter (lambda (c) (= (char c 97) 97))\
    \ (map char-alphabetic? (rest txt))))\n                (+ 1 (count (filter (lambda\
    \ (c) (= (char c 97) 97)) (map char-alphabetic? (rest txt))))\n              \
    \  (+ 1 (count (filter (lambda (c) (= (char c 97) 97)) (map char-alphabetic? (rest\
    \ txt))))\n                (+ 1 (count (filter (lambda (c) (= (char c 97) 97))\
    \ (map char-alphabetic? (rest txt))))\n                (+ 1 (count (filter (lambda\
    \ (c) (= (char c 97) 97)) (map char-alphabetic? (rest txt))))\n              \
    \  (+ 1 (count (filter (lambda (c) (= (char c 97) 97)) (map char-alphabetic? (rest\
    \ txt))))\n                (+ 1 (count (filter (lambda (c) (= (char c 97) 97))\
    \ (map char-alphabetic? (rest txt))))\n                (+ 1 (count (filter (lambda\
    \ (c) (", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [(equal? (first txt) '-) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (if (empty? txt)\n      '()\n     \
    \ (let ([chars (string->list (string->string txt))])\n        (if (empty? chars)\n\
    \            (length chars)\n            (let ([char (first chars)])\n       \
    \       (if (string=? char #\\space)\n                  (split_words (rest chars))\n\
    \                  (cons char (split_words (rest chars)))))))\n      (length chars)))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let\
    \ loop ((text txt) (words ()))\n    (cond ((null? text) words)\n          ((char=?\
    \ (car text) ?whitespace) \n           (loop (cdr text) (cons (car text) words)))\n\
    \          ((char=? (car text) ?comma)\n           (loop (cdr text) (cons (car\
    \ text) words)))\n          (else\n           (loop (cdr text) (cons (car text)\
    \ words)))))\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. I'm new to Racket\
    \ and I didn't know about `char=?`. I'll look into it.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that uses `char=?`. It's a little more verbose than yours, but it's\
    \ more idiomatic Racket and more idiomatic than your solution. :)\n<|/ c |>\n\
    <| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? txt) '()]\n    [(whitespace?\
    \ txt) (list txt)]\n    [(comma? txt) (list txt)]\n    [(even? count) (list txt)]\n\
    \    [else (count (count_letters txt))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [(equal? (first\
    \ txt) '-) (split_words (rest txt))]\n    [(equal? (first txt) '(') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '[') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '{') (split_words (rest txt))]\n    [(equal? (first txt) '!') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '?') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '|') (split_words (rest txt))]\n    [(equal? (first txt) '~') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '^') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '$') (split_words (rest txt))]\n    [(equal? (first txt) '@') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '&') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '*') (split_words (rest txt))]\n    [(equal? (first txt) '(') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '[') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '{') (split_words (rest txt))]\n    [(equal? (first txt) '!') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '?') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '|') (split_words (rest txt))]\n    [(equal? (first txt) '~') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '^') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '$') (split_words (rest txt))]\n    [(equal? (first txt) '@') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '&') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '*') (split_words (rest txt))]\n    [(equal? (first txt) '(') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '[') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) ", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let ([chars (string->list txt)])\n    (cond\n      [(empty? chars) '()]\n  \
    \    [(string=? (first chars) \",\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \" \")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"!\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"?\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"!\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"?\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"!\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"!\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"?\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"!\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"?\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"!\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"?\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"!\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=? (first chars) \"?\")\n       (append (split_words (rest chars))\
    \ (list (first chars)))]\n      [(string=? (first chars) \"!\")\n       (append\
    \ (split_words (rest chars)) (list (first chars)))]\n      [(string=? (first chars)\
    \ \"?\")\n       (append (split_words (rest chars)) (list (first chars)))]\n \
    \     [(string=", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [(equal? (first txt) '-) (split_words (rest txt))]\n\
    \    [(equal? (first txt) '(') (split_words (rest txt))]\n    [(equal? (first\
    \ txt) '[') (split_words (rest txt))]\n    [(equal? (first txt) '{') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '!') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '?') (split_words (rest txt))]\n    [(equal? (first txt) '-') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '=') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '?') (split_words (rest txt))]\n    [(equal? (first txt) '!') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '(') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '[') (split_words (rest txt))]\n    [(equal? (first txt) '{') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '-') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '=') (split_words (rest txt))]\n    [(equal? (first txt) '?') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '!') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '(') (split_words (rest txt))]\n    [(equal? (first txt) '[') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '{') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '-') (split_words (rest txt))]\n    [(equal? (first txt) '=') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '?') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '!') (split_words (rest txt))]\n    [(equal? (first txt) '(') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '[') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '{') (split_words (rest txt))]\n    [(equal? (first txt) '-') (split_words\
    \ (", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '-) (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '(') (split_words (rest txt))]\n    [(equal? (first txt) ')') (split_words\
    \ (rest txt))]\n    [(equal? (first txt) '!') (split_words (rest txt))]\n    [(equal?\
    \ (first txt) '?') (split_words (rest txt))]\n    [(equal? (first txt) '#lang)\
    \ (split_words (rest txt))]\n    [(equal? (first txt) '#lang) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars\
    \ (string->list (string->symbol txt))])\n    (cond\n      [(empty? chars) '()]\n\
    \      [(not (whitespace? chars)) (list txt)]\n      [else (append (split_words\
    \ (string->string chars)) (list (string->string chars))]))))\n", "  (cond\n  \
    \  [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ empty]\n    [(equal? (first txt) whitespace) empty]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (let ([words (string->list txt)])\n\
    \    (cond\n      [(empty? words) '()]\n      [(string=? (first words) \",\")\
    \ '()]\n      [(string=? (first words) \" \") '()]\n      [else (append (split_words\
    \ (rest words))\n                  (list (first words))))])))\n", "  (let ([chars\
    \ (string->list (string->string txt))])\n    (cond\n      [(empty? chars) '()]\n\
    \      [(string=? (first chars) #\\space) '()]\n      [(string=? (first chars)\
    \ #\\,) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=? (first\
    \ chars) #\\:) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first ", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(empty? (rest txt)) (list (first txt))]\n    [(empty? (rest\
    \ txt)) (length (first txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (if (string-empty? txt)\n      '()\n      (let ((chars (string->list txt)))\n\
    \        (if (string-empty? chars)\n            (length chars)\n            (let\
    \ ((char (first chars)))\n              (if (char-whitespace? char)\n        \
    \          (split_words chars)\n                  (if (char-comma? char)\n   \
    \                   (cons (first chars) (split_words chars))\n               \
    \       (if (char-letter? char)\n                          (+ 1 (odd? char-letter?\
    \ (char-code char)))\n                          (odd? char-letter? (char-code\
    \ char))))))))))\n", "  (let ([chars (string->list (string->symbol txt))])\n \
    \   (cond\n      [(empty? chars) '()]\n      [(string=? (first chars) #\\space)\
    \ '()]\n      [(string=? (first chars) #\\,) ',']\n      [(string=? (first chars)\
    \ #\\;) ',']\n      [(string=? (first chars) #\\:) ',']\n      [(string=? (first\
    \ chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first chars) #\\;) ',']\n      [(string=? (first chars) #\\;) ',']\n      [(string=?\
    \ (first ", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ empty]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [(equal? (first\
    \ txt) '-) (split_words (rest txt))]\n    [(equal? (first txt) '!) (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',) (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n\
    \    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (let ([chars (string->list txt)])\n\
    \    (if (null? chars)\n        '()\n        (let ([char (first chars)])\n   \
    \       (if (char=? char #\\space)\n              (split_words (rest chars))\n\
    \              (cons char (split_words (rest chars)))))))\n", "  (cond\n    [(empty?\
    \ txt) '()]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n    [else\
    \ (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt)\
    \ '()]\n    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons\
    \ (first txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',') (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(empty? (rest txt))\
    \ (list (first txt))]\n    [(empty? (rest txt)) (list (first txt))]\n    [(empty?\
    \ (rest txt)) (list (first txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let loop ((text txt) (words ()))\n    (cond ((null? text) words)\n         \
    \ ((char=? (car text) ?whitespace) (recur (cdr text) (cons (car text) words)))\n\
    \          ((char=? (car text) ?comma) (recur (cdr text) (cons (car text) words)))\n\
    \          (else (recur (cdr text) (cons (car text) words))))\n  (loop (reverse\
    \ text) words)))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) whitespace)\
    \ (rest txt)]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words (rest txt))]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars\
    \ (string->list (string->symbol txt))])\n    (cond\n      [(empty? chars) '()]\n\
    \      [(string=? (first chars) #\\space) '()]\n      [(string=? (first chars)\
    \ #\\,) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=? (first\
    \ chars) #\\:) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first chars) #\\;) '()]\n      [(string=?\
    \ (first chars) #\\;) '()]\n      [(string=? (first ", "  (let ([words (split-string\
    \ (string txt) \" \")])\n    (cond\n      [(empty? words) (list txt)]\n      [(not\
    \ (empty? words)) (list txt (first words))]\n      [else (list txt (first words)\
    \ (second words))])))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first\
    \ txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',) (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) whitespace) empty]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars\
    \ (string->list txt)])\n    (cond [(empty? chars) '()]\n          [(string=? (first\
    \ chars) #\\space) '()]\n          [(string=? (first chars) #\\,) '()]\n     \
    \     [(string=? (first chars) #\\;) '()]\n          [(string=? (first chars)\
    \ #\\:) '()]\n          [(string=? (first chars) #\\;) '()]\n          [(string=?\
    \ (first chars) #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n  \
    \        [(string=? (first chars) #\\;) '()]\n          [(string=? (first chars)\
    \ #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n          [(string=?\
    \ (first chars) #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n  \
    \        [(string=? (first chars) #\\;) '()]\n          [(string=? (first chars)\
    \ #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n          [(string=?\
    \ (first chars) #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n  \
    \        [(string=? (first chars) #\\;) '()]\n          [(string=? (first chars)\
    \ #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n          [(string=?\
    \ (first chars) #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n  \
    \        [(string=? (first chars) #\\;) '()]\n          [(string=? (first chars)\
    \ #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n          [(string=?\
    \ (first chars) #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n  \
    \        [(string=? (first chars) #\\;) '()]\n          [(string=? (first chars)\
    \ #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n          [(string=?\
    \ (first chars) #\\;) '()]\n          [(string=? (first chars) #\\;) '()]\n  \
    \        [(string=? (first chars) #\\;", "  (cond\n    [(empty? txt) empty]\n\
    \    [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first\
    \ txt) (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n   \
    \ [(equal? (first txt) ',) (split_words (rest txt))]\n    [else (cons (first txt)\
    \ (split_words (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal?\
    \ (first txt) ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words\
    \ (rest txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (let loop ((text txt) (words ()))\n    (if (empty? text)\n        words\n   \
    \     (loop (rest text) (cons (first text) (loop (rest text) words))))))\n", " \
    \ (let ([chars (string->list (string->symbol txt))])\n    (cond\n      [(empty?\
    \ chars) '()]\n      [(string=? (first chars) #\\space) '()]\n      [(string=?\
    \ (first chars) #\\,) '(list \"Hello\" \"world!\")]\n      [(string=? (first chars)\
    \ #\\;) '(list \"Hello\" \"world!\")]\n      [(string=? (first chars) #\\:) '(list\
    \ \"Hello\" \"world!\")]\n      [(string=? (first chars) #\\;) '(list \"Hello\"\
    \ \"world!\")]\n      [(string=? (first chars) #\\;) '(list \"Hello\" \"world!\"\
    )]\n      [(string=? (first chars) #\\;) '(list \"Hello\" \"world!\")]\n     \
    \ [(string=? (first chars) #\\;) '(list \"Hello\" \"world!\")]\n      [(string=?\
    \ (first chars) #\\;) '(list \"Hello\" \"world!\")]\n      [(string=? (first chars)\
    \ #\\;) '(list \"Hello\" \"world!\")]\n      [(string=? (first chars) #\\;) '(list\
    \ \"Hello\" \"world!\")]\n      [(string=? (first chars) #\\;) '(list \"Hello\"\
    \ \"world!\")]\n      [(string=? (first chars) #\\;) '(list \"Hello\" \"world!\"\
    )]\n      [(string=? (first chars) #\\;) '(list \"Hello\" \"world!\")]\n     \
    \ [(string=? (first chars) #\\;) '(list \"Hello\" \"world!\")]\n      [(string=?\
    \ (first chars) #\\;) '(list \"Hello\" \"world!\")]\n      [(string=? (first chars)\
    \ #\\;) '(list \"Hello\" \"world!\")]\n      [(string=? (first chars) #\\;) '(list\
    \ \"Hello\" \"world!\")]\n      [(string=? (first chars) #\\;) '(list \"Hello\"\
    \ \"world!\")]\n      [(string=? (first chars) #\\;) '(list \"Hello\" \"world!\"\
    )]\n      [(string=? (first chars) #\\;) '(list \"Hello\" \"world!\")]\n     \
    \ [(string=? (first chars) #\\;) '(list \"Hello\" \"world!\")]\n      [(string=?\
    \ (first chars) #", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt)\
    \ ',') (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest\
    \ txt)))]))\n", "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',')\
    \ (split_words (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n",
  "  (cond\n    [(empty? txt) '()]\n    [(equal? (first txt) ',') (split_words (rest\
    \ txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (cond\n\
    \    [(empty? txt) empty]\n    [(equal? (first txt) whitespace) (rest txt)]\n\
    \    [else (cons (first txt) (split_words (rest txt)))]))\n", "  (let ([chars\
    \ (string->list (string->symbol txt))])\n    (cond\n      [(empty? chars) '()]\n\
    \      [(char=? (first chars) #\\space) '()]\n      [(char=? (first chars) #\\\
    ,) ',']\n      [(char=? (first chars) #\\a) '(#\\a)\n       (char->integer (first\
    \ chars)) (+ 1 (char->integer (first chars)))]\n      [(char=? (first chars) #\\\
    b) '(#\\b)\n       (char->integer (first chars)) (+ 1 (char->integer (first chars)))]\n\
    \      [(char=? (first chars) #\\c) '(#\\c)\n       (char->integer (first chars))\
    \ (+ 1 (char->integer (first chars)))]\n      [(char=? (first chars) #\\d) '(#\\\
    d)\n       (char->integer (first chars)) (+ 1 (char->integer (first chars)))]\n\
    \      [(char=? (first chars) #\\e) '(#\\e)\n       (char->integer (first chars))\
    \ (+ 1 (char->integer (first chars)))]\n      [(char=? (first chars) #\\F) '(#\\\
    F)\n       (char->integer (first chars)) (+ 1 (char->integer (first chars)))]\n\
    \      [(char=? (first chars) #\\G) '(#\\G)\n       (char->integer (first chars))\
    \ (+ 1 (char->integer (first chars)))]\n      [(char=? (first chars) #\\H) '(#\\\
    H)\n       (char->integer (first chars)) (+ 1 (char->integer (first chars)))]\n\
    \      [(char=? (first chars) #\\I) '(#\\I)\n       (char->integer (first chars))\
    \ (+ 1 (char->integer (first chars)))]\n      [(char=? (first chars) #\\J) '(#\\\
    J)\n       (char->integer (first chars)) (+ 1 (char->integer (first chars)))]\n\
    \      [(char=? (first chars) #\\K) '(#\\K)\n       (char->integer (first chars))\
    \ (+ 1 (char->integer (first chars)))]\n      [(char=? (first chars) #\\L) '(#\\\
    L)\n       (char->integer (first chars)) (+ 1 (char->integer (first chars)))]\n\
    \      ", "  (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (cond\n    [(empty? txt) empty]\n    [(equal? (first txt) ',') (split_words\
    \ (rest txt))]\n    [else (cons (first txt) (split_words (rest txt)))]))\n", " \
    \ (let ([chars (string->list (string->symbol txt))])\n    (cond\n      [(empty?\
    \ chars) '()]\n      [(char=? (first chars) #\\space) '()]\n      [(char=? (first\
    \ chars) #\\,) ',']\n      [(char=? (first chars) #\\a) 0]\n      [(char=? (first\
    \ chars) #\\b) 1]\n      [(char=? (first chars) #\\c) 2]\n      [(char=? (first\
    \ chars) #\\d) 3]\n      [(char=? (first chars) #\\e) 4]\n      [(char=? (first\
    \ chars) #\\F) 5]\n      [(char=? (first chars) #\\G) 6]\n      [(char=? (first\
    \ chars) #\\H) 7]\n      [(char=? (first chars) #\\I) 8]\n      [(char=? (first\
    \ chars) #\\J) 9]\n      [(char=? (first chars) #\\K) 10]\n      [(char=? (first\
    \ chars) #\\L) 11]\n      [(char=? (first chars) #\\M) 12]\n      [(char=? (first\
    \ chars) #\\N) 13]\n      [(char=? (first chars) #\\O) 14]\n      [(char=? (first\
    \ chars) #\\P) 15]\n      [(char=? (first chars) #\\Q) 16]\n      [(char=? (first\
    \ chars) #\\R) 17]\n      [(char=? (first chars) #\\S) 18]\n      [(char=? (first\
    \ chars) #\\T) 19]\n      [(char=? (first chars) #\\U) 20]\n      [(char=? (first\
    \ chars) #\\V) 21]\n      [(char=? (first chars) #\\W) 22]\n      [(char=? (first\
    \ chars) #\\X) 23]\n      [(char=? (first chars) #\\Y) 24]\n      [(char=? (first\
    \ chars) #\\Z) 25]\n      [else (cons (first chars) (split_words (rest chars)))])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
