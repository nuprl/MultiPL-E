name: HumanEval_37_sort_even
language: rkt
prompt: "#lang racket\n\n;; This function takes a list l and returns a list l' such\
  \ that\n;; l' is identical to l in the odd indicies, while its values at the even\
  \ indicies are equal\n;; to the values of the even indicies of l, but sorted.\n\
  ;; >>> (sort_even (list 1 2 3))\n;; (list 1 2 3)\n;; >>> (sort_even (list 5 6 3\
  \ 4))\n;; (list 3 6 5 4)\n(define (sort_even l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_even))\n\
  \    (check-equal? (candidate (list 1 2 3)) (list 1 2 3))\n    (check-equal? (candidate\
  \ (list 5 3 -5 2 -3 3 9 0 123 1 -10)) (list -10 3 -5 2 -3 3 5 0 9 1 123))\n    (check-equal?\
  \ (candidate (list 5 8 -12 4 23 2 3 11 12 -10)) (list -12 8 3 4 5 2 12 11 23 -10))\n\
  ))\n\n(test-humaneval)"
completions: ["  (if (null? l)\n      '()\n      (let ((evens (map car l)))\n    \
    \    (if (null? evens)\n            (cons (car l) '())\n            (let ((evens\
    \ (sort_even (cdr l))))\n              (cons (car l) (cons (car evens) (cdr evens))))))))\n",
  "  (if (null? l)\n      '()\n      (let ((even (sort (subseq l 0 (length l)) even?)))\n\
    \        (if (null? even)\n            (cons (first l) (sort_even (rest l)))\n\
    \            (cons (first even) (sort_even (rest even)))))))\n", "  (if (null?\
    \ l)\n      '()\n      (let ((l' (reverse l)))\n        (if (null? (cdr l))\n\
    \            (cons (car l) l')\n            (let ((v (car l)))\n             \
    \ (if (< (car l) v)\n                  (cons v l')\n                  (cons (car\
    \ l) l'))))))))\n", "  (if (null? l)\n      '()\n      (let ((l' (sort (append\
    \ (subseq l 0 (car l)) (list (car l))) <)))\n        (if (null? l')\n        \
    \    l\n            (append l' (sort_even (cdr l)))))))\n", "  (if (null? l)\n\
    \      '()\n      (let ((l' (reverse l)))\n        (if (even? (length l))\n  \
    \          (cons (first l') (sort_even (rest l')))\n            (cons (first l)\
    \ (sort_even (rest l'))))))))\n", "  (if (null? l)\n      '()\n      (let ((even\
    \ (sort (subseq l 0 (length l)) (lambda (x y) (< x y))))\n            (odd (sort\
    \ (subseq l 1 (length l)) (lambda (x y) (< x y))))\n            (even (reverse\
    \ even))\n            (odd (reverse odd)))\n        (cons (first even) (cons (first\
    \ odd) (sort_even (rest even))\n                                   (sort_even\
    \ (rest odd)))))))\n", "  (if (null? l)\n      '()\n      (let ((even (sort_even\
    \ (cdr l))))\n        (append (cons (car l) even)\n                (sort_even\
    \ (cdr l)))))\n)\n", "  (if (null? l)\n      '()\n      (let ((l' (sort (append\
    \ (take l (- 2 (length l))) l) (lambda (x y) (< (car x) (car y)) (> (car x) (car\
    \ y))))))\n        (if (null? l')\n            l\n            (append l (take\
    \ l' 2)))))\n", "  (if (null? l)\n      '()\n      (let ((evens (map car l))\n\
    \            (odds (map cdr l)))\n        (if (null? odds)\n            (cons\
    \ evens evens)\n            (let ((evens (sort_even (cons (car odds) evens))))\n\
    \              (cons (car evens) odds)\n              )\n            )\n     \
    \   )\n      )\n  )\n", "  (if (null? l)\n      '()\n      (let ((even (car l))\n\
    \            (odd (sort_even (cdr l))))\n        (if (even? (car odd))\n     \
    \       (cons (car l) odd)\n            (cons (car odd) odd))))))\n", "  (if (null?\
    \ l)\n      '()\n      (let ((l1 (car l))\n            (l2 (cdr l)))\n       \
    \ (if (even? l1)\n            (cons l1 (sort_even (cons l2 l)))\n            (cons\
    \ l (sort_even (cons l1 l2))))))\n", "  (if (null? l)\n      '()\n      (let ((even\
    \ (sort (subseq l 0 (length l))\n                       (lambda (x) (if (even?\
    \ x) x 0)))))\n        (cons (car even) (sort_even (cdr even)))))) ; cons head\
    \ of even list to new list\n", "  (if (null? l)\n      l\n      (let ((l' (reverse\
    \ l)))\n        (if (even? (length l'))\n            (cons (first l') (sort_even\
    \ (rest l')))\n            (cons (first l) (sort_even (rest l'))))))))\n", " \
    \ (if (null? l)\n      '()\n      (let ((even (car l))\n            (odd (sort_even\
    \ (cdr l))))\n        (cons (if (even? even) (cons even odd) odd)\n          \
    \    (sort_even (cdr l)))))\n", "  (if (null? l)\n      '()\n      (let ((even\
    \ (car l))\n            (odd (sort_even (cdr l))))\n        (if (= even odd)\n\
    \            (cons even (sort_even (cdr even)))\n            (cons odd odd))))\n",
  "  (if (null? l)\n      '()\n      (let ((even (car l))\n            (odd (sort_even\
    \ (cdr l))))\n        (if (< even odd)\n            (cons even (cons odd l))\n\
    \            (cons odd l)))))\n", "  (if (null? l)\n      '()\n      (let ((evens\
    \ (map car l)))\n        (if (null? evens)\n            (cons (car l) l)\n   \
    \         (let ((evens (sort_even (cdr l))))\n              (cons (car l) (sort_even\
    \ (cons (car evens) evens)))))))\n", "  (if (null? l)\n      '()\n      (append\
    \ (sort_even (cdr l))\n              (list (car l))\n              (sort_even\
    \ (cdr l))))) ; #lang racket\n", "  (if (null? l)\n      '()\n      (let ((even\
    \ (car l))\n            (odd (sort_even (cdr l))))\n        (if (< even odd)\n\
    \            (cons even (sort_even (cons odd (cdr l))))\n            (cons odd\
    \ (cdr l)))))\n", "  (if (null? l)\n      '()\n      (let ((even (car l))\n  \
    \          (odd (sort_even (cdr l))))\n        (if (< even odd)\n            (cons\
    \ even (cons odd (cddr even)))\n            (cons odd even))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
