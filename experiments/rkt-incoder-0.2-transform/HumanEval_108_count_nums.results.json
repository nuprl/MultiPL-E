{
  "language": "rkt",
  "name": "HumanEval_108_count_nums",
  "results": [
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:26:4\nactual:     0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:27:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:28:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:29:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:30:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:31:4\nactual:     0\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ 1 (count_nums (rest arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpob_5msun.rkt:16:37: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "stdout": "",
      "timestamp": 1660040006
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ (* (modulo (first arr) 10) 10)\n         (count_nums (rest arr)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jg28d99.rkt:25:4\nactual:     170\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jg28d99.rkt:26:4\nactual:     240\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jg28d99.rkt:27:4\nactual:     260\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jg28d99.rkt:28:4\nactual:     220\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jg28d99.rkt:29:4\nactual:     180\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jg28d99.rkt:30:4\nactual:     10\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jg28d99.rkt:31:4\nactual:     10\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first arr (cdr arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nwujt7w.rkt:26:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nwujt7w.rkt:27:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nwujt7w.rkt:28:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nwujt7w.rkt:29:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nwujt7w.rkt:30:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nwujt7w.rkt:31:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nwujt7w.rkt:32:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (car arr)) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first arr (- 0 (first arr)))) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1jwgy_9s.rkt:25:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1jwgy_9s.rkt:26:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1jwgy_9s.rkt:27:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1jwgy_9s.rkt:28:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1jwgy_9s.rkt:29:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1jwgy_9s.rkt:30:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1jwgy_9s.rkt:31:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first arr (rest arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:26:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:27:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:28:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:29:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:30:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:31:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:32:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:26:4\nactual:     0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:27:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:28:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:29:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:30:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:31:4\nactual:     0\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:26:4\nactual:     0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:27:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:28:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:29:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:30:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_boylogb.rkt:31:4\nactual:     0\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first arr (rest arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:26:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:27:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:28:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:29:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:30:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:31:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:32:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first arr (rest arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:26:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:27:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:28:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:29:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:30:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:31:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavgdgy86.rkt:32:4\n\nfirst: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ (first arr) (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:25:4\nactual:     -3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:26:4\nactual:     14\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:27:4\nactual:     16\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:28:4\nactual:     192\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:29:4\nactual:     -32\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ 1 (count_nums (rest arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpob_5msun.rkt:16:37: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "stdout": "",
      "timestamp": 1660040006
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ (* (first arr) (first arr)) (count_nums (rest arr)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dbe69_i.rkt:24:4\nactual:     5\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dbe69_i.rkt:25:4\nactual:     60\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dbe69_i.rkt:26:4\nactual:     180\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dbe69_i.rkt:27:4\nactual:     19656\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dbe69_i.rkt:28:4\nactual:     6990\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ (first arr)\n         (count_nums (rest arr)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p3n4wbg.rkt:25:4\nactual:     -3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p3n4wbg.rkt:26:4\nactual:     14\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p3n4wbg.rkt:27:4\nactual:     16\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p3n4wbg.rkt:28:4\nactual:     192\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_p3n4wbg.rkt:29:4\nactual:     -32\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) (first arr)) (count_nums (rest arr))]\n    [else (+ (count_nums (rest arr)) (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7__hy6h.rkt:26:4\nactual:     0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7__hy6h.rkt:27:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7__hy6h.rkt:28:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7__hy6h.rkt:29:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7__hy6h.rkt:30:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7__hy6h.rkt:31:4\nactual:     0\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (car arr)) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7co9zspc.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ 1 (count_nums (rest arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpob_5msun.rkt:16:37: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "stdout": "",
      "timestamp": 1660040006
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ (* (expt (first arr) (- (length arr) 1)) 10)\n         (count_nums (rest arr)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuepqn2o0.rkt:26:4\nactual:     240\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuepqn2o0.rkt:27:4\nactual:     141240\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuepqn2o0.rkt:28:4\nactual:     1009412440\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuepqn2o0.rkt:29:4\nactual:     5699470\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuepqn2o0.rkt:30:4\nactual:     10\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuepqn2o0.rkt:31:4\nactual:     10\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ 1 (count_nums (rest arr))))\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp076dzie7.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp076dzie7.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp076dzie7.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp076dzie7.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp076dzie7.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp076dzie7.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ (first arr) (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:25:4\nactual:     -3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:26:4\nactual:     14\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:27:4\nactual:     16\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:28:4\nactual:     192\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwc7rkct.rkt:29:4\nactual:     -32\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(> (first arr) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprc7wn8a.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(positive? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwy75x76.rkt:29:4\nactual:     3\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (if (null? arr)\n      0\n      (+ (car arr) (count_nums (cdr arr)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6v1gk0o.rkt:24:4\nactual:     -3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6v1gk0o.rkt:25:4\nactual:     14\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6v1gk0o.rkt:26:4\nactual:     16\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6v1gk0o.rkt:27:4\nactual:     192\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo6v1gk0o.rkt:28:4\nactual:     -32\nexpected:   5\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Write a function count_nums which takes an array of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [(number? (first arr)) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:25:4\nactual:     3\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:26:4\nactual:     7\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:27:4\nactual:     7\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:28:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:29:4\nactual:     6\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1ab9gpa.rkt:30:4\nactual:     2\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660040008
    }
  ]
}