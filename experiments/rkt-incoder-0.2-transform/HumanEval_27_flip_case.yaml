name: HumanEval_27_flip_case
language: rkt
prompt: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n;; >>> (flip_case \"Hello\")\n;; \"hELLO\"\n(define\
  \ (flip_case string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
  ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
  \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
completions: ["  (define (flip_case-helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (let ((char (car string)))\n          (if (char-lower?\
    \ char)\n              (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (string-ref string 0) (string-ref string\
    \ 1))]\n    [else (string-append (string-ref string 0) (string-ref string 1))]))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (cond\n    [(empty? string)\
    \ \"\"]\n    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]))\n", "  (define (helper string result)\n    (if\
    \ (empty? string)\n        result\n        (helper (cdr string) (append result\
    \ (list (char->string (char->integer char->char (car string)))))\n           \
    \   )))\n  (helper string '()))\n", "  (define (helper string result)\n    (if\
    \ (string-empty? string)\n        result\n        (helper (substring string 0\
    \ 1)\n                (append result (substring string 1 string)))))\n  (helper\
    \ string '()))\n", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (make-string (string-length string) (char->lower\
    \ (char->upper (first string)))))]\n    [else (string-append (make-string (string-length\
    \ string) (char->upper (char->lower (first string)))))]))\n", "  (define (helper\
    \ string index result)\n    (if (char=? string #\\A)\n        (helper (substring\
    \ string 0 index) #\\A result)\n        (helper (substring string index) #\\A\
    \ result)))\n  (helper string 0 string))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]\n  )\n)\n", "  (define (helper string result)\n \
    \   (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1 string)))\n      )\n  )\n  (helper string\
    \ '())\n)\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case (first string))\n                      result)))\n    (helper\
    \ (substring string 1 string-length (first string))\n            (cons (char->lower-case\
    \ (first string))\n                  result)))\n  (helper string '()))\n", " \
    \ (define (helper string result)\n    (cond\n      [(empty? string) result]\n\
    \      [(char-lower? (car string)) (helper (cdr string) (cons (char-upper? (car\
    \ string)) result))]\n      [(char-upper? (car string)) (helper (cdr string) (cons\
    \ (char-lower? (car string)) result))]\n      [else (helper (cdr string) (cons\
    \ (car string) result))]\n      ))\n  (helper string '()))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (car string)) #\\a) (upper-case (string-reverse\
    \ string))]\n    [(equal? (char-code (car string)) #\\A) (lower-case (string-reverse\
    \ string))]\n    [else (string-append (flip_case (string-reverse string)) (string-reverse\
    \ (car string)))]))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1)))\n      )\n  )\n  (helper string '())\n)\n", "  (define\
    \ (flip char)\n    (cond\n      [(char < 'a) (char + 32)]\n      [(char > 'Z')\
    \ (char - 32)]\n      [else char]))\n  (define (flip_char char)\n    (cond\n \
    \     [(char < 'a) (char + 32)]\n      [(char > 'Z') (char - 32)]\n      [else\
    \ char]))\n  (define (flip_string string)\n    (define (flip char)\n      (cond\n\
    \        [(char < 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n     \
    \   [else char]))\n    (define (flip_char char)\n      (cond\n        [(char <\
    \ 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n        [else char]))\n\
    \    (define (flip_char char)\n      (cond\n        [(char < 'a) (char + 32)]\n\
    \        [(char > 'Z') (char - 32)]\n        [else char]))\n    (define (flip_char\
    \ char)\n      (cond\n        [(char < 'a) (char + 32)]\n        [(char > 'Z')\
    \ (char - 32)]\n        [else char]))\n    (define (flip_char char)\n      (cond\n\
    \        [(char < 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n     \
    \   [else char]))\n    (define (flip_char char)\n      (cond\n        [(char <\
    \ 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n        [else char]))\n\
    \    (define (flip_char char)\n      (cond\n        [(char < 'a) (char + 32)]\n\
    \        [(char > 'Z') (char - 32)]\n        [else char]))\n    (define (flip_char\
    \ char)\n      (cond\n        [(char < 'a) (char + 32)]\n        [(char > 'Z')\
    \ (char - 32)]\n        [else char]))\n    (define (flip_char char)\n      (cond\n\
    \        [(char < 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n     \
    \   [else char]))\n    (define (flip_char char)\n      (cond\n        [(char <\
    \ 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n        [else char]))\n\
    \    (define (flip_char char)\n      (cond\n        [(char < 'a) (char + 32)]\n\
    \        [(char > 'Z') (char - 32)]\n        [else char]))\n    (define (flip_char\
    \ char)\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1)))\n      )\n  )\n  (helper string '())\n)\n", "  (define (helper string\
    \ result)\n    (cond\n      [(empty? string) result]\n      [(char-lower? (car\
    \ string)) (helper (cdr string) (cons (char-upper? (car string)) result))]\n \
    \     [(char-upper? (car string)) (helper (cdr string) (cons (char-lower? (car\
    \ string)) result))]\n      [else (helper (cdr string) (cons (car string) result))]\n\
    \      ))\n  (helper string '()))\n", "  (define (helper string result)\n    (cond\
    \ [(empty? string) result]\n          [(char-lower? (car string)) (helper (cdr\
    \ string) (cons (char-upper? (car string)) result))]\n          [else (helper\
    \ (cdr string) (cons (car string) result))]))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (cond\n      [(empty? string) result]\n      [(char-lower?\
    \ (car string)) (helper (cdr string) (cons (char-upper? (car string)) result))]\n\
    \      [(char-upper? (car string)) (helper (cdr string) (cons (char-lower? (car\
    \ string)) result))]\n      [else (helper (cdr string) result)]))\n  (helper string\
    \ '()))\n", "  (define (flip_char (char)\n    (if (char-lower? (char))\n     \
    \   (char-upper? (char))\n        (char-lower? (char))))\n  (define (flip_string\
    \ string)\n    (define (flip_char (char)\n      (if (char-upper? (char))\n   \
    \       (char-lower? (char))\n          (char)))\n    (define (flip_string string)\n\
    \      (define (flip_char (char)\n        (if (char-upper? (char))\n         \
    \   (char-lower? (char))\n            (char)))\n      (define (flip_string string)\n\
    \        (define (flip_char (char)\n          (if (char-upper? (char))\n     \
    \         (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (if (char-upper? (char))\n\
    \              (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (if (char-upper? (char))\n\
    \              (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (if (char-upper? (char))\n\
    \              (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (if (char-upper? (char))\n\
    \              (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
