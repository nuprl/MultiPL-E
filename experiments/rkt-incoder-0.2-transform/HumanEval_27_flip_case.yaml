name: HumanEval_27_flip_case
language: rkt
prompt: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n;; >>> (flip_case \"Hello\")\n;; \"hELLO\"\n(define\
  \ (flip_case string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
  ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
  \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
completions: ["  (define (flip_case-helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (let ((char (car string)))\n          (if (char-lower?\
    \ char)\n              (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char (cons char (cons char (cons char (cons char (cons char (cons char\
    \ (cons char", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (string-ref string 0) (string-ref string\
    \ 1))]\n    [else (string-append (string-ref string 0) (string-ref string 1))]))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (cond\n    [(empty? string)\
    \ \"\"]\n    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]))\n", "  (define (helper string result)\n    (if\
    \ (empty? string)\n        result\n        (helper (cdr string) (append result\
    \ (list (char->string (char->integer char->char (car string)))))\n           \
    \   )))\n  (helper string '()))\n", "  (define (helper string result)\n    (if\
    \ (string-empty? string)\n        result\n        (helper (substring string 0\
    \ 1)\n                (append result (substring string 1 string)))))\n  (helper\
    \ string '()))\n", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (make-string (string-length string) (char->lower\
    \ (char->upper (first string)))))]\n    [else (string-append (make-string (string-length\
    \ string) (char->upper (char->lower (first string)))))]))\n", "  (define (helper\
    \ string index result)\n    (if (char=? string #\\A)\n        (helper (substring\
    \ string 0 index) #\\A result)\n        (helper (substring string index) #\\A\
    \ result)))\n  (helper string 0 string))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]\n  )\n)\n", "  (define (helper string result)\n \
    \   (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1 string)))\n      )\n  )\n  (helper string\
    \ '())\n)\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case (first string))\n                      result)))\n    (helper\
    \ (substring string 1 string-length (first string))\n            (cons (char->lower-case\
    \ (first string))\n                  result)))\n  (helper string '()))\n", " \
    \ (define (helper string result)\n    (cond\n      [(empty? string) result]\n\
    \      [(char-lower? (car string)) (helper (cdr string) (cons (char-upper? (car\
    \ string)) result))]\n      [(char-upper? (car string)) (helper (cdr string) (cons\
    \ (char-lower? (car string)) result))]\n      [else (helper (cdr string) (cons\
    \ (car string) result))]\n      ))\n  (helper string '()))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (car string)) #\\a) (upper-case (string-reverse\
    \ string))]\n    [(equal? (char-code (car string)) #\\A) (lower-case (string-reverse\
    \ string))]\n    [else (string-append (flip_case (string-reverse string)) (string-reverse\
    \ (car string)))]))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1)))\n      )\n  )\n  (helper string '())\n)\n", "  (define\
    \ (flip char)\n    (cond\n      [(char < 'a) (char + 32)]\n      [(char > 'Z')\
    \ (char - 32)]\n      [else char]))\n  (define (flip_char char)\n    (cond\n \
    \     [(char < 'a) (char + 32)]\n      [(char > 'Z') (char - 32)]\n      [else\
    \ char]))\n  (define (flip_string string)\n    (define (flip char)\n      (cond\n\
    \        [(char < 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n     \
    \   [else char]))\n    (define (flip_char char)\n      (cond\n        [(char <\
    \ 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n        [else char]))\n\
    \    (define (flip_char char)\n      (cond\n        [(char < 'a) (char + 32)]\n\
    \        [(char > 'Z') (char - 32)]\n        [else char]))\n    (define (flip_char\
    \ char)\n      (cond\n        [(char < 'a) (char + 32)]\n        [(char > 'Z')\
    \ (char - 32)]\n        [else char]))\n    (define (flip_char char)\n      (cond\n\
    \        [(char < 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n     \
    \   [else char]))\n    (define (flip_char char)\n      (cond\n        [(char <\
    \ 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n        [else char]))\n\
    \    (define (flip_char char)\n      (cond\n        [(char < 'a) (char + 32)]\n\
    \        [(char > 'Z') (char - 32)]\n        [else char]))\n    (define (flip_char\
    \ char)\n      (cond\n        [(char < 'a) (char + 32)]\n        [(char > 'Z')\
    \ (char - 32)]\n        [else char]))\n    (define (flip_char char)\n      (cond\n\
    \        [(char < 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n     \
    \   [else char]))\n    (define (flip_char char)\n      (cond\n        [(char <\
    \ 'a) (char + 32)]\n        [(char > 'Z') (char - 32)]\n        [else char]))\n\
    \    (define (flip_char char)\n      (cond\n        [(char < 'a) (char + 32)]\n\
    \        [(char > 'Z') (char - 32)]\n        [else char]))\n    (define (flip_char\
    \ char)\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1)))\n      )\n  )\n  (helper string '())\n)\n", "  (define (helper string\
    \ result)\n    (cond\n      [(empty? string) result]\n      [(char-lower? (car\
    \ string)) (helper (cdr string) (cons (char-upper? (car string)) result))]\n \
    \     [(char-upper? (car string)) (helper (cdr string) (cons (char-lower? (car\
    \ string)) result))]\n      [else (helper (cdr string) (cons (car string) result))]\n\
    \      ))\n  (helper string '()))\n", "  (define (helper string result)\n    (cond\
    \ [(empty? string) result]\n          [(char-lower? (car string)) (helper (cdr\
    \ string) (cons (char-upper? (car string)) result))]\n          [else (helper\
    \ (cdr string) (cons (car string) result))]))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (cond\n      [(empty? string) result]\n      [(char-lower?\
    \ (car string)) (helper (cdr string) (cons (char-upper? (car string)) result))]\n\
    \      [(char-upper? (car string)) (helper (cdr string) (cons (char-lower? (car\
    \ string)) result))]\n      [else (helper (cdr string) result)]))\n  (helper string\
    \ '()))\n", "  (define (flip_char (char)\n    (if (char-lower? (char))\n     \
    \   (char-upper? (char))\n        (char-lower? (char))))\n  (define (flip_string\
    \ string)\n    (define (flip_char (char)\n      (if (char-upper? (char))\n   \
    \       (char-lower? (char))\n          (char)))\n    (define (flip_string string)\n\
    \      (define (flip_char (char)\n        (if (char-upper? (char))\n         \
    \   (char-lower? (char))\n            (char)))\n      (define (flip_string string)\n\
    \        (define (flip_char (char)\n          (if (char-upper? (char))\n     \
    \         (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (if (char-upper? (char))\n\
    \              (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (if (char-upper? (char))\n\
    \              (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (if (char-upper? (char))\n\
    \              (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (if (char-upper? (char))\n\
    \              (char-lower? (char))\n              (char))))\n    (define (flip_string\
    \ string)\n      (define (flip_char (char)\n        (if (char-upper? (char))\n\
    \            (char-lower? (char))\n            (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n", "  (cond\n    ((empty? string)\
    \ string)\n    ((char-lower? (car string)) (string-append (char-upcase (car string))\
    \ (flip_case (cdr string))))\n    ((char-upper? (car string)) (string-append (char-downcase\
    \ (car string)) (flip_case (cdr string))))\n    (else (string-append (flip_case\
    \ (car string)) (flip_case (cdr string))))))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1 string)))))\n  (helper string '()))\n",
  "  (define (helper string)\n    (cond\n      [(empty? string) string]\n      [(char-lower?\
    \ (car string)) (char-upcase (car string))]\n      [else (helper (cdr string))]))\n\
    \  (helper string))\n", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first\
    \ string) (string-ref string 0)) (string-append (make-string (string-length string)\
    \ (char->string #\\U)) (flip_case (rest string)))]\n    [else (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (flip_case (rest string)))]))\n",
  "  (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (string-ref string 0) (string-ref string 1))]\n  \
    \  [else (string-append (string-ref string 0) (string-ref string 1))]\n  ))\n",
  "  (define (flip_case-helper string result)\n    (if (string? string)\n        (if\
    \ (char-lower? (car string))\n            (cons (char-upcase (car string)) result)\n\
    \            (cons (char-downcase (car string)) result))\n        result))\n \
    \ (flip_case-helper string '()))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (flip_case (rest string)))]\n  \
    \  [else (string-append (make-string (string-length string) (char->string #\\\
    L)) (flip_case (rest string)))]))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-reverse (substring (second\
    \ string) 1)))]\n    [else (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-reverse (substring (second string) 1)))]))\n",
  "  (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (string-ref string 0) (string-downcase (string-ref\
    \ string 1)))]\n    [else (string-append (string-downcase (string-ref string 0))\
    \ (string-append (string-downcase (string-ref string 1)) (flip_case (string-ref\
    \ string 2)))]))\n", "  (cond\n    [(empty? string) string]\n    [(equal? (first\
    \ string) (string-ref string 0)) (string-append (string-ref string 0) (string-ref\
    \ string 1))]\n    [else (string-append (string-ref string 0) (flip_case (string-ref\
    \ string 1)))]))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cond [(char=? (first string) (char-code (char-downcase (first string))))\
    \ #(cons #(char-upcase (first string)) result)\n                       (else #(cons\
    \ #(char-downcase (first string)) result))]))\n    (helper (substring string 1\
    \ string-length) result)))\n  (foldr helper string '()))\n", "  (cond\n    ((empty?\
    \ string) string)\n    ((char-lower? (car string)) (string-append (make-string\
    \ (char-upper? (car string)) (car string)))\n     (flip_case (string-append (make-string\
    \ (char-upper? (car string)) (car string))\n                             (cdr\
    \ string))))\n    ((char-upper? (car string)) (string-append (make-string (char-lower?\
    \ (car string)) (car string)))\n     (flip_case (string-append (make-string (char-lower?\
    \ (car string)) (car string))\n                             (cdr string))))\n\
    \    (else (string-append (make-string (car string) (car string))\n          \
    \              (flip_case (cdr string))))))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1)))\n      )\n  )\n  (helper string '())\n\
    )\n", "  (define (helper string result)\n    (if (string-empty? string)\n    \
    \    result\n        (helper (substring string 0 1) (append result (string-append\
    \ (substring string 0 1) (substring string 1 string)))\n               (helper\
    \ (substring string 1 string) result (substring string 0 1)))))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cond\
    \ [(char=? (char-code string) 97) (char-code (substring string 1 0)) #\\A]\n \
    \                     [(char=? (char-code string) 65) (char-code (substring string\
    \ 1 0)) #\\a]\n                      [else (cons string result)])))\n  (helper\
    \ string '()))\n", "  (cond\n    [(empty? string) string]\n    [(equal? (first\
    \ string) (string-ref string 0)) (string-append (string-ref string 0) (string-ref\
    \ string 1))]\n    [else (string-append (string-ref string 0) (string-ref string\
    \ 1))]))\n", "  (define (helper string)\n    (cond\n      [(empty? string) string]\n\
    \      [(char-lower? (car string)) (string-append (char-upcase (car string)) (helper\
    \ (cdr string)))]\n      [(char-upper? (car string)) (string-append (char-downcase\
    \ (car string)) (helper (cdr string)))]\n      [else (string-append (car string)\
    \ (helper (cdr string)))]))\n  (helper string))\n", "  (define (helper string\
    \ index result)\n    (cond [(< index 0) result]\n          [(char=? (char-code\
    \ string) (char-code (char-code (substring string 0 index)))) (string-append result\
    \ (char-code (char-code (substring string 0 index)))) (helper (substring string\
    \ (1+ index)) (1+ index) result)]\n          [else (helper (substring string (1+\
    \ index)) (1+ index) result)]\n          ))\n  (helper string 0 \"\"))\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI added a version that doesn't use recursion.\n<|/\
    \ c |>\n<| a dscore=2 |>\nHere's a version that doesn't use recursion:\n<code>",
  "  (define (flip_char (char)\n    (if (char-lower? (char))\n        (char-upper?\
    \ (char))\n        (char-lower? (char))))\n  (define (flip_string string)\n  \
    \  (define (flip_char (char)\n      (if (char-upper? (char))\n          (char-lower?\
    \ (char))\n          (char)))\n    (define (flip_string string)\n      (define\
    \ (flip_char (char)\n        (if (char-upper? (char))\n            (char-lower?\
    \ (char))\n            (char)))\n      (define (flip_string string)\n        (define\
    \ (flip_char (char)\n          (char)))\n      (define (flip_string string)\n\
    \        (define (flip_char (char)\n          (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (char)))\n      (define\
    \ (flip_string string)\n        (define (flip_char (char)\n          (char)))\n\
    \      (define (flip_string string)\n        (define (flip_char (char)\n     \
    \     (char)))\n      (define (flip_string string)\n        (define (flip_char\
    \ (char)\n          (char)))\n      (define (flip_string string)\n        (define\
    \ (flip_char (char)\n          (char)))\n      (define (flip_string string)\n\
    \        (define (flip_char (char)\n          (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (char)))\n      (define\
    \ (flip_string string)\n        (define (flip_char (char)\n          (char)))\n\
    \      (define (flip_string string)\n        (define (flip_char (char)\n     \
    \     (char)))\n      (define (flip_string string)\n        (define (flip_char\
    \ (char)\n          (char)))\n      (define (flip_string string)\n        (define\
    \ (flip_char (char)\n          (char)))\n      (define (flip_string string)\n\
    \        (define (flip_char (char)\n          (char)))\n      (define (flip_string\
    \ string)\n        (define (flip_char (char)\n          (char)))\n      (define\
    \ (flip_string string)\n        (define (flip_char (char)\n          (char)))\n\
    \      (define (flip_string string)\n        (define (flip_char (char)\n     \
    \     (char)))\n      (define (flip_string string)\n        (define (flip_char\
    \ (char)\n          (char)))\n      (define (flip_string string)\n        (define\
    \ (flip_char (char)\n          (char)))\n      (define (f", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1) (append result (substring string 1 string)))\n      )\n\
    \  )\n  (helper string '())\n)\n", "  (define (helper string result)\n    (if\
    \ (string-empty? string)\n        result\n        (helper (substring string 0\
    \ 1)\n                (cons (char->upper-case (first string))\n              \
    \        result))\n        ))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1)))\n      )\n  )\n  (helper string\
    \ '())\n)\n", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-reverse (substring (second string) 1)))]\n    [else (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-reverse (substring\
    \ (second string) 1)))]))\n", "  (cond\n    [(empty? string) string]\n    [(equal?\
    \ (first string) (string-ref string 0)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-reverse (substring (second string) 0 -1)))]\n\
    \    [else (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-reverse (substring (second string) 0 -1)))]))\n", "  (define (flip_case-helper\
    \ string result)\n    (if (string? string)\n        (if (char-lower? (car string))\n\
    \            (cons (char-upcase (car string)) result)\n            (cons (car\
    \ string) result))\n        result))\n  (flip_case-helper string '()))\n", " \
    \ (cond\n    [(string-empty? string) string]\n    [(equal? (char-code (car string))\
    \ #\\a) (upper-case (string-reverse string))]\n    [(equal? (char-code (car string))\
    \ #\\A) (lower-case (string-reverse string))]\n    [else (string-reverse string)]))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result)))\n    (helper (substring string\
    \ 1 string-length) '())))\n  (foldr helper string '()))\n", "  (define (flip_case-helper\
    \ char str)\n    (cond\n      [(char-lower-case? char) (char-upper-case? char)\
    \ (char-upper-case? str)]\n      [(char-upper-case? char) (char-lower-case? char)\
    \ (char-lower-case? str)]\n      [else (cons char str)]\n      ))\n  (map (lambda\
    \ (char)\n         (flip_case-helper char string))\n       (string->list string)))\n",
  "  (cond [(empty? string) string]\n        [(equal? (first string) (string-ref string\
    \ 0)) (string-append (make-string (string-length string) (char->string #\\U))\
    \ (string-reverse (substring (second string) 1)))]\n        [else (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-reverse (substring\
    \ (second string) 1)))]))\n", "  (cond\n    [(empty? string) string]\n    [(equal?\
    \ (first string) (string-ref string 0)) (string-append (string-ref string 0) (string-ref\
    \ string 1))]\n    [else (string-append (string-ref string 0) (flip_case (string-ref\
    \ string 1)))]))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case\n                       (char->lower-case (first\
    \ string)))\n                      result)))\n    (helper (substring string 1\
    \ string-length(string))\n            '()))\n  (helper string '()))\n", "  (cond\n\
    \    [(empty? string) string]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (make-string (string-length string) (char->string #\\U))\
    \ (string-reverse (substring (second string) 1)))]\n    [else (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-reverse (substring (second\
    \ string) 1)))]))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case (first string))\n                      (helper\
    \ (substring string 1 length) result))))\n    (helper (substring string 0 1)\n\
    \            (cons (char->lower-case (first string))\n                  (helper\
    \ (substring string 1 length) result))))\n  (helper string '()))\n", "  (cond\n\
    \    [(empty? string) string]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (make-string (string-length string) (char->string #\\U))\
    \ (flip_case (rest string)))]\n    [else (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (flip_case (rest string)))]))\n", "  (define (flip\
    \ char)\n    (if (char-lower? char)\n        (char-upper? char) \n        (char-lower?\
    \ char)))\n  (define (flip_chars chars)\n    (if (null? chars)\n        '()\n\
    \        (cons (if (char-upper? chars)\n                  (char-upper? chars)\n\
    \                  (char-lower? chars))\n              (flip_chars (cdr chars)))))\n\
    \  (define (flip_string str)\n    (if (null? str)\n        '()\n        (cons\
    \ (if (char-upper? str)\n                  (char-upper? str)\n               \
    \   (char-lower? str))\n              (flip_string (substring str 1)))))\n  (flip_chars\
    \ (reverse (map flip string)))\n  (flip_string string))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (string-ref string 0)) #\\A)\n    \
    \ (string-append string #\\Z)]\n    [else\n     (cond\n       [(equal? (char-code\
    \ (string-ref string 0)) #\\A)\n        (string-append string #\\z)]\n       [(equal?\
    \ (char-code (string-ref string 0)) #\\z)\n        (string-append string #\\A)]\n\
    \       [else\n        (cond\n          [(equal? (char-code (string-ref string\
    \ 0)) #\\z)\n           (string-append string #\\z)]\n          [else\n      \
    \     (cond\n             [(equal? (char-code (string-ref string 0)) #\\A)\n \
    \              (string-append string #\\A)]\n             [else\n            \
    \   (cond\n                 [(equal? (char-code (string-ref string 0)) #\\z)\n\
    \                   (string-append string #\\z)]\n                 [else\n   \
    \                (cond\n                     [(equal? (char-code (string-ref string\
    \ 0)) #\\z)\n                       (string-append string #\\z)]\n           \
    \          [else\n                       (cond\n                         [(equal?\
    \ (char-code (string-ref string 0)) #\\A)\n                           (string-append\
    \ string #\\A)]\n                         [else\n                           (cond\n\
    \                             [(equal? (char-code (string-ref string 0)) #\\z)\n\
    \                               (string-append string #\\z)]\n               \
    \              [else\n                               (cond\n                 \
    \                [(equal? (char-code (string-ref string 0)) #\\z)\n          \
    \                         (string-append string #\\z)]\n                     \
    \            [else\n                                   (cond\n               \
    \                      [(equal? (char-code (string-ref string 0)) #\\A)\n    \
    \                                   (string-append string #\\A)]\n           \
    \                          [else\n                                       (cond\n\
    \                                         [(equal? (char-code (string-ref string\
    \ 0)) #\\z)\n                                           (string-append string\
    \ #\\z)]\n                                         [else\n                   \
    \                        (cond\n                                             [(equal?\
    \ (char-code (string-ref string 0)) #\\z)\n                                  \
    \             (string-append string #\\z)]\n                                 \
    \            [else\n                                               (cond\n   \
    \                                              [(equal? (char-code (string-ref\
    \ string 0)) #\\A)\n                                                   (string-append\
    \ string #\\A)]\n                                                 [else\n    \
    \                                               (cond\n                      \
    \                               [(equal? (char-code (string-ref string 0)) #\\\
    z)\n                                                       (string-append string\
    \ #\\z)]\n                                                     [else\n       \
    \                                                (cond\n                     \
    \                                    [(equal? (char", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (cond [(char=? (char-code string) 97) (char-code\
    \ string) (char-code string) (char-code string)]\n                      [(char=?\
    \ (char-code string) 65) (char-code string) (char-code string) (char-code string)]\n\
    \                      [(char=? (char-code string) 97) (char-code string) (char-code\
    \ string) (char-code string)]\n                      [(char=? (char-code string)\
    \ 65) (char-code string) (char-code string) (char-code string)]\n            \
    \          [(char=? (char-code string) 97) (char-code string) (char-code string)\
    \ (char-code string)]\n                      [(char=? (char-code string) 65) (char-code\
    \ string) (char-code string) (char-code string)]\n                      [(char=?\
    \ (char-code string) 97) (char-code string) (char-code string) (char-code string)]\n\
    \                      [(char=? (char-code string) 65) (char-code string) (char-code\
    \ string) (char-code string)]\n                      [(char=? (char-code string)\
    \ 97) (char-code string) (char-code string) (char-code string)]\n            \
    \          [(char=? (char-code string) 65) (char-code string) (char-code string)\
    \ (char-code string)]\n                      [(char=? (char-code string) 97) (char-code\
    \ string) (char-code string) (char-code string)]\n                      [(char=?\
    \ (char-code string) 65) (char-code string) (char-code string) (char-code string)]\n\
    \                      [(char=? (char-code string) 97) (char-code string) (char-code\
    \ string) (char-code string)]\n                      [(char=? (char-code string)\
    \ 65) (char-code string) (char-code string) (char-code string)]\n            \
    \          [(char=? (char-code string) 97) (char-code string) (char-code string)\
    \ (char-code string)]\n                      [(char=? (char-code string) 65) (char-code\
    \ string) (char-code string) (char-code string)]\n                      [(char=?\
    \ (char-code string) 97) (char-code string) (char-code string) (char-code string)]\n\
    \                      [(char=? (char-code string", "  (cond\n    [(empty? string)\
    \ string]\n    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (flip_case (rest string)))]\n  \
    \  [else (string-append (make-string (string-length string) (char->string #\\\
    L)) (flip_case (rest string)))]))\n", "  (define (helper string result)\n    (if\
    \ (string-empty? string)\n        result\n        (helper (substring string 0\
    \ 1) (append result (substring string 1 string)))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result)))\n    (helper (substring string\
    \ 1 string-length (first string))\n            (cons (char->lower-case (first\
    \ string))\n                  result)))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result))\n        ))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (cond [(empty? string) result]\n\
    \          [(char-lower? (car string)) (helper (cdr string) (append result (list\
    \ char-upper? (car string))))]\n          [(char-upper? (car string)) (helper\
    \ (cdr string) (append result (list char-lower? (car string))))]\n          [else\
    \ (helper (cdr string) result)]))\n  (helper string '()))\n", "  (cond\n    [(empty?\
    \ string) \"\"]\n    [(equal? (first string) (string-ref string 0)) (string-append\
    \ (string-ref string 0) (string-ref string 1))]\n    [else (string-append (flip_case\
    \ (string-ref string 0)) (flip_case (string-ref string 1)))]))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1) (append result (substring string 1 string)))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (cond\n   \
    \   [(empty? string) result]\n      [(char-lower? (car string)) (helper (cdr string)\
    \ (cons (char-upper? (car string)) result))]\n      [(char-upper? (car string))\
    \ (helper (cdr string) (cons (char-lower? (car string)) result))]\n      [else\
    \ (helper (cdr string) (cons (car string) result))]\n      ))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cond\
    \ [(char-lower-case? string) (concat result (char-upper-case? string))]\n    \
    \                  [(char-upper-case? string) (concat result (char-lower-case?\
    \ string))]\n                      [else (concat result string)])))\n  (helper\
    \ string \"\"))\n</code>\n<|/ a tags=string,racket,scheme |>\n<| c |>\nThis doesn't\
    \ work for strings with multiple characters, e.g. \"Hello\"\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  (cond\n    [(empty? string) string]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (string-ref string 0) (string-ref string\
    \ 1))]\n    [else (string-append (string-ref string 0) (string-ref string 1))]))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result)))))\n  (helper string '()))\n",
  "  (define (flip_char char flip)\n    (if (char-lower? (char-code char))\n     \
    \   (char-upper? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-upper? (char-code char))\n   \
    \     (char-lower? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-upper? (char-code char))\n   \
    \     (char-upper? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-lower? (char-code char))\n   \
    \     (char-lower? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-upper? (char-code char))\n   \
    \     (char-upper? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-lower? (char-code char))\n   \
    \     (char-lower? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-upper? (char-code char))\n   \
    \     (char-upper? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-lower? (char-code char))\n   \
    \     (char-lower? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-upper? (char-code char))\n   \
    \     (char-upper? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-lower? (char-code char))\n   \
    \     (char-lower? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-upper? (char-code char))\n   \
    \     (char-upper? (char-code char)) (char-code char))\n      (char-code char)))\n\
    \  (define (flip_char char flip)\n    (if (char-lower? (char", "  (define (helper\
    \ string index result)\n    (if (char=? string #\\A)\n        (helper (substring\
    \ string index (+ index 1)) index (conj result (substring string index (+ index\
    \ 1))))\n        (helper (substring string index (+ index 1)) index (conj result\
    \ (substring string index (+ index 1))))))\n  (helper string 0 (reverse result)))\n",
  "  (define (flip char)\n    (cond\n      [(char >= 'a' and char <= 'z') (char -\
    \ 'a' + 'A')]\n      [(char >= 'A' and char <= 'Z') (char - 'A' + 'a')]\n    \
    \  [else char]))\n  (define (flip_chars string)\n    (map (lambda (char) (if (char\
    \ >= 'a' and char <= 'z') (char - 'a' + 'A') (char - 'A' + 'a'))) string))\n \
    \ (define (flip_string string)\n    (map (lambda (char) (if (char >= 'a' and char\
    \ <= 'z') (char - 'a' + 'A') (char - 'A' + 'a'))) (string-map string #\\Space)))\n\
    \  (define (flip_char-string string)\n    (map (lambda (char) (if (char >= 'a'\
    \ and char <= 'z') (char - 'a' + 'A') (char - 'A' + 'a'))) (string-map string\
    \ #\\Space)))\n  (define (flip_char-char-string string)\n    (map (lambda (char)\
    \ (if (char >= 'a' and char <= 'z') (char - 'a' + 'A') (char - 'A' + 'a'))) (string-map\
    \ string #\\Space)))\n  (define (flip_char-char-char-string string)\n    (map\
    \ (lambda (char) (if (char >= 'a' and char <= 'z') (char - 'a' + 'A') (char -\
    \ 'A' + 'a'))) (string-map string #\\Space)))\n  (define (flip_char-char-char-char-string\
    \ string)\n    (map (lambda (char) (if (char >= 'a' and char <= 'z') (char - 'a'\
    \ + 'A') (char - 'A' + 'a'))) (string-map string #\\Space)))\n  (define (flip_char-char-char-char-char-string\
    \ string)\n    (map (lambda (char) (if (char >= 'a' and char <= 'z') (char - 'a'\
    \ + 'A') (char - 'A' + 'a'))) (string-map string #\\Space)))\n  (define (flip_char-char-char-char-char-string\
    \ string)\n    (map (lambda (char) (if (char >= 'a' and char <= 'z') (char - 'a'\
    \ + 'A') (char - 'A' + 'a'))) (string-map string #\\Space)))\n  (define (flip_char-char-char-char-char-string\
    \ string)\n    (map (lambda (char) (if (char >= 'a' and ", "  (cond\n    [(empty?\
    \ string) string]\n    [(equal? (first string) (string-ref string 0)) (string-append\
    \ (string-ref string 0) (string-ref string 1))]\n    [else (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n  )\n)\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1)))\n      )\n  )\n  (helper string '())\n\
    )\n", "  (cond\n    [(string-empty? string) string]\n    [(equal? (char-code (first\
    \ string)) #\\a) (make-string (string-length string) (char-code (first string))\
    \ #\\A)]\n    [(equal? (char-code (first string)) #\\z) (make-string (string-length\
    \ string) (char-code (first string)) #\\Z)]\n    [(equal? (char-code (first string))\
    \ #\\Z) (make-string (string-length string) (char-code (first string)) #\\z)]\n\
    \    [else (make-string (string-length string) (char-code (first string)) (char-code\
    \ (first string)))]))\n", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first\
    \ string) (string-ref string 0)) (string-append (string-ref string 0) (string-ref\
    \ string 1))]\n    [else (string-append (flip_case (string-ref string 0)) (flip_case\
    \ (string-ref string 1)))]))\n", "  (cond [(empty? string) string]\n        [(equal?\
    \ (first string) (string-ref string 0)) (string-append (second string) (first\
    \ string))]\n        [else (string-append (flip_case (substring string 0 (string-length\
    \ string))) (string-append (first string) (second string)))]))\n", "  (cond\n\
    \    [(empty? string) string]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (string-ref string 0) (string-downcase (string-ref string\
    \ 1)))]\n    [else (string-append (string-downcase (string-ref string 0)) (string-append\
    \ (string-downcase (string-ref string 1)) (string-downcase (string-ref string\
    \ 2)))]))\n", "  (cond\n    [(empty? string) string]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (string-ref string 0) (string-ref string\
    \ 1))]\n    [else (string-append (string-ref string 0) (flip_case (string-ref\
    \ string 1)))]))\n", "  (cond [(empty? string) string]\n        [(equal? (first\
    \ string) (string-ref string 0)) (string-append (make-string (string-length string)\
    \ (char->lowercase (second string)))\n                                       \
    \            (make-string (string-length string) (char->uppercase (second string))))]\n\
    \        [else (string-append (make-string (string-length string) (char->uppercase\
    \ (first string)))\n                           (make-string (string-length string)\
    \ (char->lowercase (first string))))]))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1 string)))))\n  (helper string '()))\n",
  "  (cond\n    [(string-empty? string) string]\n    [(equal? (char-code (car string))\
    \ #\\A) (upper-case (string-reverse string))]\n    [(equal? (char-code (car string))\
    \ #\\z) (lower-case (string-reverse string))]\n    [else (string-append (flip_case\
    \ (string-reverse string)) (string-reverse (car string)))]))\n", "  (define (helper\
    \ string index result)\n    (cond [(< index 0) result]\n          [(char=? (char-code\
    \ string) (char-code (char-code (substring string 0 index)))) (helper (substring\
    \ string (1+ (index)) (string-length string)) (substring string 0 index) result)]\n\
    \          [else (helper (substring string (1+ (index)) (string-length string))\
    \ (substring string (1+ (index)) (string-length string)) (substring string 0 index)\
    \ (append result (list char-code (char-code (substring string 0 index))))]))\n\
    \  (helper string 0 (list char-code (char-code string))))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case (first string))\n\
    \                      (helper (substring string 1 length)\n                 \
    \             result))))))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (cons (char->upper-case (first string))\n     \
    \                 result)))\n    (helper (substring string 1 string-length) '())))\n\
    \  (foldr helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case (first string))\n                      result)))\n\
    \    (helper (substring string 1 string-length (first string))\n            (cons\
    \ (char->lower-case (first string))\n                  result)))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1 string)))\n      )\n  )\n  (helper string '())\n)\n", "  (cond\n  \
    \  [(empty? string) string]\n    [(equal? (first string) (string-ref string 0))\
    \ (string-append (make-string (string-length string) (char->string #\\U)) (flip_case\
    \ (rest string)))]\n    [else (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (flip_case (rest string)))]))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (append result (substring string 1 string)))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (string-append (substring string 0 1) (substring string 1 string)))\n      \
    \    )))\n  (helper string '()))\n", "  (define (flip_case-helper string result)\n\
    \    (cond\n      [(empty? string) result]\n      [(char-lower? (car string))\
    \ (cons (char-upper? (car string)) (flip_case-helper (cdr string) result))]\n\
    \      [(char-upper? (car string)) (cons (char-lower? (car string)) (flip_case-helper\
    \ (cdr string) result))]\n      [else (cons (car string) (flip_case-helper (cdr\
    \ string) result))]\n      ))\n  (flip_case-helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1) (append result (substring string 1 string)))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1) (append result (string-append (substring string 1 string)\
    \ (substring string 0 1)))))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (cons (char->upper-case (first string))\n     \
    \                 result))\n        ))\n  (helper string '()))\n", "  (define\
    \ (helper string index result)\n    (cond\n      [(empty? string) result]\n  \
    \    [(char-lower? (car string)) (helper (cdr string) (+ index 1) (cons (char-upper?\
    \ (car string)) result))]\n      [(char-upper? (car string)) (helper (cdr string)\
    \ (+ index 1) (cons (char-lower? (car string)) result))]\n      [else (helper\
    \ (cdr string) (+ index 1) result)]))\n  (helper string 0 '()))\n", "  (cond\n\
    \    [(empty? string) \"\"]\n    [(equal? (first string) (string-ref string 0))\
    \ (string-append (string-ref string 0) (string-ref string 1))]\n    [else (string-append\
    \ (flip_case (string-ref string 0)) (flip_case (string-ref string 1))))]))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result)))\n    (helper (substring string\
    \ 1 string-length(string))\n            (cons (char->lower-case (first string))\n\
    \                  result)))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (cons (char->upper-case (first string))\n     \
    \                 result)))))\n  (helper string '()))\n", "  (cond\n    ((null?\
    \ string) string)\n    ((char-lower? (car string)) (char-upcase (car string)))\n\
    \    ((char-upper? (car string)) (char-downcase (car string)))\n    (else (string-append\
    \ (flip_case (car string)) (flip_case (cdr string))))))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case (first string))\n\
    \                      result)))\n    (helper (substring string 1 string-length(string))\n\
    \            (cons (char->lower-case (first string))\n                  result)))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (cond\n   \
    \   [(empty? string) result]\n      [(char-lower? (car string)) (helper (cdr string)\
    \ (cons (char-upper? (car string)) result))]\n      [(char-upper? (car string))\
    \ (helper (cdr string) (cons (char-lower? (car string)) result))]\n      [else\
    \ (helper (cdr string) (cons (car string) result))]))\n  (helper string '()))\n",
  "  (define (helper string index result)\n    (cond [(empty? string) result]\n  \
    \        [(char-lower? (car string)) (helper (cdr string) (+ index 1) (append\
    \ result (list char-upper? (car string))))]\n          [else (helper (cdr string)\
    \ (+ index 1) result)]))\n  (helper string 0 '()))\n", "  (define (helper string)\n\
    \    (cond [(empty? string) string]\n          [(char-lower? (car string)) (char-upcase\
    \ (car string))]\n          [else (helper (cdr string))]))\n  (helper string))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1) (append result (substring string 1 string)))))\n\
    \  (helper string '()))\n", "  (cond\n    [(empty? string) string]\n    [(equal?\
    \ (first string) (string-ref string 0)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\u)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string", "  (define (helper string result)\n    (cond\n     \
    \ [(empty? string) result]\n      [(char-lower? (car string)) (helper (cdr string)\
    \ (cons (char-upper? (car string)) result))]\n      [else (helper (cdr string)\
    \ (cons (car string) result))]\n      ))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1) (append result (string-append (substring\
    \ string 0 1) (substring string 1 string)))))\n    (helper (substring string 0\
    \ 1) (substring string 1 string))))\n  (foldr helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1) (append result (substring string 1 string)))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (string-append (substring string 0 1) (substring string 1 string)))))\n  )\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case (first string))\n                      result)))\n\
    \    (helper (substring string 1 string-length (first string))\n            (cons\
    \ (char->lower-case (first string))\n                  result)))\n  (helper string\
    \ '()))\n", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (string-ref string 0) (string-ref string\
    \ 1))]\n    [else (string-append (string-ref string 0) (flip_case (string-ref\
    \ string 1)))]))\n", "  (define (helper string result)\n    (cond\n      [(empty?\
    \ string) result]\n      [(char-lower? (car string)) (helper (cdr string) (char-upper-case\
    \ (car string)))]\n      [(char-upper? (car string)) (helper (cdr string) (char-lower-case\
    \ (car string)))]\n      [else (helper (cdr string) (car string))]))\n  (helper\
    \ string '()))\n", "  (define (helper string index result)\n    (cond\n      [(empty?\
    \ string) result]\n      [(char-lower? (car string)) (helper (cdr string) (+ index\
    \ 1) (append result (list char-upper? (car string))))]\n      [(char-upper? (car\
    \ string)) (helper (cdr string) (+ index 1) (append result (list char-lower? (car\
    \ string))))]\n      [else (helper (cdr string) (+ index 1) result)]))\n  (helper\
    \ string 0 '()))\n", "  (cond\n    [(empty? string) string]\n    [(equal? (first\
    \ string) (string-ref string 0)) (string-append (string-ref string 0) (string-ref\
    \ string 1))]\n    [else (string-append (flip_case (string-ref string 0)) (flip_case\
    \ (string-ref string 1))]))\n", "  (define (helper string result)\n    (cond [(empty?\
    \ string) result]\n          [(char-lower? (car string)) (helper (cdr string)\
    \ (cons (char-upper? (car string)) result))]\n          [else (helper (cdr string)\
    \ (cons (car string) result))]))\n  (helper string '()))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (car string)) #\\a) (upper-case (string-reverse\
    \ string))]\n    [(equal? (char-code (car string)) #\\A) (lower-case (string-reverse\
    \ string))]\n    [else (string-reverse string)]))\n", "  (define (helper string)\n\
    \    (if (null? string)\n        string\n        (helper (substring string 0 (char-code\
    \ (first string)))\n                (substring string 1 (char-code (first string))))))\n\
    \  (helper string))\n", "  (define (helper string index result)\n    (cond [(<\
    \ index 0) result]\n          [(char=? (char-code string) (string-char string\
    \ index)) (helper (substring string index) (incf index) (string-char string (incf\
    \ index)))]\n          [else (helper (substring string (incf index)) (incf index)\
    \ result)]))\n  (helper string 0 \"\"))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case\n                       (char->lower-case\
    \ (first string)))\n                      result)))\n    (helper (substring string\
    \ 1 string-length(string))\n            '()))\n  (helper string '()))\n", "  (define\
    \ (flip_case-helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (flip_case-helper\n         (substring string 0 1)\n         (cons (char->upper-case\
    \ (first string))\n              result))\n        (cons (char->lower-case (first\
    \ string))\n              result)))\n  (flip_case-helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result)))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (cond\n      [(empty? string) result]\n \
    \     [(char-lower? (car string)) (helper (cdr string) (cons (char-upper? (car\
    \ string)) result))]\n      [(char-upper? (car string)) (helper (cdr string) (cons\
    \ (char-lower? (car string)) result))]\n      [else (helper (cdr string) result)]))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case (first string))\n                      result)))\n\
    \    (helper (substring string 1 string-length (first string))\n            (cons\
    \ (char->lower-case (first string))\n                  result)))\n  (helper string\
    \ '()))\n", "  (define (helper string)\n    (if (empty? string)\n        string\n\
    \        (helper (substring string 0 (char-code (first string)))\n           \
    \     (substring string 1 (char-code (first string))))))\n  (helper string))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (define (helper string result)\n\
    \    (cond\n      [(empty? string) result]\n      [(char-lower? (car string))\
    \ (helper (cdr string) (char-upper-case (car string)))]\n      [(char-upper? (car\
    \ string)) (helper (cdr string) (char-lower-case (car string)))]\n      [else\
    \ (helper (cdr string) (car string))]))\n  (helper string '()))\n", "  (cond [(empty?\
    \ string) string]\n        [(equal? (first string) (string-ref string 0)) (string-append\
    \ (make-string (string-length string) ?upper-case) (make-string (string-length\
    \ string) ?lower-case))]\n        [else (string-append (make-string (string-length\
    \ string) ?upper-case) (make-string (string-length string) ?lower-case) (string-append\
    \ (make-string (string-length string) ?upper-case) (make-string (string-length\
    \ string) ?lower-case) (string-append (make-string (string-length string) ?upper-case)\
    \ (make-string (string-length string) ?lower-case) (string-append (make-string\
    \ (string-length string) ?upper-case) (make-string (string-length string) ?lower-case)\
    \ (string-append (make-string (string-length string) ?upper-case) (make-string\
    \ (string-length string) ?lower-case) (string-append (make-string (string-length\
    \ string) ?upper-case) (make-string (string-length string) ?lower-case) (string-append\
    \ (make-string (string-length string) ?upper-case) (make-string (string-length\
    \ string) ?lower-case) (string-append (make-string (string-length string) ?upper-case)\
    \ (make-string (string-length string) ?lower-case) (string-append (make-string\
    \ (string-length string) ?upper-case) (make-string (string-length string) ?lower-case)\
    \ (string-append (make-string (string-length string) ?upper-case) (make-string\
    \ (string-length string) ?lower-case) (string-append (make-string (string-length\
    \ string) ?upper-case) (make-string (string-length string) ?lower-case) (string-append\
    \ (make-string (string-length string) ?upper-case) (make-string (string-length\
    \ string) ?lower-case) (string-append (make-string (string-length string) ?upper-case)\
    \ (make-string (string-length string) ?lower-case) (string-append (make-string\
    \ (string-length string) ?upper-case) (make-string (string-length string) ?lower-case)\
    \ (string-append (make-string (string-length string) ?upper-case) (make-string\
    \ (string-length string) ?lower-case) (string-append (make-string (string-length\
    \ string) ?upper-case) (make-string (string-length string) ?lower-case) (string-append\
    \ (make-string (string-length string", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\u)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string ", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1 string)))))\n  (helper string\
    \ '()))\n", "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (string-ref string 0) (string-ref string\
    \ 1))]\n    [else (string-append (flip_case (string-ref string 0)) (flip_case\
    \ (string-ref string 1)))]))\n", "  (cond [(empty? string) string]\n        [(equal?\
    \ (first string) (string-ref string 0)) (string-append (string-ref string 0) (string-ref\
    \ string 1))]\n        [else (string-append (string-ref string 0) (string-ref\
    \ string 1))]))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (string-append (substring string 0 1) (substring string 1 string)))\n      \
    \         (helper (substring string 1 string) result (string-append (substring\
    \ string 1 string) (substring string 0 1)))\n               (helper (substring\
    \ string 2 string) (append result (string-append (substring string 2 string) (substring\
    \ string 1 string)))\n               (helper (substring string 3 string) result\
    \ (string-append (substring string 3 string) (substring string 0 1)))\n      \
    \         (helper (substring string 4 string) result (string-append (substring\
    \ string 4 string) (substring string 0 1)))\n               (helper (substring\
    \ string 5 string) result (string-append (substring string 5 string) (substring\
    \ string 0 1)))\n               (helper (substring string 6 string) result (string-append\
    \ (substring string 6 string) (substring string 0 1)))\n               (helper\
    \ (substring string 7 string) result (string-append (substring string 7 string)\
    \ (substring string 0 1))))))\n  (helper string '()))\n", "  (define (helper string\
    \ index result)\n    (cond [(< index 0) result]\n          [(char=? (char-code\
    \ string) (string-ref string index)) (helper (substring string index) (- index\
    \ 1) (append result (string-ref string index)))]\n          [else (helper (substring\
    \ string index) (+ index 1) result)]\n          ))\n  (helper string 0 (reverse\
    \ result)))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case (first string))\n                      result)))\n    (helper\
    \ (substring string 1 string-length (first string))\n            (cons (char->lower-case\
    \ (first string))\n                  result)))\n  (helper string '()))\n", " \
    \ (cond\n    [(empty? string) \"\"]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (make-string (string-length string) (char->string #\\U))\
    \ (string-reverse (substring (second string) 1)))]\n    [else (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-reverse (substring (second\
    \ string) 1)))]\n  )\n)\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case (first string))\n\
    \                      result)))\n    (helper (substring string 1 string-length\
    \ (first string))\n            (cons (char->lower-case (first string))\n     \
    \             result)))\n  (helper string '()))\n", "  (define (helper string)\n\
    \    (if (empty? string)\n        string\n        (helper (substring string 0\
    \ 1)\n                (substring string 1 length)))))\n  (helper string))\n",
  "  (cond\n    [(string-empty? string) string]\n    [(equal? (char-code (car string))\
    \ #\\a) (upper-case (string-reverse (string-reverse string)))]\n    [(equal? (char-code\
    \ (car string)) #\\A) (lower-case (string-reverse (string-reverse string)))]\n\
    \    [else (string-append (upper-case (string-reverse (string-reverse string)))\
    \ (lower-case (string-reverse (string-reverse string))))]))\n", "  (cond [(empty?\
    \ string) string]\n        [(equal? (first string) (string-ref string 0)) (string-append\
    \ (string-ref string 0) (string-ref string 1))]\n        [else (string-append\
    \ (string-ref string 0) (string-ref string 1))]))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1 string)))))\n  (helper string\
    \ '()))\n", "  (define (flip char)\n    (cond\n      [(char >= 'A' char 'Z) (char\
    \ - 'A' + 'Z')]\n      [(char >= 'a' char 'z') (char - 'a' + 'z')]\n      [else\
    \ char]))\n  (define (flip_char char)\n    (cond\n      [(char >= 'A' char 'Z')\
    \ (char - 'A' + 'Z')]\n      [(char >= 'a' char 'z') (char - 'a' + 'z')]\n   \
    \   [else char]))\n  (define (flip_char char i)\n    (cond\n      [(char >= 'A'\
    \ char 'Z') (char - 'A' + 'Z')]\n      [(char >= 'a' char 'z') (char - 'a' + 'z')]\n\
    \      [else char]))\n  (define (flip_char char i j)\n    (cond\n      [(char\
    \ >= 'A' char 'Z') (char - 'A' + 'Z')]\n      [(char >= 'a' char 'z') (char -\
    \ 'a' + 'z')]\n      [else char]))\n  (define (flip_char char i j k)\n    (cond\n\
    \      [(char >= 'A' char 'Z') (char - 'A' + 'Z')]\n      [(char >= 'a' char 'z')\
    \ (char - 'a' + 'z')]\n      [else char]))\n  (define (flip_char char i j k l)\n\
    \    (cond\n      [(char >= 'A' char 'Z') (char - 'A' + 'Z')]\n      [(char >=\
    \ 'a' char 'z') (char - 'a' + 'z')]\n      [else char]))\n  (define (flip_char\
    \ char i j k l m)\n    (cond\n      [(char >= 'A' char 'Z') (char - 'A' + 'Z')]\n\
    \      [(char >= 'a' char 'z') (char - 'a' + 'z')]\n      [else char]))\n  (define\
    \ (flip_char char i j k l m n)\n    (cond\n      [(char >= 'A' char 'Z') (char\
    \ - 'A' + 'Z')]\n      [(char >= 'a' char 'z') (char - 'a' + 'z')]\n      [else\
    \ char]))\n  (define (flip_char char i j k l m n o)\n    (cond\n      [(char >=\
    \ 'A' char 'Z') (char - 'A' + 'Z')]\n      [(char >= 'a' char 'z') (char - 'a'\
    \ + 'z')]\n      [else char]))", "  (define (flip_case-helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (flip_case-helper\n \
    \        (substring string 0 1)\n         (if (char-lower? (car string))\n   \
    \          (cons (char-upper? (car string)) result)\n             (cons (car string)\
    \ result))))\n  (flip_case-helper string '()))\n", "  (define (helper string result)\n\
    \    (cond\n      [(empty? string) result]\n      [(char-lower? (car string))\
    \ (helper (cdr string) (append result (list char-upper? (car string))))]\n   \
    \   [(char-upper? (car string)) (helper (cdr string) (append result (list char-lower?\
    \ (car string))))]\n      [else (helper (cdr string) result)]))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (cond\n      [(empty? string)\
    \ result]\n      [(char-lower? (car string)) (helper (cdr string) (cons (char-upper?\
    \ (car string)) result))]\n      [(char-upper? (car string)) (helper (cdr string)\
    \ (cons (char-lower? (car string)) result))]\n      [else (helper (cdr string)\
    \ (cons (car string) result))]))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case (first string))\n\
    \                      result)))\n    (helper (substring string 1 string-length\
    \ (first string))\n            (cons (char->lower-case (first string))\n     \
    \             result)))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (cond [(empty? string) result]\n          [(char-lower? (car string))\
    \ (helper (cdr string) (cons (char-upper? (car string)) result))]\n          [(char-upper?\
    \ (car string)) (helper (cdr string) (cons (char-lower? (car string)) result))]\n\
    \          [else (helper (cdr string) (cons (car string) result))]))\n  (helper\
    \ string '()))\n", "  (define (helper string result)\n    (if (empty? string)\n\
    \        result\n        (helper (cdr string) (cons (char->upper-case (car string))\
    \ result))))\n  (helper string '()))\n", "  (define (helper string result)\n \
    \   (cond\n      [(empty? string) result]\n      [(char-lower? (first string))\
    \ (helper (rest string) (char-upper-case (first string)))]\n      [(char-upper?\
    \ (first string)) (helper (rest string) (char-lower-case (first string)))]\n \
    \     [else (helper (rest string) string)]))\n  (helper string string))\n", " \
    \ (define (helper string)\n    (if (string? string)\n        (helper (string->list\
    \ string))\n        string))\n  (helper (string->list string)))\n", "  (define\
    \ (flip char)\n    (cond\n      [(char >= 'A' and char <= 'Z') (char - 'A' + 'Z')]\n\
    \      [(char >= 'a' and char <= 'z') (char - 'a' + 'A')]\n      [else char]))\n\
    \  (define (flip_chars chars)\n    (map (lambda (char) (if (char >= 'A' and char\
    \ <= 'Z') (char - 'A' + 'Z') (char - 'a' + 'A'))) chars))\n  (define (flip_string\
    \ string)\n    (map (lambda (char) (if (char >= 'A' and char <= 'Z') (char - 'A'\
    \ + 'Z') (char - 'a' + 'A'))) (string-chars string)))\n  (define (flip_char (char))\n\
    \    (cond\n      [(char >= 'A' and char <= 'Z') (char - 'A' + 'Z')]\n      [(char\
    \ >= 'a' and char <= 'z') (char - 'a' + 'A')]\n      [else char]))\n  (define\
    \ (flip_chars (chars))\n    (map (lambda (char) (if (char >= 'A' and char <= 'Z')\
    \ (char - 'A' + 'Z') (char - 'a' + 'A'))) chars))\n  (define (flip_string (string))\n\
    \    (map (lambda (char) (if (char >= 'A' and char <= 'Z') (char - 'A' + 'Z')\
    \ (char - 'a' + 'A'))) (string-chars string)))\n  (define (flip_char (char))\n\
    \    (cond\n      [(char >= 'A' and char <= 'Z') (char - 'A' + 'Z')]\n      [(char\
    \ >= 'a' and char <= 'z') (char - 'a' + 'A')]\n      [else char]))\n  (define\
    \ (flip_chars (chars))\n    (map (lambda (char) (if (char >= 'A' and char <= 'Z')\
    \ (char - 'A' + 'Z') (char - 'a' + 'A'))) chars))\n  (define (flip_string (string))\n\
    \    (map (lambda (char) (if (char >= 'A' and char <= 'Z') (char - 'A' + 'Z')\
    \ (char - 'a' + 'A'))) (string-chars string)))\n  (define (flip_char (char))\n\
    \    (cond\n      [(char >= 'A' and char <= 'Z') (char - 'A' + 'Z')]\n      [(char\
    \ >= 'a' and char <= 'z') (char - 'a' + 'A')]\n      [else char]))\n  (define\
    \ (flip_", "  (define (flip_case-helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (flip_case-helper\n         (substring string\
    \ 0 (string-length string))\n         (cons (char->upper-case (car string)) result)))))\n\
    \  (flip_case-helper string '()))\n", "  (define (flip char)\n    (if (char-lower?\
    \ char)\n        (char-upper? char) \n        (char-lower? char)))\n  (define\
    \ (flip_char char i)\n    (if (char-lower? char)\n        (char-upper? char) \n\
    \        (char-lower? char)))\n  (define (flip_chars char i j)\n    (if (char-lower?\
    \ char)\n        (char-upper? char) \n        (char-lower? char)))\n  (define\
    \ (flip_chars_i char i j)\n    (if (char-lower? char)\n        (char-upper? char)\
    \ \n        (char-lower? char)))\n  (define (flip_chars_j char i j)\n    (if (char-lower?\
    \ char)\n        (char-upper? char) \n        (char-lower? char)))\n  (define\
    \ (flip_chars_i char i j)\n    (if (char-lower? char)\n        (char-upper? char)\
    \ \n        (char-lower? char)))\n  (define (flip_chars_j char i j)\n    (if (char-lower?\
    \ char)\n        (char-upper? char) \n        (char-lower? char)))\n  (define\
    \ (flip_chars_i char i j)\n    (if (char-lower? char)\n        (char-upper? char)\
    \ \n        (char-lower? char)))\n  (define (flip_chars_j char i j)\n    (if (char-lower?\
    \ char)\n        (char-upper? char) \n        (char-lower? char)))\n  (define\
    \ (flip_chars_i char i j)\n    (if (char-lower? char)\n        (char-upper? char)\
    \ \n        (char-lower? char)))\n  (define (flip_chars_j char i j)\n    (if (char-lower?\
    \ char)\n        (char-upper? char) \n        (char-lower? char)))\n  (define\
    \ (flip_chars_i char i j)\n    (if (char-lower? char)\n        (char-upper? char)\
    \ \n        (char-lower? char)))\n  (define (flip_chars_j char i j)\n    (if (char-lower?\
    \ char)\n        (char-upper? char) \n        (char-lower? char)))\n  (define\
    \ (flip_chars_i char i j)\n    (if (char-lower? char)\n        (char-upper? char)\
    \ \n        (char-lower? char)))\n  (define (flip_chars_j char i j)\n    (if (char-lower",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1) (append result (string-append (substring\
    \ string 0 1) (substring string 1 string)))\n               (helper (substring\
    \ string 1 string) result (string-append (substring string 1 string) (string-append\
    \ (substring string 0 1) (substring string 1 string)))))))\n  (helper string '()))\n",
  "  (cond\n    [(empty? string) \"\"]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (string-ref string 0) (string-ref string 1))]\n    [else\
    \ (string-append (string-ref string 0) (string-ref string 1))]))\n", "  (cond\n\
    \    [(empty? string) string]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (make-string (string-length string) (char->string #\\U))\
    \ (flip_case (rest string)))]\n    [else (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (flip_case (rest string)))]))\n", "  (cond\n  \
    \  [(empty? string) \"\"]\n    [(equal? (first string) (string-ref string 0))\
    \ (string-append (string-ref string 0) (string-downcase (string-ref string 1)))]\n\
    \    [else (string-append (string-downcase (string-ref string 0)) (string-append\
    \ (string-downcase (string-ref string 1)) (flip_case (string-ref string 2)))]))\n",
  "  (cond\n    [(string-empty? string) string]\n    [(equal? (char-code (car string))\
    \ #\\a) (char-upper (char-code (car string)))]\n    [(equal? (char-code (car string))\
    \ #\\A) (char-lower (char-code (car string)))]\n    [else (string-append (flip_case\
    \ (string-ref string 0)) (string-append (char-upper (char-code (car string)))\
    \ (flip_case (string-ref string 1)))]))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-downcase (string-ref string 1)))]\n    [else (string-append\
    \ (string-downcase (string-ref string 0)) (string-append (string-downcase (string-ref\
    \ string 1)) (string-ref string 2)))]))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case\n                       (char->lower-case\
    \ (first string)))\n                      result))))\n  (helper string '()))\n",
  "  (define (helper string)\n    (if (empty? string)\n        string\n        (helper\
    \ (substring string 0 (char-code (first string))) (substring string 1 (char-code\
    \ (first string))))))\n  (helper string))\n", "  (cond\n    [(string-empty? string)\
    \ string]\n    [(equal? (char-code (first string)) #\\A) (make-string (string-length\
    \ string) (char->string #\\A))]\n    [(equal? (char-code (first string)) #\\a)\
    \ (make-string (string-length string) (char->string #\\A))]\n    [(equal? (char-code\
    \ (first string)) #\\b) (make-string (string-length string) (char->string #\\\
    B))]\n    [(equal? (char-code (first string)) #\\c) (make-string (string-length\
    \ string) (char->string #\\C))]\n    [(equal? (char-code (first string)) #\\d)\
    \ (make-string (string-length string) (char->string #\\D))]\n    [(equal? (char-code\
    \ (first string)) #\\e) (make-string (string-length string) (char->string #\\\
    E))]\n    [(equal? (char-code (first string)) #\\F) (make-string (string-length\
    \ string) (char->string #\\F))]\n    [(equal? (char-code (first string)) #\\g)\
    \ (make-string (string-length string) (char->string #\\G))]\n    [(equal? (char-code\
    \ (first string)) #\\H) (make-string (string-length string) (char->string #\\\
    H))]\n    [(equal? (char-code (first string)) #\\I) (make-string (string-length\
    \ string) (char->string #\\I))]\n    [(equal? (char-code (first string)) #\\j)\
    \ (make-string (string-length string) (char->string #\\J))]\n    [(equal? (char-code\
    \ (first string)) #\\k) (make-string (string-length string) (char->string #\\\
    K))]\n    [(equal? (char-code (first string)) #\\l) (make-string (string-length\
    \ string) (char->string #\\L))]\n    [(equal? (char-code (first string)) #\\m)\
    \ (make-string (string-length string) (char->string #\\M))]\n    [(equal? (char-code\
    \ (first string)) #\\n) (make-string (string-length string) (char->string #\\\
    N))]\n    [(equal? (char-code (first string)) #\\o) (make-string (string-length\
    \ string) (char->string #\\O))]\n    [(equal? (char-code (first string)) #\\p)\
    \ (make-string (string-length string) (", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case (first string))\n            \
    \          result)))))\n  (helper string '()))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case (first string))\n            \
    \          result)))\n    (helper (substring string 1 string-length) '())))\n\
    \  (foldr helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case\n                       (char->lower-case (string-ref\
    \ string 0))))\n                (helper (substring string 1 string-length)))))\n\
    \  (helper string '()))\n", "  (cond\n    [(empty? string) string]\n    [(equal?\
    \ (first string) (string-ref string 0)) (string-append (make-string (string-length\
    \ string) ?A) (make-string (string-length string) ?A))]\n    [else (string-append\
    \ (make-string (string-length string) ?A) (make-string (string-length string)\
    \ ?B))]))\n", "  (cond [(empty? string) string]\n        [(equal? (first string)\
    \ (string-ref string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-reverse (substring (second string) 1)))]\n        [else (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-reverse (substring\
    \ (second string) 1)))]))\n", "  (define (helper string result)\n    (cond\n \
    \     [(empty? string) result]\n      [(char-lower? (car string)) (helper (cdr\
    \ string) (append result (list char-upper? (car string))))]\n      [(char-upper?\
    \ (car string)) (helper (cdr string) (append result (list char-lower? (car string))))]\n\
    \      [else (helper (cdr string) (append result (list car string)))]))\n  (helper\
    \ string '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case (first string))\n                      result)))\n    (helper\
    \ (substring string 1 string-length (first string))\n            (cons (char->lower-case\
    \ (first string))\n                  result)))\n  (helper string '()))\n", " \
    \ (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\U)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)))))))))]\n    [else (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\U)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)))))))))]))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1) (append result (substring string 1 string)))))\n  (helper\
    \ string '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (append\
    \ result (substring string 1 string)))))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      (helper (substring string 1 length) result))))\n\
    \    (helper (substring string 0 1)\n            (cons (char->lower-case (first\
    \ string))\n                  (helper (substring string 1 length) result))))\n\
    \  (helper string '()))\n", "  (define (helper string)\n    (cond\n      [(empty?\
    \ string) string]\n      [(char-lower? (car string)) (char-upcase (car string))]\n\
    \      [(char-upper? (car string)) (char-lower (car string))]\n      [else (helper\
    \ (cdr string))]))\n  (helper string))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]\n  )\n)\n", "  (define (helper string result)\n \
    \   (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case (first string))\n            \
    \          result)))\n    (helper (substring string 1 string-length) '())))\n\
    \  (foldr helper string '()))\n", "  (cond\n    [(empty? string) string]\n   \
    \ [(equal? (first string) (string-ref string 0)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-reverse (substring (second string) 1)))]\n\
    \    [else (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-reverse (substring (second string) 1)))]))\n", "  (define (helper\
    \ string result)\n    (cond\n      [(empty? string) result]\n      [(char-lower?\
    \ (car string)) (helper (cdr string) (append result (list char-upper? (car string))))]\n\
    \      [(char-upper? (car string)) (helper (cdr string) (append result (list char-lower?\
    \ (car string))))]\n      [else (helper (cdr string) result)]))\n  (helper string\
    \ '()))\n", "  (cond\n    [(empty? string) string]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-reverse (substring (second string) 1)))]\n    [else (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-reverse (substring\
    \ (second string) 1)))]))\n", "  (define (helper string result)\n    (cond [(empty?\
    \ string) result]\n          [(char-lower? (car string)) (helper (cdr string)\
    \ (append result (list char-upper? (car string))))]\n          [(char-upper? (car\
    \ string)) (helper (cdr string) (append result (list char-lower? (car string))))]\n\
    \          [else (helper (cdr string) result)]))\n  (helper string '()))\n", " \
    \ (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (string-ref string 0) (string-ref string 1))]\n  \
    \  [else (string-append (string-ref string 0) (string-ref string 1))]))\n", " \
    \ (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1) (append result (substring string 1 string)))\n\
    \      )\n  )\n  (helper string '())\n)\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]\n  ))\n", "  (define (helper string result)\n   \
    \ (cond\n      [(empty? string) result]\n      [(char-lower? (car string)) (helper\
    \ (cdr string) (char-upper-case (car string)))]\n      [(char-upper? (car string))\
    \ (helper (cdr string) (char-lower-case (car string)))]\n      [else (helper (cdr\
    \ string) (car string))]))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1 string)))\n      )\n  )\n  (helper\
    \ string '())\n)\n", "  (define (helper string index result)\n    (cond [(< index\
    \ 0) result]\n          [(string=? (char-code string) (char-code (char-code string)))\
    \ (helper (substring string 0 index) (- index 1) (append result (string-append\
    \ (char->string (char->char (char->integer char->char (char->integer string))))))\n\
    \           (helper (substring string index) 0 (- index 1) (append result (string-append\
    \ (char->string (char->char (char->integer char->char (char->integer string))))))]))\n\
    \  (helper string 0 (string->list string)))\n", "  (cond\n    [(empty? string)\
    \ \"\"]\n    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (flip_case (rest string)))]\n  \
    \  [else (string-append (make-string (string-length string) (char->string #\\\
    L)) (flip_case (rest string)))]))\n", "  (define (helper string result)\n    (if\
    \ (string-empty? string)\n        result\n        (helper (substring string 0\
    \ 1) (append result (substring string 1 string)))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (cond\n      [(empty? string) result]\n \
    \     [(char-lower? (car string)) (helper (cdr string) (char-upper-case (car string)))]\n\
    \      [(char-upper? (car string)) (helper (cdr string) (char-lower-case (car\
    \ string)))]\n      [else (helper (cdr string) (car string))]))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (cond\n      [(empty? string)\
    \ result]\n      [(char-lower? (first string)) (helper (rest string) (append result\
    \ (first string)))]\n      [(char-upper? (first string)) (helper (rest string)\
    \ (append result (first string)))]\n      [else (helper (rest string) (append\
    \ result (first string)))]))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (cond [(empty? string) result]\n          [(char-lower? (car string))\
    \ (helper (cdr string) (append result (list char-upper? (car string))))]\n   \
    \       [(char-upper? (car string)) (helper (cdr string) (append result (list\
    \ char-lower? (car string))))]\n          [else (helper (cdr string) result)]))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case (first string))\n                      result)))))\n\
    \  (helper string '()))\n", "  (cond\n    [(empty? string) \"\"]\n    [(equal?\
    \ (first string) (string-ref string 0)) (string-append (make-string 1 (string->length\
    \ (first string)) #\\U) (second string))]\n    [else (string-append (make-string\
    \ 1 (string->length (first string)) #\\L) (second string))]))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case (first string))\n\
    \                      result)))\n    (helper (substring string 1 string-length\
    \ (first string))\n            (cons (char->lower-case (first string))\n     \
    \             result)))\n  (helper string '()))\n", "  (cond\n    [(empty? string)\
    \ string]\n    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (flip_case (rest string)))]\n  \
    \  [else (string-append (make-string (string-length string) (char->string #\\\
    L)) (flip_case (rest string)))]))\n", "  (define (flip_case-helper char result)\n\
    \    (cond\n      [(char=? char #\\a) (set! result (char->string #\\A))]\n   \
    \   [(char=? char #\\A) (set! result (char->string #\\a))]\n      [(char=? char\
    \ #\\z) (set! result (char->string #\\Z))]\n      [(char=? char #\\Z) (set! result\
    \ (char->string #\\z))]\n      [else (set! result (append result (char->string\
    \ char)))]))\n  (apply append (map flip_case-helper string '())))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result)))\n    (helper (substring string\
    \ 1 string-length) '())))\n  (foldr helper string '()))\n", "  (define (flip char)\n\
    \    (cond\n      [(char >= 'a' and char <= 'z') (char - 'a' + 'A')]\n      [(char\
    \ >= 'A' and char <= 'Z') (char - 'A' + 'a')]\n      [else char]))\n  (define\
    \ (flip_char char)\n    (cond\n      [(char >= 'a' and char <= 'z') (char - 'a'\
    \ + 'A')]\n      [(char >= 'A' and char <= 'Z') (char - 'A' + 'a')]\n      [else\
    \ char]))\n  (define (flip_char char flip)\n    (cond\n      [(char >= 'a' and\
    \ char <= 'z') (char - 'a' + 'A')]\n      [(char >= 'A' and char <= 'Z') (char\
    \ - 'A' + 'a')]\n      [else char]))\n  (define (flip_char char flip)\n    (cond\n\
    \      [(char >= 'a' and char <= 'z') (char - 'a' + 'A')]\n      [(char >= 'A'\
    \ and char <= 'Z') (char - 'A' + 'a')]\n      [else char]))\n  (define (flip_char\
    \ char flip)\n    (cond\n      [(char >= 'a' and char <= 'z') (char - 'a' + 'A')]\n\
    \      [(char >= 'A' and char <= 'Z') (char - 'A' + 'a')]\n      [else char]))\n\
    \  (define (flip_char char flip)\n    (cond\n      [(char >= 'a' and char <= 'z')\
    \ (char - 'a' + 'A')]\n      [(char >= 'A' and char <= 'Z') (char - 'A' + 'a')]\n\
    \      [else char]))\n  (define (flip_char char flip)\n    (cond\n      [(char\
    \ >= 'a' and char <= 'z') (char - 'a' + 'A')]\n      [(char >= 'A' and char <=\
    \ 'Z') (char - 'A' + 'a')]\n      [else char]))\n  (define (flip_char char flip)\n\
    \    (cond\n      [(char >= 'a' and char <= 'z') (char - 'a' + 'A')]\n      [(char\
    \ >= 'A' and char <= 'Z') (char - 'A' + 'a')]\n      [else char]))\n  (define\
    \ (flip_char char flip)\n    (cond\n      [(char >= 'a' and char <= 'z') (char\
    \ - 'a' + 'A')]\n      [(char >= 'A' and char <= 'Z') (char - 'A' + 'a')]\n",
  "  (define (flip char)\n    (if (char-lower? (char-code char))\n        (char-upper?\
    \ (char-code char))\n        (char-lower? (char-code char))))\n  (define (flipped\
    \ string)\n    (apply append (map flip string)))\n  (flipped string))\n", "  (cond\n\
    \    [(string-empty? string) string]\n    [(equal? (char-code (first string))\
    \ #\\a) (upper-case (substring (first string) 1))]\n    [(equal? (char-code (first\
    \ string)) #\\A) (lower-case (substring (first string) 1))]\n    [else (cons (char-code\
    \ (first string)) (flip_case (substring (first string) 1)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
