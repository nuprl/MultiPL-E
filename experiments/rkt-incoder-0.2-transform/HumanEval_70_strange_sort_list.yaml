name: HumanEval_70_strange_sort_list
language: rkt
prompt: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
  ;; Strange sorting, is when you start with the minimum value,\n;; then maximum of\
  \ the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
  \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
  ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
  \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
  \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1))\
  \ (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5\
  \ 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
  \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
  \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
  \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      '()\n      (append (sort (first lst) '<)\n\
    \              (strange_sort_list (rest lst))\n              (sort (first lst)\
    \ '>))))\n", "  (if (null? lst)\n      lst\n      (let ([min\n             (min\
    \ (car lst))\n             max\n             (max (cdr lst))\n             min\n\
    \             (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n \
    \             (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n      '()\n\
    \      (let ((min (car lst))\n            (max (car lst)))\n        (if (< (car\
    \ lst) min)\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst)))\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst)))))\n        (if\
    \ (> (car lst) max)\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst)))\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst))\n              \
    \    (strange_sort_list (cdr lst)))))\n        (if (< (car lst) min)\n       \
    \     (cons (car lst)\n                  (strange_sort_list (cdr lst)))\n    \
    \        (cons (car lst)\n                  (strange_sort_list (cdr lst))\n  \
    \                (strange_sort_list (cdr lst))\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst)))))\n        (if\
    \ (> (car lst) max)\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst)))\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst))\n              \
    \    (strange_sort_list (cdr lst))\n                  (strange_sort_list (cdr\
    \ lst))\n                  (strange_sort_list (cdr lst)))))\n        (if (< (car\
    \ lst) min)\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst)))\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst))\n              \
    \    (strange_sort_list (cdr lst))\n                  (strange_sort_list (cdr\
    \ lst))\n                  (strange_sort_list (cdr lst))\n                  (strange_sort_list\
    \ (cdr lst)))))\n        (if (> (car lst) max)\n            (cons (car lst)\n\
    \                  (strange_sort_list (cdr lst)))\n            (cons (car lst)\n\
    \                  (strange_sort_list (cdr lst))\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst))\n              \
    \    (strange_sort_list (cdr lst))\n", "  (if (null? lst)\n      '()\n      (append\
    \ (sort (first lst) '<)\n              (strange_sort_list (rest lst)))))\n", " \
    \ (if (null? lst)\n      '()\n      (append (sort (first lst) strange_sort_list)\n\
    \              (sort (second lst) strange_sort_list)\n              (sort (third\
    \ lst) strange_sort_list)\n              (sort (fourth lst) strange_sort_list)\n\
    \              (sort (fifth lst) strange_sort_list)\n              (sort (sixth\
    \ lst) strange_sort_list)\n              (sort (seventh lst) strange_sort_list)\n\
    \              (sort (eighth lst) strange_sort_list)\n              (sort (ninth\
    \ lst) strange_sort_list)\n              (sort (tenth lst) strange_sort_list)\n\
    \              (sort (eleventh lst) strange_sort_list)\n              (sort (twelfth\
    \ lst) strange_sort_list)\n              (sort (thirteenth lst) strange_sort_list)\n\
    \              (sort (fourteenth lst) strange_sort_list)\n              (sort\
    \ (fifteenth lst) strange_sort_list)\n              (sort (sixteenth lst) strange_sort_list)\n\
    \              (sort (seventeenth lst) strange_sort_list)\n              (sort\
    \ (eighteenth lst) strange_sort_list)\n              (sort (nineteenth lst) strange_sort_list)\n\
    \              (sort (ten lst) strange_sort_list)\n              (sort (eleven\
    \ lst) strange_sort_list)\n              (sort (twelve lst) strange_sort_list)\n\
    \              (sort (thirteen lst) strange_sort_list)\n              (sort (fourteen\
    \ lst) strange_sort_list)\n              (sort (fifteen lst) strange_sort_list)\n\
    \              (sort (sixteen lst) strange_sort_list)\n              (sort (seventeen\
    \ lst) strange_sort_list)\n              (sort (eighteen lst) strange_sort_list)\n\
    \              (sort (nineteen lst) strange_sort_list)\n              (sort (ten\
    \ lst) strange_sort_list)\n              (sort (eleven lst) strange_sort_list)\n\
    \              (sort (twelve lst) strange_sort_list)\n              (sort (thirteen\
    \ lst) strange_sort_list)\n              (sort (fourteen lst) strange_sort_list)\n\
    \              (sort (fifte", "  (if (null? lst)\n      '()\n      (append (sort\
    \ (first lst) (lambda (x y) (< (first lst) y))\n                       (reverse\
    \ (sort (second lst) (lambda (x y) (< (second lst) y))\n                     \
    \                   (reverse (sort (third lst) (lambda (x y) (< (third lst) y))\n\
    \                                                        (reverse (sort (fourth\
    \ lst) (lambda (x y) (< (fourth lst) y))\n                                   \
    \                                     (reverse (sort (fifth lst) (lambda (x y)\
    \ (< (fifth lst) y))\n                                                       \
    \                                   (reverse (sort (sixth lst) (lambda (x y) (<\
    \ (sixth lst) y))\n                                                          \
    \                                  (reverse (sort (seventh lst) (lambda (x y)\
    \ (< (seventh lst) y))\n                                                     \
    \                                         (reverse (sort (eigth lst) (lambda (x\
    \ y) (< (eigth lst) y))\n                                                    \
    \                                            (reverse (sort (ninth lst) (lambda\
    \ (x y) (< (ninth lst) y))\n                                                 \
    \                                                 (reverse (sort (tenth lst) (lambda\
    \ (x y) (< (tenth lst) y))\n                                                 \
    \                                                   (reverse (sort (eleventh lst)\
    \ (lambda (x y) (< (eleventh lst) y))\n                                      \
    \                                                                (reverse (sort\
    \ (twelfth lst) (lambda (x y) (< (twelfth lst) y))\n                         \
    \                                                                            \
    \   (reverse (sort (thirteenth lst) (lambda (x y) (< (thirteenth lst) y))\n  \
    \                                                                            \
    \                            (reverse (sort (fourteenth lst) (lambda (x y) (<\
    \ (fourteenth lst) y))\n                                                     \
    \                                                       (sort (fifteenth lst)\
    \ (lambda (x y) (< (fifteenth lst) y))\n                                     \
    \                                                                         (reverse\
    \ (sort (sixteenth lst) (lambda (x y) (< (sixteenth lst) y))\n               \
    \                                                                            \
    \                     (reverse (sort (seventeenth lst) (lambda (x y) (< (seventeenth\
    \ lst) y))\n                                                                 \
    \                                                 (reverse (sort (eighteenth lst)\
    \ (lambda (x y) (< (eighteenth lst) y))\n                                    \
    \                                                                            \
    \    (reverse (sort (nineteenth lst) (lambda (x y) (< (nineteenth lst) y))\n \
    \                                                                            \
    \                                         (reverse (sort (twentieth lst) (lambda\
    \ (x y) (< (twentieth lst) y))\n                                             \
    \                                                                           (reverse\
    \ (sort (thirtieth lst) (lambda (x y) (< (thirtieth lst) y))", "  (if (null? lst)\n\
    \      '()\n      (append (sort lst)\n               (sort (sort lst))\n     \
    \          (sort (sort lst))))) ;; #lang racket\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (min lst))\n              (strange_sort_list (list\
    \ (max lst))))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      (list)\n      (let ([minval (car\
    \ lst)]\n            [maxval (car lst)]\n            [rest (cdr lst)])\n     \
    \   (if (null? rest)\n            (list minval maxval)\n            (let ([minval\
    \ (car rest)]\n                  [maxval (car rest)]\n                  [rest\
    \ (cdr rest)])\n              (if (< minval maxval)\n                  (list minval\
    \ maxval)\n                  (list minval maxval rest)))))\n        (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n\
    \              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ (list lst)\n      (let ([head (car lst)])\n        (strange_sort_list (cdr lst))\n\
    \        (cons head (strange_sort_list (cdr lst))))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (strange_sort_list (cdr lst))\n             \
    \ (list (car lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (min\
    \ lst))\n              (strange_sort_list (list (max lst))))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (strange_sort_list (cdr lst))\n             \
    \ (list (car lst)))))\n", "  (if (null? lst)\n      lst\n      (let ([min (car\
    \ lst)\n            max-min (cdr lst)\n            max-min (if (null? max-min)\
    \ '() max-min)]\n            (max-min (if (< min max-min) max-min min)))\n   \
    \     (strange_sort_list (cons min max-min)))))\n", "  (if (null? lst)\n     \
    \ (list)\n      (let ([min (first lst)])\n        (let ([max (rest lst)])\n  \
    \        (if (null? max)\n              (cons min lst)\n              (let ([next-min\
    \ (first max)])\n                (cons next-min (strange_sort_list (rest max))))))))))\n",
  "  (if (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      lst\n      (let ([min (first lst)\n\
    \            max-min (second lst)\n            max-min (third lst)\n         \
    \   max-min (fourth lst)\n            max-min (fifth lst)\n            max-min\
    \ (sixth lst)\n            max-min (seventh lst)\n            max-min (eigth lst)\n\
    \            max-min (ninth lst)\n            max-min (tenth lst)\n          \
    \  max-min (eleventh lst)\n            max-min (twelveth lst)\n            max-min\
    \ (thirteenth lst)\n            max-min (fourteenth lst)\n            max-min\
    \ (fifteenth lst)\n            max-min (sixteenth lst)\n            max-min (seventeenth\
    \ lst)\n            max-min (eighteenth lst)\n            max-min (nineteenth\
    \ lst)\n            max-min (twentieth lst)\n            max-min (twenty-first\
    \ lst)\n            max-min (twenty-second lst)\n            max-min (twenty-third\
    \ lst)\n            max-min (twenty-fourth lst)\n            max-min (twenty-five\
    \ lst)\n            max-min (twenty-six lst)\n            max-min (twenty-seven\
    \ lst)\n            max-min (twenty-eight lst)\n            max-min (twenty-nine\
    \ lst)\n            max-min (thirtieth lst)\n            max-min (thirty-first\
    \ lst)\n            max-min (thirty-second lst)\n            max-min (thirty-third\
    \ lst)\n            max-min (thirty-fourth lst)\n            max-min (thirty-five\
    \ lst)\n            max-min (thirty-six lst)\n            max-min (thirty-seven\
    \ lst)\n            max-min (thirty-eight lst)\n            max-min (thirty-nine\
    \ lst)\n            max-min (fortieth lst)\n            max-min (forty-first lst)\n\
    \            max-min (forty-second lst)\n            max-min (forty-third lst)\n\
    \            max-min (forty-fourth lst)\n            max-min (forty-five lst)\n\
    \            max-min (forty-six lst)\n            max-min (forty-seven lst)\n\
    \            ", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n\
    \              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (rest lst))\n              (list (first lst)))))\n", "  (if (null? lst)\n  \
    \    lst\n      (let ([head (car lst)])\n        (strange_sort_list (cdr lst))\n\
    \        (cons head (strange_sort_list (cdr lst))))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (strange_sort_list (cdr lst))\n              (list (car\
    \ lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (min lst))\n\
    \              (strange_sort_list (list (max lst)))))\n)\n", "  (if (null? lst)\n\
    \      (list)\n      (let ([min (first lst)])\n        (strange_sort_list (rest\
    \ lst)\n                           (cond [(< min (first lst))\n              \
    \                     (cons (first lst)\n                                    \
    \     (strange_sort_list (rest lst)))]\n                                 [(< min\
    \ (first lst))\n                                   (cons (first lst)\n       \
    \                                  (strange_sort_list (rest lst)))]\n        \
    \                         [(< min (first lst))\n                             \
    \      (cons (first lst)\n                                         (strange_sort_list\
    \ (rest lst)))]\n                                 [(< min (first lst))\n     \
    \                              (cons (first lst)\n                           \
    \              (strange_sort_list (rest lst)))]\n                            \
    \     [(< min (first lst))\n                                   (cons (first lst)\n\
    \                                         (strange_sort_list (rest lst)))]\n \
    \                                [(< min (first lst))\n                      \
    \             (cons (first lst)\n                                         (strange_sort_list\
    \ (rest lst)))]\n                                 [(< min (first lst))\n     \
    \                              (cons (first lst)\n                           \
    \              (strange_sort_list (rest lst)))]\n                            \
    \     [(< min (first lst))\n                                   (cons (first lst)\n\
    \                                         (strange_sort_list (rest lst)))]\n \
    \                                [(< min (first lst))\n                      \
    \             (cons (first lst)\n                                         (strange_sort_list\
    \ (rest lst)))]\n                                 [(< min (first lst))\n     \
    \                              (cons (first lst)\n                           \
    \              (strange_sort_list (rest lst)))]\n                            \
    \     [(< min (first lst))\n                                   (cons (first lst)\n\
    \                                         (strange_sort_list (rest lst)))]\n \
    \                                [(< min (first lst))\n                      \
    \             (cons (first lst)\n                                         (strange_sort_list\
    \ (rest lst)))]\n                                 [(< min (first lst))\n     \
    \                              (cons (first lst)\n                           \
    \              (strange_sort_list (rest lst)))]\n                            \
    \     [(< min (first lst))\n                                   (cons (first lst)\n\
    \                                         (strange_sort_list (rest lst)))]\n \
    \                                [(< min (first lst))\n                      \
    \             (cons (first lst)\n                                         (strange_sort_list\
    \ (rest lst)))]\n                                 [(< min (first lst))\n     \
    \                              (cons (first lst)\n                           \
    \              (strange_sort_list (rest lst)))]\n                            \
    \     [(< min (first lst))\n                                   (cons (first lst)",
  "  (if (null? lst)\n      '()\n      (append (sort (first lst) (lambda (x y) (if\
    \ (< x y) x y)))\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (sort (first lst) strange_sort_list)\n      \
    \         (sort (last lst) strange_sort_list)\n               (sort (first lst)\
    \ strange_sort_list))))\n", "  (if (null? lst)\n      '()\n      (append (sort\
    \ (first lst) '<)\n               (sort (last lst) '>)\n               (sort (first\
    \ lst) '<)\n               (sort (last lst) '>)\n               (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (rest lst))\n              (list (first lst))\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      '()\n      (let ((head (car lst))\n\
    \            (tail (cdr lst)))\n        (if (< (car tail) head)\n            (cons\
    \ head (strange_sort_list (cdr tail)))\n            (cons head (strange_sort_list\
    \ (cdr tail)))))\n      )\n    )\n  )\n", "  (if (null? lst)\n      '()\n    \
    \  (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      lst\n      (let ((min (first lst))\n            (max (rest\
    \ lst))\n            (cur (first lst)))\n        (if (< min max)\n           \
    \ (cons cur (strange_sort_list (rest lst)))\n            (cons min (strange_sort_list\
    \ (rest lst)))))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) strange_sort_list)\n              (sort (second lst) strange_sort_list)\n\
    \              (sort (third lst) strange_sort_list)\n              (sort (fourth\
    \ lst) strange_sort_list)\n              (sort (fifth lst) strange_sort_list)\n\
    \              (sort (sixth lst) strange_sort_list)\n              (sort (seventh\
    \ lst) strange_sort_list)\n              (sort (eigth lst) strange_sort_list)\n\
    \              (sort (ninth lst) strange_sort_list)\n              (sort (tenth\
    \ lst) strange_sort_list)\n              (sort (eleven lst) strange_sort_list)\n\
    \              (sort (twelve lst) strange_sort_list)\n              (sort (thirteen\
    \ lst) strange_sort_list)\n              (sort (fourteen lst) strange_sort_list)\n\
    \              (sort (fifteen lst) strange_sort_list)\n              (sort (sixteen\
    \ lst) strange_sort_list)\n              (sort (seventeen lst) strange_sort_list)\n\
    \              (sort (eigteen lst) strange_sort_list)\n              (sort (ninteen\
    \ lst) strange_sort_list)\n              (sort (twenty lst) strange_sort_list)\n\
    \              (sort (thirty lst) strange_sort_list)\n              (sort (forty\
    \ lst) strange_sort_list)\n              (sort (fifty lst) strange_sort_list)\n\
    \              (sort (sixty lst) strange_sort_list)\n              (sort (seventy\
    \ lst) strange_sort_list)\n              (sort (eighty lst) strange_sort_list)\n\
    \              (sort (ninety lst) strange_sort_list)\n              (sort (tenty\
    \ lst) strange_sort_list)\n              (sort (eleven lst) strange_sort_list)\n\
    \              (sort (twelve lst) strange_sort_list)\n              (sort (thirteen\
    \ lst) strange_sort_list)\n              (sort (fourteen lst) strange_sort_list)\n\
    \              (sort (fifteen lst) strange_sort_list)\n              (sort (sixteen\
    \ lst) strange_sort_list)\n              (sort (seventeen lst", "  (if (null?\
    \ lst)\n      '()\n      (let ([min\n             (min lst)\n             max\n\
    \             (max lst)\n             mid\n             (/ min max)\n        \
    \     rest\n             (rest lst)])\n        (if (< mid max)\n            (cons\
    \ (cons min rest)\n                  (strange_sort_list (rest lst)))\n       \
    \     (cons (cons mid max)\n                  (strange_sort_list (rest lst)))))))\n",
  "  (if (null? lst)\n      '()\n      (let ([head (car lst)])\n        (strange_sort_list\
    \ (cdr lst))\n        (cons head (strange_sort_list (cdr lst))))))\n", "  (if\
    \ (null? lst)\n      (list)\n      (let ([min (first lst)])\n        (strange_sort_list\
    \ (rest lst)\n                          (cons min (sort (sort lst)))))))\n", " \
    \ (if (null? lst)\n      (list lst)\n      (let ([head (car lst)])\n        (if\
    \ (null? (cdr lst))\n            (strange_sort_list (list head lst))\n       \
    \     (strange_sort_list (list (car lst) (max (car lst) (max (cdr lst))))\n  \
    \                          (strange_sort_list (list (car lst) (min (car lst) (min\
    \ (cdr lst))))))))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (null? lst)\n     \
    \ (list)\n      (let ([min\n             (min lst)\n             max\n       \
    \      (max lst)\n             mid\n             (/ (length lst) 2)])\n      \
    \  (if (= mid 0)\n            (strange_sort_list (append (list min) (list max)))\n\
    \            (strange_sort_list (append (list max) (list min)))))\n      (append\
    \ (list min) (list max))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      '()\n      (append (sort lst)\n              (strange_sort_list\
    \ (sort (subseq lst 0 (length lst)))))))\n", "  (if (null? lst)\n      '()\n \
    \     (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      '()\n      (let ([min (first lst)\n            max-min\
    \ (second lst)\n            max-max (third lst)\n            max-min (fourth lst)\n\
    \            max-max (fifth lst)\n            max-min (sixth lst)\n          \
    \  max-max (seventh lst)\n            max-min (eigth lst)\n            max-max\
    \ (ninth lst)\n            max-min (tenth lst)\n            max-max (eleventh\
    \ lst)\n            max-min (twelfth lst)\n            max-max (thirteenth lst)\n\
    \            max-min (fourteenth lst)\n            max-max (fifteenth lst)\n \
    \           max-min (sixteenth lst)\n            max-max (seventeenth lst)\n \
    \           max-min (eighteenth lst)\n            max-max (nineteenth lst)\n \
    \           max-min (twenty-first lst)\n            max-max (twenty-second lst)\n\
    \            max-min (twenty-third lst)\n            max-max (twenty-fourth lst)\n\
    \            max-min (twenty-fifth lst)\n            max-max (twenty-sixth lst)\n\
    \            max-min (twenty-seventh lst)\n            max-max (twenty-eighth\
    \ lst)\n            max-min (twenty-ninth lst)\n            max-max (thirty-first\
    \ lst)\n            max-min (thirty-second lst)\n            max-max (thirty-third\
    \ lst)\n            max-min (thirty-fourth lst)\n            max-max (thirty-fifth\
    \ lst)\n            max-min (thirty-sixth lst)\n            max-max (thirty-seventh\
    \ lst)\n            max-min (thirty-eighth lst)\n            max-max (thirty-ninth\
    \ lst)\n            max-min (forty-first lst)\n            max-max (forty-second\
    \ lst)\n            max-min (forty-third lst)\n            max-max (forty-fourth\
    \ lst)\n            max-min (forty-fifth lst)\n            max-max (forty-sixth\
    \ lst)\n            max-min (forty-seventh lst)\n            max-max (forty-eighth\
    \ lst)\n            max-min (forty-ninth lst)", "  (if (empty? lst)\n      (list)\n\
    \      (let ([min (first lst)\n            max-mins (strange_sort_list (rest lst))])\n\
    \        (cons (min lst)\n              (if (empty? max-mins)\n              \
    \    (list)\n                  (cons (max (first max-mins)) max-mins))))))\n",
  "  (if (null? lst)\n      lst\n      (let ([min\n             (min lst)\n      \
    \       max\n             (max lst)\n             mid\n             (/ (length\
    \ lst) 2)])\n        (if (= min max)\n            (strange_sort_list (list min\
    \ max min max))\n            (strange_sort_list (list min mid max mid))\n    \
    \        (strange_sort_list (list mid min mid max))\n            (strange_sort_list\
    \ (list mid mid min max))\n            (strange_sort_list (list mid mid mid max))\n\
    \            (strange_sort_list (list min max mid mid))\n            (strange_sort_list\
    \ (list min mid max mid))\n            (strange_sort_list (list mid min mid max))\n\
    \            (strange_sort_list (list mid mid min max))\n            (strange_sort_list\
    \ (list mid mid mid max))\n            (strange_sort_list (list min max mid mid))\n\
    \            (strange_sort_list (list min mid max mid))\n            (strange_sort_list\
    \ (list mid min mid max))\n            (strange_sort_list (list mid mid min max))\n\
    \            (strange_sort_list (list mid mid mid max))\n            (strange_sort_list\
    \ (list min max mid mid))\n            (strange_sort_list (list min mid max mid))\n\
    \            (strange_sort_list (list mid min mid max))\n            (strange_sort_list\
    \ (list mid mid min max))\n            (strange_sort_list (list mid mid mid max))\n\
    \            (strange_sort_list (list min max mid mid))\n            (strange_sort_list\
    \ (list min mid max mid))\n            (strange_sort_list (list mid min mid max))\n\
    \            (strange_sort_list (list mid mid min max))\n            (strange_sort_list\
    \ (list mid mid mid max))\n            (strange_sort_list (list min max mid mid))\n\
    \            (strange_sort_list (list min mid max mid))\n            (strange_sort_list\
    \ (list mid min mid max))\n            (strange_sort_list (list mid mid min max))\n\
    \            (strange_sort_list (list mid mid mid max))\n            (strange_sort_list\
    \ (list min max mid mid))\n            (strange_sort_list (list min mid ", " \
    \ (if (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (empty? lst)\n      '()\n      (append (sort (first\
    \ lst) strange_sort_list)\n              (sort (last lst) strange_sort_list)\n\
    \              (sort (first lst) strange_sort_list))))\n", "  (let loop ((lst\
    \ lst)\n             (result '()))\n    (if (null? lst)\n        result\n    \
    \    (loop (cdr lst)\n              (cons (car lst)\n                    (loop\
    \ (cdr lst)\n                          result))))))\n", "  (if (null? lst)\n \
    \     '()\n      (append (list (car lst))\n              (strange_sort_list (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      '()\n      (append (strange_sort_list (cdr lst))\n   \
    \           (list (car lst)))))\n", "  (if (null? lst)\n      '()\n      (append\
    \ (list (min lst))\n              (strange_sort_list (list (max lst)))))\n)\n",
  "  (if (null? lst)\n      '()\n      (let ([minval (car lst)]\n            [maxval\
    \ (car lst)]\n            [minval (car lst)]\n            [maxval (car lst)]\n\
    \            [minval (car lst)]\n            [maxval (car lst)]\n            [minval\
    \ (car lst)]\n            [maxval (car lst)]\n            [minval (car lst)]\n\
    \            [maxval (car lst)]\n            [minval (car lst)]\n            [maxval\
    \ (car lst)]\n            [minval (car lst)]\n            [maxval (car lst)]\n\
    \            [minval (car lst)]\n            [maxval (car lst)]\n            [minval\
    \ (car lst)]\n            [maxval (car lst)]\n            [minval (car lst)]\n\
    \            [maxval (car lst)]\n            [minval (car lst)]\n            [maxval\
    \ (car lst)]\n            [minval (car lst)]\n            [maxval (car lst)]\n\
    \            [minval (car lst)]\n            [maxval (car lst)]\n            [minval\
    \ (car lst)]\n            [maxval (car lst)]\n            [minval (car lst)]\n\
    \            [maxval (car lst)]\n            [minval (car lst)]\n            [maxval\
    \ (car lst)]\n            [minval (car lst)]\n            [maxval (car lst)]\n\
    \            [minval (car lst)]\n            [maxval (car lst)]\n            [minval\
    \ (car lst)]\n            [maxval (car lst)]\n            [minval (car lst)]\n\
    \            [maxval (car lst)]\n            [minval (car lst)]\n            [maxval\
    \ (car lst)]\n            [minval (car lst)]\n            [maxval (car lst)]\n\
    \            [minval (car lst)]\n            [maxval (car lst)]\n            [minval\
    \ (car lst)]\n            [maxval (car lst)]\n            [minval (car lst)]\n\
    \            [maxval (car lst)]\n            [minval (car lst)]\n            [maxval\
    \ (car lst)]\n            [minval (car lst)]\n            [maxval (car lst)]\n\
    \            [minval (car lst)]\n            [maxval (c", "  (if (null? lst)\n\
    \      '()\n      (append (strange_sort_list (cdr lst))\n              (list (car\
    \ lst)))))\n", "  (if (null? lst)\n      '()\n      (let ([head (car lst)])\n\
    \        (strange_sort_list (cdr lst))\n        (cons head (strange_sort_list\
    \ (cdr lst))))))\n", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n\
    \              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n               (strange_sort_list (rest lst))\n               (sort\
    \ (first lst) '>))))\n", "  (let loop ((lst lst)\n             (result '()))\n\
    \    (if (null? lst)\n        result\n        (loop (cdr lst)\n              (cons\
    \ (min lst)\n                    result)))))\n", "  (if (null? lst)\n      '()\n\
    \      (append (sort (first lst) '<)\n               (strange_sort_list (rest\
    \ lst))\n               (sort (first lst) '>))))\n", "  (if (null? lst)\n    \
    \  (list)\n      (let ([min (first lst)])\n        (strange_sort_list (rest lst)\n\
    \                          (cons min lst)\n                          (cons (first\
    \ lst) min))))))\n", "  (if (null? lst)\n      lst\n      (let ([min (car lst)])\n\
    \        (strange_sort_list (cdr lst))\n        (cons min (strange_sort_list (cdr\
    \ lst))))))\n", "  (if (null? lst)\n      '()\n      (let ((min (car lst))\n \
    \           (max (car lst))\n            (cur (car lst)))\n        (if (< (car\
    \ lst) min)\n            (cons min (strange_sort_list (cdr lst)))\n          \
    \  (cons max (strange_sort_list (cdr lst)))\n            (cons cur (strange_sort_list\
    \ (cdr lst)))))))\n", "  (if (null? lst)\n      '()\n      (append (list (min\
    \ lst))\n              (strange_sort_list (list (max lst))))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (sort (first lst) strange_sort_list)\n      \
    \        (sort (last lst) strange_sort_list)\n              (sort (first lst)\
    \ strange_sort_list))))\n", "  (if (null? lst)\n      lst\n      (let ([min (first\
    \ lst)])\n        (strange_sort_list (rest lst)\n                          (cons\
    \ min lst)))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first lst)\
    \ strange_sort_list)\n              (sort (last lst) strange_sort_list)\n    \
    \          (sort (first lst) strange_sort_list))))\n", "  (if (null? lst)\n  \
    \    (list lst)\n      (let ([min (first lst)])\n        (strange_sort_list (rest\
    \ lst)\n                           (cond [(< min (first lst))\n              \
    \                     (cons (first lst) lst)\n                               \
    \    (else (cons (first lst) (cons min lst)))]\n                             \
    \    [else (cons (first lst) (cons min lst))])))))\n", "  (if (null? lst)\n  \
    \    (list)\n      (let ([head (car lst)])\n        (strange_sort_list (cdr lst))\n\
    \        (cons head (strange_sort_list (cdr lst))))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (list (car lst))\n              (strange_sort_list (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n\
    \              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ lst\n      (let ([minval (car lst)\n             maxval (car lst)\n        \
    \     minval (car lst)])\n        (if (null? (cdr lst))\n            (strange_sort_list\
    \ (list minval maxval minval))\n            (strange_sort_list (list minval maxval\
    \ (car lst)))))))\n", "  (if (null? lst)\n      lst\n      (let ([min (first lst)])\n\
    \        (strange_sort_list (rest lst)\n                           (lambda (x\
    \ y)\n                             (if (< x min)\n                           \
    \      (list min x y)\n                                 (list x min y)))))))\n",
  "  (if (null? lst)\n      '()\n      (append (list (min lst))\n              (strange_sort_list\
    \ (list (max lst))))))\n", "  (if (null? lst)\n      '()\n      (append (sort\
    \ (first lst) (lambda (x y) (if (< x y) x y)))\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      (list lst)\n      (let ([min (first\
    \ lst)])\n        (if (null? (rest lst))\n            (list min)\n           \
    \ (let ([max (first lst)])\n              (if (null? (rest lst))\n           \
    \       (list min max)\n                  (let ([min2 (first lst)])\n        \
    \            (if (null? (rest lst))\n                        (list min max min2)\n\
    \                        (let ([max2 (first lst)])\n                         \
    \ (if (null? (rest lst))\n                              (list min max min2 max2)\n\
    \                              (let ([min3 (first lst)])\n                   \
    \             (if (null? (rest lst))\n                                    (list\
    \ min max min2 max2 min3)\n                                    (let ([max3 (first\
    \ lst)])\n                                      (if (null? (rest lst))\n     \
    \                                     (list min max min2 max2 min3 max3)\n   \
    \                                       (let ([min4 (first lst)])\n          \
    \                                  (if (null? (rest lst))\n                  \
    \                              (list min max min2 max2 min3 max3 min4)\n     \
    \                                           (strange_sort_list (list min2 max2\
    \ min3 max3 min4 max4 min))))))))))))))))))\n", "  (if (null? lst)\n      (list\
    \ lst)\n      (let ((min (car lst))\n            (max (car lst))\n           \
    \ (lst (cdr lst)))\n        (if (null? lst)\n            (list min max)\n    \
    \        (let ((next (strange_sort_list (cdr lst))))\n              (if (null?\
    \ next)\n                  (list min max)\n                  (if (< (car next)\
    \ min)\n                      (list min (car next))\n                      (list\
    \ min max)))))\n        (if (< (car lst) min)\n            (list min (car lst))\n\
    \            (list min max))))))\n", "  (if (null? lst)\n      '()\n      (let\
    \ ([head (car lst)])\n        (strange_sort_list (cdr lst))\n        (cons head\
    \ (strange_sort_list (cdr lst)))))\n  )\n", "  (if (null? lst)\n      '()\n  \
    \    (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      (list)\n      (let ([min (car lst)])\n        (strange_sort_list\
    \ (cdr lst))\n        (cons min (strange_sort_list (cdr lst)))))\n  )\n", "  (if\
    \ (null? lst)\n      lst\n      (let ((min (car lst))\n            (max (car lst))\n\
    \            (cur (car lst)))\n        (if (null? (cdr lst))\n            (list\
    \ min max cur)\n            (let ((next-min (car lst))\n                  (next-max\
    \ (car lst))\n                  (next-cur (car lst)))\n              (if (< min\
    \ next-min)\n                  (list min next-min next-max cur)\n            \
    \      (list min max next-min next-max cur)\n                  (list min max next-min\
    \ next-max cur)))))\n        (strange_sort_list (cdr lst))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (sort (first lst) strange_sort_list)\n      \
    \        (sort (last lst) strange_sort_list)\n              (sort (first lst)\
    \ strange_sort_list))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (empty? lst)\n    \
    \  lst\n      (let ((min (first lst))\n            (max (rest lst)))\n       \
    \ (if (< (first lst) min)\n            (cons min (strange_sort_list (rest lst)))\n\
    \            (cons max (strange_sort_list (rest lst)))))))\n", "  (if (null? lst)\n\
    \      lst\n      (let ([head (car lst)])\n        (strange_sort_list (cdr lst))\n\
    \        (cons head (strange_sort_list (cdr lst))))))\n", "  (if (null? lst)\n\
    \      lst\n      (let ([head (car lst)])\n        (strange_sort_list (cdr lst))\n\
    \        (cons head (strange_sort_list (cdr lst))))))\n", "  (if (null? lst)\n\
    \      '()\n      (let ([head (car lst)])\n        (strange_sort_list (cdr lst))\n\
    \        (cons head (strange_sort_list (cdr lst))))))\n", "  (if (empty? lst)\n\
    \      '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      lst\n      (let ([minval (car lst)]\n\
    \            [maxval (cadr lst)]\n            [minval (caddr lst)]\n         \
    \   [maxval (cadddr lst)])\n        (if (< minval maxval)\n            (cons (car\
    \ lst)\n                  (strange_sort_list (cdr lst)))\n            (cons (car\
    \ lst)\n                  (strange_sort_list (cdr lst)))))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (null? lst)\n     \
    \ lst\n      (let ([head (car lst)])\n        (if (null? (cdr lst))\n        \
    \    (list head)\n            (let ([tail (cdr lst)])\n              (if (> (car\
    \ tail) head)\n                  (cons head (strange_sort_list (cdr lst)))\n \
    \                 (cons head (strange_sort_list (cdr tail))))))))))\n", "  (if\
    \ (null? lst)\n      '()\n      (append (list (min lst))\n              (strange_sort_list\
    \ (list (max lst))))))\n", "  (if (null? lst)\n      '()\n      (append (list\
    \ (car lst))\n              (strange_sort_list (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (list (min lst))\n              (strange_sort_list\
    \ (list (max lst))))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      '()\n      (append (sort (first lst) '<)\n           \
    \   (strange_sort_list (rest lst)))))\n", "  (if (null? lst)\n      '()\n    \
    \  (append (strange_sort_list (cdr lst))\n              (list (car lst)))))\n",
  "  (if (empty? lst)\n      '()\n      (append (sort (first lst) '<)\n          \
    \     (strange_sort_list (rest lst))\n               (sort (first lst) '>))))\n",
  "  (if (null? lst)\n      '()\n      (append (strange_sort_list (cdr lst))\n   \
    \           (list (car lst)))))\n", "  (if (empty? lst)\n      '()\n      (append\
    \ (list (min lst))\n              (strange_sort_list (list (max lst))))))\n",
  "  (if (empty? lst)\n      '()\n      (append (sort (first lst) '<)\n          \
    \    (strange_sort_list (rest lst)))))\n", "  (if (null? lst)\n      '()\n   \
    \   (let ((min (car lst))\n            (max (car lst))\n            (cur (car\
    \ lst)))\n        (if (< (car lst) min)\n            (cons min (strange_sort_list\
    \ (cdr lst)))\n            (cons max (strange_sort_list (cdr lst)))\n        \
    \    (cons cur (strange_sort_list (cdr lst)))))))\n", "  (if (null? lst)\n   \
    \   '()\n      (append (list (car lst))\n              (strange_sort_list (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first lst)\
    \ '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (list (min lst))\n              (strange_sort_list (list\
    \ (max lst))))))\n", "  (if (null? lst)\n      (list)\n      (let ([minval (car\
    \ lst)\n             maxval (car lst)\n             rest (cdr lst)])\n       \
    \ (if (null? rest)\n            (list minval maxval)\n            (let ([minval\
    \ (car rest)\n                  maxval (car rest)\n                  rest (cdr\
    \ rest)])\n              (if (null? rest)\n                  (list minval maxval)\n\
    \                  (let ([minval (car rest)\n                        maxval (car\
    \ rest)\n                        rest (cdr rest)])\n                    (if (null?\
    \ rest)\n                        (list minval maxval)\n                      \
    \  (let ([minval (car rest)\n                              maxval (car rest)\n\
    \                              rest (cdr rest)])\n                          (if\
    \ (null? rest)\n                              (list minval maxval)\n         \
    \                     (let ([minval (car rest)\n                             \
    \       maxval (car rest)\n                                    rest (cdr rest)])\n\
    \                                    (if (null? rest)\n                      \
    \                  (list minval maxval)\n                                    \
    \    (let ([minval (car rest)\n                                              maxval\
    \ (car rest)\n                                              rest (cdr rest)])\n\
    \                                          (if (null? rest)\n                \
    \                              (list minval maxval)\n                        \
    \                      (let ([minval (car rest)\n                            \
    \                        maxval (car rest)\n                                 \
    \                   rest (cdr rest)])\n                                      \
    \            (if (null? rest)\n                                              \
    \        (list minval maxval)\n                                              \
    \        (let ([minval (car rest)\n                                          \
    \                  maxval (car rest)\n                                       \
    \                     rest (cdr rest)])\n                                    \
    \                    (if (null? rest)\n                                      \
    \                      (list minval maxval)\n                                \
    \                            (let ([minval (car rest)\n                      \
    \                                            maxval (car rest)\n             \
    \                                                     rest (cdr rest)])\n    \
    \                                                          (if (null? rest)\n\
    \                                                                  (list minval\
    \ maxval)\n                                                                  (let\
    \ ([minval (car rest)\n                                                      \
    \                  maxval (car rest)\n                                       \
    \                                 rest (cdr rest)])\n                        \
    \                                            (if (null? rest)\n              \
    \                                                          (list minval maxval)\n\
    \                                                                        (let\
    \ ([minval (car rest)\n                                                      \
    \                        maxval (car rest)\n                                 \
    \                                             rest (cdr rest)])\n            \
    \                                                            (if (null? rest)\n\
    \                                                                            \
    \                            (list minval maxval)\n                          \
    \                                              (let ", "  (if (null? lst)\n  \
    \    '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (empty? lst)\n      '()\n      (let ((min (car lst))\n\
    \            (max (car lst))\n            (cur (car lst)))\n        (if (< (car\
    \ lst) min)\n            (cons min (strange_sort_list (cdr lst)))\n          \
    \  (cons max (strange_sort_list (cdr lst)))))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (sort (first lst) '<)\n              (strange_sort_list (rest\
    \ lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n\
    \              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (sort (first lst) strange_sort_list)\n              (sort\
    \ (last lst) strange_sort_list)\n              (sort (first lst) strange_sort_list))))\n",
  "  (let loop ((lst lst)\n             (acc '()))\n    (if (null? lst)\n        (reverse\
    \ acc)\n        (loop (cdr lst)\n              (cons (min lst)\n             \
    \       (loop (cdr lst)\n                          (cons (max lst)\n         \
    \                       acc)))))))\n", "  (if (null? lst)\n      lst\n      (let\
    \ ((min (car lst))\n            (max (car lst)))\n        (if (< (car lst) min)\n\
    \            (cons min (strange_sort_list (cdr lst)))\n            (cons max (strange_sort_list\
    \ (cdr lst)))))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n               (strange_sort_list (rest lst))\n               (sort\
    \ (first lst) '>))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (empty? lst)\n    \
    \  '()\n      (append (strange_sort_list (sub1 lst))\n              (list (min\
    \ lst))\n              (strange_sort_list (sub1 lst))))) ;; #lang racket\n", " \
    \ (if (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (sort (first lst) '<)\n               (sort (last\
    \ lst) '>)\n               (sort (first lst) '<)\n               strange_sort_list\
    \ (rest lst))))\n", "  (if (null? lst)\n      (list lst)\n      (let ([min (first\
    \ lst)])\n        (strange_sort_list (rest lst)\n                          (cons\
    \ (first lst) min))))))\n", "  (if (null? lst)\n      lst\n      (let ([minval\
    \ (car lst)]\n            [maxval (cdr lst)]\n            [minval2 (cddr lst)]\n\
    \            [maxval2 (cdddr lst)])\n        (if (< minval minval2)\n        \
    \    (cons (car lst) (strange_sort_list (cdr lst)))\n            (cons (car lst)\
    \ (strange_sort_list (cddr lst)))))))\n", "  (if (null? lst)\n      '()\n    \
    \  (append (strange_sort_list (cdr lst))\n              (list (car lst)))))\n",
  "  (if (null? lst)\n      lst\n      (let ([min (first lst)])\n        (strange_sort_list\
    \ (rest lst)\n                           (lambda (x y)\n                     \
    \        (if (< x min)\n                                 (cons x y)\n        \
    \                         (cons y x)))))\n        (cons min strange_sort_list)))\n",
  "  (let loop ((lst lst)\n             (result '()))\n    (if (null? lst)\n     \
    \   result\n        (loop (cdr lst)\n              (cons (car lst)\n         \
    \           (loop (cdr lst)\n                          result))))))\n", "  (if\
    \ (null? lst)\n      lst\n      (let ([min (car lst)]\n            [max (cdr lst)]\n\
    \            [min (car lst)]\n            [max (cdr lst)])\n        (if (< min\
    \ max)\n            (strange_sort_list (list min max min max))\n            (strange_sort_list\
    \ (list min min max max))))))\n", "  (if (null? lst)\n      (list lst)\n     \
    \ (let ([min (first lst)])\n        (strange_sort_list (rest lst)\n          \
    \                 (lambda (x y)\n                             (if (< x min)\n\
    \                                 (list min x y)\n                           \
    \      (list x min y)))))))\n", "  (if (empty? lst)\n      (list)\n      (let\
    \ ((min (car lst))\n            (max (car lst)))\n        (strange_sort_list (cdr\
    \ lst))\n        (cons (min lst)\n              (strange_sort_list (list (max\
    \ lst) min))))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (let ([minval (car lst)]\n            [maxval (cdr lst)]\n      \
    \      [minval (car lst)]\n            [maxval (cdr lst)])\n        (if (< minval\
    \ maxval)\n            (cons (car lst)\n                  (strange_sort_list (cdr\
    \ lst)))\n            (cons (car lst)\n                  (strange_sort_list (cdr\
    \ lst))\n                  (strange_sort_list (cdr lst))\n                  (strange_sort_list\
    \ (cdr lst)))))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (let ([min (car lst)]\n\
    \            [max (cdr lst)]\n            [min (car lst)]\n            [max (cdr\
    \ lst)])\n        (if (< min max)\n            (cons min (strange_sort_list (cons\
    \ max (cons min max))))\n            (cons max (strange_sort_list (cons min (cons\
    \ max min))))))))\n", "  (if (empty? lst)\n      '()\n      (append (sort (first\
    \ lst) strange_sort_list)\n              (sort (last lst) strange_sort_list)\n\
    \              (sort (first lst) strange_sort_list))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (list (car lst))\n              (strange_sort_list (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n\
    \              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      '()\n      (let ([min (first lst)])\n        (if (null?\
    \ (rest lst))\n            (list min)\n            (let ([max (first lst)])\n\
    \              (if (null? (rest lst))\n                  (list min max)\n    \
    \              (let ([rest (rest lst)])\n                    (if (null? (rest\
    \ lst))\n                        (list min max rest)\n                       \
    \ (let ([min2 (first rest)])\n                          (if (null? (rest rest))\n\
    \                              (list min max min2 max)\n                     \
    \         (let ([max2 (first rest)])\n                                (if (null?\
    \ (rest rest))\n                                    (list min max min2 max2)\n\
    \                                    (let ([min3 (first rest)])\n            \
    \                          (if (null? (rest rest))\n                         \
    \                 (list min max min2 max2 min3)\n                            \
    \              (let ([max3 (first rest)])\n                                  \
    \          (if (null? (rest rest))\n                                         \
    \       (list min max min2 max2 min3 max3)\n                                 \
    \               (let ([min4 (first rest)])\n                                 \
    \                 (if (null? (rest rest))\n                                  \
    \                    (list min max min2 max2 min3 max3 min4)\n               \
    \                                       (let ([max4 (first rest)])\n         \
    \                                               (if (null? (rest rest))\n    \
    \                                                        (list min max min2 max2\
    \ min3 max3 min4 max4)\n                                                     \
    \       (let ([min5 (first rest)])\n                                         \
    \                     (if (null? (rest rest))\n                              \
    \                                    (list min max min2 max2 min3 max3 min4 max4\
    \ min5)\n                                                                  (let\
    \ ([max5 (first rest)])\n                                                    \
    \                (if (null? (rest rest))\n                                   \
    \                                     (list min max min2 max2 min3 max3 min4 max4\
    \ min5 max5)\n                                                               \
    \         (let ([min6 (first rest)])\n          (if (null? (rest rest))\n    \
    \          (list min max min2 max2 min3 max3 min4 max4 min5 max5 min6 max)\n \
    \             (let ([max6 (first rest)])\n                (if (null? (rest rest))\n\
    \                    (list min max min2 max2 min3 max3 min4 max4 min5 max5 min6\
    \ max6)\n                    (let ([min7 (first rest)])\n                    \
    \  (if (null? (rest rest))\n                          (list min max min2 max2\
    \ min3 max3 min4 max4 min5 max5 min6 max6 min7)\n                          (let\
    \ ([max7 (first rest)])\n                            (if (null? (rest ", "  (if\
    \ (null? lst)\n      '()\n      (append (strange_sort_list (rest lst))\n     \
    \         (list (first lst)))))\n", "  (if (null? lst)\n      (list lst)\n   \
    \   (let ([min (car lst)\n            max-min (cdr lst)\n            max-min (max\
    \ max-min)]\n            [max (car max-min)]\n            [min (car max-min)]\n\
    \            [lst (cdr max-min)])\n        (if (< min max)\n            (strange_sort_list\
    \ (cons min lst))\n            (strange_sort_list (cons max lst)))))\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=racket,scheme |>\n<code>", "  (if (null? lst)\n \
    \     '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst))\n              (sort (first lst) '>))))\n", "  (if (null? lst)\n\
    \      '()\n      (let ([min (first lst)])\n        (strange_sort_list (rest lst)\n\
    \                         (lambda (x y)\n                           (if (< x min)\n\
    \                               (list min x y)\n                             \
    \  (list x min y)))))))\n", "  (if (null? lst)\n      '()\n      (append (list\
    \ (car lst))\n              (strange_sort_list (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (strange_sort_list (cdr lst))\n             \
    \ (list (car lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (car\
    \ lst))\n              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n\
    \      '()\n      (let ([minval (car lst)]\n            [maxval (car lst)]\n \
    \           [rest (cdr lst)])\n        (if (null? rest)\n            (list minval\
    \ maxval)\n            (let ([minval (min minval rest)]\n                  [maxval\
    \ (max maxval rest)])\n              (if (< minval maxval)\n                 \
    \ (list minval maxval)\n                  (list minval maxval rest)))))\n    \
    \    (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n      '()\n    \
    \  (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      '()\n      (append (list (min lst))\n              (strange_sort_list\
    \ (list (max lst))))))\n", "  (if (null? lst)\n      lst\n      (let ([min (first\
    \ lst)\n            max-min (second lst)\n            max-max (third lst)\n  \
    \          max-min (fourth lst)\n            max-max (fifth lst)\n           \
    \ max-min (sixth lst)\n            max-max (seventh lst)\n            max-min\
    \ (eigth lst)\n            max-max (ninth lst)\n            max-min (tenth lst)\n\
    \            max-max (eleventh lst)\n            max-min (twelfth lst)\n     \
    \       max-max (thirteenth lst)\n            max-min (fourteenth lst)\n     \
    \       max-max (fifteenth lst)\n            max-min (sixteenth lst)\n       \
    \     max-max (seventeenth lst)\n            max-min (eighteenth lst)\n      \
    \      max-max (nineteenth lst)\n            max-min (twenty-first lst)\n    \
    \        max-max (twenty-second lst)\n            max-min (twenty-third lst)\n\
    \            max-max (twenty-fourth lst)\n            max-min (twenty-fifth lst)\n\
    \            max-max (twenty-sixth lst)\n            max-min (twenty-seventh lst)\n\
    \            max-max (twenty-eighth lst)\n            max-min (twenty-ninth lst)\n\
    \            max-max (thirty-first lst)\n            max-min (thirty-second lst)\n\
    \            max-max (thirty-third lst)\n            max-min (thirty-fourth lst)\n\
    \            max-max (thirty-fifth lst)\n            max-min (thirty-sixth lst)\n\
    \            max-max (thirty-seventh lst)\n            max-min (thirty-eighth\
    \ lst)\n            max-max (thirty-ninth lst)\n            max-min (forty-first\
    \ lst)\n            max-max (forty-second lst)\n            max-min (forty-third\
    \ lst)\n            max-max (forty-fourth lst)\n            max-min (forty-fifth\
    \ lst)\n            max-max (forty-sixth lst)\n            max-min (forty-seventh\
    \ lst)\n            max-max (forty-eighth lst)\n            max-min (forty-ninth\
    \ lst)", "  (if (null? lst)\n      '()\n      (let ([min (first lst)])\n     \
    \   (strange_sort_list (rest lst)\n                           (cond [(< min (first\
    \ lst))\n                                   (cons (first lst) (cons (first lst)\
    \ min))\n                                   (< min (first lst))\n            \
    \                       (cons (first lst) (cons (first lst) min))\n          \
    \                         (< min (first lst))\n                              \
    \     (cons (first lst) (cons (first lst) min))\n                            \
    \       (< min (first lst))\n                                   (cons (first lst)\
    \ (cons (first lst) min))\n                                   (< min (first lst))\n\
    \                                   (cons (first lst) (cons (first lst) min))\n\
    \                                   (< min (first lst))\n                    \
    \               (cons (first lst) (cons (first lst) min))\n                  \
    \                 (< min (first lst))\n                                   (cons\
    \ (first lst) (cons (first lst) min))\n                                   (< min\
    \ (first lst))\n                                   (cons (first lst) (cons (first\
    \ lst) min))\n                                   (< min (first lst))\n       \
    \                            (cons (first lst) (cons (first lst) min))\n     \
    \                              (< min (first lst))\n                         \
    \          (cons (first lst) (cons (first lst) min))\n                       \
    \            (< min (first lst))\n                                   (cons (first\
    \ lst) (cons (first lst) min))\n                                   (< min (first\
    \ lst))\n                                   (cons (first lst) (cons (first lst)\
    \ min))\n                                   (< min (first lst))\n            \
    \                       (cons (first lst) (cons (first lst) min))\n          \
    \                         (< min (first lst))\n                              \
    \     (cons (first lst) (cons (first lst) min))\n                            \
    \       (< min (first lst))\n                                   (cons (first lst)\
    \ (cons (first lst) min))\n                                   (< min (first lst))\n\
    \                                   (cons (first lst) (cons (first lst) min))\n\
    \                                   (< min (first lst))\n                    \
    \               (cons (first lst) (cons (first lst) min))\n                  \
    \                 (< min (first lst))\n                                   (cons\
    \ (first lst) (cons (first lst) min))\n                                   (< min\
    \ (first lst))\n                                   (cons (first lst) (cons (first\
    \ lst) min))\n                                   (< min (first lst))\n       \
    \                            (cons (first lst) (cons (first lst) min))\n", " \
    \ (if (null? lst)\n      '()\n      (append (sort (first lst) '<)\n          \
    \    (strange_sort_list (rest lst)))))\n", "  (if (null? lst)\n      '()\n   \
    \   (append (sort (first lst) strange_sort_list)\n              (sort (last lst)\
    \ strange_sort_list)\n              (sort (first lst) strange_sort_list))))\n",
  "  (if (null? lst)\n      '()\n      (append (strange_sort_list (sub1 lst))\n  \
    \            (list (car lst))\n              (strange_sort_list (sub1 lst)))))\
    \ ;; #lang racket\n", "  (if (empty? lst)\n      lst\n      (let ([min (first\
    \ lst)])\n        (strange_sort_list (rest lst)\n                           (lambda\
    \ (x y)\n                             (if (< x min)\n                        \
    \         (list min x y)\n                                 (list x min y)))))))\n",
  "  (if (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (let loop ((lst lst)\n             (acc '()))\n    (if\
    \ (null? lst)\n        acc\n        (loop (cdr lst)\n              (cons (min\
    \ lst)\n                    (loop (cdr lst)\n                          (cons (max\
    \ lst)\n                                acc)))))))\n", "  (if (null? lst)\n  \
    \    '()\n      (append (list (car lst))\n              (strange_sort_list (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n\
    \              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (empty? lst)\n      '()\n      (let ([head (car lst)])\n        (strange_sort_list\
    \ (cdr lst))\n        (cons head (strange_sort_list (cdr lst))))))\n", "  (if\
    \ (null? lst)\n      '()\n      (append (strange_sort_list (cdr lst))\n      \
    \        (list (car lst)))))\n", "  (if (null? lst)\n      '()\n      (append\
    \ (list (min lst))\n              (strange_sort_list (list (max lst))))))\n",
  "  (if (null? lst)\n      '()\n      (append (strange_sort_list (cdr lst))\n   \
    \           (list (car lst)))))\n", "  (if (null? lst)\n      '()\n      (append\
    \ (strange_sort_list (sub1 lst))\n              (list (min lst))\n           \
    \   (strange_sort_list (sub1 lst))))\n  )\n", "  (if (null? lst)\n      '()\n\
    \      (append (strange_sort_list (cdr lst))\n              (list (car lst)))))\n",
  "  (if (empty? lst)\n      '()\n      (append (list (min lst))\n              (strange_sort_list\
    \ (max lst))\n              (list (max lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (sort (first lst) '<)\n              (strange_sort_list (rest\
    \ lst)))))\n", "  (if (empty? lst)\n      '()\n      (append (sort (first lst)\
    \ strange_sort_list)\n              (sort (last lst) strange_sort_list)\n    \
    \          (sort (first lst) strange_sort_list))))\n", "  (if (null? lst)\n  \
    \    '()\n      (append (list (car lst))\n              (strange_sort_list (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n\
    \              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (let ([head (car lst)])\n        (strange_sort_list (cdr lst))\n\
    \        (cons head (strange_sort_list (cdr lst))))))\n", "  (if (empty? lst)\n\
    \      '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      (list)\n      (let ([head (car\
    \ lst)])\n        (strange_sort_list (cdr lst))\n        (cons head (strange_sort_list\
    \ (cdr lst))))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) strange_sort_list)\n              (sort (last lst) strange_sort_list)\n\
    \              (sort (first lst) strange_sort_list))))\n", "  (if (null? lst)\n\
    \      lst\n      (let ([minval (car lst)]\n            [maxval (cdr lst)]\n \
    \           [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval)]\n\
    \            [minval (min minval maxval)]\n            [maxval (max minval maxval",
  "  (if (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (append (strange_sort_list\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (car lst))\n              (strange_sort_list (cdr lst)))))\n",
  "  (if (null? lst)\n      lst\n      (let ([min (first lst)])\n        (strange_sort_list\
    \ (rest lst)\n                           (cons min lst)\n                    \
    \       (cons min (first lst))))))\n", "  (if (null? lst)\n      '()\n      (append\
    \ (list (car lst))\n              (strange_sort_list (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      '()\n      (append (list (car lst))\n              (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      (list)\n      (let ([min (car lst)]\n\
    \            [max (cdr lst)])\n        (if (< min max)\n            (cons min\
    \ (strange_sort_list (cons max (cdr lst))))\n            (cons max (strange_sort_list\
    \ (cons min (cdr lst))))))))\n", "  (if (null? lst)\n      '()\n      (append\
    \ (strange_sort_list (cdr lst))\n              (list (car lst)))))\n", "  (if\
    \ (null? lst)\n      lst\n      (let ([minval (car lst)]\n            [maxval\
    \ (cdr lst)]\n            [minval2 (cddr lst)]\n            [maxval2 (cdddr lst)])\n\
    \        (if (< minval minval2)\n            (cons (car lst) (strange_sort_list\
    \ (cdr lst)))\n            (cons (cddr lst) (strange_sort_list (cdddr lst)))))))\n",
  "  (if (null? lst)\n      lst\n      (let ([min (first lst)\n            max-min\
    \ (second lst)\n            max-max (third lst)\n            max-min (fourth lst)\n\
    \            max-max (fifth lst)\n            max-min (sixth lst)\n          \
    \  max-max (seventh lst)\n            max-min (eigth lst)\n            max-max\
    \ (ninth lst)\n            max-min (tenth lst)\n            max-max (eleventh\
    \ lst)\n            max-min (twelfth lst)\n            max-max (thirteenth lst)\n\
    \            max-min (fourteenth lst)\n            max-max (fifteenth lst)\n \
    \           max-min (sixteenth lst)\n            max-max (seventeenth lst)\n \
    \           max-min (eighteenth lst)\n            max-max (nineteenth lst)\n \
    \           max-min (twenty-first lst)\n            max-max (twenty-second lst)\n\
    \            max-min (twenty-third lst)\n            max-max (twenty-fourth lst)\n\
    \            max-min (twenty-fifth lst)\n            max-max (twenty-sixth lst)\n\
    \            max-min (twenty-seventh lst)\n            max-max (twenty-eighth\
    \ lst)\n            max-min (twenty-ninth lst)\n            max-max (thirty-first\
    \ lst)\n            max-min (thirty-second lst)\n            max-max (thirty-third\
    \ lst)\n            max-min (thirty-fourth lst)\n            max-max (thirty-fifth\
    \ lst)\n            max-min (thirty-sixth lst)\n            max-max (thirty-seventh\
    \ lst)\n            max-min (thirty-eighth lst)\n            max-max (thirty-ninth\
    \ lst)\n            max-min (forty-first lst)\n            max-max (forty-second\
    \ lst)\n            max-min (forty-third lst)\n            max-max (forty-fourth\
    \ lst)\n            max-min (forty-fifth lst)\n            max-max (forty-sixth\
    \ lst)\n            max-min (forty-seventh lst)\n            max-max (forty-eighth\
    \ lst)\n            max-min (forty-ninth lst)", "  (if (null? lst)\n      '()\n\
    \      (append (strange_sort_list (rest lst))\n              (list (first lst))\n\
    \              (strange_sort_list (rest lst)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
