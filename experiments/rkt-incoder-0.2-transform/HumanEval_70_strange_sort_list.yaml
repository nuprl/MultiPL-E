name: HumanEval_70_strange_sort_list
language: rkt
prompt: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
  ;; Strange sorting, is when you start with the minimum value,\n;; then maximum of\
  \ the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
  \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
  ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
  \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
  \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1))\
  \ (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5\
  \ 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
  \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
  \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
  \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      '()\n      (append (sort (first lst) '<)\n\
    \              (strange_sort_list (rest lst))\n              (sort (first lst)\
    \ '>))))\n", "  (if (null? lst)\n      lst\n      (let ([min\n             (min\
    \ (car lst))\n             max\n             (max (cdr lst))\n             min\n\
    \             (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (cdr lst))\n             min\n             (min (cdr lst))\n        \
    \     max\n             (max (cdr lst))\n             min\n             (min (cdr\
    \ lst))\n             max\n             (max (cdr lst))\n             min\n  \
    \           (min (cdr lst))\n             max\n             (max (cdr lst))\n\
    \             min\n             (min (cdr lst))\n             max\n          \
    \   (max (", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n \
    \             (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n      '()\n\
    \      (let ((min (car lst))\n            (max (car lst)))\n        (if (< (car\
    \ lst) min)\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst)))\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst)))))\n        (if\
    \ (> (car lst) max)\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst)))\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst))\n              \
    \    (strange_sort_list (cdr lst)))))\n        (if (< (car lst) min)\n       \
    \     (cons (car lst)\n                  (strange_sort_list (cdr lst)))\n    \
    \        (cons (car lst)\n                  (strange_sort_list (cdr lst))\n  \
    \                (strange_sort_list (cdr lst))\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst)))))\n        (if\
    \ (> (car lst) max)\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst)))\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst))\n              \
    \    (strange_sort_list (cdr lst))\n                  (strange_sort_list (cdr\
    \ lst))\n                  (strange_sort_list (cdr lst)))))\n        (if (< (car\
    \ lst) min)\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst)))\n            (cons (car lst)\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst))\n              \
    \    (strange_sort_list (cdr lst))\n                  (strange_sort_list (cdr\
    \ lst))\n                  (strange_sort_list (cdr lst))\n                  (strange_sort_list\
    \ (cdr lst)))))\n        (if (> (car lst) max)\n            (cons (car lst)\n\
    \                  (strange_sort_list (cdr lst)))\n            (cons (car lst)\n\
    \                  (strange_sort_list (cdr lst))\n                  (strange_sort_list\
    \ (cdr lst))\n                  (strange_sort_list (cdr lst))\n              \
    \    (strange_sort_list (cdr lst))\n", "  (if (null? lst)\n      '()\n      (append\
    \ (sort (first lst) '<)\n              (strange_sort_list (rest lst)))))\n", " \
    \ (if (null? lst)\n      '()\n      (append (sort (first lst) strange_sort_list)\n\
    \              (sort (second lst) strange_sort_list)\n              (sort (third\
    \ lst) strange_sort_list)\n              (sort (fourth lst) strange_sort_list)\n\
    \              (sort (fifth lst) strange_sort_list)\n              (sort (sixth\
    \ lst) strange_sort_list)\n              (sort (seventh lst) strange_sort_list)\n\
    \              (sort (eighth lst) strange_sort_list)\n              (sort (ninth\
    \ lst) strange_sort_list)\n              (sort (tenth lst) strange_sort_list)\n\
    \              (sort (eleventh lst) strange_sort_list)\n              (sort (twelfth\
    \ lst) strange_sort_list)\n              (sort (thirteenth lst) strange_sort_list)\n\
    \              (sort (fourteenth lst) strange_sort_list)\n              (sort\
    \ (fifteenth lst) strange_sort_list)\n              (sort (sixteenth lst) strange_sort_list)\n\
    \              (sort (seventeenth lst) strange_sort_list)\n              (sort\
    \ (eighteenth lst) strange_sort_list)\n              (sort (nineteenth lst) strange_sort_list)\n\
    \              (sort (ten lst) strange_sort_list)\n              (sort (eleven\
    \ lst) strange_sort_list)\n              (sort (twelve lst) strange_sort_list)\n\
    \              (sort (thirteen lst) strange_sort_list)\n              (sort (fourteen\
    \ lst) strange_sort_list)\n              (sort (fifteen lst) strange_sort_list)\n\
    \              (sort (sixteen lst) strange_sort_list)\n              (sort (seventeen\
    \ lst) strange_sort_list)\n              (sort (eighteen lst) strange_sort_list)\n\
    \              (sort (nineteen lst) strange_sort_list)\n              (sort (ten\
    \ lst) strange_sort_list)\n              (sort (eleven lst) strange_sort_list)\n\
    \              (sort (twelve lst) strange_sort_list)\n              (sort (thirteen\
    \ lst) strange_sort_list)\n              (sort (fourteen lst) strange_sort_list)\n\
    \              (sort (fifte", "  (if (null? lst)\n      '()\n      (append (sort\
    \ (first lst) (lambda (x y) (< (first lst) y))\n                       (reverse\
    \ (sort (second lst) (lambda (x y) (< (second lst) y))\n                     \
    \                   (reverse (sort (third lst) (lambda (x y) (< (third lst) y))\n\
    \                                                        (reverse (sort (fourth\
    \ lst) (lambda (x y) (< (fourth lst) y))\n                                   \
    \                                     (reverse (sort (fifth lst) (lambda (x y)\
    \ (< (fifth lst) y))\n                                                       \
    \                                   (reverse (sort (sixth lst) (lambda (x y) (<\
    \ (sixth lst) y))\n                                                          \
    \                                  (reverse (sort (seventh lst) (lambda (x y)\
    \ (< (seventh lst) y))\n                                                     \
    \                                         (reverse (sort (eigth lst) (lambda (x\
    \ y) (< (eigth lst) y))\n                                                    \
    \                                            (reverse (sort (ninth lst) (lambda\
    \ (x y) (< (ninth lst) y))\n                                                 \
    \                                                 (reverse (sort (tenth lst) (lambda\
    \ (x y) (< (tenth lst) y))\n                                                 \
    \                                                   (reverse (sort (eleventh lst)\
    \ (lambda (x y) (< (eleventh lst) y))\n                                      \
    \                                                                (reverse (sort\
    \ (twelfth lst) (lambda (x y) (< (twelfth lst) y))\n                         \
    \                                                                            \
    \   (reverse (sort (thirteenth lst) (lambda (x y) (< (thirteenth lst) y))\n  \
    \                                                                            \
    \                            (reverse (sort (fourteenth lst) (lambda (x y) (<\
    \ (fourteenth lst) y))\n                                                     \
    \                                                       (sort (fifteenth lst)\
    \ (lambda (x y) (< (fifteenth lst) y))\n                                     \
    \                                                                         (reverse\
    \ (sort (sixteenth lst) (lambda (x y) (< (sixteenth lst) y))\n               \
    \                                                                            \
    \                     (reverse (sort (seventeenth lst) (lambda (x y) (< (seventeenth\
    \ lst) y))\n                                                                 \
    \                                                 (reverse (sort (eighteenth lst)\
    \ (lambda (x y) (< (eighteenth lst) y))\n                                    \
    \                                                                            \
    \    (reverse (sort (nineteenth lst) (lambda (x y) (< (nineteenth lst) y))\n \
    \                                                                            \
    \                                         (reverse (sort (twentieth lst) (lambda\
    \ (x y) (< (twentieth lst) y))\n                                             \
    \                                                                           (reverse\
    \ (sort (thirtieth lst) (lambda (x y) (< (thirtieth lst) y))", "  (if (null? lst)\n\
    \      '()\n      (append (sort lst)\n               (sort (sort lst))\n     \
    \          (sort (sort lst))))) ;; #lang racket\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (min lst))\n              (strange_sort_list (list\
    \ (max lst))))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      (list)\n      (let ([minval (car\
    \ lst)]\n            [maxval (car lst)]\n            [rest (cdr lst)])\n     \
    \   (if (null? rest)\n            (list minval maxval)\n            (let ([minval\
    \ (car rest)]\n                  [maxval (car rest)]\n                  [rest\
    \ (cdr rest)])\n              (if (< minval maxval)\n                  (list minval\
    \ maxval)\n                  (list minval maxval rest)))))\n        (strange_sort_list\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (car lst))\n\
    \              (strange_sort_list (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ (list lst)\n      (let ([head (car lst)])\n        (strange_sort_list (cdr lst))\n\
    \        (cons head (strange_sort_list (cdr lst))))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (sort (first lst) '<)\n              (strange_sort_list\
    \ (rest lst)))))\n", "  (if (null? lst)\n      '()\n      (append (sort (first\
    \ lst) '<)\n              (strange_sort_list (rest lst)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (strange_sort_list (cdr lst))\n             \
    \ (list (car lst)))))\n", "  (if (null? lst)\n      '()\n      (append (list (min\
    \ lst))\n              (strange_sort_list (list (max lst))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
