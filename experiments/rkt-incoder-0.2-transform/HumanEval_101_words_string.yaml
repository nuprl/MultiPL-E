name: HumanEval_101_words_string
language: rkt
prompt: "#lang racket\n\n;; You will be given a string of words separated by commas\
  \ or spaces. Your task is\n;; to split the string into words and return an array\
  \ of the words.\n;; For example:\n;; >>> (words_string \"Hi, my name is John\")\n\
  ;; (list \"Hi\" \"my\" \"name\" \"is\" \"John\")\n;; >>> (words_string \"One, two,\
  \ three, four, five, six\")\n;; (list \"One\" \"two\" \"three\" \"four\" \"five\"\
  \ \"six\")\n(define (words_string s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_string))\n\
  \    (check-equal? (candidate \"Hi, my name is John\") (list \"Hi\" \"my\" \"name\"\
  \ \"is\" \"John\"))\n    (check-equal? (candidate \"One, two, three, four, five,\
  \ six\") (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\"))\n    (check-equal?\
  \ (candidate \"Hi, my name\") (list \"Hi\" \"my\" \"name\"))\n    (check-equal?\
  \ (candidate \"One,, two, three, four, five, six,\") (list \"One\" \"two\" \"three\"\
  \ \"four\" \"five\" \"six\"))\n    (check-equal? (candidate \"\") (list ))\n   \
  \ (check-equal? (candidate \"ahmed     , gamal\") (list \"ahmed\" \"gamal\"))\n\
  ))\n\n(test-humaneval)"
completions: ["  (let loop ((s s)\n             (acc '()))\n    (if (string-empty?\
    \ s)\n        (reverse acc)\n        (loop (substring s 0 (string-length s))\n\
    \              (cons (substring s 0 (string-length s)) acc)))))\n", "  (let ([words\
    \ (string-split s #\",\" #\" \")])\n    (map list words)))\n", "  (let loop ((s\
    \ s)\n             (acc '()))\n    (cond\n      [(empty? s) (list acc)]\n    \
    \  [(char=? (first s) ',') (loop (rest s) (cons acc (first s)))]\n      [(char=?\
    \ (first s) '-) (loop (rest s) (cons acc (first s)))]\n      [else (loop (rest\
    \ s) (cons acc (first s)))]))))\n", "  (let loop ((i 0) (words ()))\n    (if (string-empty?\
    \ s)\n        (reverse words)\n        (loop (+ i 1) (cons (substring s 0 i) words)))))\n",
  "  (let loop ((s s)\n             (acc '()))\n    (cond\n      [(empty? s) (list\
    \ acc)]\n      [else\n       (loop (rest s)\n             (cons (first s) acc))]))))\n",
  "  (let ([words (string-split s #\",\" #\" \")])\n    (list words)))\n", "  (let\
    \ loop ((s s)\n             (acc '()))\n    (if (empty? s)\n        (reverse acc)\n\
    \        (loop (rest s)\n              (cons (first s) acc)))))\n", "  (let loop\
    \ ((s s)\n             (acc '()))\n    (if (empty? s)\n        (reverse acc)\n\
    \        (loop (rest s)\n              (cons (first s) acc)))))\n", "  (let loop\
    \ ((s s)\n             (acc '()))\n    (cond\n      [(empty? s) (list acc)]\n\
    \      [(char=? (first s) #\\, #\\s)\n       (loop (rest s)\n             (cons\
    \ (first s) acc))]\n      [else\n       (loop (rest s)\n             (cons (first\
    \ s) acc))])))\n", "  (let ([words (string-split s #\",\" #\" \")])\n    (map\
    \ list words words)))\n", "  (let loop ((i 0)\n             (words ()))\n    (if\
    \ (string-empty? s)\n        (reverse words)\n        (loop (+ i 1)\n        \
    \      (cons (substring s 0 i)\n                    (loop (+ i 1)\n          \
    \                (cons (substring s i (string-length s)))))))))\n", "  (let loop\
    \ ((s s)\n             (acc '()))\n    (if (string-empty? s)\n        (reverse\
    \ acc)\n        (loop (substring s 0 (string-length s))\n              (cons (substring\
    \ s 0 (string-length s)) acc)))))\n", "  (let ([words (string-split s #\",\" #\"\
    \ \")])\n    (if (null? words)\n        '()\n        (cons (first words) (words_string\
    \ (subseq words 2))))))\n", "  (let ([words (string-split s #\",\" #\" \")])\n\
    \    (map list words words)))\n", "  (let loop ((s s)\n             (acc '()))\n\
    \    (cond\n      [(empty? s) (list acc)]\n      [(char=? (first s) ',') (loop\
    \ (rest s) (cons (first s) acc))]\n      [else (loop (rest s) (cons (first s)\
    \ acc))])))\n", "  (let ([chars (string->chars s)])\n    (if (null? chars)\n \
    \       '()\n        (append (map string->string (rest chars))\n             \
    \   (map string->string (first chars))))))\n", "  (let ([words (string-split s\
    \ #\",\" #\" \")])\n    (map list words words)))\n", "  (let loop ((s s)\n   \
    \          (words ()))\n    (if (empty? s)\n        (reverse words)\n        (loop\
    \ (rest s)\n              (cons (first s)\n                    (loop (rest s)\n\
    \                          (cons (first s)\n                                words))))))\n",
  "  (let ([chars (string->chars s)])\n    (let loop ([chars (string->chars s)])\n\
    \      (if (null? chars)\n          (list '())\n          (let ([char (car chars)])\n\
    \            (if (char=? #\\, char)\n                (loop (cdr chars))\n    \
    \            (loop (cdr chars #\\, char))))))))\n", "  (let loop ((s s)\n    \
    \         (acc '()))\n    (if (string-empty? s)\n        (reverse acc)\n     \
    \   (loop (substring s 0 (string-length s))\n              (cons (substring s\
    \ 0 (string-length s)) acc)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
