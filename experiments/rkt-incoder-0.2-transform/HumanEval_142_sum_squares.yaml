name: HumanEval_142_sum_squares
language: rkt
prompt: "#lang racket\n\n;; \"\n;; This function will take a list of integers. For\
  \ all entries in the list, the function shall square the integer entry if its index\
  \ is a \n;; multiple of 3 and will cube the integer entry if its index is a multiple\
  \ of 4 and not a multiple of 3. The function will not \n;; change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n;; Examples:\n;; >>> lst\n;; (list 1 2 3)\n;; >>> lst\n\
  ;; (list )\n;; >>> lst\n;; (list -1 -5 2 -1 -5)\n(define (sum_squares lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
  \    (check-equal? (candidate (list 1 2 3)) 6)\n    (check-equal? (candidate (list\
  \ 1 4 9)) 14)\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
  \ (list 1 1 1 1 1 1 1 1 1)) 9)\n    (check-equal? (candidate (list -1 -1 -1 -1 -1\
  \ -1 -1 -1 -1)) -3)\n    (check-equal? (candidate (list 0)) 0)\n    (check-equal?\
  \ (candidate (list -1 -5 2 -1 -5)) -126)\n    (check-equal? (candidate (list -56\
  \ -99 1 0 -2)) 3030)\n    (check-equal? (candidate (list -1 0 0 0 0 0 0 0 -1)) 0)\n\
  \    (check-equal? (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35\
  \ 37)) -14196)\n    (check-equal? (candidate (list -1 -3 17 -1 -15 13 -1 14 -14\
  \ -12 -5 14 -14 6 13 11 16 16 4 10)) -1448)\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+\
    \ (car lst) (sum_squares (cdr lst)))]\n    [else (+ (* (car lst) (* 3 4)) (sum_squares\
    \ (cdr lst)))]))\n", "  (define (square x)\n    (* x x))\n  (define (cube x)\n\
    \    (* x x x))\n  (define (mod x y)\n    (if (= y 0)\n        0\n        (modulo\
    \ x y)))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-square-mod\
    \ x y z)\n    (+ (sum-mod x y z) (square z)))\n  (define (sum-cube-mod x y z)\n\
    \    (+ (sum-mod x y z) (cube z)))\n  (define (sum-mod x y z)\n    (+ (mod x y)\
    \ z))\n  (define (sum-square-mod x y z)\n    (+ (sum-mod x y z) (square z)))\n\
    \  (define (sum-cube-mod x y z)\n    (+ (sum-mod x y z) (cube z)))\n  (define\
    \ (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-square-mod x y z)\n  \
    \  (+ (sum-mod x y z) (square z)))\n  (define (sum-cube-mod x y z)\n    (+ (sum-mod\
    \ x y z) (cube z)))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define\
    \ (sum-square-mod x y z)\n    (+ (sum-mod x y z) (square z)))\n  (define (sum-cube-mod\
    \ x y z)\n    (+ (sum-mod x y z) (cube z)))\n  (define (sum-mod x y z)\n    (+\
    \ (mod x y) z))\n  (define (sum-square-mod x y z)\n    (+ (sum-mod x y z) (square\
    \ z)))\n  (define (sum-cube-mod x y z)\n    (+ (sum-mod x y z) (cube z)))\n  (define\
    \ (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-square-mod x y z)\n  \
    \  (+ (sum-mod x y z) (square z)))\n  (define (sum-cube-mod x y z)\n    (+ (sum-mod\
    \ x y z) (cube z)))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define\
    \ (sum-square-mod x y z)\n    (+ (sum-mod x y z) (square z)))\n  (define (sum-cube-mod\
    \ x y z)\n    (+ (sum", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n\
    \         (sum-squares (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(=\
    \ (modulo lst 3) 0) (* lst lst)]\n    [(= (modulo lst 4) 0) (* lst lst)]\n   \
    \ [else (+ lst lst)]))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\
    \ (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst\
    \ (car lst)) (sum-cubes (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* (car lst) (car lst)) (sum-squares (cdr lst)))))\n", "  (cond\n  \
    \  [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(= (modulo lst\
    \ 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n", "  (define (helper\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (helper (cdr lst) (+ acc\
    \ (* (car lst) (car lst))))))\n  (helper lst 0))\n", "  (if (null? lst)\n    \
    \  0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (* car lst) (sum_squares\
    \ (cdr lst)))]\n    [else (+ (* car lst) (sum_squares (cdr lst)))]))\n", "  (define\
    \ (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (car lst))\
    \ (helper (cdr lst) (+ acc (* car lst)))]\n      [(odd? (car lst)) (helper (cdr\
    \ lst) (+ acc (* car lst)))]\n      [else (helper (cdr lst) (+ acc (* car lst)))]))\n\
    \  (helper lst 0))\n", "  (define (square x)\n    (* x x))\n  (define (cube x)\n\
    \    (* x x x))\n  (define (mod x y)\n    (if (= y 0)\n        0\n        (modulo\
    \ x y)))\n  (define (is-multiple-of-3 x)\n    (= (mod x 3) 0))\n  (define (is-multiple-of-4\
    \ x)\n    (= (mod x 4) 0))\n  (define (is-multiple-of-5 x)\n    (= (mod x 5) 0))\n\
    \  (define (is-multiple-of-6 x)\n    (= (mod x 6) 0))\n  (define (is-multiple-of-7\
    \ x)\n    (= (mod x 7) 0))\n  (define (is-multiple-of-8 x)\n    (= (mod x 8) 0))\n\
    \  (define (is-multiple-of-9 x)\n    (= (mod x 9) 0))\n  (define (is-multiple-of-10\
    \ x)\n    (= (mod x 10) 0))\n  (define (is-multiple-of-11 x)\n    (= (mod x 11)\
    \ 0))\n  (define (is-multiple-of-12 x)\n    (= (mod x 12) 0))\n  (define (is-multiple-of-13\
    \ x)\n    (= (mod x 13) 0))\n  (define (is-multiple-of-14 x)\n    (= (mod x 14)\
    \ 0))\n  (define (is-multiple-of-15 x)\n    (= (mod x 15) 0))\n  (define (is-multiple-of-16\
    \ x)\n    (= (mod x 16) 0))\n  (define (is-multiple-of-17 x)\n    (= (mod x 17)\
    \ 0))\n  (define (is-multiple-of-18 x)\n    (= (mod x 18) 0))\n  (define (is-multiple-of-19\
    \ x)\n    (= (mod x 19) 0))\n  (define (is-multiple-of-20 x)\n    (= (mod x 20)\
    \ 0))\n  (define (is-multiple-of-21 x)\n    (= (mod x 21) 0))\n  (define (is-multiple-of-22\
    \ x)\n    (= (mod x 22) 0))\n  (define (is-multiple-of-23 x)\n    (= (mod x 23)\
    \ 0))\n  (define (is-multiple-of-24 x)\n    (= (mod x 24) 0))\n  (define (is-multiple-of-25\
    \ x)\n    (= (mod x 25) 0))\n  (define (is-multiple-of-26 x)\n    (= (mod x 26)\
    \ 0))\n  (define (is-multiple-of-27 x)\n    (= (mod x 27) 0))\n  (define (is-multiple-of-28\
    \ x)\n    (= (mod x 28) 0))\n  (define (is-", "  (if (null? lst)\n      0\n  \
    \    (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-squares (cdr lst)))))\n",
  "  (define (square i)\n    (* i i))\n  (define (cube i)\n    (* i i i))\n  (define\
    \ (mod i m)\n    (if (= m 0)\n        0\n        (modulo i m)))\n  (define (sum-mod\
    \ lst m)\n    (define (sum-mod lst m)\n      (define (sum-mod lst m)\n       \
    \ (define (sum-mod lst m)\n          (define (sum-mod lst m)\n            (define\
    \ (sum-mod lst m)\n              (define (sum-mod lst m)\n                (define\
    \ (sum-mod lst m)\n                  (define (sum-mod lst m)\n               \
    \     (define (sum-mod lst m)\n                      (define (sum-mod lst m)\n\
    \                        (define (sum-mod lst m)\n                          (define\
    \ (sum-mod lst m)\n                            (define (sum-mod lst m)\n     \
    \                         (define (sum-mod lst m)\n                          \
    \      (define (sum-mod lst m)\n                                  (define (sum-mod\
    \ lst m)\n                                    (define (sum-mod lst m)\n      \
    \                                (define (sum-mod lst m)\n                   \
    \                     (define (sum-mod lst m)\n                              \
    \            (define (sum-mod lst m)\n                                       \
    \     (define (sum-mod lst m)\n                                              (define\
    \ (sum-mod lst m)\n                                                (define (sum-mod\
    \ lst m)\n                                                  (define (sum-mod lst\
    \ m)\n                                                    (define (sum-mod lst\
    \ m)\n                                                      (define (sum-mod lst\
    \ m)\n                                                        (define (sum-mod\
    \ lst m)\n                                                          (define (sum-mod\
    \ lst m)\n                                                            (define\
    \ (sum-mod lst m)\n                                                          \
    \    (define (sum-mod lst m)\n                                               \
    \                 (define (sum-mod lst m)\n                                  \
    \                                (define (sum-mod lst m)\n                   \
    \                                                 (define (sum-mod lst m)\n  \
    \                                                                    (define (sum-mod\
    \ lst m)\n                                                                   \
    \     (define (sum-mod lst m)\n                                              \
    \                            (define (sum-mod lst m)\n                       \
    \                                                     (define (sum-mod lst m)\n\
    \                                                                            \
    \  (define (sum-mod lst m)\n                                                 \
    \                               (define (sum-mod lst m)\n                    \
    \                                                              (define (sum-mod\
    \ lst m)\n                                                                   \
    \                 (define (sum-mod lst m)\n                                  \
    \                                                    (define (sum", "  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (* car lst) (sum_squares (cdr\
    \ lst)))]\n    [else (+ (* car lst) (sum_squares (cdr lst)))]))\n", "  (define\
    \ (square x)\n    (* x x))\n  (define (cube x)\n    (* x x x))\n  (define (mod\
    \ x y)\n    (if (= y 0)\n        0\n        (modulo x y)))\n  (define (sum-mod\
    \ x y z)\n    (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod x y z)\n  \
    \  (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x\
    \ y)\n       (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x y)\n      \
    \ (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x y)\n       (mod x z)))\n\
    \  (define (sum-mod x y z)\n    (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod\
    \ x y z)\n    (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod x y z)\n  \
    \  (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x\
    \ y)\n       (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x y)\n      \
    \ (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x y)\n       (mod x z)))\n\
    \  (define (sum-mod x y z)\n    (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod\
    \ x y z)\n    (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod x y z)\n  \
    \  (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x\
    \ y)\n       (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x y)\n      \
    \ (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x y)\n       (mod x z)))\n\
    \  (define (sum-mod x y z)\n    (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod\
    \ x y z)\n    (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod x y z)\n  \
    \  (+ (mod x y)\n       (mod x z)))\n  (define (sum-mod x y z)\n    (+ (mod x\
    \ y)\n       (mod x z)))\n  (define (", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(cons? lst) (+ (* (car lst) (car lst)) (sum_squares (cdr lst)))]\n\
    \    [else (+ (* (car lst) (car lst)) (sum_squares (cdr lst)))]))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(=\
    \ (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (square (car lst)) (sum-squares (cdr lst)))))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(= (modulo\
    \ lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n", "  (if (null? lst)\n  \
    \    0\n      (+ (square (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0)\
    \ (* lst lst)]\n    [(= (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr\
    \ lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst\
    \ lst)]\n    [(= (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (define (helper lst acc)\n    (cond ((null? lst) acc)\n          ((even? (car\
    \ lst)) (helper (cdr lst) (* acc (car lst))))\n          ((odd? (car lst)) (helper\
    \ (cdr lst) (* acc (* 3 car lst))))\n          (else (helper (cdr lst) (+ acc\
    \ (* 4 car lst))))))\n  (helper lst 0))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(=\
    \ (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(even? (first lst)) (+ (first lst) (sum_squares (rest lst)))]\n\
    \    [else (+ (first lst) (sum_squares (rest lst)))]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (square (car lst)) (sum_squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-cubes\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* lst (car lst))\n         (sum-cubes (cdr lst)))))\n", "  (define\
    \ (square x)\n    (* x x))\n  (define (cube x)\n    (* x x x))\n  (define (mod\
    \ x y)\n    (if (= y 0)\n        0\n        (modulo x y)))\n  (define (mod x y\
    \ z)\n    (if (= y 0)\n        0\n        (modulo x y z)))\n  (define (mod x y\
    \ z w)\n    (if (= y 0)\n        0\n        (modulo x y z w)))\n  (define (mod\
    \ x y z w x)\n    (if (= y 0)\n        0\n        (modulo x y z w x)))\n  (define\
    \ (mod x y z w x y)\n    (if (= y 0)\n        0\n        (modulo x y z w x y)))\n\
    \  (define (mod x y z w x y z)\n    (if (= y 0)\n        0\n        (modulo x\
    \ y z w x y z)))\n  (define (mod x y z w x y z w)\n    (if (= y 0)\n        0\n\
    \        (modulo x y z w x y z w)))\n  (define (mod x y z w x y z w x)\n    (if\
    \ (= y 0)\n        0\n        (modulo x y z w x y z w x)))\n  (define (mod x y\
    \ z w x y z w x y)\n    (if (= y 0)\n        0\n        (modulo x y z w x y z\
    \ w x y)))\n  (define (mod x y z w x y z w x y z)\n    (if (= y 0)\n        0\n\
    \        (modulo x y z w x y z w x y z)))\n  (define (mod x y z w x y z w x y\
    \ z w)\n    (if (= y 0)\n        0\n        (modulo x y z w x y z w x y z w)))\n\
    \  (define (mod x y z w x y z w x y z w x)\n    (if (= y 0)\n        0\n     \
    \   (modulo x y z w x y z w x y z w x)))\n  (define (mod x y z w x y z w x y z\
    \ w x y)\n    (if (= y 0)\n        0\n        (modulo x y z w x y z w x y z w\
    \ x y)))\n  (define (mod x y z w x y z w x y z w x y z)\n    (if (= y 0)\n   \
    \     0\n        (modulo x ", "  (if (null? lst)\n      0\n      (+ (* (car lst)\
    \ (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst))\
    \ (sum-squares (cdr lst)))))\n", "  (define (helper lst acc)\n    (cond\n    \
    \  [(empty? lst) acc]\n      [(even? (first lst)) (helper (rest lst) (+ acc (*\
    \ lst (first lst))))]\n      [(odd? (first lst)) (helper (rest lst) (+ acc (*\
    \ lst (first lst))))]\n      [else (helper (rest lst) (+ acc (* lst (first lst))))]))\n\
    \  (helper lst 0))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst) (car\
    \ lst)) (sum-cubes (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (*\
    \ lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(even? (car lst)) (+ (car lst) (sum_squares (cdr lst)))]\n   \
    \ [else (+ (* 3 (car lst)) (sum_squares (cdr lst)))]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-cubes\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n\
    \         (sum-cubes (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (*\
    \ lst (car lst)) (sum-squares (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(= (modulo lst 3) 0) (* lst lst)]\n    [(= (modulo lst 4) 0) (* lst lst)]\n\
    \    [else (+ lst lst)]))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car\
    \ lst))\n         (sum-cubes (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(= (modulo lst 3) 0) (* lst lst)]\n    [(= (modulo lst 4) 0) (* lst lst)]\n\
    \    [else (+ lst lst)]))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car\
    \ lst))\n         (sum-cubes (cdr lst)))))\n", "  (if (null? lst)\n      0\n \
    \     (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (define (helper lst\
    \ acc)\n    (cond\n      [(empty? lst) acc]\n      [(= (modulo lst 3) 0) (helper\
    \ (rest lst) (+ acc (* lst lst)))]\n      [(= (modulo lst 4) 0) (helper (rest\
    \ lst) (+ acc (* lst lst)))]\n      [else (helper (rest lst) (+ acc (* lst lst)))]))\n\
    \  (helper lst 0))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\
    \ (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst\
    \ (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (square (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n \
    \     0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n     \
    \    (sum-cubes lst))))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst)\
    \ (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (square (car lst)) (sum-squares (cdr lst)))))\n",
  "  (define (square x)\n    (* x x))\n  (define (cube x)\n    (* x x x))\n  (define\
    \ (mod x y)\n    (if (= y 0)\n        0\n        (modulo x y)))\n  (define (sum-mod\
    \ x y z)\n    (if (= y 0)\n        (+ x z)\n        (sum-mod x (mod x y) z)))\n\
    \  (define (sum-mod x y z)\n    (if (= y 0)\n        (+ x z)\n        (sum-mod\
    \ x (mod x y) z)))\n  (define (sum-mod x y z)\n    (if (= y 0)\n        (+ x z)\n\
    \        (sum-mod x (mod x y) z)))\n  (define (sum-mod x y z)\n    (if (= y 0)\n\
    \        (+ x z)\n        (sum-mod x (mod x y) z)))\n  (define (sum-mod x y z)\n\
    \    (if (= y 0)\n        (+ x z)\n        (sum-mod x (mod x y) z)))\n  (define\
    \ (sum-mod x y z)\n    (if (= y 0)\n        (+ x z)\n        (sum-mod x (mod x\
    \ y) z)))\n  (define (sum-mod x y z)\n    (if (= y 0)\n        (+ x z)\n     \
    \   (sum-mod x (mod x y) z)))\n  (define (sum-mod x y z)\n    (if (= y 0)\n  \
    \      (+ x z)\n        (sum-mod x (mod x y) z)))\n  (define (sum-mod x y z)\n\
    \    (if (= y 0)\n        (+ x z)\n        (sum-mod x (mod x y) z)))\n  (define\
    \ (sum-mod x y z)\n    (if (= y 0)\n        (+ x z)\n        (sum-mod x (mod x\
    \ y) z)))\n  (define (sum-mod x y z)\n    (if (= y 0)\n        (+ x z)\n     \
    \   (sum-mod x (mod x y) z)))\n  (define (sum-mod x y z)\n    (if (= y 0)\n  \
    \      (+ x z)\n        (sum-mod x (mod x y) z)))\n  (define (sum-mod x y z)\n\
    \    (if (= y 0)\n        (+ x z)\n        (sum-mod x (mod x y) z)))\n  (define\
    \ (sum-mod x y z)\n    (if (= y 0)\n        (+ x z)\n        (sum-mod x (mod x\
    \ y) z)))\n  (define (", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n\
    \         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst))\n         (sum-cubes (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* (car lst) (car lst)) (sum-squares (cdr lst)))))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (sum-squares (cdr lst)))]\n\
    \    [else (+ (car lst) (sum-squares (cdr lst)))]))\n", "  (if (null? lst)\n \
    \     0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0)\
    \ (* lst lst)]\n    [(= (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n",
  "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-cubes\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n\
    \         (sum-cubes (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(=\
    \ (modulo lst 3) 0) (* lst lst)]\n    [(= (modulo lst 4) 0) (* lst lst)]\n   \
    \ [else (+ lst lst)]))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst)\
    \ (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n  \
    \    0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even?\
    \ (car lst)) (helper (cdr lst) (+ acc (* car lst)))]\n      [(odd? (car lst))\
    \ (helper (cdr lst) (+ acc (* car lst)))]\n      [else (helper (cdr lst) (+ acc\
    \ (* car lst)))]))\n  (helper lst 0))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst)) (sum-cubes (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* (car lst) (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n",
  "  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(= (modulo\
    \ lst 3) 0) (helper (rest lst) (+ acc (* lst lst)))]\n      [(= (modulo lst 4)\
    \ 0) (helper (rest lst) (+ acc (* lst lst)))]\n      [else (helper (rest lst)\
    \ acc)]\n      ))\n  (helper lst 0))\n", "  (if (null? lst)\n      0\n      (+\
    \ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (sum-squares\
    \ (cdr lst)))]\n    [else (+ (* 3 (car lst)) (sum-squares (cdr lst)))]))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst))\
    \ (sum-cubes (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (square (car\
    \ lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(=\
    \ (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(member (car lst) '(3 4)) (+ (* car lst) (sum_squares (cdr lst)))]\n\
    \    [else (+ (* car lst) (sum_squares (cdr lst)))]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst\
    \ lst)]\n    [(= (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(=\
    \ (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (square (car lst)) (sum_squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes\
    \ lst))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n      \
    \   (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst\
    \ (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (* (car lst) (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr lst)))))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(=\
    \ (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* (car lst) (car lst)) (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n     \
    \    (sum-squares (cdr lst)))))\n", "  (define (square x)\n    (* x x))\n  (define\
    \ (cube x)\n    (* x x x))\n  (define (mod x y)\n    (if (= y 0)\n        0\n\
    \        (modulo x y)))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define\
    \ (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod\
    \ x y) z))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod\
    \ x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n\
    \  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n\
    \    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define\
    \ (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod\
    \ x y) z))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod\
    \ x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n\
    \  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n\
    \    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define\
    \ (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod\
    \ x y) z))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod\
    \ x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n\
    \  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n\
    \    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod x y) z))\n  (define\
    \ (sum-mod x y z)\n    (+ (mod x y) z))\n  (define (sum-mod x y z)\n    (+ (mod\
    \ x y) z))\n  (define (sum-mod ", "  (if (null? lst)\n      0\n      (+ (* lst\
    \ (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n   \
    \   0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (sum_squares\
    \ (cdr lst)))]\n    [else (+ (* 3 (car lst)) (sum_squares (cdr lst)))]))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(=\
    \ (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n     \
    \    (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst\
    \ (car lst))\n         (sum-cubes (cdr lst)))))\n", "  (if (null? lst)\n     \
    \ 0\n      (+ (* lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes lst))))\n", " \
    \ (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even?\
    \ (car lst)) (helper (cdr lst) (+ acc (* lst (car lst))))]\n      [(odd? (car\
    \ lst)) (helper (cdr lst) (+ acc (* lst (car lst))))]\n      [else (helper (cdr\
    \ lst) (+ acc (* lst (car lst))))]))\n  (helper lst 0))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(= (modulo lst 4) 0) (*\
    \ lst lst)]\n    [else (+ lst lst)]))\n", "  (if (null? lst)\n      0\n      (+\
    \ (square (car lst))\n         (sum-squares (cdr lst)))))\n", "  (define (helper\
    \ lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (car lst)) (helper\
    \ (cdr lst) (+ acc (* car lst)))]\n      [else (helper (cdr lst) (+ acc (* car\
    \ lst)))]))\n  (helper lst 0))\n", "  (define (helper lst acc)\n    (cond ((null?\
    \ lst) acc)\n          ((= (modulo lst 3) 0) (helper (cdr lst) (+ acc (* lst lst))))\n\
    \          ((= (modulo lst 4) 0) (helper (cdr lst) (+ acc (* lst lst))))\n   \
    \       (else (helper (cdr lst) acc)))))\n  (helper lst 0))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0)\
    \ (* lst lst)]\n    [(= (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-squares\
    \ (cdr lst)))))\n", "  (define (square x)\n    (* x x))\n  (define (cube x)\n\
    \    (* x x x))\n  (define (mod x y)\n    (if (= y 0)\n        0\n        (modulo\
    \ x y)))\n  (define (sum-mod x y z)\n    (+ (mod x y)\n       (mod x z)))\n  (define\
    \ (sum-mod-3 x y z)\n    (sum-mod x y z))\n  (define (sum-mod-4 x y z)\n    (sum-mod\
    \ x y z)\n    (sum-mod x z y))\n  (define (sum-mod-5 x y z)\n    (sum-mod x y\
    \ z)\n    (sum-mod x z y)\n    (sum-mod x y z))\n  (define (sum-mod-6 x y z)\n\
    \    (sum-mod x y z)\n    (sum-mod x z y)\n    (sum-mod x y z)\n    (sum-mod x\
    \ z y))\n  (define (sum-mod-7 x y z)\n    (sum-mod x y z)\n    (sum-mod x z y)\n\
    \    (sum-mod x y z)\n    (sum-mod x z y)\n    (sum-mod x y z))\n  (define (sum-mod-8\
    \ x y z)\n    (sum-mod x y z)\n    (sum-mod x z y)\n    (sum-mod x y z)\n    (sum-mod\
    \ x z y)\n    (sum-mod x y z)\n    (sum-mod x z y))\n  (define (sum-mod-9 x y\
    \ z)\n    (sum-mod x y z)\n    (sum-mod x z y)\n    (sum-mod x y z)\n    (sum-mod\
    \ x z y)\n    (sum-mod x y z)\n    (sum-mod x z y)\n    (sum-mod x y z))\n  (define\
    \ (sum-mod-10 x y z)\n    (sum-mod x y z)\n    (sum-mod x z y)\n    (sum-mod x\
    \ y z)\n    (sum-mod x z y)\n    (sum-mod x y z)\n    (sum-mod x z y)\n    (sum-mod\
    \ x y z)\n    (sum-mod x z y))\n  (define (sum-mod-11 x y z)\n    (sum-mod x y\
    \ z)\n    (sum-mod x z y)\n    (sum-mod x y z)\n    (sum-mod x z y)\n    (sum-mod\
    \ x y z)\n    (sum-mod x z y)", "  (if (null? lst)\n      0\n      (+ (* lst (car\
    \ lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (*\
    \ lst (car lst))\n         (sum-squares (cdr lst)))))\n", "  (define (helper lst\
    \ acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (first lst)) (helper\
    \ (rest lst) (+ acc (* acc (first lst))))]\n      [(odd? (first lst)) (helper\
    \ (rest lst) (+ acc (* acc (first lst))))]\n      [else (helper (rest lst) (+\
    \ acc (* acc (first lst))))]))\n  (helper lst 0))\n", "  (define (square n)\n\
    \    (* n n))\n  (define (cube n)\n    (* n n n))\n  (define (mod n m)\n    (if\
    \ (= m 0)\n        n\n        (mod n (- m 1))))\n  (define (sum-mod n m)\n   \
    \ (+ (mod n m) (mod n (+ m 1))))\n  (define (sum-squares lst)\n    (define (sum-mod\
    \ n m)\n      (if (= m 0)\n          0\n          (+ m (sum-mod n (- m 1)))))\n\
    \    (define (sum-squares lst)\n      (define (sum-mod n m)\n        (if (= m\
    \ 0)\n            0\n            (+ m (sum-mod n (- m 1)))))\n      (define (sum-squares\
    \ lst)\n        (define (sum-mod n m)\n          (if (= m 0)\n              0\n\
    \              (+ m (sum-mod n (- m 1)))))\n      (define (sum-squares lst)\n\
    \        (define (sum-mod n m)\n          (if (= m 0)\n              0\n     \
    \         (+ m (sum-mod n (- m 1)))))\n      (define (sum-squares lst)\n     \
    \   (define (sum-mod n m)\n          (if (= m 0)\n              0\n          \
    \    (+ m (sum-mod n (- m 1)))))\n      (define (sum-squares lst)\n        (define\
    \ (sum-mod n m)\n          (if (= m 0)\n              0\n              (+ m (sum-mod\
    \ n (- m 1)))))\n      (define (sum-squares lst)\n        (define (sum-mod n m)\n\
    \          (if (= m 0)\n              0\n              (+ m (sum-mod n (- m 1)))))\n\
    \      (define (sum-squares lst)\n        (define (sum-mod n m)\n          (if\
    \ (= m 0)\n              0\n              (+ m (sum-mod n (- m 1)))))\n      (define\
    \ (sum-squares lst)\n        (define (sum-mod n m)\n          (if (= m 0)\n  \
    \            0\n              (+ m (sum-mod n (- m 1)))))\n      (define (sum-squares\
    \ lst)\n        (define (sum-mod n m)\n          (if (= m 0)\n              0\n\
    \              (+ m (sum-mod n (- m 1)))))\n      (define (sum", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n", "  (if\
    \ (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n         (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n     \
    \    (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst\
    \ (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null? lst)\n  \
    \    0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(= (modulo lst 3) 0) (* lst lst)]\n    [(=\
    \ (modulo lst 4) 0) (* lst lst)]\n    [else (+ lst lst)]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* lst (car lst))\n         (sum-cubes (cdr lst)))))\n", " \
    \ (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-cubes (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* lst (car lst)) (sum-squares (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst)) (sum-squares (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* lst (car lst))\n     \
    \    (sum-squares (cdr lst)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
