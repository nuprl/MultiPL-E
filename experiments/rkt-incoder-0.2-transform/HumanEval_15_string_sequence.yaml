name: HumanEval_15_string_sequence
language: rkt
prompt: "#lang racket\n\n;; Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;; >>> (string_sequence\
  \ 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_sequence))\n\
  \    (check-equal? (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1 2\
  \ 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
completions: ["  (let loop ((i 0))\n    (if (< i n)\n        (cons (string->symbol\
    \ (+ i 1))\n              (loop (+ i 1)))\n        '())))\n", "  (let loop ((n\
    \ n) (s \"\"))\n    (if (= n 0)\n        (reverse s)\n        (loop (sub1 n) (cons\
    \ (string->number s) s)))))\n", "  (if (= n 0)\n      \"0\"\n      (append (string_sequence\
    \ (sub1 n)) (list n))))\n", "  (if (= n 0)\n      '0\n      (append (string_sequence\
    \ (sub1 n)) (list n))))\n", "  (let loop ((i 0))\n    (if (< i n)\n        (cons\
    \ (string->symbol (+ i 1)) (loop (+ i 1)))\n        '())))\n", "  (if (= n 0)\n\
    \      \"0\"\n      (append (string_sequence (sub1 n)) (list n))))\n", "  (if\
    \ (= n 0)\n      \"0\"\n      (append (string_sequence (sub1 n)) (list n))))\n",
  "  (let loop ((i 0) (s \"\"))\n    (if (< i n)\n        (loop (+ i 1) (append s\
    \ (number->string i)))\n        s)))\n", "  (if (= n 0)\n      \"0\"\n      (append\
    \ (string_sequence (sub1 n)) (list n))))\n", "  (if (= n 0)\n      \"0\"\n   \
    \   (append (string_sequence (sub1 n)) (list n))))\n", "  (if (= n 0)\n      \"\
    0\"\n      (append (string_sequence (sub1 n)) (list n))))\n", "  (let loop ((i\
    \ 0))\n    (if (< i n)\n        (cons (string->symbol (+ i 1)) \" \")\n      \
    \  (loop (+ i 1)))))\n", "  (let loop ((i 0))\n    (if (< i n)\n        (cons\
    \ (string->symbol (+ i 1)) \" \")\n        (loop (+ i 1)))))\n", "  (if (= n 0)\n\
    \      \"0\"\n      (append (string_sequence (sub1 n)) (list n))))\n", "  (let\
    \ loop ((i 0) (s \"\"))\n    (if (< i n)\n        (loop (+ i 1) (cons i s))\n\
    \        s)))\n", "  (if (= n 0)\n      \"0\"\n      (append (string_sequence\
    \ (sub1 n)) (list n))))\n", "  (if (= n 0)\n      \"0\"\n      (cons (string-append\
    \ (string_sequence (sub1 n)) \" \") (string_sequence (sub1 n))))) ;; #lang racket\n",
  "  (if (= n 0)\n      '()\n      (cons (string-append (number->string n) (string_sequence\
    \ (sub1 n)))\n            (string_sequence (sub1 n))))))\n", "  (let loop ((i\
    \ 0) (s \"\"))\n    (if (< i n)\n        (loop (+ i 1) (append s (list i))) (append\
    \ s (list i)))))\n", "  (if (= n 0)\n      \"0\"\n      (append (string_sequence\
    \ (sub1 n)) (list n))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
