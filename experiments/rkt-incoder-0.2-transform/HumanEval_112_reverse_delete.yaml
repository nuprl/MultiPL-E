name: HumanEval_112_reverse_delete
language: rkt
prompt: "#lang racket\n\n;; Task\n;; We are given two strings s and c, you have to\
  \ deleted all the characters in s that are equal to any character in c\n;; then\
  \ check if the result string is palindrome.\n;; A string is called palindrome if\
  \ it reads the same backward as forward.\n;; You should return a tuple containing\
  \ the result string and True/False for the check.\n;; Example\n;; >>> (reverse_delete\
  \ \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"\
  b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list\
  \ \"cdedc\" #t)\n(define (reverse_delete s c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_delete))\n\
  \    (check-equal? (candidate \"abcde\" \"ae\") (list \"bcd\" #f))\n    (check-equal?\
  \ (candidate \"abcdef\" \"b\") (list \"acdef\" #f))\n    (check-equal? (candidate\
  \ \"abcdedcba\" \"ab\") (list \"cdedc\" #t))\n    (check-equal? (candidate \"dwik\"\
  \ \"w\") (list \"dik\" #f))\n    (check-equal? (candidate \"a\" \"a\") (list \"\"\
  \ #t))\n    (check-equal? (candidate \"abcdedcba\" \"\") (list \"abcdedcba\" #t))\n\
  \    (check-equal? (candidate \"abcdedcba\" \"v\") (list \"abcdedcba\" #t))\n  \
  \  (check-equal? (candidate \"vabba\" \"v\") (list \"abba\" #t))\n    (check-equal?\
  \ (candidate \"mamma\" \"mia\") (list \"\" #t))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? s) (list empty? #t)]\n        [(equal? (first s) (first\
    \ c)) (reverse_delete (rest s) (rest c))]\n        [else (reverse_delete (rest\
    \ s) (cons (first s) c))]))\n", "  (cond\n    [(empty? s) (list empty? #t)]\n\
    \    [(equal? (first s) (first c)) (reverse_delete (rest s) (rest c))]\n    [else\
    \ (cons (first s) (reverse_delete (rest s) c))]))\n", "  (cond [(empty? s) (list\
    \ '() #t)]\n        [(equal? (first s) (car c)) (reverse_delete (rest s) c)]\n\
    \        [else (cons (first s) (reverse_delete (rest s) c))]))\n", "  (cond\n\
    \    [(empty? s) (list \"\" #t)]\n    [(equal? (first s) c) (cons (first s) (reverse_delete\
    \ (rest s) c))]\n    [else (reverse_delete (rest s) c)]))\n", "  (cond [(empty?\
    \ s) (list '() #f)]\n        [(equal? (first s) (first c)) (reverse_delete (rest\
    \ s) c)]\n        [else (cons (first s) (reverse_delete (rest s) c))]))\n", " \
    \ (cond\n    [(empty? s) (list s #t)]\n    [(equal? (first s) c) (cons (first\
    \ s) (reverse_delete (rest s) c))]\n    [else (reverse_delete (rest s) c)]))\n",
  "  (cond [(empty? s) (list '() #t)]\n        [(equal? (first s) (first c)) (reverse_delete\
    \ (rest s) (rest c))]\n        [else (reverse_delete (rest s) (cons (first s)\
    \ c))]))\n", "  (cond\n    [(empty? s) (list '() #f)]\n    [(equal? (first s)\
    \ (first c)) (reverse_delete (rest s) (cdr c))]\n    [else (cons (first s) (reverse_delete\
    \ (rest s) (cdr c)))]))\n", "  (cond\n    [(empty? s) (list empty? #t)]\n    [(equal?\
    \ (first s) (c)) (cons (first s) (reverse_delete (rest s) c))]\n    [else (cons\
    \ (first s) (reverse_delete (rest s) c))]\n  ))\n", "  (cond\n    [(empty? s)\
    \ (list s)]\n    [(equal? (first s) (first c)) (reverse_delete (rest s) (rest\
    \ c))]\n    [else (reverse_delete (rest s) (cons (first s) c))]\n  ))\n", "  (cond\
    \ [(empty? s) (list '() #t)]\n        [(equal? (first s) (car c)) (reverse_delete\
    \ (rest s) (cdr c))]\n        [else (reverse_delete (rest s) (cons (first s) c))]))\n",
  "  (cond\n    [(empty? s) (list \"\" #t)]\n    [(equal? (first s) (c)) (reverse_delete\
    \ (rest s) c)]\n    [else (cons (first s) (reverse_delete (rest s) c))]\n  ))\n",
  "  (cond [(empty? s) (list '() #t)]\n        [(equal? (first s) (first c)) (reverse_delete\
    \ (rest s) (cdr c))]\n        [else (reverse_delete (rest s) (cons (first s) c))]))\n",
  "  (cond [(empty? s) (list \"\" #t)]\n        [(equal? (first s) (first c)) (reverse_delete\
    \ (rest s) (rest c))]\n        [else (reverse_delete (rest s) (cons (first s)\
    \ c))]))\n", "  (cond [(empty? s) (list '() #t)]\n        [(equal? (first s) (first\
    \ c)) (reverse_delete (rest s) (cdr c))]\n        [else (reverse_delete (rest\
    \ s) (cons (first s) c))]))\n", "  (cond\n    [(empty? s) (list '())]\n    [(equal?\
    \ (first s) (first c)) (reverse_delete (rest s) (cdr s))]\n    [else (cons (first\
    \ s) (reverse_delete (rest s) (cdr s)))]))\n", "  (cond\n    [(empty? s) (list\
    \ '() #f)]\n    [(equal? (first s) c) (list '() #f)]\n    [else (cons (first s)\
    \ (reverse_delete (rest s) c))]))\n", "  (cond\n    [(empty? s) (list '() #t)]\n\
    \    [(equal? (first s) (first c)) (reverse_delete (rest s) (cdr c))]\n    [else\
    \ (reverse_delete (rest s) (cons (first s) c))]))\n", "  (cond [(empty? s) (list\
    \ '() #f)]\n        [(equal? (first s) (first c)) (reverse_delete (rest s) (rest\
    \ c))]\n        [else (cons (first s) (reverse_delete (rest s) c))]))\n", "  (cond\n\
    \    [(empty? s) (list \"\" #t)]\n    [(equal? (first s) c) (cons (first s) (reverse_delete\
    \ (rest s) c))]\n    [else (reverse_delete (rest s) c)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
