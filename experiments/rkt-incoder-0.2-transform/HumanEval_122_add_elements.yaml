name: HumanEval_122_add_elements
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty array of integers arr and an integer\
  \ k, return\n;; the sum of the elements with at most two digits from the first k\
  \ elements of arr.\n;; Example:\n;; >>> (add_elements (list 111 21 3 4000 5 6 7\
  \ 8 9) 4)\n;; 24\n;; Constraints:\n;; 1. 1 <= len(arr) <= 100\n;; 2. 1 <= k <= len(arr)\n\
  (define (add_elements arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n\
  \    (check-equal? (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4)\n    (check-equal?\
  \ (candidate (list 111 121 3 4000 5 6) 2) 0)\n    (check-equal? (candidate (list\
  \ 11 21 3 90 5 6 7 8 9) 4) 125)\n    (check-equal? (candidate (list 111 21 3 4000\
  \ 5 6 7 8 9) 4) 24)\n    (check-equal? (candidate (list 1) 1) 1)\n))\n\n(test-humaneval)"
completions: ["  (if (null? arr)\n      0\n      (+ (car arr) (add_elements (cdr arr)\
    \ (- k 1)))))\n", "  (let loop ((arr (reverse arr)) (sum 0) (i 0))\n    (if (<\
    \ i k)\n        sum\n        (loop (rest arr) (+ sum (first arr)) (+ i 1)))))\n",
  "  (if (null? arr)\n      0\n      (+ (first arr)\n         (add_elements (rest\
    \ arr) (- k 1)))))\n", "  (if (or (= k 0) (= k 1))\n      (first arr)\n      (+\
    \ (first arr) (add_elements (rest arr) (- k 1)))))\n", "  (if (null? arr)\n  \
    \    0\n      (+ (car arr)\n         (add_elements (cdr arr) k))))\n", "  (if\
    \ (null? arr)\n      0\n      (+ (car arr) (add_elements (cdr arr) (- k 1)))))\n",
  "  (if (null? arr)\n      0\n      (+ (car arr)\n         (add_elements (cdr arr)\n\
    \                       (- k 1)))))\n", "  (if (or (= k 0) (= k 1))\n      (first\
    \ arr)\n      (+ (first arr) (add_elements (rest arr) (- k 1)))))\n", "  (if (null?\
    \ arr)\n      0\n      (+ (first arr) (add_elements (rest arr) (- k 1)))))\n",
  "  (if (empty? arr)\n      0\n      (+ (car arr)\n         (add_elements (cdr arr)\
    \ k))))\n", "  (if (= k 0)\n      (first arr)\n      (+ (first arr) (add_elements\
    \ (rest arr) (sub1 k))))))\n", "  (if (null? arr)\n      0\n      (+ (car arr)\n\
    \         (add_elements (cdr arr) k))))\n", "  (if (null? arr)\n      0\n    \
    \  (+ (first arr)\n         (add_elements (rest arr)\n                       (-\
    \ k 1)))))\n", "  (if (null? arr)\n      0\n      (+ (first arr)\n         (add_elements\
    \ (rest arr) k))))\n", "  (if (null? arr)\n      0\n      (+ (car arr)\n     \
    \    (add_elements (cdr arr) k))))\n", "  (if (< k 0)\n      (error \"k must be\
    \ positive\")\n      (let ((sum (+ (first arr) (second arr))))\n        (if (<\
    \ k 2)\n            (+ sum (add_elements (rest arr) (- k 2)))\n            sum))))\n",
  "  (let loop ((arr (reverse arr)) (sum 0) (i 0))\n    (if (< i k)\n        sum\n\
    \        (loop (rest arr) (+ sum (first arr)) (+ i 1)))))\n", "  (if (null? arr)\n\
    \      0\n      (+ (first arr)\n         (add_elements (rest arr)\n          \
    \             (- k 1)))))\n", "  (if (null? arr)\n      0\n      (+ (car arr)\n\
    \         (add_elements (cdr arr) k))))\n", "  (let loop ((arr (reverse arr))\
    \ (sum 0) (i 0))\n    (if (< i k)\n        sum\n        (loop (rest arr) (+ sum\
    \ (first arr)) (+ i 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
