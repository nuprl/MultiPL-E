name: HumanEval_79_decimal_to_binary
language: rkt
prompt: "#lang racket\n\n;; You will be given a number in decimal form and your task\
  \ is to convert it to\n;; binary format. The function should return a string, with\
  \ each character representing a binary\n;; number. Each character in the string\
  \ will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at the\
  \ beginning and at the end of the string.\n;; The extra characters are there to\
  \ help with the format.\n;; Examples:\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
  \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n(define (decimal_to_binary decimal)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n\
  \    (check-equal? (candidate 0) \"db0db\")\n    (check-equal? (candidate 32) \"\
  db100000db\")\n    (check-equal? (candidate 103) \"db1100111db\")\n    (check-equal?\
  \ (candidate 15) \"db1111db\")\n))\n\n(test-humaneval)"
completions: ["  (let loop ((decimal decimal)\n             (result '()))\n    (if\
    \ (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n        \
    \      (cons 0 (if (= (quotient decimal 2) 0)\n                         '1\n \
    \                        '0)))\n        (loop (quotient decimal 2)\n         \
    \     (cons '1 (if (= (quotient decimal 2) 0)\n                         '0\n \
    \                        '1))))))\n", "  (let loop ((decimal decimal)\n      \
    \       (result '()))\n    (if (= decimal 0)\n        (reverse result)\n     \
    \   (loop (quotient decimal 2)\n              (cons (if (= (modulo decimal 2)\
    \ 0)\n                       '1\n                       '0)\n                \
    \    result)))))\n", "  (let loop ((decimal decimal)\n             (result '()))\n\
    \    (if (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n \
    \             (cons 0 (if (= (quotient decimal 2) 0)\n                       \
    \  '1\n                         '0)))\n        (loop (quotient decimal 2)\n  \
    \            (cons '1 (if (= (quotient decimal 2) 0)\n                       \
    \  '0\n                         '1))))))\n", "  (let loop ((decimal decimal)\n\
    \             (binary '())\n             (count 0))\n    (if (= decimal 0)\n \
    \       (reverse binary)\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (modulo decimal 2) 0)\n                       '1\n                  \
    \     '0)\n                    binary)\n              (inc count))))))\n", " \
    \ (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0)\n                         '1\n            \
    \             '0)))\n        (loop (quotient decimal 2)\n              (cons 1\
    \ (if (= (quotient decimal 2) 0)\n                         '0\n              \
    \           '1))))))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        result\n        (loop (sub1 decimal)\n\
    \              (append result (list '(if (= decimal 0) '0 '1)))))))\n", "  (let\
    \ ([remainder (modulo decimal 2)])\n    (if (= remainder 0)\n        (string-append\
    \ \"0\" '(1 0 0))\n        (string-append '(0 1 0) (decimal_to_binary remainder)))))\n",
  "  (let ([remainder (remainder decimal 2)])\n    (if (= remainder 0)\n        '()\n\
    \        (append (list 'db) (decimal_to_binary remainder))))))\n", "  (let loop\
    \ ((decimal decimal)\n             (result '()))\n    (if (zero? decimal)\n  \
    \      result\n        (loop (quotient decimal 2)\n              (cons (if (even?\
    \ decimal) '1 '0) result))))))\n", "  (define (helper decimal result)\n    (if\
    \ (= decimal 0)\n        result\n        (helper (- decimal 1) (append result\
    \ (list '(0 1))))))\n  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (quotient decimal 2)\n              (cons (if (= (quotient decimal 2) 0)\n \
    \                      '0\n                       '1)\n                    result)))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (quotient decimal 2) 0)\n                       '0\n                \
    \       '1)\n                    result)))))\n", "  (define (helper decimal result)\n\
    \    (if (= decimal 0)\n        result\n        (helper (quotient decimal 2) (conj\
    \ result (if (= (quotient decimal 2) 0) '1 '0)))))\n  (helper decimal '()))\n",
  "  (define (helper decimal acc)\n    (if (= decimal 0)\n        acc\n        (helper\
    \ (quotient decimal 2) (cond [(= (quotient decimal 2) 0) '0]\n               \
    \                           [(= (quotient decimal 2) 1) '1]\n                \
    \                          [else 'db])))\n    (helper (quotient decimal 2) (cond\
    \ [(= (quotient decimal 2) 0) '0]\n                                          [(=\
    \ (quotient decimal 2) 1) '1]\n                                          [else\
    \ 'db]))))\n  (helper decimal '()))\n", "  (let ([remainder (modulo decimal 2)])\n\
    \    (if (= remainder 0)\n        (string-append \"0\" '(1 0))\n        (string-append\
    \ '(0 1) (decimal_to_binary (quotient decimal 2))))))\n", "  (define (helper decimal\
    \ result)\n    (cond [(= decimal 0) result]\n          [(= decimal 1) (helper\
    \ decimal (append result '0))]\n          [else (helper decimal (append result\
    \ '1))]))\n  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n     \
    \        (result '()))\n    (cond ((= decimal 0) result)\n          ((even? decimal)\
    \ (loop (/ decimal 2) (cons 0 (loop (remainder decimal 2) result))))\n       \
    \   (else (loop (quotient decimal 2) (cons 1 (loop (remainder decimal 2) result)))))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0)\n                         '1\n            \
    \             '0)))\n        (loop (quotient decimal 2)\n              (cons 1\
    \ (if (= (quotient decimal 2) 0)\n                         '0\n              \
    \           '1))))))\n", "  (define (helper decimal result)\n    (if (= decimal\
    \ 0)\n        result\n        (helper (quotient decimal 2) (append result (list\
    \ '(0 1))))))\n  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n \
    \            (result '()))\n    (if (= decimal 0)\n        (reverse result)\n\
    \        (loop (quotient decimal 2)\n               (cons 0 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0)))\n     \
    \   (loop (quotient decimal 2)\n               (cons 1 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0))))\n    (reverse\
    \ result)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
