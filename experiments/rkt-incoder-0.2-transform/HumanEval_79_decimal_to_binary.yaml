name: HumanEval_79_decimal_to_binary
language: rkt
prompt: "#lang racket\n\n;; You will be given a number in decimal form and your task\
  \ is to convert it to\n;; binary format. The function should return a string, with\
  \ each character representing a binary\n;; number. Each character in the string\
  \ will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at the\
  \ beginning and at the end of the string.\n;; The extra characters are there to\
  \ help with the format.\n;; Examples:\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
  \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n(define (decimal_to_binary decimal)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n\
  \    (check-equal? (candidate 0) \"db0db\")\n    (check-equal? (candidate 32) \"\
  db100000db\")\n    (check-equal? (candidate 103) \"db1100111db\")\n    (check-equal?\
  \ (candidate 15) \"db1111db\")\n))\n\n(test-humaneval)"
completions: ["  (let loop ((decimal decimal)\n             (result '()))\n    (if\
    \ (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n        \
    \      (cons 0 (if (= (quotient decimal 2) 0)\n                         '1\n \
    \                        '0)))\n        (loop (quotient decimal 2)\n         \
    \     (cons '1 (if (= (quotient decimal 2) 0)\n                         '0\n \
    \                        '1))))))\n", "  (let loop ((decimal decimal)\n      \
    \       (result '()))\n    (if (= decimal 0)\n        (reverse result)\n     \
    \   (loop (quotient decimal 2)\n              (cons (if (= (modulo decimal 2)\
    \ 0)\n                       '1\n                       '0)\n                \
    \    result)))))\n", "  (let loop ((decimal decimal)\n             (result '()))\n\
    \    (if (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n \
    \             (cons 0 (if (= (quotient decimal 2) 0)\n                       \
    \  '1\n                         '0)))\n        (loop (quotient decimal 2)\n  \
    \            (cons '1 (if (= (quotient decimal 2) 0)\n                       \
    \  '0\n                         '1))))))\n", "  (let loop ((decimal decimal)\n\
    \             (binary '())\n             (count 0))\n    (if (= decimal 0)\n \
    \       (reverse binary)\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (modulo decimal 2) 0)\n                       '1\n                  \
    \     '0)\n                    binary)\n              (inc count))))))\n", " \
    \ (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0)\n                         '1\n            \
    \             '0)))\n        (loop (quotient decimal 2)\n              (cons 1\
    \ (if (= (quotient decimal 2) 0)\n                         '0\n              \
    \           '1))))))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        result\n        (loop (sub1 decimal)\n\
    \              (append result (list '(if (= decimal 0) '0 '1)))))))\n", "  (let\
    \ ([remainder (modulo decimal 2)])\n    (if (= remainder 0)\n        (string-append\
    \ \"0\" '(1 0 0))\n        (string-append '(0 1 0) (decimal_to_binary remainder)))))\n",
  "  (let ([remainder (remainder decimal 2)])\n    (if (= remainder 0)\n        '()\n\
    \        (append (list 'db) (decimal_to_binary remainder))))))\n", "  (let loop\
    \ ((decimal decimal)\n             (result '()))\n    (if (zero? decimal)\n  \
    \      result\n        (loop (quotient decimal 2)\n              (cons (if (even?\
    \ decimal) '1 '0) result))))))\n", "  (define (helper decimal result)\n    (if\
    \ (= decimal 0)\n        result\n        (helper (- decimal 1) (append result\
    \ (list '(0 1))))))\n  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (quotient decimal 2)\n              (cons (if (= (quotient decimal 2) 0)\n \
    \                      '0\n                       '1)\n                    result)))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (quotient decimal 2) 0)\n                       '0\n                \
    \       '1)\n                    result)))))\n", "  (define (helper decimal result)\n\
    \    (if (= decimal 0)\n        result\n        (helper (quotient decimal 2) (conj\
    \ result (if (= (quotient decimal 2) 0) '1 '0)))))\n  (helper decimal '()))\n",
  "  (define (helper decimal acc)\n    (if (= decimal 0)\n        acc\n        (helper\
    \ (quotient decimal 2) (cond [(= (quotient decimal 2) 0) '0]\n               \
    \                           [(= (quotient decimal 2) 1) '1]\n                \
    \                          [else 'db])))\n    (helper (quotient decimal 2) (cond\
    \ [(= (quotient decimal 2) 0) '0]\n                                          [(=\
    \ (quotient decimal 2) 1) '1]\n                                          [else\
    \ 'db]))))\n  (helper decimal '()))\n", "  (let ([remainder (modulo decimal 2)])\n\
    \    (if (= remainder 0)\n        (string-append \"0\" '(1 0))\n        (string-append\
    \ '(0 1) (decimal_to_binary (quotient decimal 2))))))\n", "  (define (helper decimal\
    \ result)\n    (cond [(= decimal 0) result]\n          [(= decimal 1) (helper\
    \ decimal (append result '0))]\n          [else (helper decimal (append result\
    \ '1))]))\n  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n     \
    \        (result '()))\n    (cond ((= decimal 0) result)\n          ((even? decimal)\
    \ (loop (/ decimal 2) (cons 0 (loop (remainder decimal 2) result))))\n       \
    \   (else (loop (quotient decimal 2) (cons 1 (loop (remainder decimal 2) result)))))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0)\n                         '1\n            \
    \             '0)))\n        (loop (quotient decimal 2)\n              (cons 1\
    \ (if (= (quotient decimal 2) 0)\n                         '0\n              \
    \           '1))))))\n", "  (define (helper decimal result)\n    (if (= decimal\
    \ 0)\n        result\n        (helper (quotient decimal 2) (append result (list\
    \ '(0 1))))))\n  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n \
    \            (result '()))\n    (if (= decimal 0)\n        (reverse result)\n\
    \        (loop (quotient decimal 2)\n               (cons 0 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0)))\n     \
    \   (loop (quotient decimal 2)\n               (cons 1 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0))))\n    (reverse\
    \ result)))\n", "  (let loop ((decimal decimal)\n             (result '()))\n\
    \    (if (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n \
    \              (cons 0 (if (= (quotient decimal 2) 0)\n                      \
    \    '1\n                          '0)))\n        (loop (quotient decimal 2)\n\
    \               (cons 1 (if (= (quotient decimal 2) 0)\n                     \
    \     '1\n                          '0))))))\n", "  (define (helper decimal acc)\n\
    \    (if (= decimal 0)\n        acc\n        (helper (quotient decimal 2) (cond\
    \ [(= (quotient decimal 2) 0) '0]\n                                          \
    \ [(= (quotient decimal 2) 1) '1]\n                                          \
    \ [else 'db])))\n    (helper (quotient decimal 2) (cond [(= (quotient decimal\
    \ 2) 0) '0]\n                                           [(= (quotient decimal\
    \ 2) 1) '1]\n                                           [else 'db]))))\n  (helper\
    \ decimal '()))\n", "  (let loop ((decimal decimal)\n             (result '()))\n\
    \    (if (= decimal 0)\n        result\n        (loop (sub1 decimal)\n       \
    \       (cons (char->int (modulo (remainder decimal 2) 2)) result)))))\n", " \
    \ (define (helper decimal result)\n    (cond [(= decimal 0) result]\n        \
    \  [(= decimal 1) (helper decimal (list '1 result))]\n          [else (helper\
    \ (quotient decimal 2) (list '0 result))]))\n  (helper decimal '()))\n", "  (let\
    \ ([remainder (modulo decimal 2)])\n    (if (= remainder 0)\n        (string-append\
    \ \"0\" \"\")\n        (string-append \"1\" \"\")\n      )\n      (let ([remainder\
    \ (modulo decimal 2)])\n        (if (= remainder 0)\n            (string-append\
    \ \"0\" \"\")\n            (string-append \"1\" \"\")\n          )\n         \
    \ (let ([remainder (modulo decimal 2)])\n            (if (= remainder 0)\n   \
    \             (string-append \"0\" \"\")\n                (string-append \"1\"\
    \ \"\")\n              )\n              (let ([remainder (modulo decimal 2)])\n\
    \                (if (= remainder 0)\n                    (string-append \"0\"\
    \ \"\")\n                    (string-append \"1\" \"\")\n                  )\n\
    \                  (let ([remainder (modulo decimal 2)])\n                   \
    \ (if (= remainder 0)\n                        (string-append \"0\" \"\")\n  \
    \                      (string-append \"1\" \"\")\n                      )\n \
    \                     (let ([remainder (modulo decimal 2)])\n                \
    \        (if (= remainder 0)\n                            (string-append \"0\"\
    \ \"\")\n                            (string-append \"1\" \"\")\n            \
    \              )\n                          (let ([remainder (modulo decimal 2)])\n\
    \                            (if (= remainder 0)\n                           \
    \     (string-append \"0\" \"\")\n                                (string-append\
    \ \"1\" \"\")\n                              )\n                             \
    \ (let ([remainder (modulo decimal 2)])\n                                (if (=\
    \ remainder 0)\n                                    (string-append \"0\" \"\"\
    )\n                                    (string-append \"1\" \"\")\n          \
    \                        )\n                                  (let ([remainder\
    \ (modulo decimal 2)])\n                                    (if (= remainder 0)\n\
    \                                        (string-append \"0\" \"\")\n        \
    \                                (string-append \"1\" \"\")\n                \
    \                      )\n                                      (let ([remainder\
    \ (modulo decimal 2)])\n                                        (if (= remainder\
    \ 0)\n                                            (string-append \"0\" \"\")\n\
    \                                            (string-append \"1\" \"\")\n    \
    \                                      )\n                                   \
    \       (let ([remainder (modulo decimal 2)])\n                              \
    \              (if (= remainder 0)\n                                         \
    \       (string-append \"0\" \"\")\n                                         \
    \       (string-append \"1\" \"\")\n                                         \
    \     )\n                                              (let ([remainder (modulo\
    \ decimal 2)])\n                                                (if (= remainder\
    \ 0)\n                                                    (string-append \"0\"\
    \ \"\")\n                                                    (string-append \"\
    1\" \"\")\n                                                  )\n             \
    \                                     (let ([remainder (modulo decimal 2)])\n\
    \                                                    (if (= remainder 0)\n   \
    \                                                     (string-append \"0\" \"\"\
    )\n                                                        (string-append \"1\"\
    \ \"\")\n                                                      )\n           \
    \                                           (let ([remainder (", "  (let loop\
    \ ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n    \
    \    (reverse result)\n        (loop (sub1 decimal)\n              (append result\
    \ (list '(if (= decimal 0) '0 '1))))))\n", "  (let ([remainder (remainder decimal\
    \ 2)])\n    (if (= remainder 0)\n        (string-append \"0\" \"\")\n        (string-append\
    \ \"1\" \"\")\n      )\n      (let ([remainder (remainder decimal 2)])\n     \
    \   (if (= remainder 0)\n            (string-append \"0\" \"\")\n            (string-append\
    \ \"1\" \"\")\n          )\n          (let ([remainder (remainder decimal 2)])\n\
    \            (if (= remainder 0)\n                (string-append \"0\" \"\")\n\
    \                (string-append \"1\" \"\")\n              )\n              (let\
    \ ([remainder (remainder decimal 2)])\n                (if (= remainder 0)\n \
    \                   (string-append \"0\" \"\")\n                    (string-append\
    \ \"1\" \"\")\n                  )\n                  (let ([remainder (remainder\
    \ decimal 2)])\n                    (if (= remainder 0)\n                    \
    \    (string-append \"0\" \"\")\n                        (string-append \"1\"\
    \ \"\")\n                      )\n                      (let ([remainder (remainder\
    \ decimal 2)])\n                        (string-append \"0\" \"\")\n         \
    \             )\n                    )\n                  )\n                )\n\
    \            )\n        )\n      )\n    )\n  )\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (quotient decimal 2)\n              (cons 0 (if (= (quotient decimal 2) 0)\n\
    \                          '1\n                          '0)))\n        (loop\
    \ (quotient decimal 2)\n              (cons 1 (if (= (quotient decimal 2) 0)\n\
    \                          '1\n                          '0))))))\n", "  (let\
    \ loop ((decimal decimal)\n             (result '()))\n    (cond ((= decimal 0)\
    \ (append result 'db))\n          ((< decimal 9) (loop (quotient decimal 2) (append\
    \ result 'db)))\n          ((< decimal 10) (loop (quotient decimal 3) (append\
    \ result 'db)))\n          ((< decimal 11) (loop (quotient decimal 4) (append\
    \ result 'db)))\n          ((< decimal 12) (loop (quotient decimal 5) (append\
    \ result 'db)))\n          ((< decimal 13) (loop (quotient decimal 6) (append\
    \ result 'db)))\n          ((< decimal 14) (loop (quotient decimal 7) (append\
    \ result 'db)))\n          ((< decimal 15) (loop (quotient decimal 8) (append\
    \ result 'db)))\n          ((< decimal 16) (loop (quotient decimal 9) (append\
    \ result 'db)))\n          ((< decimal 17) (loop (quotient decimal 10) (append\
    \ result 'db)))\n          ((< decimal 18) (loop (quotient decimal 11) (append\
    \ result 'db)))\n          ((< decimal 19) (loop (quotient decimal 12) (append\
    \ result 'db)))\n          ((< decimal 20) (loop (quotient decimal 13) (append\
    \ result 'db)))\n          ((< decimal 21) (loop (quotient decimal 14) (append\
    \ result 'db)))\n          ((< decimal 22) (loop (quotient decimal 15) (append\
    \ result 'db)))\n          ((< decimal 23) (loop (quotient decimal 16) (append\
    \ result 'db)))\n          ((< decimal 24) (loop (quotient decimal 17) (append\
    \ result 'db)))\n          ((< decimal 25) (loop (quotient decimal 18) (append\
    \ result 'db)))\n          ((< decimal 26) (loop (quotient decimal 19) (append\
    \ result 'db)))\n          ((< decimal 27) (loop (quotient decimal 20) (append\
    \ result 'db)))\n          ((< decimal 28) (loop (quotient decimal 21) (append\
    \ result 'db)))\n          ((< decimal 29) (loop (quotient decimal 22) (append\
    \ result 'db)))\n          ((< decimal 30) (loop (quotient decimal 23) (append\
    \ result 'db)))\n          ((< decimal 31) (loop (quotient decimal 24) (append\
    \ result 'db)))\n          ((< decimal 32) (loop (quotient decimal 25) (append\
    \ result 'db)))\n          ((< decimal 33) (loop (quotient decimal 26) (append\
    \ result 'db)))\n          ((< decimal 34) (loop", "  (let ([remainder (remainder\
    \ decimal 2)])\n    (if (= remainder 0)\n        '()\n        (append (list 'db)\
    \ (decimal_to_binary remainder))))))\n", "  (let loop ((decimal decimal)\n   \
    \          (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (quotient decimal 2)\n              (cons 0 (if (= (quotient decimal 2) 0)\n\
    \                          '1\n                          '0)))\n        (loop\
    \ (quotient decimal 2)\n              (cons 1 (if (= (quotient decimal 2) 0)\n\
    \                          '1\n                          '0))))))\n", "  (define\
    \ (helper decimal acc)\n    (if (= decimal 0)\n        acc\n        (helper (quotient\
    \ decimal 2) (cond [(= (quotient decimal 2) 0) (cons 0 acc)\n                \
    \                                  [(= (quotient decimal 2) 1) (cons 1 acc)]\n\
    \                                                  [else (cons 0 (helper (quotient\
    \ decimal 2) (cons 1 acc))))])))\n  (helper decimal '()))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (quotient decimal 2)\n              (cons (if (= (quotient decimal\
    \ 2) 0)\n                       '0\n                       '1)\n             \
    \       result)))))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        result\n        (loop (quotient decimal\
    \ 2)\n              (cons (if (= (modulo decimal 2) 0)\n                     \
    \  '0\n                       '1)\n                    result)))))\n", "  (define\
    \ (helper decimal acc)\n    (if (= decimal 0)\n        acc\n        (helper (quotient\
    \ decimal 2) (conj acc '0)))\n    (helper (quotient decimal 2) acc)))\n  (helper\
    \ decimal '()))\n", "  (let loop ((decimal decimal)\n             (result '()))\n\
    \    (if (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n \
    \             (cons 0 (if (= (quotient decimal 2) 0)\n                       \
    \  '1\n                         '0)))\n        (loop (quotient decimal 2)\n  \
    \            (cons 1 (if (= (quotient decimal 2) 0)\n                        \
    \ '0\n                         '1))))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (zero? decimal)\n        result\n       \
    \ (loop (quotient decimal 2)\n               (cons 0 (if (zero? (quotient decimal\
    \ 2)) '1\n                            (if (zero? (quotient decimal 3)) '0\n  \
    \                              (if (zero? (quotient decimal 4)) '1\n         \
    \                           '0))))))))\n", "  (let loop ((decimal decimal)\n \
    \            (binary '())\n             (count 0))\n    (if (= decimal 0)\n  \
    \      (reverse binary)\n        (loop (quotient decimal 2)\n               (conj\
    \ binary (if (= (modulo decimal 2) 0)\n                               '1\n   \
    \                            '0)))\n        (loop (quotient decimal 2)\n     \
    \          (conj binary 'db)\n               (+ count 1)))))\n", "  (let loop\
    \ ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n    \
    \    result\n        (loop (quotient decimal 2)\n              (cons (if (= (quotient\
    \ decimal 2) 0)\n                       '0\n                       '1)\n     \
    \               result))))))\n", "  (let loop ((decimal decimal)\n           \
    \  (result '()))\n    (cond ((= decimal 0) result)\n          ((even? decimal)\
    \ (loop (/ decimal 2) (append result 'db)))\n          (else (loop (/ decimal\
    \ 2) (append result '0))))))\n", "  (let ([remainder (remainder decimal 2)])\n\
    \    (if (= remainder 0)\n        '()\n        (append (list 'db) (decimal_to_binary\
    \ remainder))))))\n", "  (let ([remainder (modulo decimal 2)])\n    (if (= remainder\
    \ 0)\n        (string-append \"0\" '(1 0 0))\n        (string-append \"1\" '(0\
    \ 1 0)))))\n", "  (let loop ((decimal decimal)\n             (result '()))\n \
    \   (if (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n  \
    \            (cons (if (= (modulo decimal 2) 0)\n                       '0\n \
    \                      '1)\n                    result)))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (quotient decimal 2)\n              (cons (if (= (modulo decimal\
    \ 2) 0)\n                       '0\n                       '1)\n             \
    \       result)))))\n", "  (define (helper decimal acc)\n    (if (= decimal 0)\n\
    \        acc\n        (helper (quotient decimal 2) (conj acc '0)))\n    (helper\
    \ (quotient decimal 2) acc)))\n  (helper decimal '()))\n", "  (define (helper\
    \ decimal result)\n    (if (= decimal 0)\n        result\n        (helper (quotient\
    \ decimal 2) (conj result (if (= (quotient decimal 2) 0) '1\n                \
    \                                        '0)))\n      )\n  )\n  (helper decimal\
    \ '())\n)\n", "  (let loop ((decimal decimal)\n             (result '()))\n  \
    \  (if (zero? decimal)\n        result\n        (loop (quotient decimal 2)\n \
    \             (cons (if (even? decimal)\n                       '1\n         \
    \              '0)\n                    result)))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        (reverse\
    \ result)\n        (loop (quotient decimal 2)\n              (cons (if (= (quotient\
    \ decimal 2) 0)\n                       '0\n                       '1)\n     \
    \               result)))))\n", "  (let loop ((decimal decimal)\n            \
    \ (result '()))\n    (if (= decimal 0)\n        result\n        (loop (sub1 decimal)\n\
    \              (cons (char->integer decimal)\n                    result)))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        (reverse result)\n        (loop (quotient decimal 2)\n         \
    \     (cons (if (= (quotient decimal 2) 0)\n                       '0\n      \
    \                 '1)\n                    result)))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (quotient decimal 2)\n              (cons (if (= (quotient decimal\
    \ 2) 0)\n                       '0\n                       '1)\n             \
    \       result)))))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        result\n        (loop (quotient decimal\
    \ 2)\n              (cons (if (= (quotient decimal 2) 0)\n                   \
    \    '0\n                       '1)\n                    result)))))\n", "  (let\
    \ ([remainder (modulo decimal 2)])\n    (if (= remainder 0)\n        (string-append\
    \ \"0\" '(1 0 0))\n        (string-append '(0 1 0) (decimal_to_binary (remainder\
    \ 2))))))\n", "  (let loop ((decimal decimal)\n             (result '()))\n  \
    \  (if (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n   \
    \           (cons (if (= (quotient decimal 2) 0)\n                       '0\n\
    \                       '1)\n                    result)))))\n", "  (let ([remainder\
    \ (modulo decimal 2)])\n    (if (= remainder 0)\n        (string-append \"0\"\
    \ '(1 0))\n        (string-append '(0 1) (decimal_to_binary remainder))))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        (reverse result)\n        (loop (quotient decimal 2)\n         \
    \     (cons (if (= (modulo decimal 2) 0)\n                       '0\n        \
    \               '1)\n                    result))))))\n", "  (let ([remainder\
    \ (remainder decimal 2)])\n    (if (= remainder 0)\n        (string-append \"\
    0\" \"\")\n        (string-append \"1\" \"\")\n    )\n    (decimal_to_binary (remainder\
    \ decimal 2))\n  )\n)\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        (reverse result)\n        (loop (quotient\
    \ decimal 2)\n               (conj result (if (= decimal 1)\n                \
    \               '1\n                               '0)))\n        (loop (quotient\
    \ decimal 2)\n               (conj result 'db))))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        (reverse\
    \ result)\n        (loop (quotient decimal 2)\n              (cons (if (= (modulo\
    \ decimal 2) 0)\n                       '0\n                       '1)\n     \
    \               result)))))\n", "  (let loop ((decimal decimal)\n            \
    \ (result '()))\n    (if (= decimal 0)\n        (reverse result)\n        (loop\
    \ (quotient decimal 2)\n              (cons (if (= (modulo decimal 2) 0)\n   \
    \                    '1\n                       '0)\n                    result)))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (< decimal\
    \ 0)\n        result\n        (loop (sub1 decimal)\n              (append result\
    \ (list '(if (= decimal 0) '0 '1))))))\n", "  (let loop ((decimal decimal)\n \
    \            (result '()))\n    (if (< decimal 10)\n        (loop (sub1 decimal)\n\
    \               (cons (char (expt 2 decimal)) result))\n        (loop (sub1 decimal)\n\
    \               (cons (char 'db) (cons (char (expt 2 decimal)) result))))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (sub1 decimal)\n              (append result\
    \ (list '(if (= decimal 0) '0 '1)))))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        (reverse result)\n\
    \        (loop (quotient decimal 2)\n               (cons 0 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0)))\n     \
    \   (loop (quotient decimal 2)\n               (cons 1 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0))))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (sub1 decimal)\n              (cons (char->int\
    \ (modulo (remainder decimal 2) 2) result)))))\n  result)\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (sub1 decimal)\n              (append result (list 'db))))))\n",
  "  (let ([remainder (modulo decimal 2)])\n    (cond\n      [(= remainder 0) \"0\"\
    ]\n      [(= remainder 1) \"1\"]\n      [else (decimal_to_binary (quotient decimal\
    \ 2))])))\n", "  (let loop ((decimal decimal)\n             (result '()))\n  \
    \  (if (= decimal 0)\n        (reverse result)\n        (loop (quotient decimal\
    \ 2)\n              (cons (if (= (modulo decimal 2) 0)\n                     \
    \  '1\n                       '0)\n                    result)))))\n", "  (let\
    \ loop ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n\
    \        (reverse result)\n        (loop (quotient decimal 2)\n              \
    \ (cons (if (= (quotient decimal 2) 0)\n                         '0\n        \
    \                 '1)\n                     result)))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (quotient decimal 2)\n              (cons 0 (if (= (quotient decimal\
    \ 2) 0)\n                         '1\n                         '0)))\n       \
    \ (loop (quotient decimal 2)\n              (cons 1 (if (= (quotient decimal 2)\
    \ 0)\n                         '0\n                         '1))))))\n", "  (let\
    \ loop ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n\
    \        (reverse result)\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0)\n                          '1\n           \
    \               '0))\n              (cons 'db (reverse result)))))\n  (loop (quotient\
    \ decimal 2)\n        '()\n        'db))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (quotient decimal 2)\n              (cons 0 (if (= (quotient decimal 2) 0)\n\
    \                         '1\n                         '0)))\n        (loop (quotient\
    \ decimal 2)\n              (cons 1 (if (= (quotient decimal 2) 0)\n         \
    \                '0\n                         '1))))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (quotient decimal 2)\n               (cons 0 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0)))\n     \
    \   (loop (quotient decimal 2)\n               (cons 1 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0))))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (modulo decimal 2) 0)\n                       '0\n                  \
    \     '1)\n                    result)))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (quotient decimal 2)\n              (cons (if (= (modulo decimal 2) 0)\n   \
    \                    '0\n                       '1)\n                    result)))))\n",
  "  (define (helper decimal result)\n    (if (= decimal 0)\n        result\n    \
    \    (helper (quotient decimal 2) (cons 0 (cons 1 (helper quotient result))))))\n\
    \  (helper decimal '()))\n", "  (let ([remainder (remainder decimal 2)])\n   \
    \ (if (= remainder 0)\n        (string-append \"0\" \"\")\n        (string-append\
    \ \"1\" \"\")\n    )\n    (decimal_to_binary (remainder decimal 2))\n  )\n)\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0)\n                          '1\n           \
    \               '0)))\n        (loop (quotient decimal 2)\n              (cons\
    \ 1 (if (= (quotient decimal 2) 0)\n                          '1\n           \
    \               '0))))))\n", "  (define (helper decimal acc)\n    (if (= decimal\
    \ 0)\n        (reverse acc)\n        (helper (quotient decimal 2) (conj acc '0)))\n\
    \    (helper (quotient decimal 2) '())))\n  (helper decimal '()))\n", "  (define\
    \ (helper decimal acc)\n    (cond\n      [(= decimal 0) acc]\n      [(= decimal\
    \ 1) (cons '1 (helper decimal acc))]\n      [else (helper (quotient decimal 2)\
    \ (cons (remainder decimal 2) acc))]))\n  (helper decimal '()))\n", "  (let loop\
    \ ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n    \
    \    result\n        (loop (sub1 decimal)\n              (append result (list\
    \ '(if (= decimal 0) '0 '1))))))\n  result)\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (cond ((= decimal 0)\n           (append result\
    \ 'db))\n          ((even? decimal)\n           (loop (/ decimal 2)\n        \
    \         (append result '(0 1))))\n          (else\n           (loop (/ decimal\
    \ 2)\n                 (append result '(1 0)))))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (< decimal 0)\n        result\n\
    \        (loop (- decimal 1)\n              (cons decimal result)))))\n", "  (let\
    \ loop ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n\
    \        result\n        (loop (quotient decimal 2)\n              (cons (if (=\
    \ (modulo decimal 2) 0)\n                       '0\n                       '1)\n\
    \                    result)))))\n", "  (define (helper decimal result)\n    (if\
    \ (= decimal 0)\n        result\n        (helper (quotient decimal 2) (append\
    \ result (list '(or '0 (modulo decimal 2))))))\n    (helper (quotient decimal\
    \ 2) '())))\n  (helper decimal '()))\n", "  (define (helper decimal remainder\
    \ result)\n    (cond\n      [(= decimal 0) result]\n      [(= remainder 0) (helper\
    \ decimal remainder (cons 0 result))]\n      [(= remainder 1) (helper decimal\
    \ remainder (cons 1 result))]\n      [(= remainder 2) (helper decimal remainder\
    \ (cons 2 result))]\n      [(= remainder 3) (helper decimal remainder (cons 3\
    \ result))]\n      [(= remainder 4) (helper decimal remainder (cons 4 result))]\n\
    \      [(= remainder 5) (helper decimal remainder (cons 5 result))]\n      [(=\
    \ remainder 6) (helper decimal remainder (cons 6 result))]\n      [(= remainder\
    \ 7) (helper decimal remainder (cons 7 result))]\n      [(= remainder 8) (helper\
    \ decimal remainder (cons 8 result))]\n      [(= remainder 9) (helper decimal\
    \ remainder (cons 9 result))]\n      [else (helper decimal remainder (cons 10\
    \ result))]\n    )\n  )\n  (helper decimal decimal '())\n)\n", "  (let ([remainder\
    \ (modulo decimal 2)])\n    (if (= remainder 0)\n        (string-append \"0\"\
    \ '(1 0 0))\n        (string-append \"1\" '(0 1 0)))))\n", "  (define (helper\
    \ decimal acc)\n    (if (= decimal 0)\n        acc\n        (helper (quotient\
    \ decimal 2) (cond [(= (quotient decimal 2) 0) (cons 0 acc)]\n               \
    \                           [(= (quotient decimal 2) 1) (cons 1 acc)]\n      \
    \                                    [else (cons (quotient decimal 2) acc)]))))\n\
    \  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        (reverse result)\n        (loop (quotient\
    \ decimal 2)\n              (cons (if (= (quotient decimal 2) 0)\n           \
    \            '0\n                       '1)\n                    result)))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (quotient decimal 2) 0) '0 '1) result)))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        (reverse\
    \ result)\n        (loop (quotient decimal 2)\n              (cons (if (= (modulo\
    \ decimal 2) 0)\n                       '0\n                       '1)\n     \
    \               result)))))\n", "  (let loop ((decimal decimal)\n            \
    \ (result '()))\n    (if (= decimal 0)\n        result\n        (loop (quotient\
    \ decimal 2)\n              (cons (if (= (modulo decimal 2) 0)\n             \
    \          '1\n                       '0)\n                    result)))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (modulo decimal 2) 0)\n                       '0\n                  \
    \     '1)\n                    result)))))\n", "  (let ([remainder (modulo decimal\
    \ 2)])\n    (if (= remainder 0)\n        (string-append \"0\" \"\")\n        (string-append\
    \ \"1\" \"\")\n    )\n    (let ([remainder (modulo decimal 2)])\n      (if (=\
    \ remainder 0)\n          (string-append \"0\" \"\")\n          (string-append\
    \ \"1\" \"\")\n      )\n      (let ([remainder (modulo decimal 2)])\n        (if\
    \ (= remainder 0)\n            (string-append \"0\" \"\")\n            (string-append\
    \ \"1\" \"\")\n        )\n        (let ([remainder (modulo decimal 2)])\n    \
    \      (if (= remainder 0)\n              (string-append \"0\" \"\")\n       \
    \       (string-append \"1\" \"\")\n          )\n          (let ([remainder (modulo\
    \ decimal 2)])\n            (if (= remainder 0)\n                (string-append\
    \ \"0\" \"\")\n                (string-append \"1\" \"\")\n            )\n   \
    \         (let ([remainder (modulo decimal 2)])\n              (if (= remainder\
    \ 0)\n                  (string-append \"0\" \"\")\n                  (string-append\
    \ \"1\" \"\")\n              )\n              (let ([remainder (modulo decimal\
    \ 2)])\n                (if (= remainder 0)\n                    (string-append\
    \ \"0\" \"\")\n                    (string-append \"1\" \"\")\n              \
    \  )\n                (let ([remainder (modulo decimal 2)])\n                \
    \  (if (= remainder 0)\n                      (string-append \"0\" \"\")\n   \
    \                   (string-append \"1\" \"\")\n                  )\n        \
    \          (let ([remainder (modulo decimal 2)])\n                    (if (= remainder\
    \ 0)\n                        (string-append \"0\" \"\")\n                   \
    \     (string-append \"1\" \"\")\n                    )\n                    (let\
    \ ([remainder (modulo decimal 2)])\n                      (if (= remainder 0)\n\
    \                          (string-append \"0\" \"\")\n                      \
    \    (string-append \"1\" \"\")\n                      )\n                   \
    \   (let ([remainder (modulo decimal 2)])\n                        (if (= remainder\
    \ 0)\n                            (string-append \"0\" \"\")\n               \
    \             (string-append \"1\" \"\")\n                        )\n        \
    \                (let ([remainder (modulo decimal 2)])\n                     \
    \     (if (= remainder 0)\n                              (string-append \"0\"\
    \ \"\")\n                              (string-append \"1\" \"\")\n          \
    \                )\n                          (let ([remainder (modulo decimal\
    \ 2)])\n                            (if (= remainder 0)\n                    \
    \            (string-append \"0\" \"\")\n                                (string-append\
    \ \"1\" \"\")\n                            )\n                            (let\
    \ ([remainder (modulo decimal 2)])\n                              (if (= remainder\
    \ 0)\n", "  (let loop ((decimal decimal)\n             (binary '())\n        \
    \     (count 0))\n    (if (= decimal 0)\n        (reverse binary)\n        (loop\
    \ (quotient decimal 2)\n              (cons (if (= (modulo decimal 2) 0)\n   \
    \                    '1\n                       '0)\n                    binary)\n\
    \              (+ count 1)))))\n", "  (let loop ((decimal decimal)\n         \
    \    (binary '())\n             (count 0))\n    (if (= decimal 0)\n        (reverse\
    \ binary)\n        (loop (quotient decimal 2)\n               (cons (if (= (quotient\
    \ decimal 2) 0)\n                         '1\n                         '0)\n \
    \                    binary)\n               (add1 count))))))\n", "  (define\
    \ (helper decimal acc)\n    (if (= decimal 0)\n        acc\n        (helper (quotient\
    \ decimal 2) (cond [(= (quotient decimal 2) 0) (cons 0 acc)]\n               \
    \                         [(= (quotient decimal 2) 1) (cons 1 acc)]\n        \
    \                                [else (cons 0 (helper 1 (cons 1 acc))))])))\n\
    \  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        (reverse result)\n        (loop (quotient\
    \ decimal 2)\n              (cons (if (= (quotient decimal 2) 0)\n           \
    \            '0\n                       '1)\n                    result))))))\n",
  "  (define (helper decimal acc)\n    (if (= decimal 0)\n        acc\n        (helper\
    \ (quotient decimal 2) (cons 0 (append acc (list '(0 1))))))))\n  (helper decimal\
    \ '()))\n", "  (let loop ((decimal decimal)\n             (result '()))\n    (if\
    \ (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n        \
    \      (cons 0 (if (= (quotient decimal 2) 0)\n                         '1\n \
    \                        '0)))\n        (loop (quotient decimal 2)\n         \
    \     (cons '1 (if (= (quotient decimal 2) 0)\n                         '0\n \
    \                        '1))))))\n", "  (let ([remainder (modulo decimal 2)])\n\
    \    (if (= remainder 0)\n        (string-append \"0\" '(1 0 0))\n        (string-append\
    \ \"1\" '(0 1 0)))))\n", "  (let ([remainder (remainder decimal 2)])\n    (if\
    \ (= remainder 0)\n        (string-append \"0\" \"\")\n        (string-append\
    \ \"1\" \"\")\n    )\n    (let ([remainder (remainder decimal 4)])\n      (if\
    \ (= remainder 0)\n          (string-append \"000\" \"\")\n          (string-append\
    \ \"001\" \"\")\n      )\n      (let ([remainder (remainder decimal 8)])\n   \
    \     (if (= remainder 0)\n            (string-append \"0000\" \"\")\n       \
    \     (string-append \"0001\" \"\")\n        )\n        (let ([remainder (remainder\
    \ decimal 16)])\n          (if (= remainder 0)\n              (string-append \"\
    00000\" \"\")\n              (string-append \"00001\" \"\")\n          )\n   \
    \       (let ([remainder (remainder decimal 32)])\n            (if (= remainder\
    \ 0)\n                (string-append \"000000\" \"\")\n                (string-append\
    \ \"000001\" \"\")\n            )\n            (let ([remainder (remainder decimal\
    \ 64)])\n              (if (= remainder 0)\n                  (string-append \"\
    0000000\" \"\")\n                  (string-append \"0000001\" \"\")\n        \
    \      )\n              (let ([remainder (remainder decimal 128)])\n         \
    \       (if (= remainder 0)\n                    (string-append \"00000000\" \"\
    \")\n                    (string-append \"00000001\" \"\")\n                )\n\
    \                (let ([remainder (remainder decimal 256)])\n                \
    \  (if (= remainder 0)\n                      (string-append \"000000000\" \"\"\
    )\n                      (string-append \"000000001\" \"\")\n                \
    \  )\n                  (let ([remainder (remainder decimal 512)])\n         \
    \           (if (= remainder 0)\n                        (string-append \"0000000000\"\
    \ \"\")\n                        (string-append \"0000000001\" \"\")\n       \
    \             )\n                    (let ([remainder (remainder decimal 1024)])\n\
    \                      (if (= remainder 0)\n                          (string-append\
    \ \"00000000000\" \"\")\n                          (string-append \"00000000001\"\
    \ \"\")\n                      )\n                      (let ([remainder (remainder\
    \ decimal 2048)])\n                        (if (= remainder 0)\n             \
    \               (string-append \"000000000000\" \"\")\n                      \
    \      (string-append \"000000000001\" \"\")\n                        )\n    \
    \                    (let ([remainder (remainder decimal 4096)])\n           \
    \               (if (= remainder 0)\n                              (string-append\
    \ \"0000000000000\" \"\")\n                              (string-append \"0000000000001\"\
    \ \"\")\n                          )\n                          (let ([remainder\
    \ (remainder decimal 8192)])\n                            (if (= remainder 0)\n\
    \                                (string-append \"00000000", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (quotient decimal 2)\n              (cons (if (= (quotient decimal\
    \ 2) 0)\n                       '0\n                       '1)\n             \
    \       result)))))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        result\n        (loop (quotient decimal\
    \ 2)\n               (cons 0 (if (= (quotient decimal 2) 0)\n                \
    \          '1\n                          '0)))\n        (loop (quotient decimal\
    \ 2)\n               (cons 1 (if (= (quotient decimal 2) 0)\n                \
    \          '1\n                          '0))))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (quotient decimal 2)\n              (cons (if (= (quotient decimal 2) 0)\n \
    \                      '0\n                       '1)\n                    result))))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        (reverse result)\n        (loop (quotient decimal 2)\n         \
    \     (cons (if (= (modulo decimal 2) 0)\n                       '1\n        \
    \               '0)\n                    result)))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (quotient decimal 2)\n               (cons 0 (if (= (quotient decimal\
    \ 2) 0)\n                           (list '0 '1)\n                           (list\
    \ '1 '0)))))))\n", "  (let loop ((decimal decimal)\n             (result '()))\n\
    \    (if (= decimal 0)\n        (reverse result)\n        (loop (quotient decimal\
    \ 2)\n              (cons (if (= (modulo decimal 2) 0)\n                     \
    \  '0\n                       '1)\n                    result)))))\n", "  (let\
    \ loop ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n\
    \        result\n        (loop (quotient decimal 2)\n              (cons 0 (if\
    \ (= (quotient decimal 2) 0) '1 '0)))))))\n", "  (define (helper decimal acc)\n\
    \    (if (= decimal 0)\n        acc\n        (helper (quotient decimal 2) (cond\
    \ [(= (quotient decimal 2) 0) (cons 0 acc)]\n                                \
    \        [(= (quotient decimal 2) 1) (cons 1 acc)]\n                         \
    \               [else (cons (quotient decimal 2) acc)]))))\n  (helper decimal\
    \ '()))\n", "  (let loop ((decimal decimal)\n             (result '()))\n    (if\
    \ (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n        \
    \      (cons 0 (if (= (quotient decimal 2) 0)\n                         '1\n \
    \                        '0)))\n        (loop (quotient decimal 2)\n         \
    \     (cons 1 (if (= (quotient decimal 2) 0)\n                         '0\n  \
    \                       '1))))))\n", "  (define (helper decimal result)\n    (if\
    \ (= decimal 0)\n        result\n        (helper (quotient decimal 2) (conj result\
    \ (if (= decimal 1) '1\n                                                     \
    \ '0)))\n      )\n  )\n  (helper decimal '())\n)\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (quotient decimal 2)\n              (cons 0 (if (= (quotient decimal 2) 0)\n\
    \                         '1\n                         '0)))\n        (loop (quotient\
    \ decimal 2)\n              (cons 1 (if (= (quotient decimal 2) 0)\n         \
    \                '0\n                         '1))))))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (quotient decimal 2)\n              (cons (if (= (quotient decimal\
    \ 2) 0)\n                       '0\n                       '1)\n             \
    \       result)))))\n", "  (let ([remainder (remainder decimal 2)])\n    (if (=\
    \ remainder 0)\n        (string-append \"0\" \"\")\n        (string-append \"\
    1\" \"\")\n      )\n    )\n  )\n", "  (let loop ((decimal decimal)\n         \
    \    (result '()))\n    (if (= decimal 0)\n        result\n        (loop (quotient\
    \ decimal 2)\n               (cons 0 (if (= (quotient decimal 2) 0)\n        \
    \                  '1\n                          '0)))\n        (loop (quotient\
    \ decimal 2)\n               (cons 1 (if (= (quotient decimal 2) 0)\n        \
    \                  '1\n                          '0))))\n    (append result 'db)))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        (reverse result)\n        (loop (quotient decimal 2)\n         \
    \      (cons (if (= (modulo decimal 2) 0)\n                         '1\n     \
    \                    '0)\n                     (reverse result)))))\n  '())\n",
  "  (let loop ((decimal decimal)\n             (binary '())\n             (count\
    \ 0))\n    (if (= decimal 0)\n        (reverse binary)\n        (loop (quotient\
    \ decimal 2)\n              (cons (if (= (quotient decimal 2) 0)\n           \
    \            '0\n                       '1)\n                    binary)\n   \
    \           (+ count 1)))))\n", "  (let ([remainder (modulo decimal 2)])\n   \
    \ (if (= remainder 0)\n        (string-append \"0\" '(1 0))\n        (string-append\
    \ '(0 1) (decimal_to_binary remainder))))))\n", "  (let ([remainder (remainder\
    \ decimal 2)])\n    (if (= remainder 0)\n        (string-append \"0\" \"\")\n\
    \        (string-append \"1\" \"\")\n      )\n    )\n  )\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (sub1 decimal)\n              (append result (list '(if (= decimal\
    \ 0) '0 '1))))))\n  result)\n", "  (let ([remainder (modulo decimal 2)])\n   \
    \ (if (= remainder 0)\n        (string-append \"0\" '(1 0))\n        (string-append\
    \ '(0 1) (decimal_to_binary (remainder 2))))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        (reverse result)\n\
    \        (loop (quotient decimal 2)\n              (cons (if (= (modulo decimal\
    \ 2) 0)\n                       '1\n                       '0)\n             \
    \       result))))))\n", "  (define (helper decimal result)\n    (cond [(= decimal\
    \ 0) result]\n          [(= decimal 1) (helper decimal (append result '0))]\n\
    \          [else (helper decimal (append result '1))]))\n  (helper decimal '()))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (quotient decimal 2) 0)\n                       '0\n                \
    \       '1)\n                    result)))))\n", "  (let loop ((decimal decimal)\n\
    \             (binary '())\n             (count 0))\n    (if (= decimal 0)\n \
    \       (reverse binary)\n        (loop (quotient decimal 2)\n               (cons\
    \ (if (= (quotient decimal 2) 0)\n                         '1\n              \
    \           '0)\n                     binary)\n               (+ count 1)))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        (reverse result)\n        (loop (quotient decimal 2)\n         \
    \      (cons 0 (if (= (quotient decimal 2) 0)\n                         '1\n \
    \                        '0)))\n        (loop (quotient decimal 2)\n         \
    \      (cons 1 (if (= (quotient decimal 2) 0)\n                         '0\n \
    \                        '1))))))\n", "  (let loop ((decimal decimal)\n      \
    \       (result '()))\n    (if (= decimal 0)\n        result\n        (loop (quotient\
    \ decimal 2)\n              (cons 0 (if (= (quotient decimal 2) 0)\n         \
    \                '1\n                         '0)))\n        (loop (quotient decimal\
    \ 2)\n              (cons 1 (if (= (quotient decimal 2) 0)\n                 \
    \        '0\n                         '1))))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (quotient decimal 2)\n              (cons (if (= (modulo decimal 2) 0) '0 '1)\
    \ result)))))\n", "  (let loop ((decimal decimal)\n             (result '()))\n\
    \    (if (= decimal 0)\n        result\n        (loop (sub1 decimal)\n       \
    \       (append result (list '(if (= decimal 0) '0 '1)))))))\n", "  (define (helper\
    \ decimal acc)\n    (if (= decimal 0)\n        acc\n        (helper (quotient\
    \ decimal 2) (cond [(= (quotient decimal 2) 0) (cons 0 acc)]\n               \
    \                         [(= (quotient decimal 2) 1) (cons 1 acc)]\n        \
    \                                [else (cons 0 (helper 1 (cons 1 acc))))])))\n\
    \  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n             (binary\
    \ '())\n             (count 0))\n    (if (> decimal 0)\n        (loop (- decimal\
    \ 1)\n               (cons (char->int (floor (/ decimal 2))) binary)\n       \
    \        (+ count 1))\n        (append (list 'db) binary)\n        binary)))\n",
  "  (define (helper decimal acc)\n    (if (= decimal 0)\n        (reverse acc)\n\
    \        (helper (quotient decimal 2) (conj acc '0)))\n    (helper (quotient decimal\
    \ 2) '())))\n  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n   \
    \          (result '()))\n    (if (= decimal 0)\n        (reverse result)\n  \
    \      (loop (quotient decimal 2)\n              (cons 0 (if (= (quotient decimal\
    \ 2) 0)\n                         '1\n                         '0)))\n       \
    \ (loop (quotient decimal 2)\n              (cons 1 (if (= (quotient decimal 2)\
    \ 0)\n                         '0\n                         '1))))))\n", "  (let\
    \ loop ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n\
    \        result\n        (loop (quotient decimal 2)\n               (cons 0 (if\
    \ (= (quotient decimal 2) 0)\n                           #t\n                \
    \           (if (= (quotient decimal 2) 1)\n                               #t\n\
    \                               #f))))))\n  result)\n", "  (let ([remainder (modulo\
    \ decimal 2)])\n    (if (= remainder 0)\n        (string-append \"0\" \"\")\n\
    \        (string-append \"1\" \"\")\n      )\n      (let ([remainder (modulo decimal\
    \ 2)])\n        (if (= remainder 0)\n            (string-append \"0\" \"\")\n\
    \            (string-append \"1\" \"\")\n          )\n          (let ([remainder\
    \ (modulo decimal 2)])\n            (if (= remainder 0)\n                (string-append\
    \ \"0\" \"\")\n                (string-append \"1\" \"\")\n              )\n \
    \             (let ([remainder (modulo decimal 2)])\n                (if (= remainder\
    \ 0)\n                    (string-append \"0\" \"\")\n                    (string-append\
    \ \"1\" \"\")\n                  )\n                  (let ([remainder (modulo\
    \ decimal 2)])\n                    (if (= remainder 0)\n                    \
    \    (string-append \"0\" \"\")\n                        (string-append \"1\"\
    \ \"\")\n                      )\n                      (let ([remainder (modulo\
    \ decimal 2)])\n                        (if (= remainder 0)\n                \
    \            (string-append \"0\" \"\")\n                            (string-append\
    \ \"1\" \"\")\n                          )\n                          (let ([remainder\
    \ (modulo decimal 2)])\n                            (if (= remainder 0)\n    \
    \                            (string-append \"0\" \"\")\n                    \
    \            (string-append \"1\" \"\")\n                              )\n   \
    \                           (let ([remainder (modulo decimal 2)])\n          \
    \                      (if (= remainder 0)\n                                 \
    \   (string-append \"0\" \"\")\n                                    (string-append\
    \ \"1\" \"\")\n                                  )\n                         \
    \         (let ([remainder (modulo decimal 2)])\n                            \
    \        (if (= remainder 0)\n                                        (string-append\
    \ \"0\" \"\")\n                                        (string-append \"1\" \"\
    \")\n                                      )\n                               \
    \       (let ([remainder (modulo decimal 2)])\n                              \
    \          (if (= remainder 0)\n                                            (string-append\
    \ \"0\" \"\")\n                                            (string-append \"1\"\
    \ \"\")\n                                          )\n                       \
    \                   (let ([remainder (modulo decimal 2)])\n                  \
    \                          (if (= remainder 0)\n                             \
    \                   (string-append \"0\" \"\")\n                             \
    \                   (string-append \"1\" \"\")\n                             \
    \                 )\n                                              (let ([remainder\
    \ (modulo decimal 2)])\n                                                (if (=\
    \ remainder 0)\n                                                    (string-append\
    \ \"0\" \"\")\n                                                    (string-append\
    \ \"1\" \"\")\n                                                  )\n         \
    \                                         (let ([remainder (modulo decimal 2)])\n\
    \                                                    (if (= remainder 0)\n   \
    \                                                     (string-append \"0\" \"\"\
    )\n                                                        (string-append \"1\"\
    \ \"\")\n                                                      )\n           \
    \                                           (let ([remainder (", "  (define (helper\
    \ decimal result)\n    (if (= decimal 0)\n        result\n        (helper (quotient\
    \ decimal 2) (conj result (if (= decimal 1) '1\n                             \
    \                       '0)))\n      )\n  )\n  (helper decimal '())\n)\n", " \
    \ (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0)\n                         '1\n            \
    \             '0)))\n        (loop (quotient decimal 2)\n              (cons '1\
    \ (if (= (quotient decimal 2) 0)\n                         '0\n              \
    \           '1))))))\n", "  (let ([remainder (remainder decimal 2)])\n    (if\
    \ (= remainder 0)\n        (string-append \"0\" \"\")\n        (string-append\
    \ \"1\" \"\")\n      )\n    )\n  )\n", "  (let loop ((decimal decimal)\n     \
    \        (binary '())\n             (count 0))\n    (if (< decimal 0)\n      \
    \  (reverse binary)\n        (loop (- decimal 1)\n              (cons (char (expt\
    \ 2 count))\n                    binary)\n              (inc count))))))\n", " \
    \ (let loop ((decimal decimal)\n             (binary '())\n             (count\
    \ 0))\n    (if (zero? decimal)\n        (reverse binary)\n        (loop (quotient\
    \ decimal 2)\n              (cons (if (even? decimal)\n                      \
    \ '1\n                       '0)\n                    binary)\n              (inc\
    \ count))))))\n", "  (let loop ((decimal decimal)\n             (result '()))\n\
    \    (if (= decimal 0)\n        result\n        (loop (quotient decimal 2)\n \
    \             (cons 0 (if (= (quotient decimal 2) 0) '1 '0))\n              (cons\
    \ 'db (if (= (quotient decimal 2) 0) '1 '0)))))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        (reverse result)\n\
    \        (loop (quotient decimal 2)\n               (cons 0 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0)))\n     \
    \   (loop (quotient decimal 2)\n               (cons 1 (if (= (quotient decimal\
    \ 2) 0)\n                          '1\n                          '0))))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (cond ((= decimal\
    \ 0) result)\n          ((even? decimal) (loop (/ decimal 2) (cons (char '0) result)))\n\
    \          (else (loop (quotient decimal 2) (cons (char '1) result))))))\n", " \
    \ (let ([remainder (modulo decimal 2)])\n    (if (= remainder 0)\n        (string-append\
    \ \"0\" '(1 0 0))\n        (string-append '(0 1 0) (decimal_to_binary (- remainder\
    \ 2))))))\n", "  (let loop ((decimal decimal)\n             (result '()))\n  \
    \  (if (= decimal 0)\n        result\n        (loop (sub1 decimal)\n         \
    \     (append result (list '(if (= decimal 0) '1\n                           \
    \           (if (= decimal 1) '0\n                                          (if\
    \ (= decimal 2) '1\n                                              (if (= decimal\
    \ 3) '10\n                                                  (if (= decimal 4)\
    \ '11\n                                                      (if (= decimal 5)\
    \ '100\n                                                          (if (= decimal\
    \ 6) '101\n                                                              (if (=\
    \ decimal 7) '110\n                                                          \
    \      (if (= decimal 8) '111\n                                              \
    \                      (if (= decimal 9) '100\n                              \
    \                                          (if (= decimal 10) '101\n         \
    \                                                                   (if (= decimal\
    \ 11) '110\n                                                                 \
    \               (if (= decimal 12) '111\n                                    \
    \                                                (if (= decimal 13) '100\n   \
    \                                                                            \
    \         (if (= decimal 14) '101\n                                          \
    \                                                  (if (= decimal 15) '110\n \
    \                                                                            \
    \                   (if (= decimal 16) '111\n                                \
    \                                                                    (if (= decimal\
    \ 17) '100\n                                                                 \
    \                                       (if (= decimal 18) '101\n            \
    \                                                                            \
    \                    (if (= decimal 19) '110\n                               \
    \                                                                            \
    \     (if (= decimal 20) '111\n                                              \
    \                                                                      (if (=\
    \ decimal 21) '100\n                                                         \
    \                                                               (if (= decimal\
    \ 22) '101\n                                                                 \
    \                                                           (if (= decimal 23)\
    \ '110\n                                                                     \
    \                                                           (if (= decimal 24)\
    \ '111\n                                                                     \
    \                                                               (if (= decimal\
    \ 25) '100\n                                                                 \
    \                                                                       (if (=\
    \ decimal 26) '101\n                                                         \
    \                                                                            \
    \       (if (= decimal 27) '110\n                                            \
    \                                                                            \
    \                        (if (= decimal 28) '111\n                           \
    \                                                                            \
    \                                             (if (= decimal 29) '100\n      \
    \                                                                            \
    \                                                                      (if (=\
    \ decimal 30) '101\n                                                         \
    \                                                                            \
    \                       (if (= decimal 31) '110\n                            \
    \                                                                            \
    \                                                        (if (= decimal 32) '111\n\
    \                                                                            \
    \                                                                            \
    \            (if (= decimal 33) '100\n                                       \
    \                                                                            \
    \                                                     (if (= decimal 34) '101\n\
    \                                                                            \
    \                                                                            \
    \                    (if (= decimal 35) '110\n                               \
    \                                                                            \
    \                                                                     (if (= decimal\
    \ 36) '111\n                                                                 \
    \                                                                            \
    \                                       (if (= decimal 37) '100\n            \
    \                                                                            \
    \                                                                            \
    \                    (if (= decimal 38) '101\n                               \
    \                                                                            \
    \                                                                            \
    \     (if (= decimal 39) '110\n                                              \
    \                                                                            \
    \                                                                      (if (=\
    \ decimal 40) '111\n                                                         \
    \                                                                            \
    \                                                               (if (= decimal\
    \ 41) '100\n                                                                 \
    \                                                                            \
    \                                                           (if (= decimal 42)\
    \ '101\n                                                                     \
    \                                                                            \
    \                                                           (if (= decimal 43)\
    \ '", "  (let ([remainder (modulo decimal 2)])\n    (if (= remainder 0)\n    \
    \    (string-append \"0\" \"\")\n        (string-append \"1\" \"\")\n      )\n\
    \      (let ([remainder (modulo decimal 2)])\n        (if (= remainder 0)\n  \
    \          (string-append \"0\" \"\")\n            (string-append \"1\" \"\")\n\
    \          )\n          (let ([remainder (modulo decimal 2)])\n            (if\
    \ (= remainder 0)\n                (string-append \"0\" \"\")\n              \
    \  (string-append \"1\" \"\")\n              )\n              (let ([remainder\
    \ (modulo decimal 2)])\n                (if (= remainder 0)\n                \
    \    (string-append \"0\" \"\")\n                    (string-append \"1\" \"\"\
    )\n                  )\n                  (let ([remainder (modulo decimal 2)])\n\
    \                    (if (= remainder 0)\n                        (string-append\
    \ \"0\" \"\")\n                        (string-append \"1\" \"\")\n          \
    \            )\n                      (let ([remainder (modulo decimal 2)])\n\
    \                        (if (= remainder 0)\n                            (string-append\
    \ \"0\" \"\")\n                            (string-append \"1\" \"\")\n      \
    \                    )\n                          (let ([remainder (modulo decimal\
    \ 2)])\n                            (if (= remainder 0)\n                    \
    \            (string-append \"0\" \"\")\n                                (string-append\
    \ \"1\" \"\")\n                              )\n                             \
    \ (let ([remainder (modulo decimal 2)])\n                                (if (=\
    \ remainder 0)\n                                    (string-append \"0\" \"\"\
    )\n                                    (string-append \"1\" \"\")\n          \
    \                        )\n                                  (let ([remainder\
    \ (modulo decimal 2)])\n                                    (if (= remainder 0)\n\
    \                                        (string-append \"0\" \"\")\n        \
    \                                (string-append \"1\" \"\")\n                \
    \                      )\n                                      (let ([remainder\
    \ (modulo decimal 2)])\n                                        (if (= remainder\
    \ 0)\n                                            (string-append \"0\" \"\")\n\
    \                                            (string-append \"1\" \"\")\n    \
    \                                      )\n                                   \
    \       (let ([remainder (modulo decimal 2)])\n                              \
    \              (if (= remainder 0)\n                                         \
    \       (string-append \"0\" \"\")\n                                         \
    \       (string-append \"1\" \"\")\n                                         \
    \     )\n                                              (let ([remainder (modulo\
    \ decimal 2)])\n                                                (if (= remainder\
    \ 0)\n                                                    (string-append \"0\"\
    \ \"\")\n                                                    (string-append \"\
    1\" \"\")\n                                                  )\n             \
    \                                     (let ([remainder (modulo decimal 2)])\n\
    \                                                    (if (= remainder 0)\n   \
    \                                                     (string-append \"0\" \"\"\
    )\n                                                        (string-append \"1\"\
    \ \"\")\n                                                      )\n           \
    \                                           (let ([remainder (", "  (let loop\
    \ ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n    \
    \    result\n        (loop (sub1 decimal)\n              (append result (list\
    \ '(if (= decimal 0) '0 '1)))))))\n", "  (define (helper decimal result)\n   \
    \ (if (= decimal 0)\n        result\n        (helper (quotient decimal 2) (concat\
    \ result (list (char '0'))))\n      )\n    )\n  (helper decimal '())\n)\n", " \
    \ (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (quotient decimal 2) 0)\n                       '0\n                \
    \       '1)\n                    result)))))\n", "  (let ([remainder (modulo decimal\
    \ 2)])\n    (if (= remainder 0)\n        (string-append \"0\" \"\")\n        (string-append\
    \ \"1\" \"\")\n      )\n    (decimal_to_binary (quotient decimal 2))\n    )\n\
    \  )\n", "  (let ([remainder (modulo decimal 2)])\n    (if (= remainder 0)\n \
    \       (string-append \"0\" '(1 0))\n        (string-append '(0 1) (decimal_to_binary\
    \ (remainder 2))))))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        (reverse result)\n        (loop (quotient\
    \ decimal 2)\n              (cons 0 (if (= (quotient decimal 2) 0)\n         \
    \                '1\n                         '0)))\n        (loop (quotient decimal\
    \ 2)\n              (cons 1 (if (= (quotient decimal 2) 0)\n                 \
    \        '1\n                         '0))))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        result\n        (loop\
    \ (sub1 decimal)\n              (cons 0 (if (= (modulo decimal 2) 0)\n       \
    \                  '1\n                         '0)))\n        (loop (sub1 decimal)\n\
    \              (cons 1 (if (= (modulo decimal 2) 0)\n                        \
    \ '0\n                         '1))))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (= decimal 0)\n        (reverse result)\n\
    \        (loop (quotient decimal 2)\n              (cons (if (= (modulo decimal\
    \ 2) 0)\n                       '1\n                       '0)\n             \
    \       result)))))\n", "  (define (helper decimal result)\n    (if (= decimal\
    \ 0)\n        result\n        (helper (quotient decimal 2) (concat result (list\
    \ (char '0' if decimal (mod decimal 2) else '1'))))))\n  (helper decimal '()))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0)\n                         '1\n            \
    \             '0)))\n        (loop (quotient decimal 2)\n              (cons 1\
    \ (if (= (quotient decimal 2) 0)\n                         '0\n              \
    \           '1))))))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        (reverse result)\n        (loop (quotient\
    \ decimal 2)\n              (cons 0 (if (= (quotient decimal 2) 0)\n         \
    \                '1\n                         '0)))\n        (loop (quotient decimal\
    \ 2)\n              (cons 1 (if (= (quotient decimal 2) 0)\n                 \
    \        '0\n                         '1))))))\n", "  (let ([remainder (remainder\
    \ decimal 2)])\n    (if (= remainder 0)\n        (string-append \"0\" \"\")\n\
    \        (string-append \"1\" \"\")\n    )\n    (if (= remainder 1)\n        (string-append\
    \ \"1\" \"\")\n        (string-append \"0\" \"\")\n    )\n    (if (= remainder\
    \ 2)\n        (string-append \"0\" \"\")\n        (string-append \"1\" \"\")\n\
    \    )\n    (if (= remainder 3)\n        (string-append \"1\" \"\")\n        (string-append\
    \ \"0\" \"\")\n    )\n    (if (= remainder 4)\n        (string-append \"1\" \"\
    \")\n        (string-append \"0\" \"\")\n    )\n    (if (= remainder 5)\n    \
    \    (string-append \"1\" \"\")\n        (string-append \"0\" \"\")\n    )\n \
    \   (if (= remainder 6)\n        (string-append \"1\" \"\")\n        (string-append\
    \ \"0\" \"\")\n    )\n    (if (= remainder 7)\n        (string-append \"1\" \"\
    \")\n        (string-append \"0\" \"\")\n    )\n    (if (= remainder 8)\n    \
    \    (string-append \"1\" \"\")\n        (string-append \"0\" \"\")\n    )\n \
    \   (if (= remainder 9)\n        (string-append \"1\" \"\")\n        (string-append\
    \ \"0\" \"\")\n    )\n    (if (= remainder 10)\n        (string-append \"1\" \"\
    \")\n        (string-append \"0\" \"\")\n    )\n    (if (= remainder 11)\n   \
    \     (string-append \"1\" \"\")\n        (string-append \"0\" \"\")\n    )\n\
    \    (if (= remainder 12)\n        (string-append \"1\" \"\")\n        (string-append\
    \ \"0\" \"\")\n    )\n    (if (= remainder 13)\n        (string-append \"1\" \"\
    \")\n        (string-append \"0\" \"\")\n    )\n    (if (= remainder 14)\n   \
    \     (string-append \"1\" \"\")\n        (string-append \"0\" \"\")\n    )\n\
    \    (if (= remainder 15)\n        (string-append \"1\" \"\")\n        (string-append\
    \ \"0\" \"\")\n    )\n    (if (= remainder 16)\n        (string-append \"1\" \"\
    \")\n        (string-append \"0\" \"\")\n    )\n    (if (= remainder 17)\n   \
    \     (string-append \"1\" \"\")\n        (string-append \"0\" \"\")\n    )\n\
    \    (if (= remainder 18)\n        (string-append \"1\" \"\")\n        (string-append\
    \ \"0\" \"\")\n    )\n    (if (= remainder 19)\n        (string-append \"1\" \"\
    \")\n        (string-append \"0\" \"\")\n    )\n    (if (= remainder 20)\n   \
    \     (string-append \"1\" \"\")\n        (string-append \"0\" \"\")\n    )\n\
    \    (if (= remainder 21)\n        (string-append \"1\" \"\")\n        (string-",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0) '1\n                            (if (= (quotient\
    \ decimal 2) 1) '0\n                                (if (= (quotient decimal 2)\
    \ 2) '1\n                                    '0))))))))\n", "  (define (helper\
    \ decimal result)\n    (if (= decimal 0)\n        result\n        (helper (- decimal\
    \ 1) (append result (list '0)))\n    )\n  )\n  (helper decimal '())\n)\n", " \
    \ (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        (reverse result)\n        (loop (sub1 decimal)\n              (append\
    \ result (list '(if (= decimal 0) '0 '1))))))\n", "  (define (helper decimal acc)\n\
    \    (if (= decimal 0)\n        acc\n        (helper (quotient decimal 2) (cond\
    \ [(= (quotient decimal 2) 0) (cons 0 acc)]\n                                \
    \          [(= (quotient decimal 2) 1) (cons 1 acc)]\n                       \
    \                   [else (cons 0 (helper 1 (cons 1 (helper decimal (cons 0 acc))))]))))\n\
    \  (helper decimal '()))\n", "  (define (helper decimal acc)\n    (if (= decimal\
    \ 0)\n        acc\n        (helper (quotient decimal 2) (cond [(= decimal 1) (cons\
    \ 1 acc)]\n                                    [(= decimal 2) (cons 0 acc)]\n\
    \                                    [else (cons 0 (helper quotient acc))]))))\n\
    \  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        (reverse result)\n        (loop (quotient\
    \ decimal 2)\n              (cons (if (= (modulo decimal 2) 0) '0 '1) result)))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (cond ((= decimal\
    \ 0) (append result 'db))\n          ((even? decimal) (loop (/ decimal 2)\n  \
    \                             (cons (char '0) result)))\n          (else (loop\
    \ (/ decimal 2)\n                     (cons (char '1) result))))))\n", "  (let\
    \ loop ((decimal decimal)\n             (result '()))\n    (if (< decimal 10)\n\
    \        (loop (/ decimal 10)\n               (cons decimal result))\n       \
    \ (loop (- decimal 10)\n               (cons 'db result)))))\n", "  (let loop\
    \ ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n    \
    \    (reverse result)\n        (loop (quotient decimal 2)\n               (cons\
    \ (if (= (modulo decimal 2) 0)\n                         '0\n                \
    \         '1)\n                     result)))))\n", "  (let ([remainder (remainder\
    \ decimal 2)])\n    (if (= remainder 0)\n        (string-append \"0\" \"\")\n\
    \        (string-append \"1\" \"\")\n    )\n    (let ([remainder (remainder decimal\
    \ 4)])\n      (if (= remainder 0)\n          (string-append \"000\" \"\")\n  \
    \        (string-append \"001\" \"\")\n      )\n      (let ([remainder (remainder\
    \ decimal 8)])\n        (if (= remainder 0)\n            (string-append \"0000\"\
    \ \"\")\n            (string-append \"0001\" \"\")\n        )\n        (let ([remainder\
    \ (remainder decimal 16)])\n          (if (= remainder 0)\n              (string-append\
    \ \"00000\" \"\")\n              (string-append \"00001\" \"\")\n          )\n\
    \          (let ([remainder (remainder decimal 32)])\n            (if (= remainder\
    \ 0)\n                (string-append \"000000\" \"\")\n                (string-append\
    \ \"000001\" \"\")\n            )\n            (let ([remainder (remainder decimal\
    \ 64)])\n              (if (= remainder 0)\n                  (string-append \"\
    0000000\" \"\")\n                  (string-append \"0000001\" \"\")\n        \
    \      )\n              (let ([remainder (remainder decimal 128)])\n         \
    \       (if (= remainder 0)\n                    (string-append \"00000000\" \"\
    \")\n                    (string-append \"00000001\" \"\")\n                )\n\
    \                (let ([remainder (remainder decimal 256)])\n                \
    \  (if (= remainder 0)\n                      (string-append \"000000000\" \"\"\
    )\n                      (string-append \"000000001\" \"\")\n                \
    \  )\n                  (let ([remainder (remainder decimal 512)])\n         \
    \           (if (= remainder 0)\n                        (string-append \"0000000000\"\
    \ \"\")\n                        (string-append \"0000000001\" \"\")\n       \
    \             )\n                    (let ([remainder (remainder decimal 1024)])\n\
    \                      (if (= remainder 0)\n                          (string-append\
    \ \"00000000000\" \"\")\n                          (string-append \"00000000001\"\
    \ \"\")\n                      )\n                      (let ([remainder (remainder\
    \ decimal 2048)])\n                        (if (= remainder 0)\n             \
    \               (string-append \"000000000000\" \"\")\n                      \
    \      (string-append \"000000000001\" \"\")\n                        )\n    \
    \                    (let ([remainder (remainder decimal 4096)])\n           \
    \               (if (= remainder 0)\n                              (string-append\
    \ \"0000000000000\" \"\")\n                              (string-append \"0000000000001\"\
    \ \"\")\n                          )\n                          (let ([remainder\
    \ (remainder decimal 8192)])\n                            (if (= remainder 0)\n\
    \                                (string-append \"00000000", "  (let ([remainder\
    \ (modulo decimal 2)])\n    (if (= remainder 0)\n        (string-append \"0\"\
    \ '(1 0))\n        (string-append '(0 1) (decimal_to_binary remainder))))))\n",
  "  (define (helper decimal acc)\n    (if (= decimal 0)\n        acc\n        (helper\
    \ (quotient decimal 2) (conj acc '0)))\n    (helper (quotient decimal 2) acc)))\n\
    \  (helper decimal '()))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (= decimal 0)\n        result\n        (loop (quotient decimal\
    \ 2)\n              (cons 0 (if (= (quotient decimal 2) 0)\n                 \
    \         '1\n                          '0)))\n        (loop (quotient decimal\
    \ 2)\n              (cons 1 (if (= (quotient decimal 2) 0)\n                 \
    \         '1\n                          '0))))))\n", "  (let loop ((decimal decimal)\n\
    \             (result '()))\n    (if (< decimal 10)\n        (loop (quotient decimal\
    \ 10)\n               (cons 0 (quotient decimal 10)))\n        (loop (quotient\
    \ decimal 10)\n               (cons 1 (quotient decimal 10))))))\n", "  (let loop\
    \ ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n    \
    \    result\n        (loop (quotient decimal 2)\n              (cons 0 (if (=\
    \ (quotient decimal 2) 0)\n                         '1\n                     \
    \    '0)))\n        (loop (quotient decimal 2)\n              (cons 1 (if (= (quotient\
    \ decimal 2) 0)\n                         '0\n                         '1))))))\n",
  "  (define (helper decimal acc)\n    (cond\n      [(= decimal 0) (cons acc '())]\n\
    \      [(= decimal 1) (cons acc (list '1))]\n      [(= decimal 2) (cons acc (list\
    \ '1 '0))]\n      [(= decimal 3) (cons acc (list '1 '0 '1))]\n      [(= decimal\
    \ 4) (cons acc (list '1 '0 '1 '0))]\n      [(= decimal 5) (cons acc (list '1 '0\
    \ '1 '0 '1))]\n      [(= decimal 6) (cons acc (list '1 '0 '1 '0 '1 '0))]\n   \
    \   [(= decimal 7) (cons acc (list '1 '0 '1 '0 '1 '0 '1))]\n      [(= decimal\
    \ 8) (cons acc (list '1 '0 '1 '0 '1 '0 '1 '0))]\n      [(= decimal 9) (cons acc\
    \ (list '1 '0 '1 '0 '1 '0 '1 '0 '1))]\n      [(= decimal 10) (cons acc (list '1\
    \ '0 '1 '0 '1 '0 '1 '0 '1 '0))]\n      [(= decimal 11) (cons acc (list '1 '0 '1\
    \ '0 '1 '0 '1 '0 '1 '0 '1))]\n      [(= decimal 12) (cons acc (list '1 '0 '1 '0\
    \ '1 '0 '1 '0 '1 '0 '1 '0))]\n      [(= decimal 13) (cons acc (list '1 '0 '1 '0\
    \ '1 '0 '1 '0 '1 '0 '1 '0 '1))]\n      [(= decimal 14) (cons acc (list '1 '0 '1\
    \ '0 '1 '0 '1 '0 '1 '0 '1 '0 '1 '0))]\n      [(= decimal 15) (cons acc (list '1\
    \ '0 '1 '0 '1 '0 '1 '0 '1 '0 '1 '0 '1 '0 '1))]\n      [(= decimal 16) (cons acc\
    \ (list '1 '0 '1 '0 '1 '0 '1 '0 '1 '0 '1 '0 '1 '0 '1 '0))]\n      [(= decimal\
    \ 17) (cons ", "  (let ([remainder (remainder decimal 2)])\n    (if (= remainder\
    \ 0)\n        (string-append \"0\" \"\")\n        (string-append \"1\" \"\")\n\
    \      )\n    )\n  )\n", "  (let ([remainder (modulo decimal 2)])\n    (if (=\
    \ remainder 0)\n        (string-append \"0\" '(1 0 0))\n        (string-append\
    \ \"1\" '(0 1 0)))))\n", "  (let ([remainder (modulo decimal 2)])\n    (if (=\
    \ remainder 0)\n        (string-append \"0\" \"\")\n        (string-append \"\
    1\" \"\")\n    )\n    (decimal_to_binary (quotient decimal 2))\n  )\n)\n", " \
    \ (let loop ((decimal decimal)\n             (result '()))\n    (if (zero? decimal)\n\
    \        result\n        (loop (quotient decimal 2)\n               (cons 0 (if\
    \ (even? decimal) '1 '0))\n               (cons 'db (if (even? decimal) '1 '0)))))))\n",
  "  (let ([remainder (remainder decimal 2)])\n    (if (= remainder 0)\n        (string-append\
    \ \"0\" \"\")\n        (string-append \"1\" \"\")\n      )\n    )\n  )\n)\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ 0 (if (= (quotient decimal 2) 0)\n                          '1\n           \
    \               '0)))\n        (loop (quotient decimal 2)\n              (cons\
    \ 1 (if (= (quotient decimal 2) 0)\n                          '1\n           \
    \               '0))))))\n", "  (define (helper decimal acc)\n    (if (= decimal\
    \ 0)\n        acc\n        (helper (quotient decimal 2) (cond [(= (quotient decimal\
    \ 2) 0) (cons 0 acc)]\n                                        [(= (quotient decimal\
    \ 2) 1) (cons 1 acc)]\n                                        [else (cons 0 (helper\
    \ (quotient decimal 2) (cons 1 (cons 0 acc))))])))\n    (helper (quotient decimal\
    \ 2) (cons 0 (helper (quotient decimal 2) (cons 1 (cons 0 acc)))))))\n", "  (define\
    \ (helper decimal result)\n    (cond\n      [(= decimal 0) result]\n      [(=\
    \ decimal 1) (helper decimal (string-append result \"1\"))]\n      [(= decimal\
    \ 2) (helper decimal (string-append result \"10\"))]\n      [(= decimal 3) (helper\
    \ decimal (string-append result \"100\"))]\n      [(= decimal 4) (helper decimal\
    \ (string-append result \"1000\"))]\n      [(= decimal 5) (helper decimal (string-append\
    \ result \"10000\"))]\n      [(= decimal 6) (helper decimal (string-append result\
    \ \"100000\"))]\n      [(= decimal 7) (helper decimal (string-append result \"\
    1000000\"))]\n      [(= decimal 8) (helper decimal (string-append result \"10000000\"\
    ))]\n      [(= decimal 9) (helper decimal (string-append result \"100000000\"\
    ))]\n      [(= decimal 10) (helper decimal (string-append result \"1000000000\"\
    ))]\n      [(= decimal 11) (helper decimal (string-append result \"10000000000\"\
    ))]\n      [(= decimal 12) (helper decimal (string-append result \"100000000000\"\
    ))]\n      [(= decimal 13) (helper decimal (string-append result \"1000000000000\"\
    ))]\n      [(= decimal 14) (helper decimal (string-append result \"10000000000000\"\
    ))]\n      [(= decimal 15) (helper decimal (string-append result \"100000000000000\"\
    ))]\n      [(= decimal 16) (helper decimal (string-append result \"1000000000000000\"\
    ))]\n      [(= decimal 17) (helper decimal (string-append result \"10000000000000000\"\
    ))]\n      [(= decimal 18) (helper decimal (string-append result \"100000000000000000\"\
    ))]\n      [(= decimal 19) (helper decimal (string-append result \"1000000000000000000\"\
    ))]\n      [(= decimal 20) (helper decimal (string-append result \"10000000000000000000\"\
    ))]\n      [(= decimal 21) (helper decimal (string-append result \"100000000000000000000\"\
    ))]\n      [(= decimal 22) (helper decimal (string-append result \"1000000000000000000000\"\
    ))]\n      [(= decimal 23) (helper decimal (string-append result \"10000000000000000000000\"\
    ))]\n      [(= decimal 24) (helper decimal (string-append result \"100000000000000000000000\"\
    ))]\n      [(= decimal 25) (helper decimal (string-append result \"1000000000000000000000000\"\
    ))]\n      [(= decimal 26) (helper decimal (string-append result \"10000000000000000000000000\"\
    ))]\n      [(= decimal 27) (helper decimal (string-append result \"100000000000000000000000000\"\
    ))]", "  (let loop ((decimal decimal)\n             (result '()))\n    (if (=\
    \ decimal 0)\n        (reverse result)\n        (loop (quotient decimal 2)\n \
    \             (cons (if (= (quotient decimal 2) 0)\n                       '0\n\
    \                       '1)\n                    result)))))\n", "  (define (helper\
    \ decimal result)\n    (if (= decimal 0)\n        result\n        (helper (quotient\
    \ decimal 2) (conj result (if (= (quotient decimal 2) 0) '0 '1)))))\n  (helper\
    \ decimal '()))\n", "  (let loop ((decimal decimal)\n             (binary '())\n\
    \             (count 0))\n    (if (= decimal 0)\n        (reverse binary)\n  \
    \      (loop (quotient decimal 2)\n              (cons (if (= (modulo decimal\
    \ 2) 0)\n                       '1\n                       '0)\n             \
    \       binary)\n              (incf count))))))\n", "  (let ([remainder (remainder\
    \ decimal 2)])\n    (if (= remainder 0)\n        '()\n        (append (list 'db)\
    \ (decimal_to_binary remainder))))))\n", "  (let ([remainder (remainder decimal\
    \ 2)])\n    (if (= remainder 0)\n        '()\n        (append (list 'db) (decimal_to_binary\
    \ remainder))))))\n", "  (define (helper decimal result)\n    (if (= decimal 0)\n\
    \        result\n        (helper (quotient decimal 2) (conj result (if (= (quotient\
    \ decimal 2) 0) '0 '1)))))\n  (helper decimal '()))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        result\n\
    \        (loop (quotient decimal 2)\n              (cons (if (= (quotient decimal\
    \ 2) 0)\n                       '0\n                       '1)\n             \
    \       result)))))\n", "  (let loop ((decimal decimal)\n             (result\
    \ '()))\n    (if (zero? decimal)\n        result\n        (loop (quotient decimal\
    \ 2)\n              (cons (if (even? decimal) '1\n                         '0)\n\
    \                    result)))))\n", "  (let loop ((decimal decimal)\n       \
    \      (result '()))\n    (if (= decimal 0)\n        (reverse result)\n      \
    \  (loop (quotient decimal 2)\n              (cons (if (= (modulo decimal 2) 0)\n\
    \                       '1\n                       '0)\n                    result)))))\n",
  "  (let ([remainder (modulo decimal 2)])\n    (if (= remainder 0)\n        (string-append\
    \ \"0\" '(1 0))\n        (string-append '(0 1) (decimal_to_binary (remainder 1))))))\n",
  "  (define (helper decimal result)\n    (cond\n      [(= decimal 0) result]\n  \
    \    [(= decimal 1) (helper decimal (append result '0))]\n      [(= decimal 2)\
    \ (helper decimal (append result '1))]\n      [(= decimal 3) (helper decimal (append\
    \ result '10))]\n      [(= decimal 4) (helper decimal (append result '11))]\n\
    \      [(= decimal 5) (helper decimal (append result '10))]\n      [(= decimal\
    \ 6) (helper decimal (append result '11))]\n      [(= decimal 7) (helper decimal\
    \ (append result '10))]\n      [(= decimal 8) (helper decimal (append result '11))]\n\
    \      [(= decimal 9) (helper decimal (append result '10))]\n      [(= decimal\
    \ 10) (helper decimal (append result '11))]\n      [(= decimal 11) (helper decimal\
    \ (append result '10))]\n      [(= decimal 12) (helper decimal (append result\
    \ '11))]\n      [(= decimal 13) (helper decimal (append result '10))]\n      [(=\
    \ decimal 14) (helper decimal (append result '11))]\n      [(= decimal 15) (helper\
    \ decimal (append result '10))]\n      [(= decimal 16) (helper decimal (append\
    \ result '11))]\n      [(= decimal 17) (helper decimal (append result '10))]\n\
    \      [(= decimal 18) (helper decimal (append result '11))]\n      [(= decimal\
    \ 19) (helper decimal (append result '10))]\n      [(= decimal 20) (helper decimal\
    \ (append result '11))]\n      [(= decimal 21) (helper decimal (append result\
    \ '10))]\n      [(= decimal 22) (helper decimal (append result '11))]\n      [(=\
    \ decimal 23) (helper decimal (append result '10))]\n      [(= decimal 24) (helper\
    \ decimal (append result '11))]\n      [(= decimal 25) (helper decimal (append\
    \ result '10))]\n      [(= decimal 26) (helper decimal (append result '11))]\n\
    \      [(= decimal 27) (helper decimal (append result '10))]\n      [(= decimal\
    \ 28) (helper decimal (append result '11))]\n      [(= decimal 29) (helper decimal\
    \ (append result '10))]\n      [(= decimal 30) (helper decimal (append result\
    \ '11))]\n      [(= decimal 31) (helper decimal (append result '10))]\n      [(=\
    \ decimal 32) (helper decimal (append result '11))]\n      [(= decimal 33) (helper\
    \ decimal (append result '10))", "  (define (helper decimal acc)\n    (if (= decimal\
    \ 0)\n        acc\n        (helper (quotient decimal 2) (cond [(= (quotient decimal\
    \ 2) 0) '0]\n                                          [(= (quotient decimal 2)\
    \ 1) '1]\n                                          [else 'db])))\n    (helper\
    \ (quotient decimal 2) 'db)))\n  (helper decimal '()))\n", "  (let loop ((decimal\
    \ decimal)\n             (result '()))\n    (if (= decimal 0)\n        (reverse\
    \ result)\n        (loop (quotient decimal 2)\n              (cons (if (= (modulo\
    \ decimal 2) 0)\n                       '1\n                       '0)\n     \
    \               result)))))\n", "  (let loop ((decimal decimal)\n            \
    \ (result '()))\n    (if (= decimal 0)\n        result\n        (loop (quotient\
    \ decimal 2)\n              (cons (if (= (quotient decimal 2) 0)\n           \
    \            '0\n                       '1)\n                    result)))))\n",
  "  (let loop ((decimal decimal)\n             (result '()))\n    (if (= decimal\
    \ 0)\n        result\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (quotient decimal 2) 0)\n                       '0\n                \
    \       '1)\n                    result)))))\n", "  (let loop ((decimal decimal)\n\
    \             (binary '())\n             (count 0))\n    (if (< decimal 0)\n \
    \       (reverse binary)\n        (loop (- decimal 1)\n              (cons (char->int\
    \ (floor (/ decimal 2))) binary)\n              (+ count 1)))))\n", "  (let loop\
    \ ((decimal decimal)\n             (result '()))\n    (if (= decimal 0)\n    \
    \    (reverse result)\n        (loop (quotient decimal 2)\n              (cons\
    \ (if (= (modulo decimal 2) 0)\n                       '1\n                  \
    \     '0)\n                    result)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
