name: HumanEval_85_add
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even elements\
  \ that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n;; 2\n(define\
  \ (add lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
  \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
  \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
  \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst)\
    \ (second lst))]\n    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n    [else (add (rest\
    \ lst))]))\n", "  (if (null? lst)\n      0\n      (+ (car lst)\n         (if (even?\
    \ (car lst))\n             (add (cdr lst))\n             0))))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (second\
    \ lst))]\n    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (second\
    \ lst))]\n    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (cdr lst)))]\n\
    \    [else (add (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (second lst))]\n    [else (add (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
