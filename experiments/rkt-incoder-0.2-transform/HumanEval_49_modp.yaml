name: HumanEval_49_modp
language: rkt
prompt: "#lang racket\n\n;; Return 2^n modulo p (be aware of numerics).\n;; >>> (modp\
  \ 3 5)\n;; 3\n;; >>> (modp 1101 101)\n;; 2\n;; >>> (modp 0 101)\n;; 1\n;; >>> (modp\
  \ 3 11)\n;; 8\n;; >>> (modp 100 101)\n;; 1\n(define (modp n p)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n\
  \    (check-equal? (candidate 3 5) 3)\n    (check-equal? (candidate 1101 101) 2)\n\
  \    (check-equal? (candidate 0 101) 1)\n    (check-equal? (candidate 3 11) 8)\n\
  \    (check-equal? (candidate 100 101) 1)\n    (check-equal? (candidate 30 5) 4)\n\
  \    (check-equal? (candidate 31 5) 3)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n", "  (cond\
    \ [(= n 0) 1]\n        [(= n 1) 0]\n        [(= p 1) (modp n (sub1 p))])\n  (mod\
    \ n p))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 0]\n        [else (mod n (*\
    \ p 2))]))\n", "  (if (= n 0)\n      1\n      (modulo (modulo n p) p)))\n", " \
    \ (if (= n 0)\n      1\n      (modulo (modulo n p) p)))\n", "  (if (= n 0)\n \
    \     1\n      (* 2 (modp (- n 1) p))))\n", "  (cond [(= n 0) 1]\n        [(=\
    \ n 1) 0]\n        [(= p 1) (mod n p)]\n        [else (modp (- n 1) (mod p n))]))\n",
  "  (if (= n 0)\n      1\n      (modulo (modulo n p) p)))\n", "  (cond [(< n 0) 1]\n\
    \        [(< p 1) 1]\n        [(= n p) 0]\n        [else (mod n (expt p 2))]))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n   \
    \   1\n      (modulo (modulo n p) p)))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (modulo (modulo n p) p) p)))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 0]\n\
    \        [(= n p) 0]\n        [else (* 2 (modp (- n 1) p))]))\n", "  (if (= n\
    \ 0)\n      1\n      (modulo (modulo n p) p)))\n", "  (if (= n 0)\n      1\n \
    \     (modulo (modulo n p) p)))\n", "  (if (= n 0)\n      1\n      (modulo (modulo\
    \ n p) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n", " \
    \ (if (= n 0)\n      1\n      (modulo (modulo n p) p)))\n", "  (if (= n 0)\n \
    \     1\n      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n      1\n      (*\
    \ 2 (modp (- n 1) p))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
