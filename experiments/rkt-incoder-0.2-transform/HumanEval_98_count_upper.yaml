name: HumanEval_98_count_upper
language: rkt
prompt: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
  \ in even indices.\n;; For example:\n;; >>> (count_upper \"aBCdEf\")\n;; 1\n;; >>>\
  \ (count_upper \"abcdefg\")\n;; 0\n;; >>> (count_upper \"dBBE\")\n;; 0\n(define\
  \ (count_upper s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
  \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\"\
  ) 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"\
  B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\
  \") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count-vowels\
    \ (substring s 0 (length s) #\\A)))]\n    [else (count_upper (substring s 0 (length\
    \ s) #\\A))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1\
    \ (count (char s #\\U) '#\\U))]\n    [else (count_upper (rest s))]))\n", "  (cond\
    \ [(empty? s) 0]\n        [(even? (length s)) (+ 1 (count-vowels (substring s\
    \ 0 (length s) #\\A)))]\n        [else (count_upper (substring s 0 (length s)\
    \ #\\A))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((char=?\
    \ s #\\a) (set! count (+ count 1)))\n          ((char=? s #\\e) (set! count (+\
    \ count 1)))\n          ((char=? s #\\i) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\o) (set! count (+ count 1)))\n          ((char=? s #\\u) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\A) (set! count (+ count 1)))\n\
    \          ((char=? s #\\E) (set! count (+ count 1)))\n          ((char=? s #\\\
    I) (set! count (+ count 1)))\n          ((char=? s #\\O) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\U) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\D) (set! count (+ count 1)))\n          ((char=? s #\\B) (set! count (+\
    \ count 1)))\n          ((char=? s #\\F) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\G) (set! count (+ count 1)))\n          ((char=? s #\\H) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\J) (set! count (+ count 1)))\n\
    \          ((char=? s #\\K) (set! count (+ count 1)))\n          ((char=? s #\\\
    L) (set! count (+ count 1)))\n          ((char=? s #\\M) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\N) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\P) (set! count (+ count 1)))\n          ((char=? s #\\Q) (set! count (+\
    \ count 1)))\n          ((char=? s #\\R) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\S) (set! count (+ count 1)))\n          ((char=? s #\\T) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\W) (set! count (+ count 1)))\n\
    \          ((char=? s #\\V) (set! count (+ count 1)))\n          ((char=? s #\\\
    X) (set! count ", "  (let ((count 0))\n    (for ([i (in-range (length s))])\n\
    \      (if (even? i)\n          (if (char=? (char-code (char s i)) #\\A)\n   \
    \           (add1 count)\n              (add1 0))\n          (add1 0)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count-upper (substring\
    \ s 0 (length s) #\\A)))]\n    [else (count-upper (substring s 0 (length s) #\\\
    A))]))\n", "  (let ((count 0))\n    (loop for i from 0 to (length s) by 2\n  \
    \        collect (if (char=? (char-code (substring s i i)) #\\A)\n           \
    \           (+ 1 (if (char=? (char-code (substring s i i)) #\\A)\n           \
    \                      (+ 1 (if (char=? (char-code (substring s i i)) #\\E)\n\
    \                                          (+ 1 (if (char=? (char-code (substring\
    \ s i i)) #\\I)\n                                                  (+ 1 (if (char=?\
    \ (char-code (substring s i i)) #\\O)\n                                      \
    \                    (+ 1 (if (char=? (char-code (substring s i i)) #\\U)\n  \
    \                                                                (+ 1 (if (char=?\
    \ (char-code (substring s i i)) #\\Y)\n                                      \
    \                                    (+ 1 (if (char=? (char-code (substring s\
    \ i i)) #\\S)\n                                                              \
    \                    (+ 1 (if (char=? (char-code (substring s i i)) #\\W)\n  \
    \                                                                            \
    \            0)))))))))))))))))\n    count))\n", "  (let loop ((s s)\n       \
    \      (count 0))\n    (cond [(empty? s) count]\n          [(char-upper? (car\
    \ s)) (loop (cdr s) (+ count 1))]\n          [else (loop (cdr s) count)])))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond [(empty? s) count]\n   \
    \       [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n          [else (loop\
    \ (cdr s) count)])))\n", "  (cond [(empty? s) 0]\n        [(even? (length s))\
    \ (+ 1 (count-vowels (substring s 0 (- 2 (length s)))))]\n        [else (+ 1 (count-vowels\
    \ (substring s 0 (- 2 (length s)))))]))\n", "  (let ((count 0))\n    (for ([i\
    \ (in-range (length s))])\n      (when (char-upper? (char s i))\n        (set!\
    \ count (add1 count)))))\n  count)\n", "  (let loop ((s s)\n             (count\
    \ 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper? (car s)) (loop\
    \ (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char s #\\U) '#\\U))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (length s)) (+ 1 (count (char s #\\U) '()))]\n    [else (count_upper (rest s))]))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (length s) by 2\n          collect\
    \ (if (char=? (char-code (substring s i i)) #\\A)\n                      (+ 1\
    \ (if (char=? (char-code (substring s i i)) #\\A)\n                          \
    \    (+ 1 (if (char=? (char-code (substring s i i)) #\\E)\n                  \
    \                    (+ 1 (if (char=? (char-code (substring s i i)) #\\I)\n  \
    \                                            (+ 1 (if (char=? (char-code (substring\
    \ s i i)) #\\O)\n                                                      (+ 1 (if\
    \ (char=? (char-code (substring s i i)) #\\U)\n                              \
    \                                (+ 1 (if (char=? (char-code (substring s i i))\
    \ #\\Y)\n                                                                    (+\
    \ 1 (if (char=? (char-code (substring s i i)) #\\S)\n                        \
    \                                                  (+ 1 (if (char=? (char-code\
    \ (substring s i i)) #\\W)\n                                                 \
    \                                 (+ 1 (if (char=? (char-code (substring s i i))\
    \ #\\Z)\n                                                                    \
    \                      0)))))))))))))))))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(even? (length s)) (+ 1 (count (char #\\A) (char s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((char=?\
    \ (car s) #\\A)\n           (loop (cdr s) count))\n          ((char=? (car s)\
    \ #\\E)\n           (loop (cdr s) count))\n          ((char=? (car s) #\\I)\n\
    \           (loop (cdr s) count))\n          ((char=? (car s) #\\O)\n        \
    \   (loop (cdr s) count))\n          ((char=? (car s) #\\U)\n           (loop\
    \ (cdr s) count))\n          (else\n           (loop (cdr s) (+ count 1))))))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n\
    \      [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr\
    \ s) count)])))\n", "  (let loop ((s s)\n             (count 0))\n    (cond [(empty?\
    \ s) count]\n          [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n  \
    \        [else (loop (cdr s) count)])))\n", "  (cond\n    [(empty? s) 0]\n   \
    \ [(even? (length s)) (+ 1 (count-vowels (substring s 0 (- 2 (length s)))))]\n\
    \    [else (count-vowels (substring s 0 (- 2 (length s))))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char #\\A s) #\\A))]\n\
    \    [else (count_upper (rest s))]))\n", "  (let ((count 0))\n    (for ([i (in-range\
    \ (length s))])\n      (if (even? i)\n          (if (char-upper? (char s i))\n\
    \              (set! count (+ count 1))\n              (set! count 0)))))\n  count)\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond [(empty? s) count]\n   \
    \       [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n          [else (loop\
    \ (cdr s) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s))\
    \ (+ 1 (count-upper (substring s 0 2)))]\n    [else (count-upper (substring s\
    \ 0 2))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count\
    \ (lambda (x) (char-upper? (car x)))\n                                 (cdr s)))]\n\
    \    [else (count_upper (cdr s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (length s)) (+ 1 (count-upper (substring s 0 (length s) #\\A)))]\n    [else\
    \ (count-upper (substring s 0 (length s) #\\A))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(even? (length s)) (+ 1 (count (char #\\U) s))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((string=?\
    \ s \"\") count)\n          ((char=? (char-code s) #\\a) (incf count))\n     \
    \     ((char=? (char-code s) #\\e) (incf count))\n          ((char=? (char-code\
    \ s) #\\i) (incf count))\n          ((char=? (char-code s) #\\o) (incf count))\n\
    \          ((char=? (char-code s) #\\u) (loop (substring s 2)\n              \
    \                         (+ count 1)))\n          (else (loop (substring s 2)\n\
    \                       (+ count 1))))\n    count))\n", "  (let loop ((s s)\n\
    \             (count 0))\n    (cond ((null? s) count)\n          ((char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1)))\n          (else (loop (cdr s) count))))))\n",
  "  (let ((count 0))\n    (for ([i (in-range (length s))])\n      (if (even? i)\n\
    \          (if (char-upper? (char s i))\n              (set! count (add1 count))\n\
    \              (set! count 0)))))\n  count)\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(even? (length s)) (+ 1 (count-upper (rest s)))]\n    [else (count-upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1\
    \ (count (char #\\U (first s))))]\n    [else (count_upper (rest s))]))\n", " \
    \ (let ((count 0))\n    (loop for i from 0 to (length s) by 2\n          when\
    \ (char=? (char-code (char s i)) #\\A)\n          do (set! count (add1 count))\n\
    \          when (char=? (char-code (char s i)) #\\E)\n          do (set! count\
    \ (add1 count))\n          when (char=? (char-code (char s i)) #\\O)\n       \
    \   do (set! count (add1 count))\n          when (char=? (char-code (char s i))\
    \ #\\U)\n          do (set! count (add1 count))\n          when (char=? (char-code\
    \ (char s i)) #\\Y)\n          do (set! count (add1 count))\n          when (char=?\
    \ (char-code (char s i)) #\\S)\n          do (set! count (add1 count))\n     \
    \     when (char=? (char-code (char s i)) #\\W)\n          do (set! count (add1\
    \ count))\n          when (char=? (char-code (char s i)) #\\Z)\n          do (set!\
    \ count (add1 count))\n          when (char=? (char-code (char s i)) #\\X)\n \
    \         do (set! count (add1 count))\n          when (char=? (char-code (char\
    \ s i)) #\\Y)\n          do (set! count (add1 count))\n          when (char=?\
    \ (char-code (char s i)) #\\Z)\n          do (set! count (add1 count))\n     \
    \     when (char=? (char-code (char s i)) #\\X)\n          do (set! count (add1\
    \ count))\n          when (char=? (char-code (char s i)) #\\Y)\n          do (set!\
    \ count (add1 count))\n          when (char=? (char-code (char s i)) #\\Z)\n \
    \         do (set! count (add1 count))\n          when (char=? (char-code (char\
    \ s i)) #\\X)\n          do (set! count (add1 count))\n          when (char=?\
    \ (char-code (char s i)) #\\Y)\n          do (set! count (add1 count))\n     \
    \     when (char=? (char-code (char s i)) #\\Z)\n          do (set! count ", " \
    \ (let loop ((i 0) (count 0))\n    (if (< i (string-length s))\n        (loop\
    \ (+ i 2) (+ count 1))\n        count)))\n", "  (let loop ((s s)\n           \
    \  (count 0))\n    (cond ((char=? s #\\a) (set! count (+ count 1)))\n        \
    \  ((char=? s #\\e) (set! count (+ count 1)))\n          ((char=? s #\\i) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\o) (set! count (+ count 1)))\n\
    \          ((char=? s #\\u) (set! count (+ count 1)))\n          ((char=? s #\\\
    A) (set! count (+ count 1)))\n          ((char=? s #\\E) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\I) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\O) (set! count (+ count 1)))\n          ((char=? s #\\U) (set! count (+\
    \ count 1)))\n          ((char=? s #\\D) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\B) (set! count (+ count 1)))\n          ((char=? s #\\F) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\G) (set! count (+ count 1)))\n\
    \          ((char=? s #\\H) (set! count (+ count 1)))\n          ((char=? s #\\\
    J) (set! count (+ count 1)))\n          ((char=? s #\\K) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\L) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\M) (set! count (+ count 1)))\n          ((char=? s #\\N) (set! count (+\
    \ count 1)))\n          ((char=? s #\\P) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\Q) (set! count (+ count 1)))\n          ((char=? s #\\R) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\S) (set! count (+ count 1)))\n\
    \          ((char=? s #\\T) (set! count (+ count 1)))\n          ((char=? s #\\\
    W) (set! count (+ count 1)))\n          ((char=? s #\\X) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\Y) (set! count ", "  (cond\n    [(empty? s) 0]\n\
    \    [(even? (length s)) (+ 1 (count-upper (substring s 0 (- 2 (length s)))))]\n\
    \    [else (count-upper (substring s 0 (- 2 (length s))))]))\n", "  (let loop\
    \ ((i 0) (count 0))\n    (cond ((char=? s #\\a) (set! count (+ count 1)))\n  \
    \        ((char=? s #\\e) (set! count (+ count 1)))\n          ((char=? s #\\\
    i) (set! count (+ count 1)))\n          ((char=? s #\\o) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\u) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\A) (set! count (+ count 1)))\n          ((char=? s #\\E) (set! count (+\
    \ count 1)))\n          ((char=? s #\\I) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\O) (set! count (+ count 1)))\n          ((char=? s #\\U) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\D) (set! count (+ count 1)))\n\
    \          ((char=? s #\\B) (set! count (+ count 1)))\n          ((char=? s #\\\
    F) (set! count (+ count 1)))\n          ((char=? s #\\G) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\H) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\J) (set! count (+ count 1)))\n          ((char=? s #\\K) (set! count (+\
    \ count 1)))\n          ((char=? s #\\L) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\M) (set! count (+ count 1)))\n          ((char=? s #\\N) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\P) (set! count (+ count 1)))\n\
    \          ((char=? s #\\Q) (set! count (+ count 1)))\n          ((char=? s #\\\
    R) (set! count (+ count 1)))\n          ((char=? s #\\S) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\T) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\W) (set! count (+ count 1)))\n          ((char=? s #\\V) (set! count (+\
    \ count 1)))\n          ((char=? s #\\X) (set! count (", "  (let ((count 0))\n\
    \    (for ([i (in-range (length s))])\n      (if (even? i)\n          (if (char-upper?\
    \ (char s i))\n              (set! count (+ count 1))\n              (set! count\
    \ 0)))))\n  count)\n", "  (cond [(empty? s) 0]\n        [(even? (length s)) (+\
    \ 1 (count-vowels (substring s 0 (- 2 (length s)))))]\n        [else (count_upper\
    \ (substring s 0 (- 2 (length s))))]))\n", "  (let loop ((s s)\n             (count\
    \ 0))\n    (if (empty? s)\n        count\n        (loop (rest s)\n           \
    \   (if (char-upper? (first s))\n                  (add1 count)\n            \
    \      count))))))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\n\
    \      [(empty? s) count]\n      [(char-upper? (car s)) (loop (cdr s) (+ count\
    \ 1))]\n      [else (loop (cdr s) count)])))\n", "  (let loop ((s s)\n       \
    \      (count 0))\n    (cond [(empty? s) count]\n          [(char-upper? (car\
    \ s)) (loop (cdr s) (+ count 1))]\n          [else (loop (cdr s) count)])))\n",
  "  (cond [(empty? s) 0]\n        [(even? (length s)) (+ 1 (count-vowels (substring\
    \ s 0 (- 1 (length s)))))]\n        [else (count_upper (substring s 0 (- 1 (length\
    \ s))))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((null?\
    \ s) count)\n          ((char=? (car s) #\\A) (loop (cdr s) (+ count 1)))\n  \
    \        ((char=? (car s) #\\a) (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\b) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\d)\
    \ (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\e) (loop (cdr s)\
    \ (+ count 1)))\n          ((char=? (car s) #\\f) (loop (cdr s) (+ count 1)))\n\
    \          ((char=? (car s) #\\g) (loop (cdr s) (+ count 1)))\n          (else\
    \ (loop (cdr s) count)))))\n", "  (cond [(empty? s) 0]\n        [(even? (length\
    \ s)) (+ 1 (count-upper (substring s 0 (- 2 (length s)))))]\n        [else (count-upper\
    \ (substring s 0 (- 2 (length s))))]))\n", "  (let loop ((s s)\n             (count\
    \ 0))\n    (cond ((char=? s #\\A) (add1 count))\n          ((char=? s #\\a) (add1\
    \ count))\n          ((char=? s #\\e) (add1 count))\n          ((char=? s #\\\
    i) (add1 count))\n          ((char=? s #\\o) (add1 count))\n          ((char=?\
    \ s #\\u) (add1 count))\n          ((char=? s #\\U) (add1 count))\n          ((char=?\
    \ s #\\y) (add1 count))\n          ((char=? s #\\Y) (add1 count))\n          ((char=?\
    \ s #\\W) (add1 count))\n          ((char=? s #\\Z) (add1 count))\n          ((char=?\
    \ s #\\s) (add1 count))\n          ((char=? s #\\D) (add1 count))\n          ((char=?\
    \ s #\\B) (add1 count))\n          ((char=? s #\\F) (add1 count))\n          ((char=?\
    \ s #\\G) (add1 count))\n          ((char=? s #\\H) (add1 count))\n          ((char=?\
    \ s #\\J) (add1 count))\n          ((char=? s #\\K) (add1 count))\n          ((char=?\
    \ s #\\L) (add1 count))\n          ((char=? s #\\M) (add1 count))\n          ((char=?\
    \ s #\\N) (add1 count))\n          ((char=? s #\\P) (add1 count))\n          ((char=?\
    \ s #\\Q) (add1 count))\n          ((char=? s #\\R) (add1 count))\n          ((char=?\
    \ s #\\T) (add1 count))\n          ((char=? s #\\V) (add1 count))\n          ((char=?\
    \ s #\\W) (add1 count))\n          ((char=? s #\\X) (add1 count))\n          ((char=?\
    \ s #\\Y) (add1 count))\n          ((char=? s #\\Z) (add1 count))\n          ((char=?\
    \ s #\\a) (add1 count))\n          ((char=? s #\\b) (add1 count))\n          ((char=?\
    \ s #\\c) (add1 count))\n          ((char=? s #\\d) (add1 count))\n          ((char=?\
    \ s #\\e) (", "  (cond [(empty? s) 0]\n        [(even? (length s)) (+ 1 (count\
    \ (char #\\U (first s))))]\n        [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count-vowels (substring s 0\
    \ 1)))]\n    [else (count-vowels (substring s 0 1))]))\n", "  (let loop ((s s)\n\
    \             (count 0))\n    (cond ((null? s)\n           count)\n          ((char-upper?\
    \ (car s))\n           (loop (cdr s)\n                 (add1 count)))\n      \
    \    (else\n           (loop (cdr s)\n                 (add1 count))))))\n", " \
    \ (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n\
    \      [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr\
    \ s) count)])))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\n\
    \      [(empty? s) count]\n      [(char-upper? (car s)) (loop (cdr s) (+ count\
    \ 1))]\n      [else (loop (cdr s) count)])))\n", "  (let loop ((i 0)\n       \
    \      (count 0))\n    (cond ((char=? s #\\a) (set! count (+ count 1)))\n    \
    \      ((char=? s #\\e) (set! count (+ count 1)))\n          ((char=? s #\\i)\
    \ (set! count (+ count 1)))\n          ((char=? s #\\o) (set! count (+ count 1)))\n\
    \          ((char=? s #\\u) (set! count (+ count 1)))\n          ((char=? s #\\\
    A) (set! count (+ count 1)))\n          ((char=? s #\\E) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\I) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\O) (set! count (+ count 1)))\n          ((char=? s #\\U) (set! count (+\
    \ count 1)))\n          ((char=? s #\\D) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\B) (set! count (+ count 1)))\n          ((char=? s #\\F) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\G) (set! count (+ count 1)))\n\
    \          ((char=? s #\\H) (set! count (+ count 1)))\n          ((char=? s #\\\
    J) (set! count (+ count 1)))\n          ((char=? s #\\K) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\L) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\M) (set! count (+ count 1)))\n          ((char=? s #\\N) (set! count (+\
    \ count 1)))\n          ((char=? s #\\P) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\Q) (set! count (+ count 1)))\n          ((char=? s #\\R) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\S) (set! count (+ count 1)))\n\
    \          ((char=? s #\\T) (set! count (+ count 1)))\n          ((char=? s #\\\
    W) (set! count (+ count 1)))\n          ((char=? s #\\V) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\X) (set! count ", "  (let loop ((s s)\n      \
    \       (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper? (car\
    \ s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char #\\A s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (length s)) (+ 1 (count (char s #\\U) '#\\U))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((or (empty?\
    \ s) (equal? (first s) #\\A))\n           (if (even? count)\n               (add1\
    \ count)\n               count))\n          ((char=? (first s) #\\A)\n       \
    \    (loop (rest s) count))\n          ((char=? (first s) #\\E)\n           (loop\
    \ (rest s) (add1 count)))\n          ((char=? (first s) #\\I)\n           (loop\
    \ (rest s) (add1 count)))\n          ((char=? (first s) #\\O)\n           (loop\
    \ (rest s) (add1 count)))\n          ((char=? (first s) #\\U)\n           (loop\
    \ (rest s) (add1 count)))\n          (else\n           (loop (rest s) count)))))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond [(empty? s) count]\n   \
    \       [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n          [else (loop\
    \ (cdr s) count)])))\n", "  (cond [(empty? s) 0]\n        [(even? (length s))\
    \ (+ 1 (count-upper (rest s)))]\n        [else (+ 1 (count-upper (rest s))) ]))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((or (char=? (char-code\
    \ s) #\\A)\n              (char=? (char-code s) #\\a)) (add1 count))\n       \
    \   ((or (char=? (char-code s) #\\B)\n              (char=? (char-code s) #\\\
    b)) (add1 count))\n          ((or (char=? (char-code s) #\\C)\n              (char=?\
    \ (char-code s) #\\c)) (add1 count))\n          ((or (char=? (char-code s) #\\\
    D)\n              (char=? (char-code s) #\\d)) (add1 count))\n          ((or (char=?\
    \ (char-code s) #\\E)\n              (char=? (char-code s) #\\e)) (add1 count))\n\
    \          ((or (char=? (char-code s) #\\F)\n              (char=? (char-code\
    \ s) #\\f)) (add1 count))\n          ((or (char=? (char-code s) #\\G)\n      \
    \        (char=? (char-code s) #\\g)) (add1 count))\n          ((or (char=? (char-code\
    \ s) #\\H)\n              (char=? (char-code s) #\\h)) (add1 count))\n       \
    \   ((or (char=? (char-code s) #\\I)\n              (char=? (char-code s) #\\\
    i)) (add1 count))\n          ((or (char=? (char-code s) #\\J)\n              (char=?\
    \ (char-code s) #\\j)) (add1 count))\n          ((or (char=? (char-code s) #\\\
    K)\n              (char=? (char-code s) #\\k)) (add1 count))\n          ((or (char=?\
    \ (char-code s) #\\L)\n              (char=? (char-code s) #\\l)) (add1 count))\n\
    \          ((or (char=? (char-code s) #\\M)\n              (char=? (char-code\
    \ s) #\\m)) (add1 count))\n          ((or (char=? (char-code s) #\\N)\n      \
    \        (char=? (char-code s) #\\n)) (add1 count))\n          ((or (char=? (char-code\
    \ s) #\\O)\n              (char=? (char-code s) #\\o)) (add1 count))\n       \
    \   ((or (char=? (char-code s) #\\P)\n              (char=? (char-code s) #\\\
    p)) (add1 count))\n          ((or (", "  (let loop ((s s)\n             (count\
    \ 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper? (car s)) (loop\
    \ (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond [(empty? s) count]\n          [(char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1))]\n          [else (loop (cdr s) count)])))\n",
  "  (let ((count 0))\n    (for ([i (in-range (length s))])\n      (when (char-upper?\
    \ (char s i))\n        (set! count (add1 count)))))\n  count)\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond ((null? s) count)\n          ((char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1)))\n          (else (loop (cdr s) count)))))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((null? s) count)\n    \
    \      ((char-upper? (car s)) (loop (cdr s) (+ count 1)))\n          (else (loop\
    \ (cdr s) count)))))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s))\
    \ (+ 1 (count-upper (substring s 0 (- 2 (length s)))))]\n    [else (count-upper\
    \ (substring s 0 (- 2 (length s))))]))\n", "  (let loop ((s s)\n             (count\
    \ 0))\n    (cond ((null? s) count)\n          ((char-upper? (car s)) (loop (cdr\
    \ s) (+ count 1)))\n          (else (loop (cdr s) count))))))\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n     \
    \ [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s)\
    \ count)])))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((or\
    \ (not (eq? s \"\"))\n               (not (eq? (char-code s) #\\A)))\n       \
    \    (loop (substring s 0 (length s))\n                 (+ count 1)))\n      \
    \    ((char-code s) #\\A)\n          ((char-code s) #\\E)\n          ((char-code\
    \ s) #\\I)\n          ((char-code s) #\\O)\n          ((char-code s) #\\U)\n \
    \         (else\n           (loop (substring s 0 (length s))\n               \
    \  (+ count 1))))))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\
    \ ((null? s) count)\n          ((char=? (car s) #\\A) (loop (cdr s) (+ count 1)))\n\
    \          ((char=? (car s) #\\a) (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\b) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\c)\
    \ (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\d) (loop (cdr s)\
    \ (+ count 1)))\n          ((char=? (car s) #\\e) (loop (cdr s) (+ count 1)))\n\
    \          ((char=? (car s) #\\f) (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\g) (loop (cdr s) (+ count 1)))\n          (else (loop (cdr s) count)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char s #\\U)\
    \ '#\\U))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(even? (length s)) (+ 1 (count-vowels (substring s 0 2)))]\n    [else\
    \ (count-vowels (substring s 0 2))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (length s)) (+ 1 (count (char #\\U) s))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n\
    \      [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr\
    \ s) count)])))\n", "  (let ((count 0))\n    (for ([i (in-range (length s))])\n\
    \      (if (even? i)\n          (if (char-upper? (char s i))\n              (set!\
    \ count (+ count 1))\n              (set! count 0)))))\n  count)\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond ((char=? s #\\a) (add1 count))\n\
    \          ((char=? s #\\e) (add1 count))\n          ((char=? s #\\i) (add1 count))\n\
    \          ((char=? s #\\o) (add1 count))\n          ((char=? s #\\u) (add1 count))\n\
    \          (else (loop (substring s 0 (length s)) (add1 count))))))\n", "  (let\
    \ loop ((s s)\n             (count 0))\n    (cond ((char=? (car s) #\\A)\n   \
    \        (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\E)\n     \
    \      (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\I)\n       \
    \    (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\O)\n         \
    \  (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\U)\n           (loop\
    \ (cdr s) (+ count 1)))\n          ((char=? (car s) #\\Y)\n           (loop (cdr\
    \ s) (+ count 1)))\n          ((char=? (car s) #\\S)\n           (loop (cdr s)\
    \ (+ count 1)))\n          ((char=? (car s) #\\W)\n           (loop (cdr s) (+\
    \ count 1)))\n          (else\n           (loop (cdr s) count))))\n  count)\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((null? s) count)\n    \
    \      ((char=? (car s) #\\A)\n           (loop (cdr s) (+ count 1)))\n      \
    \    ((char=? (car s) #\\E)\n           (loop (cdr s) (+ count 1)))\n        \
    \  ((char=? (car s) #\\I)\n           (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\O)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car\
    \ s) #\\U)\n           (loop (cdr s) (+ count 1)))\n          (else\n        \
    \   (loop (cdr s) count)))))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length\
    \ s)) (+ 1 (count-vowels (substring s 0 1)))]\n    [else (count-vowels (substring\
    \ s 0 1))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((char=?\
    \ s #\\a) (set! count (+ count 1)))\n          ((char=? s #\\e) (set! count (+\
    \ count 1)))\n          ((char=? s #\\i) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\o) (set! count (+ count 1)))\n          ((char=? s #\\u) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\A) (set! count (+ count 1)))\n\
    \          ((char=? s #\\E) (set! count (+ count 1)))\n          ((char=? s #\\\
    I) (set! count (+ count 1)))\n          ((char=? s #\\O) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\U) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\a) (set! count (+ count 1)))\n          ((char=? s #\\e) (set! count (+\
    \ count 1)))\n          ((char=? s #\\i) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\o) (set! count (+ count 1)))\n          ((char=? s #\\u) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\A) (set! count (+ count 1)))\n\
    \          ((char=? s #\\E) (set! count (+ count 1)))\n          ((char=? s #\\\
    I) (set! count (+ count 1)))\n          ((char=? s #\\O) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\U) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\a) (set! count (+ count 1)))\n          ((char=? s #\\e) (set! count (+\
    \ count 1)))\n          ((char=? s #\\i) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\o) (set! count (+ count 1)))\n          ((char=? s #\\u) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\A) (set! count (+ count 1)))\n\
    \          ((char=? s #\\E) (set! count (+ count 1)))\n          ((char=? s #\\\
    I) (set! ", "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty?\
    \ s) count]\n      [(char=? (car s) #\\A) (loop (cdr s) (+ count 1))]\n      [(char=?\
    \ (car s) #\\a) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\b) (loop\
    \ (cdr s) (+ count 1))]\n      [(char=? (car s) #\\d) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\e) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\f) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\g) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\H) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\I) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\J) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\K) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\L) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\M) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\N) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\O) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\P) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\Q) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\R) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\S) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\T) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\U) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char\
    \ #\\U) s))]\n    [else (count_upper (rest s))]))\n", "  (let loop ((i 0) (count\
    \ 0))\n    (if (< i #(length s))\n        (if (char=? (char-code (car s)) #\\\
    A)\n            (loop (+ i 2) (+ count 1))\n            (loop (+ i 2) count))\n\
    \        count)))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\
    \ [(empty? s) count]\n          [(char-upper? (car s)) (loop (cdr s) (+ count\
    \ 1))]\n          [else (loop (cdr s) count)])))\n", "  (let ((count 0))\n   \
    \ (loop for i from 0 to (length s) by 2\n          when (char=? (char-code (substring\
    \ s i i)) #\\A)\n          do (set! count (add1 count)))\n    count))\n", "  (let\
    \ loop ((s s)\n             (count 0))\n    (cond ((or (char=? s #\\A) (char=?\
    \ s #\\Z)) count)\n          ((char=? (substring s 0 1) #\\a) (loop (substring\
    \ s 1 2) (+ count 1)))\n          ((char=? (substring s 0 1) #\\e) (loop (substring\
    \ s 1 2) (+ count 1)))\n          ((char=? (substring s 0 1) #\\i) (loop (substring\
    \ s 1 2) (+ count 1)))\n          ((char=? (substring s 0 1) #\\o) (loop (substring\
    \ s 1 2) (+ count 1)))\n          ((char=? (substring s 0 1) #\\u) (loop (substring\
    \ s 1 2) (+ count 1)))\n          (else (loop (substring s 1 2) count)))))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n\
    \      [(char=? (car s) #\\A) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\a) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\b) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\d) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\e) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\f) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\g) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\h) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\i) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\j) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\k) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\l) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\n) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\o) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\p) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\q) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\r) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\s) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\t) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\v) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\W) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\X) (loop", "  (let loop ((s s)\n             (count 0))\n    (cond ((char=?\
    \ s #\\a) (set! count (+ count 1)))\n          ((char=? s #\\e) (set! count (+\
    \ count 1)))\n          ((char=? s #\\i) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\o) (set! count (+ count 1)))\n          ((char=? s #\\u) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\A) (set! count (+ count 1)))\n\
    \          ((char=? s #\\E) (set! count (+ count 1)))\n          ((char=? s #\\\
    I) (set! count (+ count 1)))\n          ((char=? s #\\O) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\U) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\D) (set! count (+ count 1)))\n          ((char=? s #\\B) (set! count (+\
    \ count 1)))\n          ((char=? s #\\F) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\G) (set! count (+ count 1)))\n          ((char=? s #\\H) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\J) (set! count (+ count 1)))\n\
    \          ((char=? s #\\K) (set! count (+ count 1)))\n          ((char=? s #\\\
    L) (set! count (+ count 1)))\n          ((char=? s #\\M) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\N) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\P) (set! count (+ count 1)))\n          ((char=? s #\\Q) (set! count (+\
    \ count 1)))\n          ((char=? s #\\R) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\S) (set! count (+ count 1)))\n          ((char=? s #\\T) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\W) (set! count (+ count 1)))\n\
    \          ((char=? s #\\V) (set! count (+ count 1)))\n          ((char=? s #\\\
    X) (set! count ", "  (let loop ((s s)\n             (count 0))\n    (cond [(empty?\
    \ s) count]\n          [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n  \
    \        [else (loop (cdr s) count)])))\n", "  (let ((count 0))\n    (for ([i\
    \ (in-range (length s))])\n      (if (even? i)\n          (if (char=? (char-code\
    \ (car s)) 'A)\n              (set! count (add1 count))\n              (set! count\
    \ 0))))))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count\
    \ (char s #\\U) '()))]\n    [else (count_upper (rest s))]))\n", "  (let ((count\
    \ 0))\n    (for ([i (in-range (length s))])\n      (if (even? i)\n          (if\
    \ (char=? (char-code (char s i)) #\\A)\n              (add1 (add1 count)))\n \
    \         (add1 (add1 count))))))\n", "  (let ((count 0))\n    (for ([i (in-range\
    \ (length s))])\n      (if (even? i)\n          (if (char=? (char-code (char s\
    \ i)) #\\A)\n              (add1 count)\n              (add1 0))\n          (add1\
    \ 0)))))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty?\
    \ s) count]\n      [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else\
    \ (loop (cdr s) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length\
    \ s)) (+ 1 (count (char #\\U (first s)) (first s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty?\
    \ s) count]\n      [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else\
    \ (loop (cdr s) count)])))\n", "  (let loop ((i 0) (vowels '(#\\a #\\b #\\c #\\\
    d #\\e #\\f #\\g #\\h)))\n    (cond ((null? s) 0)\n          ((char=? (char-code\
    \ s) (first vowels)) #t)\n          (else (loop (add1 i) (rest vowels)))))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| c |>\nThank you so much for taking the time to\
    \ write this up. I'm going to have to study this for a while to really understand\
    \ it, but I really appreciate it!\n<|/ c |>\n<| c |>\nI added a second version\
    \ to my answer. Hopefully that helps.\n<|/ c |>\n<| c |>\nThank you so much for\
    \ taking the time to write this up. I'm going to have to study this for a while\
    \ to really understand it, but I really appreciate it!\n<|/ c |>\n<| c |>\nI added\
    \ a third version to my answer. Hopefully that helps.\n<|/ c |>\n<| c |>\nThank\
    \ you so much for taking the time to write this up. I'm going to have to study\
    \ this for a while to really understand it, but I really appreciate it!\n<|/ c\
    \ |>\n<| a |>\nHere's a solution using recursion:\n<code>", "  (cond [(empty?\
    \ s) 0]\n        [(even? (length s)) (+ 1 (count-vowels (substring s 0 (- 2 (length\
    \ s)))))]\n        [else (count-vowels (substring s 0 (- 2 (length s))))]))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((null? s) count)\n    \
    \      ((char=? (car s) #\\A) count)\n          ((char=? (car s) #\\a) count)\n\
    \          ((char=? (car s) #\\e) count)\n          ((char=? (car s) #\\i) count)\n\
    \          ((char=? (car s) #\\o) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\u) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char", "  (let loop ((s\
    \ s)\n             (count 0))\n    (cond ((null? s) count)\n          ((char=?\
    \ (car s) #\\A) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\a)\
    \ (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\b) (loop (cdr s)\
    \ (+ count 1)))\n          ((char=? (car s) #\\c) (loop (cdr s) (+ count 1)))\n\
    \          ((char=? (car s) #\\d) (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\e) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\f)\
    \ (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\g) (loop (cdr s)\
    \ (+ count 1)))\n          (else (loop (cdr s) count)))))\n", "  (let ((count\
    \ 0))\n    (loop for i from 0 to (length s) by 2\n          when (char=? (char-code\
    \ (substring s i i+1))\n                      #\\A)\n          do (set! count\
    \ (add1 count)))\n    count))\n", "  (let loop ((s s)\n             (count 0))\n\
    \    (cond\n      [(empty? s) count]\n      [(char-upper? (car s)) (loop (cdr\
    \ s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", "  (let loop ((s\
    \ s)\n             (count 0))\n    (cond ((or (char-upper? (car s)) (char-upper?\
    \ (cdr s)))\n           (loop (cdr s) (+ count 1)))\n          ((char-upper? (car\
    \ s))\n           (loop (cdr s) count))\n          (else\n           (loop (cdr\
    \ s) count)))))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1\
    \ (count (char #\\A s) #\\A))]\n    [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char #\\A s) #\\A))]\n\
    \    [else (+ 1 (count (char #\\A s) #\\A))]))\n", "  (let loop ((s s)\n     \
    \        (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((null? s) count)\n    \
    \      ((char-upper? (car s)) (loop (cdr s) (+ count 1)))\n          (else (loop\
    \ (cdr s) count)))))\n", "  (let ((count 0))\n    (for ([i (in-range (length s))])\n\
    \      (if (even? i)\n          (if (char-upper? (char s i))\n              (set!\
    \ count (+ count 1))\n              (set! count 0)))))\n  count)\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond ((char=? s #\\A) (add1 count))\n\
    \          ((char=? s #\\a) (add1 count))\n          ((char=? s #\\e) (add1 count))\n\
    \          ((char=? s #\\i) (add1 count))\n          ((char=? s #\\o) (add1 count))\n\
    \          ((char=? s #\\u) (add1 count))\n          ((char=? s #\\y) (add1 count))\n\
    \          ((char=? s #\\Y) (add1 count))\n          ((char=? s #\\W) (add1 count))\n\
    \          ((char=? s #\\Z) (add1 count))\n          ((char=? s #\\s) (add1 count))\n\
    \          ((char=? s #\\D) (add1 count))\n          ((char=? s #\\B) (add1 count))\n\
    \          ((char=? s #\\F) (add1 count))\n          ((char=? s #\\G) (add1 count))\n\
    \          ((char=? s #\\C) (add1 count))\n          ((char=? s #\\M) (add1 count))\n\
    \          ((char=? s #\\P) (add1 count))\n          ((char=? s #\\R) (add1 count))\n\
    \          ((char=? s #\\T) (add1 count))\n          ((char=? s #\\X) (add1 count))\n\
    \          ((char=? s #\\H) (add1 count))\n          ((char=? s #\\V) (add1 count))\n\
    \          ((char=? s #\\X) (add1 count))\n          ((char=? s #\\Y) (add1 count))\n\
    \          ((char=? s #\\Z) (add1 count))\n          ((char=? s #\\W) (add1 count))\n\
    \          ((char=? s #\\a) (add1 count))\n          ((char=? s #\\e) (add1 count))\n\
    \          ((char=? s #\\i) (add1 count))\n          ((char=? s #\\o) (add1 count))\n\
    \          ((char=? s #\\u) (add1 count))\n          ((char=? s #\\y) (add1 count))\n\
    \          ((char=? s #\\Y) (add1 count))\n          ((char=? s #\\W) (add1 count))\n\
    \          ((char=? s #\\", "  (let loop ((s s)\n             (count 0))\n   \
    \ (cond [(empty? s) count]\n          [(char=? (car s) #\\A) count]\n        \
    \  [(char=? (car s) #\\a) (incf count)]\n          [(char=? (car s) #\\e) (incf\
    \ count)]\n          [(char=? (car s) #\\i) (incf count)]\n          [(char=?\
    \ (car s) #\\o) (incf count)]\n          [(char=? (car s) #\\U) (incf count)]\n\
    \          [(char=? (car s) #\\u) (incf count)]\n          [(char=? (car s) #\\\
    1) (incf count)]\n          [(char=? (car s) #\\2) (incf count)]\n          [(char=?\
    \ (car s) #\\3) (incf count)]\n          [(char=? (car s) #\\4) (incf count)]\n\
    \          [(char=? (car s) #\\5) (incf count)]\n          [(char=? (car s) #\\\
    6) (incf count)]\n          [(char=? (car s) #\\7) (incf count)]\n          [(char=?\
    \ (car s) #\\8) (incf count)]\n          [(char=? (car s) #\\9) (incf count)]\n\
    \          [(char=? (car s) #\\0) (incf count)]\n          [(char=? (car s) #\\\
    9) (incf count)]\n          [(char=? (car s) #\\8) (incf count)]\n          [(char=?\
    \ (car s) #\\7) (incf count)]\n          [(char=? (car s) #\\6) (incf count)]\n\
    \          [(char=? (car s) #\\5) (incf count)]\n          [(char=? (car s) #\\\
    4) (incf count)]\n          [(char=? (car s) #\\3) (incf count)]\n          [(char=?\
    \ (car s) #\\2) (incf count)]\n          [(char=? (car s) #\\1) (incf count)]\n\
    \          [(char=? (car s) #\\0) (incf count)]\n          [(char=? (car s) #\\\
    9) (incf count)]\n          [(char=? (car s) ", "  (let ((count 0))\n    (for\
    \ ([i (in-range (length s))])\n      (if (even? i)\n          (if (char=? (char-code\
    \ (char s i)) #\\A)\n              (add1 count)\n              (add1 0))\n   \
    \       (add1 0)))))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\
    \ ((null? s) count)\n          ((char=? (car s) #\\A) (loop (cdr s) (+ count 1)))\n\
    \          ((char=? (car s) #\\a) (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\e) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\i)\
    \ (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\o) (loop (cdr s)\
    \ (+ count 1)))\n          ((char=? (car s) #\\u) (loop (cdr s) (+ count 1)))\n\
    \          (else (loop (cdr s) count)))))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(even? (length s)) (+ 1 (count-vowels (substring s 0 (length s) #\\A)))]\n\
    \    [else (count-vowels (substring s 0 (length s) #\\A))]))\n", "  (let ((count\
    \ 0))\n    (for ([i (in-range (length s))])\n      (if (even? i)\n          (if\
    \ (char-upper? (char s i))\n              (set! count (+ count 1))\n         \
    \     (set! count 0)))))\n  count)\n", "  (let loop ((s s)\n             (count\
    \ 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper? (car s)) (loop\
    \ (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond ((or (char-upper? (char-code (car\
    \ s))) #\\D)\n           (loop (cdr s) count))\n          ((char-upper? (char-code\
    \ (car s))) #\\A)\n          ((char-upper? (char-code (car s))) #\\E)\n      \
    \    (else\n           (loop (cdr s) (+ count 1))))))\n", "  (let loop ((s s)\n\
    \             (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n\
    \      [(char=? (car s) #\\A) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\a) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\b) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\d) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\e) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\f) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\g) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\H) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\I) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\J) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\K) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\L) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\M) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\N) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\O) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\P) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\Q) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\R) (loop (cdr s) (+ count 1))]\n      [(char=? (car s) #\\S) (loop (cdr\
    \ s) (+ count 1))]\n      [(char=? (car s) #\\T) (loop (cdr s) (+ count 1))]\n\
    \      [(char=? (car s) #\\U) (loop (cdr s) (+ count 1))]\n      [(char=? (car\
    \ s) #\\", "  (let loop ((i 0) (count 0))\n    (if (< i #(length s))\n       \
    \ (if (char=? (char-code (char s i)) #\\A)\n            (loop (+ i 2) (+ count\
    \ 1))\n            (loop (+ i 2) count))\n        count)))\n", "  (let ((count\
    \ 0))\n    (for ([i (in-range (length s))])\n      (if (even? i)\n          (if\
    \ (char-upper? (char s i))\n              (set! count (+ count 1))\n         \
    \     count)\n          count))))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (length s)) (+ 1 (count (lambda (x) (char-upper? (car x)) s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1\
    \ (count (char #\\A s) (char #\\A s)))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((char=? s #\\a) (add1 count))\n\
    \          ((char=? s #\\e) (add1 count))\n          ((char=? s #\\i) (add1 count))\n\
    \          ((char=? s #\\o) (add1 count))\n          ((char=? s #\\u) (add1 count))\n\
    \          ((char=? s #\\A) (add1 count))\n          ((char=? s #\\E) (add1 count))\n\
    \          ((char=? s #\\I) (add1 count))\n          ((char=? s #\\O) (add1 count))\n\
    \          ((char=? s #\\U) (add1 count))\n          ((char=? s #\\a) (add1 count))\n\
    \          ((char=? s #\\e) (add1 count))\n          ((char=? s #\\i) (add1 count))\n\
    \          ((char=? s #\\o) (add1 count))\n          ((char=? s #\\u) (add1 count))\n\
    \          ((char=? s #\\A) (add1 count))\n          ((char=? s #\\E) (add1 count))\n\
    \          ((char=? s #\\I) (add1 count))\n          ((char=? s #\\O) (add1 count))\n\
    \          ((char=? s #\\U) (add1 count))\n          ((char=? s #\\a) (add1 count))\n\
    \          ((char=? s #\\e) (add1 count))\n          ((char=? s #\\i) (add1 count))\n\
    \          ((char=? s #\\o) (add1 count))\n          ((char=? s #\\u) (add1 count))\n\
    \          ((char=? s #\\A) (add1 count))\n          ((char=? s #\\E) (add1 count))\n\
    \          ((char=? s #\\I) (add1 count))\n          ((char=? s #\\O) (add1 count))\n\
    \          ((char=? s #\\U) (add1 count))\n          ((char=? s #\\a) (add1 count))\n\
    \          ((char=? s #\\e) (add1 count))\n          ((char=? s #\\i) (add1 count))\n\
    \          ((char=? s #\\o) (add1 count))\n          ((char=? s #\\u) (add1 count))\n\
    \          ((char=? s #\\", "  (cond\n    [(empty? s) 0]\n    [(even? (length\
    \ s)) (+ 1 (count-upper (substring s 0 (- 2 (length s)))))]\n    [else (count-upper\
    \ (substring s 0 (- 2 (length s))))]))\n", "  (let loop ((s s)\n             (count\
    \ 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper? (car s)) (loop\
    \ (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n     \
    \ [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s)\
    \ count)])))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\n   \
    \   [(empty? s) count]\n      [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n\
    \      [else (loop (cdr s) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (length s)) (+ 1 (count-upper (substring s 0 (length s) #t)))]\n    [else (count-upper\
    \ (substring s 0 (length s) #t))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (length s)) (+ 1 (count-upper (substring s 0 (add1 (length s)))))]\n    [else\
    \ (count-upper (substring s 0 (add1 (length s))))]))\n", "  (let loop ((s s)\n\
    \             (count 0))\n    (cond ((null? s) count)\n          ((char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1)))\n          (else (loop (cdr s) count)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count-vowels (substring\
    \ s 0 2)))]\n    [else (count-vowels (substring s 0 2))]))\n", "  (let loop ((s\
    \ s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((or (char-upper? (car s))\
    \ (char-upper? (cdr s)))\n           (loop (cdr s) (+ count 1)))\n          ((char-upper?\
    \ (car s))\n           (loop (cdr s) count))\n          (else\n           (loop\
    \ (cdr s) count)))))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\n\
    \      [(empty? s) count]\n      [(char-upper? (car s)) (loop (cdr s) (+ count\
    \ 1))]\n      [else (loop (cdr s) count)])))\n", "  (let ((count 0))\n    (for\
    \ ([i (in-range (length s))])\n      (if (even? i)\n          (if (char=? (char-code\
    \ (char s i)) #\\A)\n              (add1 count)\n              (add1 0))\n   \
    \       (add1 0)))))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\
    \ ((char=? s #\\a) (set! count (+ count 1)))\n          ((char=? s #\\e) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\i) (set! count (+ count 1)))\n\
    \          ((char=? s #\\o) (set! count (+ count 1)))\n          ((char=? s #\\\
    u) (set! count (+ count 1)))\n          ((char=? s #\\A) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\E) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\I) (set! count (+ count 1)))\n          ((char=? s #\\O) (set! count (+\
    \ count 1)))\n          ((char=? s #\\U) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\a) (set! count (+ count 1)))\n          ((char=? s #\\e) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\i) (set! count (+ count 1)))\n\
    \          ((char=? s #\\o) (set! count (+ count 1)))\n          ((char=? s #\\\
    u) (set! count (+ count 1)))\n          ((char=? s #\\A) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\E) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\I) (set! count (+ count 1)))\n          ((char=? s #\\O) (set! count (+\
    \ count 1)))\n          ((char=? s #\\U) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\a) (set! count (+ count 1)))\n          ((char=? s #\\e) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\i) (set! count (+ count 1)))\n\
    \          ((char=? s #\\o) (set! count (+ count 1)))\n          ((char=? s #\\\
    u) (set! count (+ count 1)))\n          ((char=? s #\\A) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\E) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\I) (set! ", "  (let ((count 0))\n    (for ([i (in-range (length s))])\n\
    \      (if (even? i)\n          (if (char-upper? (char s i))\n              (set!\
    \ count (+ count 1))\n              (set! count 0))))))\n", "  (let loop ((s s)\n\
    \             (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((null? s) count)\n    \
    \      ((char=? (car s) #\\A) count)\n          ((char=? (car s) #\\a) count)\n\
    \          ((char=? (car s) #\\e) count)\n          ((char=? (car s) #\\i) count)\n\
    \          ((char=? (car s) #\\o) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\u) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char=? (car s) #\\U) count)\n\
    \          ((char=? (car s) #\\U) count)\n          ((char", "  (cond\n    [(empty?\
    \ s) 0]\n    [(even? (length s)) (+ (char-upper? (first s)) (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ((s s)\n       \
    \      (count 0))\n    (cond ((or (not (eq? s \"\"))\n              (eq? (char-code\
    \ s) #\\A))\n           (return count))\n          ((char-code s)\n          \
    \ (loop (substring s 0 (+ 0 (length s))) (+ count 1)))\n          (else\n    \
    \       (loop (substring s 0 (+ 0 (length s))) (+ count 0)))))\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond ((null? s) count)\n          ((char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1)))\n          (else (loop (cdr s) count)))))\n",
  "  (let ((count 0))\n    (for ([i (in-range (length s))])\n      (if (even? i)\n\
    \          (if (char=? (char-code (char s i)) #\\A)\n              (add1 count)\n\
    \              (add1 0))\n          (add1 count)))))\n", "  (let loop ((s s)\n\
    \             (count 0))\n    (cond ((null? s) count)\n          ((char=? (car\
    \ s) #\\A)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car s)\
    \ #\\E)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\\
    I)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\O)\n\
    \           (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\U)\n  \
    \         (loop (cdr s) (+ count 1)))\n          (else\n           (loop (cdr\
    \ s) count)))))\n", "  (let ((count 0))\n    (for ([i (in-range (length s))])\n\
    \      (if (even? i)\n          (if (char-upper? (char s i))\n              (set!\
    \ count (+ count 1))\n              (set! count 0))))))\n", "  (let loop ((s s)\n\
    \             (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n",
  "  (let loop ((s s)\n             (count 0))\n    (if (empty? s)\n        count\n\
    \        (loop (rest s)\n              (if (char-upper? (first s))\n         \
    \         (add1 count)\n                  count))))))\n", "  (let loop ((s s)\n\
    \             (count 0))\n    (cond ((char=? s #\\A) (add1 count))\n         \
    \ ((char=? s #\\a) (add1 count))\n          ((char=? s #\\e) (add1 count))\n \
    \         ((char=? s #\\i) (add1 count))\n          ((char=? s #\\o) (add1 count))\n\
    \          ((char=? s #\\u) (add1 count))\n          ((char=? s #\\y) (add1 count))\n\
    \          ((char=? s #\\Y) (add1 count))\n          ((char=? s #\\W) (add1 count))\n\
    \          ((char=? s #\\Z) (add1 count))\n          ((char=? s #\\s) (add1 count))\n\
    \          ((char=? s #\\D) (add1 count))\n          ((char=? s #\\B) (add1 count))\n\
    \          ((char=? s #\\C) (add1 count))\n          ((char=? s #\\F) (add1 count))\n\
    \          ((char=? s #\\G) (add1 count))\n          ((char=? s #\\H) (add1 count))\n\
    \          ((char=? s #\\J) (add1 count))\n          ((char=? s #\\K) (add1 count))\n\
    \          ((char=? s #\\L) (add1 count))\n          ((char=? s #\\M) (add1 count))\n\
    \          ((char=? s #\\N) (add1 count))\n          ((char=? s #\\P) (add1 count))\n\
    \          ((char=? s #\\Q) (add1 count))\n          ((char=? s #\\R) (add1 count))\n\
    \          ((char=? s #\\T) (add1 count))\n          ((char=? s #\\V) (add1 count))\n\
    \          ((char=? s #\\W) (add1 count))\n          ((char=? s #\\X) (add1 count))\n\
    \          ((char=? s #\\Y) (add1 count))\n          ((char=? s #\\Z) (add1 count))\n\
    \          ((char=? s #\\a) (add1 count))\n          ((char=? s #\\b) (add1 count))\n\
    \          ((char=? s #\\c) (add1 count))\n          ((char=? s #\\d) (add1 count))\n\
    \          ((char=? s #\\e) (", "  (let loop ((s s)\n             (count 0))\n\
    \    (cond\n      [(empty? s) count]\n      [(char-upper? (car s)) (loop (cdr\
    \ s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", "  (let ((count 0))\n\
    \    (for ([i (in-range (length s))])\n      (if (even? i)\n          (if (char-upper?\
    \ (char s i))\n              (set! count (add1 count))\n              (set! count\
    \ 0)))))\n  count)\n", "  (let loop ((s s)\n             (count 0))\n    (cond\n\
    \      [(empty? s) count]\n      [(char-upper? (car s)) (loop (cdr s) (+ count\
    \ 1))]\n      [else (loop (cdr s) count)])))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(even? (length s)) (+ 1 (count (char #\\A) (char s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1\
    \ (count (char #\\A s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond ((null? s) count)\n          ((char=?\
    \ (car s) #\\A) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\a)\
    \ (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\b) (loop (cdr s)\
    \ (+ count 1)))\n          ((char=? (car s) #\\d) (loop (cdr s) (+ count 1)))\n\
    \          ((char=? (car s) #\\e) (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\f) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\g)\
    \ (loop (cdr s) (+ count 1)))\n          (else (loop (cdr s) count)))))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char #\\U (first\
    \ s)) (first s)))]\n    [else (count_upper (rest s))]))\n", "  (let ((count 0))\n\
    \    (for ([i (in-range (length s))])\n      (if (even? i)\n          (if (char=?\
    \ (char-code (car s)) 'A)\n              (set! count (add1 count))\n         \
    \     (set! count 0))))))\n", "  (let loop ((s s)\n             (count 0))\n \
    \   (cond ((or (char=? (char-code #\\a) s)\n              (char=? (char-code #\\\
    A) s))\n           (if (even? count)\n               (add1 count)\n          \
    \     count))\n          ((char=? (char-code #\\A) s)\n           (if (even? count)\n\
    \               (add1 count)\n               count))\n          ((char=? (char-code\
    \ #\\a) s)\n           (if (even? count)\n               (add1 count)\n      \
    \         count))\n          (else\n           (loop (substring s 0 (+ count 1))\n\
    \                (add1 count))))))\n", "  (let ((count 0))\n    (for ([i (in-range\
    \ (length s))])\n      (when (char-upper? (char s i))\n        (set! count (+\
    \ count 1))))))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\n\
    \      [(empty? s) count]\n      [(char-upper? (car s)) (loop (cdr s) (+ count\
    \ 1))]\n      [else (loop (cdr s) count)])))\n", "  (let loop ((s s)\n       \
    \      (count 0))\n    (cond ((string=? s \"\")\n           (if (= count 0)\n\
    \               0\n               (+ 1 (loop (substring s 0 1) (+ count 1)))))\n\
    \          ((char=? (car s) #\\A)\n           (loop (substring s 0 2) count))\n\
    \          ((char=? (car s) #\\E)\n           (loop (substring s 0 2) count))\n\
    \          ((char=? (car s) #\\I)\n           (loop (substring s 0 2) count))\n\
    \          ((char=? (car s) #\\O)\n           (loop (substring s 0 2) count))\n\
    \          ((char=? (car s) #\\U)\n           (loop (substring s 0 2) count))\n\
    \          (else\n           (loop (substring s 0 1) (+ count 1))))))\n", "  (let\
    \ loop ((s s)\n             (count 0))\n    (cond ((null? s) count)\n        \
    \  ((char=? (car s) #\\A) (loop (cdr s) (+ count 1)))\n          ((char=? (car\
    \ s) #\\a) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\e) (loop\
    \ (cdr s) (+ count 1)))\n          ((char=? (car s) #\\i) (loop (cdr s) (+ count\
    \ 1)))\n          ((char=? (car s) #\\o) (loop (cdr s) (+ count 1)))\n       \
    \   (else (loop (cdr s) count)))))\n", "  (let loop ((s s)\n             (count\
    \ 0))\n    (cond ((char=? s #\\a) (add1 count))\n          ((char=? s #\\e) (add1\
    \ count))\n          ((char=? s #\\i) (add1 count))\n          ((char=? s #\\\
    o) (add1 count))\n          ((char=? s #\\u) (add1 count))\n          ((char=?\
    \ s #\\A) (add1 count))\n          ((char=? s #\\E) (add1 count))\n          ((char=?\
    \ s #\\I) (add1 count))\n          ((char=? s #\\O) (add1 count))\n          ((char=?\
    \ s #\\U) (add1 count))\n          ((char=? s #\\a) (add1 count))\n          ((char=?\
    \ s #\\e) (add1 count))\n          ((char=? s #\\i) (add1 count))\n          ((char=?\
    \ s #\\o) (add1 count))\n          ((char=? s #\\u) (add1 count))\n          ((char=?\
    \ s #\\A) (add1 count))\n          ((char=? s #\\E) (add1 count))\n          ((char=?\
    \ s #\\I) (add1 count))\n          ((char=? s #\\O) (add1 count))\n          ((char=?\
    \ s #\\U) (add1 count))\n          ((char=? s #\\a) (add1 count))\n          ((char=?\
    \ s #\\e) (add1 count))\n          ((char=? s #\\i) (add1 count))\n          ((char=?\
    \ s #\\o) (add1 count))\n          ((char=? s #\\u) (add1 count))\n          ((char=?\
    \ s #\\A) (add1 count))\n          ((char=? s #\\E) (add1 count))\n          ((char=?\
    \ s #\\I) (add1 count))\n          ((char=? s #\\O) (add1 count))\n          ((char=?\
    \ s #\\U) (add1 count))\n          ((char=? s #\\a) (add1 count))\n          ((char=?\
    \ s #\\e) (add1 count))\n          ((char=? s #\\i) (add1 count))\n          ((char=?\
    \ s #\\o) (add1 count))\n          ((char=? s #\\u) (add1 count))\n          ((char=?\
    \ s #\\", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (lambda\
    \ (x) (char-upper? (car x))))\n                             (count_upper (cdr\
    \ s)))]\n    [else (count_upper (cdr s))]))\n", "  (let loop ((s s)\n        \
    \     (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper? (car\
    \ s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char #\\U (first\
    \ s))))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond [(empty?\
    \ s) count]\n          [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n  \
    \        [else (loop (cdr s) count)])))\n", "  (let loop ((s s)\n            \
    \ (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper? (car s))\
    \ (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", "  (let\
    \ loop ((s s)\n             (count 0))\n    (cond ((null? s) count)\n        \
    \  ((char=? (car s) #\\A) (loop (cdr s) (+ count 1)))\n          ((char=? (car\
    \ s) #\\a) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\e) (loop\
    \ (cdr s) (+ count 1)))\n          ((char=? (car s) #\\i) (loop (cdr s) (+ count\
    \ 1)))\n          ((char=? (car s) #\\o) (loop (cdr s) (+ count 1)))\n       \
    \   ((char=? (car s) #\\u) (loop (cdr s) (+ count 1)))\n          (else (loop\
    \ (cdr s) count)))))\n", "  (let loop ((s s)\n             (count 0))\n    (cond\n\
    \      [(empty? s) count]\n      [(char=? (first s) #\\a) (loop (rest s) (+ count\
    \ 1))]\n      [(char=? (first s) #\\e) (loop (rest s) (+ count 1))]\n      [(char=?\
    \ (first s) #\\i) (loop (rest s) (+ count 1))]\n      [(char=? (first s) #\\o)\
    \ (loop (rest s) (+ count 1))]\n      [(char=? (first s) #\\u) (loop (rest s)\
    \ (+ count 1))]\n      [else (loop (rest s) count)])))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(even? (length s)) (+ 1 (count-upper (substring s 0 (- 2 (length\
    \ s)))))]\n    [else (count-upper (substring s 0 (- 2 (length s))))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char #\\A s)\
    \ (char #\\A s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ((s s)\n\
    \             (count 0))\n    (cond ((null? s) count)\n          ((char-upper?\
    \ (car s)) (loop (cdr s) (add1 count)))\n          (else (loop (cdr s) count)))))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n\
    \      [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr\
    \ s) count)])))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((null?\
    \ s) count)\n          ((char=? (car s) #\\A) (loop (cdr s) (+ count 1)))\n  \
    \        ((char=? (car s) #\\a) (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\e) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\i)\
    \ (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\o) (loop (cdr s)\
    \ (+ count 1)))\n          ((char=? (car s) #\\u) (loop (cdr s) (+ count 1)))\n\
    \          (else (loop (cdr s) count)))))\n", "  (let ((count 0))\n    (for ([i\
    \ (in-range (length s))])\n      (if (even? i)\n          (if (char-upper? (char\
    \ s i))\n              (set! count (add1 count))\n              (set! count 0))))))\n",
  "  (cond [(empty? s) 0]\n        [(even? (length s)) (+ 1 (count (char #\\U) s))]\n\
    \        [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(even? (length s)) (+ 1 (count-upper (substring s 0 (- 2 (length s)))))]\n\
    \    [else (count-upper (substring s 0 (- 2 (length s))))]))\n", "  (let loop\
    \ ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n     \
    \ [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s)\
    \ count)])))\n", "  (let ((count 0))\n    (for ([i (in-range (length s))])\n \
    \     (if (even? i)\n          (if (char-upper? (char s i))\n              (set!\
    \ count (add1 count))\n              (set! count 0))))))\n", "  (let loop ((s\
    \ s)\n             (count 0))\n    (cond [(empty? s) count]\n          [(char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1))]\n          [else (loop (cdr s) count)])))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n\
    \      [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr\
    \ s) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1\
    \ (count (char #\\A s) (char #\\A s)))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((null? s) count)\n    \
    \      ((char=? (car s) #\\A) (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\a) (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\b)\
    \ (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\d) (loop (cdr s)\
    \ (+ count 1)))\n          ((char=? (car s) #\\e) (loop (cdr s) (+ count 1)))\n\
    \          ((char=? (car s) #\\f) (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\g) (loop (cdr s) (+ count 1)))\n          (else (loop (cdr s) count)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count-vowels (substring\
    \ s 0 (length s) #\\A)))]\n    [else (count-vowels (substring s 0 (length s) #\\\
    A))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((null? s)\
    \ count)\n          ((char=? (car s) #\\A)\n           (loop (cdr s) (+ count\
    \ 1)))\n          ((char=? (car s) #\\E)\n           (loop (cdr s) (+ count 1)))\n\
    \          ((char=? (car s) #\\I)\n           (loop (cdr s) (+ count 1)))\n  \
    \        ((char=? (car s) #\\O)\n           (loop (cdr s) (+ count 1)))\n    \
    \      (else\n           (loop (cdr s) count)))))\n", "  (let loop ((s s)\n  \
    \           (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char #\\A s)\
    \ #\\A))]\n    [else (count_upper (rest s))]))\n", "  (let loop ((s s)\n     \
    \        (count 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper?\
    \ (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ (char-code (first s)) (char-code\
    \ (second s))) (count_upper (rest s))]\n    [else (count_upper (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count-vowels (substring\
    \ s 0 (- 2 (length s)))))]\n    [else (count-vowels (substring s 0 (- 2 (length\
    \ s))))]))\n", "  (let ((count 0))\n    (for ([i (in-range (length s))])\n   \
    \   (if (even? i)\n          (if (char=? (char-code (char s i)) #\\A)\n      \
    \        (add1 count)\n              (add1 0))\n          (add1 0)))))\n", " \
    \ (let loop ((s s)\n             (count 0))\n    (cond ((char=? s #\\a) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\e) (set! count (+ count 1)))\n\
    \          ((char=? s #\\i) (set! count (+ count 1)))\n          ((char=? s #\\\
    o) (set! count (+ count 1)))\n          ((char=? s #\\u) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\A) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\E) (set! count (+ count 1)))\n          ((char=? s #\\I) (set! count (+\
    \ count 1)))\n          ((char=? s #\\O) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\U) (set! count (+ count 1)))\n          ((char=? s #\\a) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\e) (set! count (+ count 1)))\n\
    \          ((char=? s #\\i) (set! count (+ count 1)))\n          ((char=? s #\\\
    o) (set! count (+ count 1)))\n          ((char=? s #\\u) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\A) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\E) (set! count (+ count 1)))\n          ((char=? s #\\I) (set! count (+\
    \ count 1)))\n          ((char=? s #\\O) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\U) (set! count (+ count 1)))\n          ((char=? s #\\a) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\e) (set! count (+ count 1)))\n\
    \          ((char=? s #\\i) (set! count (+ count 1)))\n          ((char=? s #\\\
    o) (set! count (+ count 1)))\n          ((char=? s #\\u) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\A) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\E) (set! count (+ count 1)))\n          ((char=? s #\\I) (set! ", "  (let\
    \ loop ((s s)\n             (count 0))\n    (cond ((null? s) count)\n        \
    \  ((char=? (car s) #\\A)\n           (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\E)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car\
    \ s) #\\I)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car s)\
    \ #\\O)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\\
    U)\n           (loop (cdr s) (+ count 1)))\n          (else\n           (loop\
    \ (cdr s) count)))))\n", "  (cond [(empty? s) 0]\n        [(even? (length s))\
    \ (+ 1 (count-vowels (substring s 0 (- 1 (length s)))))]\n        [else 0]))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond ((char=? (car s) #\\a) (add1\
    \ count))\n          ((char=? (car s) #\\e) (add1 count))\n          ((char=?\
    \ (car s) #\\i) (add1 count))\n          ((char=? (car s) #\\o) (add1 count))\n\
    \          ((char=? (car s) #\\u) (add1 count))\n          ((char=? (car s) #\\\
    A) (add1 count))\n          ((char=? (car s) #\\E) (add1 count))\n          ((char=?\
    \ (car s) #\\I) (add1 count))\n          ((char=? (car s) #\\O) (add1 count))\n\
    \          ((char=? (car s) #\\U) (add1 count))\n          ((char=? (car s) #\\\
    D) (add1 count))\n          ((char=? (car s) #\\B) (add1 count))\n          ((char=?\
    \ (car s) #\\F) (add1 count))\n          ((char=? (car s) #\\G) (add1 count))\n\
    \          ((char=? (car s) #\\C) (add1 count))\n          ((char=? (car s) #\\\
    G) (add1 count))\n          ((char=? (car s) #\\E) (add1 count))\n          ((char=?\
    \ (car s) #\\I) (add1 count))\n          ((char=? (car s) #\\O) (add1 count))\n\
    \          ((char=? (car s) #\\U) (add1 count))\n          ((char=? (car s) #\\\
    D) (add1 count))\n          ((char=? (car s) #\\B) (add1 count))\n          ((char=?\
    \ (car s) #\\F) (add1 count))\n          ((char=? (car s) #\\G) (add1 count))\n\
    \          ((char=? (car s) #\\C) (add1 count))\n          ((char=? (car s) #\\\
    G) (add1 count))\n          ((char=? (car s) #\\E) (add1 count))\n          ((char=?\
    \ (car s) #\\I) (add1 count))\n          ((char=? (car s) #\\O) (add1 count))\n\
    \          ((char=? (car s) #\\U) (add1 count))\n          ((char=? (car s) #\\\
    D) (add1 count))\n          ((", "  (let loop ((s s)\n             (count 0))\n\
    \    (if (empty? s)\n        count\n        (loop (rest s)\n              (+ count\
    \ (if (char-upper? (first s)) (first s) 0))))))\n", "  (let loop ((s s)\n    \
    \         (count 0))\n    (cond ((or (not (eq? s \"\")) (eq? s #\\newline))\n\
    \           count)\n          ((char=? (car s) #\\A)\n           (loop (cdr s)\
    \ (+ count 1)))\n          ((char=? (car s) #\\E)\n           (loop (cdr s) (+\
    \ count 1)))\n          ((char=? (car s) #\\I)\n           (loop (cdr s) (+ count\
    \ 1)))\n          ((char=? (car s) #\\O)\n           (loop (cdr s) (+ count 1)))\n\
    \          ((char=? (car s) #\\U)\n           (loop (cdr s) (+ count 1)))\n  \
    \        ((char=? (car s) #\\Y)\n           (loop (cdr s) (+ count 1)))\n    \
    \      ((char=? (car s) #\\a)\n           (loop (cdr s) (+ count 1)))\n      \
    \    ((char=? (car s) #\\e)\n           (loop (cdr s) (+ count 1)))\n        \
    \  ((char=? (car s) #\\i)\n           (loop (cdr s) (+ count 1)))\n          ((char=?\
    \ (car s) #\\o)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car\
    \ s) #\\u)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car s)\
    \ #\\y)\n           (loop (cdr s) (+ count 1)))\n          ((char=? (car s) #\\\
    z)\n           (loop (cdr s) (+ count 1)))\n          (else\n           (loop\
    \ (cdr s) count)))))\n", "  (let ((count 0))\n    (for ([i (in-range (length s))])\n\
    \      (when (char-upper? (char s i))\n        (set! count (in-add1 (in-add1 count))))))\n\
    \  count)\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((or (not\
    \ (eq? s \"\")) (eq? s #\\newline))\n           (if (even? count)\n          \
    \     (loop (substring s 0 (+ count 1))\n                     (+ count 1))\n \
    \              (loop (substring s 0 (+ count 1))\n                     (+ count\
    \ 0)))\n           (loop (substring s 0 (length s))\n                 (+ count\
    \ (or (not (eq? (substring s 0 (length s)) #\\newline))\n                    \
    \         (eq? (substring s 0 (length s)) #\\newline))))\n          (else count)))))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond [(empty? s) count]\n   \
    \       [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n          [else (loop\
    \ (cdr s) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s))\
    \ (+ 1 (count-upper (substring s 0 1)))]\n    [else (count-upper (substring s\
    \ 0 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
