name: HumanEval_98_count_upper
language: rkt
prompt: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
  \ in even indices.\n;; For example:\n;; >>> (count_upper \"aBCdEf\")\n;; 1\n;; >>>\
  \ (count_upper \"abcdefg\")\n;; 0\n;; >>> (count_upper \"dBBE\")\n;; 0\n(define\
  \ (count_upper s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
  \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\"\
  ) 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"\
  B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\
  \") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count-vowels\
    \ (substring s 0 (length s) #\\A)))]\n    [else (count_upper (substring s 0 (length\
    \ s) #\\A))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1\
    \ (count (char s #\\U) '#\\U))]\n    [else (count_upper (rest s))]))\n", "  (cond\
    \ [(empty? s) 0]\n        [(even? (length s)) (+ 1 (count-vowels (substring s\
    \ 0 (length s) #\\A)))]\n        [else (count_upper (substring s 0 (length s)\
    \ #\\A))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((char=?\
    \ s #\\a) (set! count (+ count 1)))\n          ((char=? s #\\e) (set! count (+\
    \ count 1)))\n          ((char=? s #\\i) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\o) (set! count (+ count 1)))\n          ((char=? s #\\u) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\A) (set! count (+ count 1)))\n\
    \          ((char=? s #\\E) (set! count (+ count 1)))\n          ((char=? s #\\\
    I) (set! count (+ count 1)))\n          ((char=? s #\\O) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\U) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\D) (set! count (+ count 1)))\n          ((char=? s #\\B) (set! count (+\
    \ count 1)))\n          ((char=? s #\\F) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\G) (set! count (+ count 1)))\n          ((char=? s #\\H) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\J) (set! count (+ count 1)))\n\
    \          ((char=? s #\\K) (set! count (+ count 1)))\n          ((char=? s #\\\
    L) (set! count (+ count 1)))\n          ((char=? s #\\M) (set! count (+ count\
    \ 1)))\n          ((char=? s #\\N) (set! count (+ count 1)))\n          ((char=?\
    \ s #\\P) (set! count (+ count 1)))\n          ((char=? s #\\Q) (set! count (+\
    \ count 1)))\n          ((char=? s #\\R) (set! count (+ count 1)))\n         \
    \ ((char=? s #\\S) (set! count (+ count 1)))\n          ((char=? s #\\T) (set!\
    \ count (+ count 1)))\n          ((char=? s #\\W) (set! count (+ count 1)))\n\
    \          ((char=? s #\\V) (set! count (+ count 1)))\n          ((char=? s #\\\
    X) (set! count ", "  (let ((count 0))\n    (for ([i (in-range (length s))])\n\
    \      (if (even? i)\n          (if (char=? (char-code (char s i)) #\\A)\n   \
    \           (add1 count)\n              (add1 0))\n          (add1 0)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count-upper (substring\
    \ s 0 (length s) #\\A)))]\n    [else (count-upper (substring s 0 (length s) #\\\
    A))]))\n", "  (let ((count 0))\n    (loop for i from 0 to (length s) by 2\n  \
    \        collect (if (char=? (char-code (substring s i i)) #\\A)\n           \
    \           (+ 1 (if (char=? (char-code (substring s i i)) #\\A)\n           \
    \                      (+ 1 (if (char=? (char-code (substring s i i)) #\\E)\n\
    \                                          (+ 1 (if (char=? (char-code (substring\
    \ s i i)) #\\I)\n                                                  (+ 1 (if (char=?\
    \ (char-code (substring s i i)) #\\O)\n                                      \
    \                    (+ 1 (if (char=? (char-code (substring s i i)) #\\U)\n  \
    \                                                                (+ 1 (if (char=?\
    \ (char-code (substring s i i)) #\\Y)\n                                      \
    \                                    (+ 1 (if (char=? (char-code (substring s\
    \ i i)) #\\S)\n                                                              \
    \                    (+ 1 (if (char=? (char-code (substring s i i)) #\\W)\n  \
    \                                                                            \
    \            0)))))))))))))))))\n    count))\n", "  (let loop ((s s)\n       \
    \      (count 0))\n    (cond [(empty? s) count]\n          [(char-upper? (car\
    \ s)) (loop (cdr s) (+ count 1))]\n          [else (loop (cdr s) count)])))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond [(empty? s) count]\n   \
    \       [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n          [else (loop\
    \ (cdr s) count)])))\n", "  (cond [(empty? s) 0]\n        [(even? (length s))\
    \ (+ 1 (count-vowels (substring s 0 (- 2 (length s)))))]\n        [else (+ 1 (count-vowels\
    \ (substring s 0 (- 2 (length s)))))]))\n", "  (let ((count 0))\n    (for ([i\
    \ (in-range (length s))])\n      (when (char-upper? (char s i))\n        (set!\
    \ count (add1 count)))))\n  count)\n", "  (let loop ((s s)\n             (count\
    \ 0))\n    (cond\n      [(empty? s) count]\n      [(char-upper? (car s)) (loop\
    \ (cdr s) (+ count 1))]\n      [else (loop (cdr s) count)])))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(even? (length s)) (+ 1 (count (char s #\\U) '#\\U))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even?\
    \ (length s)) (+ 1 (count (char s #\\U) '()))]\n    [else (count_upper (rest s))]))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (length s) by 2\n          collect\
    \ (if (char=? (char-code (substring s i i)) #\\A)\n                      (+ 1\
    \ (if (char=? (char-code (substring s i i)) #\\A)\n                          \
    \    (+ 1 (if (char=? (char-code (substring s i i)) #\\E)\n                  \
    \                    (+ 1 (if (char=? (char-code (substring s i i)) #\\I)\n  \
    \                                            (+ 1 (if (char=? (char-code (substring\
    \ s i i)) #\\O)\n                                                      (+ 1 (if\
    \ (char=? (char-code (substring s i i)) #\\U)\n                              \
    \                                (+ 1 (if (char=? (char-code (substring s i i))\
    \ #\\Y)\n                                                                    (+\
    \ 1 (if (char=? (char-code (substring s i i)) #\\S)\n                        \
    \                                                  (+ 1 (if (char=? (char-code\
    \ (substring s i i)) #\\W)\n                                                 \
    \                                 (+ 1 (if (char=? (char-code (substring s i i))\
    \ #\\Z)\n                                                                    \
    \                      0)))))))))))))))))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(even? (length s)) (+ 1 (count (char #\\A) (char s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ((s s)\n             (count 0))\n    (cond ((char=?\
    \ (car s) #\\A)\n           (loop (cdr s) count))\n          ((char=? (car s)\
    \ #\\E)\n           (loop (cdr s) count))\n          ((char=? (car s) #\\I)\n\
    \           (loop (cdr s) count))\n          ((char=? (car s) #\\O)\n        \
    \   (loop (cdr s) count))\n          ((char=? (car s) #\\U)\n           (loop\
    \ (cdr s) count))\n          (else\n           (loop (cdr s) (+ count 1))))))\n",
  "  (let loop ((s s)\n             (count 0))\n    (cond\n      [(empty? s) count]\n\
    \      [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n      [else (loop (cdr\
    \ s) count)])))\n", "  (let loop ((s s)\n             (count 0))\n    (cond [(empty?\
    \ s) count]\n          [(char-upper? (car s)) (loop (cdr s) (+ count 1))]\n  \
    \        [else (loop (cdr s) count)])))\n", "  (cond\n    [(empty? s) 0]\n   \
    \ [(even? (length s)) (+ 1 (count-vowels (substring s 0 (- 2 (length s)))))]\n\
    \    [else (count-vowels (substring s 0 (- 2 (length s))))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
