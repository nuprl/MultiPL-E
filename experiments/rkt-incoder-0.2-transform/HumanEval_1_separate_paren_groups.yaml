name: HumanEval_1_separate_paren_groups
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string containing multiple\
  \ groups of nested parentheses. Your goal is to\n;; separate those group into separate\
  \ strings and return the list of those.\n;; Separate groups are balanced (each open\
  \ brace is properly closed) and not nested within each other\n;; Ignore any spaces\
  \ in the input string.\n;; >>> (separate_paren_groups \"( ) (( )) (( )( ))\")\n\
  ;; (list \"()\" \"(())\" \"(()())\")\n(define (separate_paren_groups paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate separate_paren_groups))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list \"(()())\"\
  \ \"((()))\" \"()\" \"((())()())\"))\n    (check-equal? (candidate \"() (()) ((()))\
  \ (((())))\") (list \"()\" \"(())\" \"((()))\" \"(((())))\"))\n    (check-equal?\
  \ (candidate \"(()(())((())))\") (list \"(()(())((())))\"))\n    (check-equal? (candidate\
  \ \"( ) (( )) (( )( ))\") (list \"()\" \"(())\" \"(()())\"))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (if (empty? paren_string)\n        result\n        (loop (rest paren_string)\n\
    \              (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond ((empty? paren_string)\n           (reverse\
    \ result))\n          ((char= (first paren_string) '(\n                   (loop\
    \ (rest paren_string)\n                           (cons (first paren_string) result))))\n\
    \          ((char= (first paren_string) '(\n                   (loop (rest paren_string)\n\
    \                           (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (cond\n      [(empty?\
    \ paren_string) result]\n      [(equal? (first paren_string) '(#\\Space)) (loop\
    \ (rest paren_string) (cons (first paren_string) result))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop", "  (let loop ((paren_string paren_string)\n\
    \             (groups '())\n             (group (make-string 0))\n           \
    \  (paren_count 0))\n    (cond ((string-empty? paren_string)\n           (reverse\
    \ groups))\n          ((char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) groups)\n    \
    \                (make-string 0)\n                    (+ paren_count 1)))\n  \
    \         (loop (rest paren_string)\n                  (cons (first paren_string)\
    \ groups)\n                  (make-string 0)\n                  (+ paren_count\
    \ 1)))\n          ((char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) groups)\n                    (make-string\
    \ 0)\n                    (+ paren_count 1)))\n           (loop (rest paren_string)\n\
    \                  (cons (first paren_string) groups)\n                  (make-string\
    \ 0)\n                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) groups)\n                    (make-string 0)\n               \
    \     (+ paren_count 1)))\n           (loop (rest paren_string)\n            \
    \      (cons (first paren_string) groups)\n                  (make-string 0)\n\
    \                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) groups)\n                    (make-string 0)\n               \
    \     (+ paren_count 1)))\n           (loop (rest paren_string)\n            \
    \      (cons (first paren_string) groups)\n                  (make-string 0)\n\
    \                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) groups)\n                    (make-string 0)\n               \
    \     (+ paren_count 1)))\n           (loop (rest paren_string)\n            \
    \      (cons (first paren_string) groups)\n                  (make-string 0)\n\
    \                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) groups)\n                    (make-string 0)\n               \
    \     (+ paren_count 1)))\n           (loop (rest paren_string)\n            \
    \      (cons (first paren_string) groups)\n                  (make-string 0)\n\
    \                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '", "  (let loop ((paren_string paren_string)\n             (paren_list '())\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (reverse paren_list)]\n      [(char=? (car paren_string) '(\n            \
    \   (loop (cdr paren_string)\n                      (cons (car paren_list) paren_list)\n\
    \                      (add1 paren_count)))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string) paren_list)\n             (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (if (empty?\
    \ paren_string)\n        result\n        (loop (rest paren_string)\n         \
    \     (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(equal? (first\
    \ paren_string) '( () ( () )\n                  (loop (rest paren_string)\n  \
    \                       (cons (first paren_string)\n                         \
    \      paren_list)\n                         paren_count (+ 1 paren_count)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   paren_list)\n             paren_count (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse result)\n       ]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons (first\
    \ paren_string) result))\n       ]\n      [(equal? (first paren_string) '(#\\\
    ))\n       (loop (rest paren_string) (cons (first paren_string) result))\n   \
    \    ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_list '())\n             (paren_string\
    \ (car paren_string))\n             (paren_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse paren_list)\n       ]\n      [(char=? (car paren_string)\
    \ '( () )')\n       (loop (cdr paren_string)\n             (cons (car paren_string)\n\
    \                   (reverse paren_list))\n             (car paren_string)\n \
    \            (+ paren_count 1))\n       ]\n      [else\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string)\n                   (reverse paren_list))\n\
    \             (car paren_string)\n             (+ paren_count 1))\n       ]\n\
    \      )\n     )\n   )\n  )\n", "  (let loop ((paren_string paren_string)\n  \
    \           (result '()))\n    (if (empty? paren_string)\n        result\n   \
    \     (loop (rest paren_string)\n              (cons (first paren_string)\n  \
    \                  (loop (rest paren_string)\n                          result))))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [else (loop (rest paren_string) (cons (first paren_string)\
    \ result))]))))\n", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_list]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char= (first\
    \ paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char= (first paren_string) '( () ))\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char= (first\
    \ paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char= (first paren_string) '( () ))\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char= (first\
    \ paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char= (first paren_string) '( () ))\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char= (", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse paren_list)]\n      [(char=? (first paren_string) '(\n      \
    \         (loop (rest paren_string)\n                       (cons (first paren_string)\
    \ paren_list)\n                       (add1 paren_count)))]\n      [(char=? (first\
    \ paren_string) '(\n               (loop (rest paren_string)\n               \
    \        (cons (first paren_string) paren_list)\n                       (add1\
    \ paren_count)))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) paren_list)\n             (add1 paren_count))]\n      [else\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (add1 paren_count)\n             paren_string)])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (groups '())\n             (group_count\
    \ 0))\n    (cond ((string-length paren_string) groups)\n          ((char= (char-code\
    \ paren_string) '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-", "  (let loop ((paren_string paren_string)\n      \
    \       (result '()))\n    (cond\n      [(empty? paren_string) result]\n     \
    \ [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [else (loop (rest paren_string) (cons (first\
    \ paren_string) result))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond ((empty? paren_string) result)\n      \
    \    ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) result)))\n          ((char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))\n          ((char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) result)))\n          ((char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) result)))\n  \
    \        ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons\
    \ (first paren_string) result)))\n          ((char= (first paren_string) '( ()\
    \ )) (loop (rest paren_string) (cons (first paren_string) result)))\n        \
    \  ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) result)))\n          ((char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))\n          ((char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) result)))\n          ((char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) result)))\n  \
    \        ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons\
    \ (first paren_string) result)))\n          ((char= (first paren_string) '( ()\
    \ )) (loop (rest paren_string) (cons (first paren_string) result)))\n        \
    \  ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) result)))\n          ((char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) result)))\n          ((char= ",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\
    \ ((string-length paren_string) result)\n          ((char= (char-code paren_string)\
    \ '( () )) (loop (substring paren_string 0 (string-length paren_string)) (cons\
    \ paren_string result)))\n          ((char= (char-code paren_string) '( () ))\
    \ (loop (substring paren_string 1 (string-length paren_string)) (cons paren_string\
    \ result)))\n          ((char= (char-code paren_string) '( () )) (loop (substring\
    \ paren_string 2 (string-length paren_string)) (cons paren_string result)))\n\
    \          ((char= (char-code paren_string) '( () )) (loop (substring paren_string\
    \ 3 (string-length paren_string)) (cons paren_string result)))\n          ((char=\
    \ (char-code paren_string) '( () )) (loop (substring paren_string 4 (string-length\
    \ paren_string)) (cons paren_string result)))\n          ((char= (char-code paren_string)\
    \ '( () )) (loop (substring paren_string 5 (string-length paren_string)) (cons\
    \ paren_string result)))\n          ((char= (char-code paren_string) '( () ))\
    \ (loop (substring paren_string 6 (string-length paren_string)) (cons paren_string\
    \ result)))\n          ((char= (char-code paren_string) '( () )) (loop (substring\
    \ paren_string 7 (string-length paren_string)) (cons paren_string result)))\n\
    \          ((char= (char-code paren_string) '( () )) (loop (substring paren_string\
    \ 8 (string-length paren_string)) (cons paren_string result)))\n          ((char=\
    \ (char-code paren_string) '( () )) (loop (substring paren_string 9 (string-length\
    \ paren_string)) (cons paren_string result)))\n          ((char= (char-code paren_string)\
    \ '( () )) (loop (substring paren_string 10 (string-length paren_string)) (cons\
    \ paren_string result)))\n          ((char= (char-code paren_string) '( () ))\
    \ (loop (substring paren_string 11 (string-length paren_string)) (cons paren_string\
    \ result)))\n          ((char= (char-code paren_string) '( () )) (loop (substring ",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_list]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (if (empty? paren_string)\n        result\n        (loop (rest paren_string)\n\
    \              (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
