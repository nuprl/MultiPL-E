name: HumanEval_1_separate_paren_groups
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string containing multiple\
  \ groups of nested parentheses. Your goal is to\n;; separate those group into separate\
  \ strings and return the list of those.\n;; Separate groups are balanced (each open\
  \ brace is properly closed) and not nested within each other\n;; Ignore any spaces\
  \ in the input string.\n;; >>> (separate_paren_groups \"( ) (( )) (( )( ))\")\n\
  ;; (list \"()\" \"(())\" \"(()())\")\n(define (separate_paren_groups paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate separate_paren_groups))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list \"(()())\"\
  \ \"((()))\" \"()\" \"((())()())\"))\n    (check-equal? (candidate \"() (()) ((()))\
  \ (((())))\") (list \"()\" \"(())\" \"((()))\" \"(((())))\"))\n    (check-equal?\
  \ (candidate \"(()(())((())))\") (list \"(()(())((())))\"))\n    (check-equal? (candidate\
  \ \"( ) (( )) (( )( ))\") (list \"()\" \"(())\" \"(()())\"))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (if (empty? paren_string)\n        result\n        (loop (rest paren_string)\n\
    \              (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond ((empty? paren_string)\n           (reverse\
    \ result))\n          ((char= (first paren_string) '(\n                   (loop\
    \ (rest paren_string)\n                           (cons (first paren_string) result))))\n\
    \          ((char= (first paren_string) '(\n                   (loop (rest paren_string)\n\
    \                           (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n          ((char=\
    \ (first paren_string) '(\n                   (loop (rest paren_string)\n    \
    \                       (cons (first paren_string) result))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (cond\n      [(empty?\
    \ paren_string) result]\n      [(equal? (first paren_string) '(#\\Space)) (loop\
    \ (rest paren_string) (cons (first paren_string) result))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop", "  (let loop ((paren_string paren_string)\n\
    \             (groups '())\n             (group (make-string 0))\n           \
    \  (paren_count 0))\n    (cond ((string-empty? paren_string)\n           (reverse\
    \ groups))\n          ((char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) groups)\n    \
    \                (make-string 0)\n                    (+ paren_count 1)))\n  \
    \         (loop (rest paren_string)\n                  (cons (first paren_string)\
    \ groups)\n                  (make-string 0)\n                  (+ paren_count\
    \ 1)))\n          ((char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) groups)\n                    (make-string\
    \ 0)\n                    (+ paren_count 1)))\n           (loop (rest paren_string)\n\
    \                  (cons (first paren_string) groups)\n                  (make-string\
    \ 0)\n                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) groups)\n                    (make-string 0)\n               \
    \     (+ paren_count 1)))\n           (loop (rest paren_string)\n            \
    \      (cons (first paren_string) groups)\n                  (make-string 0)\n\
    \                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) groups)\n                    (make-string 0)\n               \
    \     (+ paren_count 1)))\n           (loop (rest paren_string)\n            \
    \      (cons (first paren_string) groups)\n                  (make-string 0)\n\
    \                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) groups)\n                    (make-string 0)\n               \
    \     (+ paren_count 1)))\n           (loop (rest paren_string)\n            \
    \      (cons (first paren_string) groups)\n                  (make-string 0)\n\
    \                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) groups)\n                    (make-string 0)\n               \
    \     (+ paren_count 1)))\n           (loop (rest paren_string)\n            \
    \      (cons (first paren_string) groups)\n                  (make-string 0)\n\
    \                  (+ paren_count 1)))\n          ((char= (first paren_string)\
    \ '", "  (let loop ((paren_string paren_string)\n             (paren_list '())\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (reverse paren_list)]\n      [(char=? (car paren_string) '(\n            \
    \   (loop (cdr paren_string)\n                      (cons (car paren_list) paren_list)\n\
    \                      (add1 paren_count)))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string) paren_list)\n             (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (if (empty?\
    \ paren_string)\n        result\n        (loop (rest paren_string)\n         \
    \     (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(equal? (first\
    \ paren_string) '( () ( () )\n                  (loop (rest paren_string)\n  \
    \                       (cons (first paren_string)\n                         \
    \      paren_list)\n                         paren_count (+ 1 paren_count)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   paren_list)\n             paren_count (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse result)\n       ]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons (first\
    \ paren_string) result))\n       ]\n      [(equal? (first paren_string) '(#\\\
    ))\n       (loop (rest paren_string) (cons (first paren_string) result))\n   \
    \    ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_list '())\n             (paren_string\
    \ (car paren_string))\n             (paren_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse paren_list)\n       ]\n      [(char=? (car paren_string)\
    \ '( () )')\n       (loop (cdr paren_string)\n             (cons (car paren_string)\n\
    \                   (reverse paren_list))\n             (car paren_string)\n \
    \            (+ paren_count 1))\n       ]\n      [else\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string)\n                   (reverse paren_list))\n\
    \             (car paren_string)\n             (+ paren_count 1))\n       ]\n\
    \      )\n     )\n   )\n  )\n", "  (let loop ((paren_string paren_string)\n  \
    \           (result '()))\n    (if (empty? paren_string)\n        result\n   \
    \     (loop (rest paren_string)\n              (cons (first paren_string)\n  \
    \                  (loop (rest paren_string)\n                          result))))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [else (loop (rest paren_string) (cons (first paren_string)\
    \ result))]))))\n", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_list]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char= (first\
    \ paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char= (first paren_string) '( () ))\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char= (first\
    \ paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char= (first paren_string) '( () ))\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char= (first\
    \ paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char= (first paren_string) '( () ))\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char= (", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse paren_list)]\n      [(char=? (first paren_string) '(\n      \
    \         (loop (rest paren_string)\n                       (cons (first paren_string)\
    \ paren_list)\n                       (add1 paren_count)))]\n      [(char=? (first\
    \ paren_string) '(\n               (loop (rest paren_string)\n               \
    \        (cons (first paren_string) paren_list)\n                       (add1\
    \ paren_count)))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) paren_list)\n             (add1 paren_count))]\n      [else\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (add1 paren_count)\n             paren_string)])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (groups '())\n             (group_count\
    \ 0))\n    (cond ((string-length paren_string) groups)\n          ((char= (char-code\
    \ paren_string) '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-", "  (let loop ((paren_string paren_string)\n      \
    \       (result '()))\n    (cond\n      [(empty? paren_string) result]\n     \
    \ [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [else (loop (rest paren_string) (cons (first\
    \ paren_string) result))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond ((empty? paren_string) result)\n      \
    \    ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) result)))\n          ((char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))\n          ((char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) result)))\n          ((char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) result)))\n  \
    \        ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons\
    \ (first paren_string) result)))\n          ((char= (first paren_string) '( ()\
    \ )) (loop (rest paren_string) (cons (first paren_string) result)))\n        \
    \  ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) result)))\n          ((char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))\n          ((char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) result)))\n          ((char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) result)))\n  \
    \        ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons\
    \ (first paren_string) result)))\n          ((char= (first paren_string) '( ()\
    \ )) (loop (rest paren_string) (cons (first paren_string) result)))\n        \
    \  ((char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) result)))\n          ((char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) result)))\n          ((char= ",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\
    \ ((string-length paren_string) result)\n          ((char= (char-code paren_string)\
    \ '( () )) (loop (substring paren_string 0 (string-length paren_string)) (cons\
    \ paren_string result)))\n          ((char= (char-code paren_string) '( () ))\
    \ (loop (substring paren_string 1 (string-length paren_string)) (cons paren_string\
    \ result)))\n          ((char= (char-code paren_string) '( () )) (loop (substring\
    \ paren_string 2 (string-length paren_string)) (cons paren_string result)))\n\
    \          ((char= (char-code paren_string) '( () )) (loop (substring paren_string\
    \ 3 (string-length paren_string)) (cons paren_string result)))\n          ((char=\
    \ (char-code paren_string) '( () )) (loop (substring paren_string 4 (string-length\
    \ paren_string)) (cons paren_string result)))\n          ((char= (char-code paren_string)\
    \ '( () )) (loop (substring paren_string 5 (string-length paren_string)) (cons\
    \ paren_string result)))\n          ((char= (char-code paren_string) '( () ))\
    \ (loop (substring paren_string 6 (string-length paren_string)) (cons paren_string\
    \ result)))\n          ((char= (char-code paren_string) '( () )) (loop (substring\
    \ paren_string 7 (string-length paren_string)) (cons paren_string result)))\n\
    \          ((char= (char-code paren_string) '( () )) (loop (substring paren_string\
    \ 8 (string-length paren_string)) (cons paren_string result)))\n          ((char=\
    \ (char-code paren_string) '( () )) (loop (substring paren_string 9 (string-length\
    \ paren_string)) (cons paren_string result)))\n          ((char= (char-code paren_string)\
    \ '( () )) (loop (substring paren_string 10 (string-length paren_string)) (cons\
    \ paren_string result)))\n          ((char= (char-code paren_string) '( () ))\
    \ (loop (substring paren_string 11 (string-length paren_string)) (cons paren_string\
    \ result)))\n          ((char= (char-code paren_string) '( () )) (loop (substring ",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_list]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (if (empty? paren_string)\n        result\n        (loop (rest paren_string)\n\
    \              (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [else (loop (rest paren_string) (cons (first\
    \ paren_string) result))])))\n", "  (let loop ((paren_string paren_string)\n \
    \            (paren_list '())\n             (paren_count 0))\n    (cond\n    \
    \  [(empty? paren_string)\n       (reverse paren_list)]\n      [(equal? (first\
    \ paren_string) '(#\\))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string)\n                   (loop (rest paren_string)\n       \
    \                  (cons (first paren_string)\n                              paren_list))\n\
    \             paren_count (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string)\n                              paren_list))\n         \
    \    paren_count (+ 1 paren_count))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string)\n                   (loop (rest paren_string)\n\
    \                         (cons (first paren_string)\n                       \
    \       paren_list))\n             paren_count (+ 1 paren_count))]\n      )))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_list]\n\
    \      [(char=? (first paren_string) '(#\\Space) empty?)\n       (loop (rest paren_string)\
    \ (cons paren_string paren_list))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string)\n                   (loop (rest paren_string)\n\
    \                         (cons (first paren_string)\n                       \
    \        (loop (rest paren_string)\n                                     (cons\
    \ (first paren_string)\n                                           (loop (rest\
    \ paren_string)\n                                                 (cons (first\
    \ paren_string)\n                                                      (loop (rest\
    \ paren_string)\n                                                            (cons\
    \ (first paren_string)\n                                                     \
    \           (loop (rest paren_string)\n                                      \
    \                              (cons (first paren_string)\n                  \
    \                                                      (loop (rest paren_string)\n\
    \                                                                            (cons\
    \ (first paren_string)\n                                                     \
    \                             (loop (rest paren_string)\n                    \
    \                                                                    (cons (first\
    \ paren_string)\n                                                            \
    \                                  (loop (rest paren_string)\n               \
    \                                                                            \
    \         (cons (first paren_string)\n                                       \
    \                                                                   (loop (rest\
    \ paren_string)\n                                                            \
    \                                                    (cons (first paren_string)\n\
    \                                                                            \
    \                                          (loop (rest paren_string)\n       \
    \                                                                            \
    \                                         (cons (first paren_string)\n       \
    \                                                                            \
    \                                             (loop (rest paren_string)\n    \
    \                                                                            \
    \                                                      (cons (first paren_string)\n\
    \                                                                            \
    \                                                              (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                (cons (first\
    \ paren_string)\n                                                            \
    \                                                                            \
    \          (loop (rest paren_string)\n                                       \
    \                                                                            \
    \                                     (cons (first paren_string)\n           \
    \                                                                            \
    \                                                                       (loop\
    \ (rest paren_string)\n                                                      \
    \                                                                            \
    \                                  (cons (first paren_string)\n              \
    \                                                                            \
    \                                                                            \
    \    (loop (rest paren_string)\n                                             \
    \                                                                            \
    \                                                       (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                              (loop (rest paren_string)\n                   \
    \                                                                            \
    \                                                                            \
    \                 (cons (first paren_string)\n                               \
    \                                                                            \
    \                                                                            \
    \         (loop (rest paren_string)\n                                        \
    \                                                                            \
    \                                                                            \
    \      (cons (first paren_string)\n                                          \
    \                                                                            \
    \                                                                            \
    \        (loop (rest paren_string)\n                                         \
    \                                                                            \
    \                                                                            \
    \           (cons (first paren_string)\n                                     \
    \                                                                            \
    \                                                                            \
    \                     (loop (rest paren_string)\n                            \
    \                                                                            \
    \                                                                            \
    \                                  (cons (first paren_string)\n              \
    \                                                                            \
    \                                                                            \
    \                                                    (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                                                        (cons\
    \ (first paren_string)\n                                                     \
    \                                                                            \
    \                                                                            \
    \                         (loop (rest paren_string", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse result)\n       ]\n      [(char=? (first paren_string) '(\n \
    \             (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ result)))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ result))]\n      [else\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) result))]\n      )))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \     (cons (first paren_string) paren_list)\n                     (add1 paren_count)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (add1 paren_count))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n     \
    \ [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n  \
    \           (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) ", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (", " \
    \ (let loop ((paren_string paren_string)\n             (groups ())\n         \
    \    (i 0))\n    (cond\n      [(empty? paren_string) groups]\n      [(char=? (car\
    \ paren_string) '( () )) (loop (cdr paren_string) (cons (car paren_string) groups)\
    \ (+ i 1))]\n      [(char=? (car paren_string) '( )) (loop (cdr paren_string)\
    \ (cons (car paren_string) groups) (+ i 1))]\n      [(char=? (car paren_string)\
    \ ')) (reverse groups)]\n      [else (loop (cdr paren_string) (cons (car paren_string)\
    \ groups) (+ i 1))])))\n", "  (let loop ((paren_string paren_string)\n       \
    \      (paren_list '())\n             (paren_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse paren_list)]\n      [(char=? (car paren_string)\
    \ '(#\\))])\n      (loop (cdr paren_string)\n            (cons (car paren_string)\n\
    \                   (reverse paren_list))\n            (+ paren_count 1))]\n \
    \     [(char=? (car paren_string) '(#\\))])\n      (loop (cdr paren_string)\n\
    \            (cons (car paren_string)\n                   (reverse paren_list))\n\
    \            (+ paren_count 1))]\n      [(char=? (car paren_string) '(#\\))])\n\
    \      (loop (cdr paren_string)\n            (cons (car paren_string)\n      \
    \             (reverse paren_list))\n            (+ paren_count 1))]\n      [(char=?\
    \ (car paren_string) '(#\\))])\n      (loop (cdr paren_string)\n            (cons\
    \ (car paren_string)\n                   (reverse paren_list))\n            (+\
    \ paren_count 1))]\n      [(char=? (car paren_string) '(#\\))])\n      (loop (cdr\
    \ paren_string)\n            (cons (car paren_string)\n                   (reverse\
    \ paren_list))\n            (+ paren_count 1))]\n      [(char=? (car paren_string)\
    \ '(#\\))])\n      (loop (cdr paren_string)\n            (cons (car paren_string)\n\
    \                   (reverse paren_list))\n            (+ paren_count 1))]\n \
    \     [(char=? (car paren_string) '(#\\))])\n      (loop (cdr paren_string)\n\
    \            (cons (car paren_string)\n                   (reverse paren_list))\n\
    \            (+ paren_count 1))]\n      [(char=? (car paren_string) '(#\\))])\n\
    \      (loop (cdr paren_string)\n            (cons (car paren_string)\n      \
    \             (reverse paren_list))\n            (+ paren_count 1))]\n      [(char=?\
    \ (car paren_string) '(#\\))])\n      (loop (cdr paren_string)\n            (cons\
    \ (car paren_string)\n                   (reverse paren_list))\n            (+\
    \ paren_count 1))]\n      [(char=? (car paren_string) '(#\\))])\n      (loop (",
  "  (let loop ((paren_string paren_string)\n             (groups ())\n          \
    \   (current_group ()))\n    (if (empty? paren_string)\n        (reverse groups)\n\
    \        (let ((char (car paren_string)))\n          (if (char= char #\\)\n  \
    \            (loop (cdr paren_string)\n                    (cons current_group\
    \ (reverse groups))\n                    current_group)\n              (loop (cdr\
    \ paren_string)\n                    (cons (cons char current_group) groups)\n\
    \                    current_group))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_string '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse (append paren_list paren_string))]\n\
    \      [(char=? (car paren_string) '(#\\Space)] paren_string\n      [(char=? (car\
    \ paren_string) '(#\\Newline)] paren_string\n      [(char=? (car paren_string)\
    \ '(#\\Tab)] paren_string\n      [(char=? (car paren_string) '(#\\Newline)\n \
    \       (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n    \
    \  [(char=? (car paren_string) '(#\\Space)\n        (loop (cdr paren_string) (cons\
    \ (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\Newline)\n\
    \        (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n   \
    \   [(char=? (car paren_string) '(#\\Tab)\n        (loop (cdr paren_string) (cons\
    \ (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\Newline)\n\
    \        (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n   \
    \   [(char=? (car paren_string) '(#\\Space)\n        (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    Tab)\n        (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n\
    \      [(char=? (car paren_string) '(#\\Newline)\n        (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    Space)\n        (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n\
    \      [(char=? (car paren_string) '(#\\Tab)\n        (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    Newline)\n        (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n\
    \      [(char=? (car paren", "  (let loop ((paren_string paren_string)\n     \
    \        (groups ())\n             (open_braces 0))\n    (if (string-empty? paren_string)\n\
    \        (reverse groups)\n        (let ((char (car paren_string)))\n        \
    \  (if (char= char #\\)\n              (loop (cdr paren_string)\n            \
    \        (cons (car paren_string) groups)\n                    (+ open_braces\
    \ 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_braces 1)))\n          (if (char= char #\\)\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) groups)\n                    (+\
    \ open_b", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (cond ((string-length paren_string) result)\n          ((char= (char-code\
    \ paren_string) '(#\\Space)) result)\n          ((char= (char-code paren_string)\
    \ '(#\\Newline)) result)\n          ((char= (char-code paren_string) '(#\\Tab))\
    \ result)\n          ((char= (char-code paren_string) '(#\\Newline)) result)\n\
    \          ((char= (char-code paren_string) '(#\\Space)) result)\n          ((char=\
    \ (char-code paren_string) '(#\\Space)) result)\n          ((char= (char-code\
    \ paren_string) '(#\\Space)) result)\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) result)\n          ((char= (char-code paren_string) '(#\\Space))\
    \ result)\n          ((char= (char-code paren_string) '(#\\Space)) result)\n \
    \         ((char= (char-code paren_string) '(#\\Space)) result)\n          ((char=\
    \ (char-code paren_string) '(#\\Space)) result)\n          ((char= (char-code\
    \ paren_string) '(#\\Space)) result)\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) result)\n          ((char= (char-code paren_string) '(#\\Space))\
    \ result)\n          ((char= (char-code paren_string) '(#\\Space)) result)\n \
    \         ((char= (char-code paren_string) '(#\\Space)) result)\n          ((char=\
    \ (char-code paren_string) '(#\\Space)) result)\n          ((char= (char-code\
    \ paren_string) '(#\\Space)) result)\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) result)\n          ((char= (char-code paren_string) '(#\\Space))\
    \ result)\n          ((char= (char-code paren_string) '(#\\Space)) result)\n \
    \         ((char= (char-code paren_string) '(#\\Space)) result)\n          ((char=\
    \ (char-code paren_string) '(#\\Space)) result)\n          ((char= (char-code\
    \ paren_string) '(#\\Space)) result)\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) result)\n          ((char= (char-code paren_string) '(#\\", " \
    \ (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) paren_list)\n\
    \                    (+ 1 paren_count)))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (if (empty?\
    \ paren_string)\n        result\n        (loop (rest paren_string)\n         \
    \     (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) paren_list]\n      [(char= (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (+\
    \ 1 paren_count))]\n      [(char= (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (+ 1 paren_count))]\n      [(char= (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list)\
    \ (+ 1 paren_count))]\n      [(char= (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) (+ 1 paren_count))]\n \
    \     [(char= (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (+\
    \ 1 paren_count))]\n      [(char= (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (+ 1 paren_count))]\n      [(char= (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list)\
    \ (+ 1 paren_count))]\n      [(char= (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) (+ 1 paren_count))]\n \
    \     [(char= (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (+\
    \ 1 paren_count))]\n      [(char= (", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_string '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse paren_list)]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) paren_list)\n                    (rest paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest paren_string))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (groups ())\n             (group_count 0))\n   \
    \ (if (string-empty? paren_string)\n        (reverse groups)\n        (let ((char\
    \ (char-ref paren_string 0)))\n          (if (char-whitespace? char)\n       \
    \       (loop (substring paren_string 1 char) (cons char groups) (+ group_count\
    \ 1))\n              (loop (substring paren_string 1 char) (cons (substring paren_string\
    \ 0 char) groups) (+ group_count 1)))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups ())\n             (current_group ())\n             (current_group_size\
    \ 0))\n    (if (empty? paren_string)\n        (reverse groups)\n        (let ((char\
    \ (car paren_string)))\n          (cond\n            ((char= char #\\()\n    \
    \         (loop (cdr paren_string) (cons current_group groups) (cons current_group_size\
    \ 1)))\n            ((char= char #\\))\n             (loop (cdr paren_string)\
    \ (cons current_group groups) (cons current_group_size -1)))\n            ((char=\
    \ char #\\))\n             (loop (cdr paren_string) (cons current_group groups)\
    \ (cons current_group_size 1)))\n            (else\n             (loop (cdr paren_string)\
    \ (cons current_group groups) (cons current_group_size 0)))))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_list '())\n             (paren_count\
    \ 0))\n    (if (empty? paren_string)\n        (reverse paren_list)\n        (let\
    \ ((char (car paren_string)))\n          (if (char= char #\\)\n              (loop\
    \ (cdr paren_string)\n                    (cons (car paren_list) paren_list)\n\
    \                    (+ paren_count 1))\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_list) paren_list)\n                    (+\
    \ paren_count 1)))))))\n", "  (let loop ((paren_string paren_string)\n       \
    \      (result '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ result)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) result)))]\n \
    \     [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ result))])))\n", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_string '()))\n    (if (empty? paren_string)\n    \
    \    (reverse paren_list)\n        (let ((char (car paren_string)))\n        \
    \  (if (char= char #\\)\n              (loop (cdr paren_string)\n            \
    \        (cons (car paren_string) paren_list)\n                    (cdr paren_string)))\n\
    \              (loop (cdr paren_string)\n                    (cons (car paren_string)\
    \ paren_list)\n                    paren_string))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string) paren_list]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (", "  (let loop ((paren_string\
    \ paren_string)\n             (groups '())\n             (group_count 0))\n  \
    \  (cond\n      [(empty? paren_string)\n       (reverse groups)]\n      [(equal?\
    \ (first paren_string) '(\n                  (loop (rest paren_string)\n     \
    \                    (cons (first paren_string) groups)\n                    \
    \     group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             group_count 1)]\n      [else\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string)\n             \
    \       (loop (rest paren_string)\n                          (cons (first paren_string)\
    \ groups)\n                          (add1 group_count)))\n             (add1\
    \ group_count)]))))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (groups ())\n             (open_braces 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(char=? (car paren_string) '( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", " \
    \ (let loop ((paren_string paren_string)\n             (result '()))\n    (if\
    \ (empty? paren_string)\n        result\n        (loop (rest paren_string)\n \
    \             (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(char=? (car\
    \ paren_string) '(#\\Space)] \n       ;; ignore spaces in parens\n       (loop\
    \ (cdr paren_string)\n             (cons (car paren_string) paren_list)\n    \
    \         (+ 1 paren_count))\n       ;; found a closing paren\n       (loop (cdr\
    \ paren_string)\n             (cons (car paren_string) paren_list)\n         \
    \    (+ 1 paren_count))\n       ;; found a nested paren\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string) paren_list)\n             (+ 1 paren_count))\n\
    \       ;; found a closing paren\n       (loop (cdr paren_string)\n          \
    \   (cons (car paren_string) paren_list)\n             (+ 1 paren_count))\n  \
    \     ;; found a nested paren\n       (loop (cdr paren_string)\n             (cons\
    \ (car paren_string) paren_list)\n             (+ 1 paren_count))\n       ;; found\
    \ a closing paren\n       (loop (cdr paren_string)\n             (cons (car paren_string)\
    \ paren_list)\n             (+ 1 paren_count))\n       ;; found a nested paren\n\
    \       (loop (cdr paren_string)\n             (cons (car paren_string) paren_list)\n\
    \             (+ 1 paren_count))\n       ;; found a closing paren\n       (loop\
    \ (cdr paren_string)\n             (cons (car paren_string) paren_list)\n    \
    \         (+ 1 paren_count))\n       ;; found a nested paren\n       (loop (cdr\
    \ paren_string)\n             (cons (car paren_string) paren_list)\n         \
    \    (+ 1 paren_count))\n       ;; found a closing paren\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string) paren_list)\n             (+ 1 paren_count))\n\
    \       ;; found a nested paren\n       (loop (cdr paren_string)\n           \
    \  (cons (car paren_string) paren_list)\n             (+ 1 paren_count))\n   \
    \    ;; found a closing paren\n       (loop (cdr paren_string)\n             (cons\
    \ (car paren_string) paren_list)\n             (+ 1 paren_count))\n       ;; found\
    \ a nested paren\n       (loop (cdr paren_string)\n             (cons (car paren_string)\
    \ paren_list)\n             (+ 1 ", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(char= (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \     (cons (first paren_string) paren_list)\n                     (add1 (first\
    \ paren_string)))\n              (loop (rest paren_string)\n                 \
    \    (cons (first paren_string) paren_list)\n                     (add1 (first\
    \ paren_string))))]\n      [else\n       (loop (rest paren_string)\n         \
    \    (cons (first paren_string) paren_list)\n             (add1 (first paren_string)))]\n\
    \      )))\n", "  (let loop ((paren_string paren_string)\n             (result\
    \ '()))\n    (cond\n      [(empty? paren_string) result]\n      [(char=? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [else (loop (rest paren_string) (cons (first\
    \ paren_string) result))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (first paren_string) '(#\\Space) empty?)\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [else (loop (rest paren_string)\
    \ (cons (first paren_string) (cons (rest paren_string) result))))]))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_list '())\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) paren_list)\n\
    \                    (+ 1 paren_count)))]\n      [(char=? (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) paren_list)\n                    (+ 1 paren_count)))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list)\n \
    \            (+ 1 paren_count))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse (list paren_list))]\n      [(char=? (car paren_string) '(#\\\
    Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count)))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n      (loop (cdr paren_string)\n            (cons (car paren_string)\
    \ paren_list)\n            (+ 1 paren_count))\n      [(char=? (car paren_string)\
    \ '(#\\Space)] \n", "  (let loop ((paren_string paren_string)\n             (result\
    \ '()))\n    (if (empty? paren_string)\n        result\n        (loop (rest paren_string)\n\
    \              (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ result)\n       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop\
    \ (rest paren_string) (cons (first paren_string) result))\n       ]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons (first\
    \ paren_string) result))\n       ]\n      [(equal? (first paren_string) '(#\\\
    ))\n       (loop (rest paren_string) (cons (first paren_string) result))\n   \
    \    ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (cons (first paren_string) result))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (", "  (let loop ((paren_string paren_string)\n            \
    \ (paren_list '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse paren_list)]\n      [(char=? (first paren_string) '(\n      \
    \        (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ paren_list)\n                    (+ 1 paren_count)))]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) paren_list)\n                    (+ 1 paren_count)))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (+ 1 paren_count))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\
    \ ((empty? paren_string)\n           (reverse result))\n          ((char=? (first\
    \ paren_string) '( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string paren_string)\n\
    \             (groups ())\n             (i 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(char=? (car paren_string) '()\n           \
    \   (loop (cdr paren_string)\n                    (cons (car paren_string)\n \
    \                         groups)\n                    (incf i)))]\n      [else\n\
    \       (loop (cdr paren_string)\n             (cons (car paren_string)\n    \
    \               groups)\n             (incf i))]\n      )))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse (list paren_list))]\n\
    \      [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons paren_count paren_list)\n                    \
    \     (add1 paren_count)))]\n      [(equal? (first paren_string) '(\n        \
    \          (loop (rest paren_string)\n                         (cons paren_count\
    \ paren_list)\n                         (add1 paren_count)))]\n      [(equal?\
    \ (first paren_string) '(\n                  (loop (rest paren_string)\n     \
    \                    (cons paren_count paren_list)\n                         (add1\
    \ paren_count)))]\n      [(equal? (first paren_string) '(\n                  (loop\
    \ (rest paren_string)\n                         (cons paren_count paren_list)\n\
    \                         (add1 paren_count)))]\n      [(equal? (first paren_string)\
    \ '(\n                  (loop (rest paren_string)\n                         (cons\
    \ paren_count paren_list)\n                         (add1 paren_count)))]\n  \
    \    [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons paren_count paren_list)\n                    \
    \     (add1 paren_count)))]\n      [(equal? (first paren_string) '(\n        \
    \          (loop (rest paren_string)\n                         (cons paren_count\
    \ paren_list)\n                         (add1 paren_count)))]\n      [(equal?\
    \ (first paren_string) '(\n                  (loop (rest paren_string)\n     \
    \                    (cons paren_count paren_list)\n                         (add1\
    \ paren_count)))]\n      [(equal? (first paren_string) '(\n                  (loop\
    \ (rest paren_string)\n                         (cons paren_count paren_list)\n\
    \                         (add1 paren_count)))]\n      [(equal? (first paren_string)\
    \ '(\n                  (loop (rest paren_string)\n                         (cons\
    \ paren_count paren_list)\n                         (add1 paren_count)))]\n  \
    \    [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons paren_count paren_list)\n                    \
    \     (add1 paren_count)))]\n      [(equal? (first paren_string) '(\n        \
    \          (loop (rest paren_string)\n                         (cons paren_count\
    \ paren_list)\n                         (add1 paren_count)))]\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_list '())\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n\
    \      [(char=? (car paren_string) '(\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) paren_list)\n                  \
    \  (+ 1 paren_count)))]\n      [(char=? (car paren_string) ')\n       (loop (cdr\
    \ paren_string)\n             (cons (car paren_string) paren_list)\n         \
    \    (- 1 paren_count)))]\n      [else\n       (loop (cdr paren_string)\n    \
    \         (cons (car paren_string) paren_list)\n             (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (if (string-empty?\
    \ paren_string)\n        result\n        (loop (substring paren_string 0 (string-length\
    \ paren_string))\n               (cons (substring paren_string 0 (string-length\
    \ paren_string)) result)))))\n", "  (let loop ((paren_string paren_string)\n \
    \            (paren_list '())\n             (paren_count 0))\n    (cond\n    \
    \  [(empty? paren_string)\n       (reverse paren_list)]\n      [(equal? (first\
    \ paren_string) '(#\\))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) paren_list)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string)\n           \
    \  (cons (first paren_string) paren_list)\n             (+ paren_count 1))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(", "  (let loop ((paren_string paren_string)\n\
    \             (groups ())\n             (group_count 0))\n    (if (string-empty?\
    \ paren_string)\n        (reverse groups)\n        (let ((char (car paren_string)))\n\
    \          (if (char= char #\\)\n              (loop (cdr paren_string)\n    \
    \                (cons (cons char groups) groups)\n                    (+ group_count\
    \ 1)))\n              (loop (cdr paren_string)\n                    (cons (cons\
    \ char groups) groups)\n                    group_count))))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (cond\n      [(empty?\
    \ paren_string) result]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \   [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_list '())\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n\
    \      [(char=? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) paren_list)\n                \
    \    (add1 (first paren_string)))\n              (loop (rest paren_string)\n \
    \                   (cons (first paren_string) paren_list)\n                 \
    \   (add1 (first paren_string))))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 (first\
    \ paren_string)))]))))\n", "  (let loop ((paren_string paren_string)\n       \
    \      (result '()))\n    (cond\n      [(empty? paren_string) result]\n      [(equal?\
    \ (first paren_string) '(#\\Space)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [else (loop (rest paren_string) (cons (first paren_string)\
    \ (loop (rest paren_string) (cons (first paren_string) result))))]))\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for the answer! I really appreciate it! I ran\
    \ the code and it works, but I still have a question: why does it work? I understand\
    \ how the code works, but I don't understand why it works. I understand that `loop`\
    \ will keep looping until it reaches the end of the string, but I don't understand\
    \ why it works. Why does it keep looping until it reaches the end of the string?\
    \ Why does it keep looping until it reaches the end of the string? Why does it\
    \ keep looping until it reaches the end of the string? Why does it keep looping\
    \ until it reaches the end of the string? Why does it keep looping until it reaches\
    \ the end of the string? Why does it keep looping until it reaches the end of\
    \ the string? Why does it keep looping until it reaches the end of the string?\
    \ Why does it keep looping until it reaches the end of the string? Why does it\
    \ keep looping until it reaches the end of the string? Why does it keep looping\
    \ until it reaches the end of the string? Why does it keep looping until it reaches\
    \ the end of the string? Why does it keep looping until it reaches the end of\
    \ the string? Why does it keep looping until it reaches the end of the string?\
    \ Why does it keep looping until it reaches the end of the string? Why does it\
    \ keep looping until it reaches the end of the string? Why does it keep looping\
    \ until it reaches the end of the string? Why does it keep looping until it reaches\
    \ the end of the string? Why does it keep looping until it reaches the end of\
    \ the string? Why does it keep looping until it reaches the end of the string?\
    \ Why does it keep looping until it reaches the end of the string? Why does it\
    \ keep looping until it reaches the end of the string? Why does it keep looping\
    \ until it reaches the end of the string? Why does it keep looping until it reaches\
    \ the end of the string? Why does it keep looping until it reaches the end of\
    \ the string? Why does it keep looping until it reaches the end of the string?\
    \ Why does it keep looping until it reaches the end of the string? Why does it\
    \ keep looping ", "  (let loop ((paren_string paren_string)\n             (result\
    \ '()))\n    (if (empty? paren_string)\n        result\n        (loop (rest paren_string)\n\
    \              (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ result)\n       ]\n      [(char=? (first paren_string) '(\n              (loop\
    \ (rest paren_string)\n                     (cons (first paren_string) result)))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) result))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ result))]\n      )))\n", "  (let loop ((paren_string paren_string)\n       \
    \      (paren_list '())\n             (open_brace '()))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse paren_list)]\n      [(char=? (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) paren_list)\n                    (cons (first paren_string) open_brace)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (cons (first paren_string) open_brace))])))\n", " \
    \ (let loop ((paren_string paren_string)\n             (groups '())\n        \
    \     (group_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string)\n            \
    \              groups)\n                    (+ group_count 1)))]\n      [else\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string)\n \
    \                  groups)\n             (+ group_count 1))]\n      [else\n  \
    \     (loop (rest paren_string)\n             (cons (first paren_string)\n   \
    \                groups)\n             (+ group_count 1))]\n      [else\n    \
    \   (loop (rest paren_string)\n             (cons (first paren_string)\n     \
    \              groups)\n             (+ group_count 1))]\n      [else\n      \
    \ (loop (rest paren_string)\n             (cons (first paren_string)\n       \
    \            groups)\n             (+ group_count 1))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string)\n             \
    \      groups)\n             (+ group_count 1))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string)\n                   groups)\n\
    \             (+ group_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string)\n                   groups)\n       \
    \      (+ group_count 1))]\n      [else\n       (loop (rest paren_string)\n  \
    \           (cons (first paren_string)\n                   groups)\n         \
    \    (+ group_count 1))]\n      [else\n       (loop (rest paren_string)\n    \
    \         (cons (first paren_string)\n                   groups)\n           \
    \  (+ group_count 1))]\n      [else\n       (loop (rest paren_string)\n      \
    \       (cons (first paren_string)\n                   groups)\n             (+\
    \ group_count 1))]\n      [else\n       (loop (rest paren_string)\n          \
    \   (cons (first paren_string)\n                   groups)\n             (+ group_count\
    \ 1))]\n      [else\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string)\n                   groups)\n             (+ group_count 1))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   groups)\n             (+ group_count 1))]\n      [else\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string)\n  \
    \                 groups)\n             (+ group_count 1))]\n      [else\n   \
    \    (loop (rest paren_string)\n             (cons (", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_string '()))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n     \
    \ [(char= (first paren_string) '(\n              (loop (rest paren_string)\n \
    \                    (cons (first paren_string) paren_list)\n                \
    \     (rest paren_string)))]\n      [(char= (first paren_string) '(\n        \
    \      (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ paren_list)\n                     (rest paren_string)))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) paren_list)\n       \
    \      (rest paren_string))]\n      [(char= (first paren_string) '(\n        \
    \      (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ paren_list)\n                     (rest paren_string)))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) paren_list)\n       \
    \      (rest paren_string))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) paren_list)\n             (rest paren_string))\n      \
    \ (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (rest paren_string))\n       (loop (rest paren_string)\n       \
    \      (cons (first paren_string) paren_list)\n             (rest paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (rest paren_string))\n       (loop (rest paren_string)\n       \
    \      (cons (first paren_string) paren_list)\n             (rest paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (rest paren_string))\n       (loop (rest paren_string)\n       \
    \      (cons (first paren_string) paren_list)\n             (rest paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (rest paren_string))\n       (loop (rest paren_string)\n       \
    \      (cons (first paren_string) paren_list)\n             (rest paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (rest paren_string))\n       (loop (rest paren_string)\n       \
    \      (cons (first paren_string) paren_list)\n             (rest paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (rest paren_string))\n       (loop (rest paren_string)\n       \
    \      (cons (first paren_string) paren_list)\n             (rest paren", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_list '())\n         \
    \    (paren_string '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) paren_list)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list))]))))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (paren_list '())\n             (paren_count 0))\n    (cond ((string-length\
    \ paren_string) paren_list)\n          ((char= (char-code paren_string) '(#\\\
    Space)) (loop (substring paren_string 0 (string-length paren_string)))\n     \
    \     ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char= (char-code paren_string) '(#\\Newline)) (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n          ((char= (char-code paren_string)\
    \ '(#\\Space)) (loop (substring paren_string 0 (string-length paren_string)))\n\
    \          ((char", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse (list paren_list))]\n      [(char=? (first paren_string) '(\n\
    \              (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ paren_list)\n                    (+ 1 paren_count)))]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) paren_list)\n                    (+ 1 paren_count)))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (+ 1 paren_count))]\n      [(char=? (first paren_string) '(\n  \
    \            (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ paren_list)\n                    (+ 1 paren_count)))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (+ 1 paren_count))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) paren_list)\n\
    \                    (+ 1 paren_count)))]\n      [(char=? (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) paren_list)\n                    (+ 1 paren_count)))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list)\n \
    \            (+ 1 paren_count))]\n      [(char=? (first paren_string) '(\n   \
    \           (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ paren_list)\n                    (+ 1 paren_count)))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (+ 1 paren_count))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups ()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse groups)]\n      [(equal? (first\
    \ paren_string) '( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char= (char (first paren_string)) #\\) (rest paren_string)]\n      [(char=\
    \ (char (first paren_string)) #\\) (rest paren_string)]\n      [(char= (char (first\
    \ paren_string)) #\\) (rest paren_string)]\n      [(char= (char (first paren_string))\
    \ #\\) (rest paren_string)]\n      [(char= (char (first paren_string)) #\\) (rest\
    \ paren_string)]\n      [(char= (char (first paren_string)) #\\) (rest paren_string)]\n\
    \      [(char= (char (first paren_string)) #\\) (rest paren_string)]\n      [(char=\
    \ (char (first paren_string)) #\\) (rest paren_string)]\n      [(char= (char (first\
    \ paren_string)) #\\) (rest paren_string)]\n      [(char= (char (first paren_string))\
    \ #\\) (rest paren_string)]\n      [(char= (char (first paren_string)) #\\) (rest\
    \ paren_string)]\n      [(char= (char (first paren_string)) #\\) (rest paren_string)]\n\
    \      [(char= (char (first paren_string)) #\\) (rest paren_string)]\n      [(char=\
    \ (char (first paren_string)) #\\) (rest paren_string)]\n      [(char= (char (first\
    \ paren_string)) #\\) (rest paren_string)]\n      [(char= (char (first paren_string))\
    \ #\\) (rest paren_string)]\n      [(char= (char (first paren_string)) #\\) (rest\
    \ paren_string)]\n      [(char= (char (first paren_string)) #\\) (rest paren_string)]\n\
    \      [(char= (char (first paren_string)) #\\) (rest paren_string)]\n      [(char=\
    \ (char (first paren_string)) #\\) (rest paren_string)]\n      [(char= (char (first\
    \ paren_string)) #\\) (rest paren_string)]\n      [(char= (char (first paren_string))\
    \ #\\) (rest paren_string)]\n      [(char= (char (first paren_string)) #\\) (rest\
    \ paren_string)]\n      [(char= (char (first paren_string)) #\\) (rest paren_string)]\n\
    \      [(char= (char (first paren_string)) #\\) (rest paren_string)]\n      [(char=\
    \ (char (first ", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '())\n             (group_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(char=? (first paren_string) '(#\\Space)] \n\
    \      (loop (rest paren_string)\n             (cons (first paren_string)\n  \
    \                groups)\n             (add1 group_count))\n      [(char=? (first\
    \ paren_string) '(#\\Space)] \n      (loop (rest paren_string)\n             (cons\
    \ (first paren_string)\n                  groups)\n             (add1 group_count))\n\
    \      [(char=? (first paren_string) '(#\\Space)] \n      (loop (rest paren_string)\n\
    \             (cons (first paren_string)\n                  groups)\n        \
    \     (add1 group_count))\n      [(char=? (first paren_string) '(#\\Space)] \n\
    \      (loop (rest paren_string)\n             (cons (first paren_string)\n  \
    \                groups)\n             (add1 group_count))\n      [(char=? (first\
    \ paren_string) '(#\\Space)] \n      (loop (rest paren_string)\n             (cons\
    \ (first paren_string)\n                  groups)\n             (add1 group_count))\n\
    \      [(char=? (first paren_string) '(#\\Space)] \n      (loop (rest paren_string)\n\
    \             (cons (first paren_string)\n                  groups)\n        \
    \     (add1 group_count))\n      [(char=? (first paren_string) '(#\\Space)] \n\
    \      (loop (rest paren_string)\n             (cons (first paren_string)\n  \
    \                groups)\n             (add1 group_count))\n      [(char=? (first\
    \ paren_string) '(#\\Space)] \n      (loop (rest paren_string)\n             (cons\
    \ (first paren_string)\n                  groups)\n             (add1 group_count))\n\
    \      [(char=? (first paren_string) '(#\\Space)] \n      (loop (rest paren_string)\n\
    \             (cons (first paren_string)\n                  groups)\n        \
    \     (add1 group_count))\n      [(char=? (first paren_string) '(#\\Space)] \n\
    \      (loop (rest paren_string)\n             (cons (first paren_string)\n  \
    \                groups)\n             (add1 group_count))\n      [(char=? (first\
    \ paren_string) '(#\\Space)] \n      (loop (rest paren_string)\n             (cons\
    \ (first paren_string)\n                  groups)\n             (add1 group_count))\n\
    \      ", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (if (string-empty? paren_string)\n        result\n        (loop (substring\
    \ paren_string 0 (string-length paren_string))\n              (cons (substring\
    \ paren_string 0 (string-length paren_string)) result)))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (groups ()))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(equal? (first paren_string) '(#\\Space)\n \
    \             (first groups))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\Space)\n              (first groups))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (cons (first groups) groups))]\n      [(equal? (first\
    \ paren_string) '(#\\Space)\n              (first groups))]\n      [else\n   \
    \    (loop (rest paren_string)\n             (cons (first groups) groups))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first groups))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first groups)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\Space)\n              (first\
    \ groups))]\n      [else\n       (loop (rest paren_string)\n             (cons\
    \ (first groups) groups))]\n      [(equal? (first paren_string) '(#\\Space)\n\
    \              (first groups))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first groups) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\Space)\n              (first groups))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (cons (first groups) groups))]\n      [(equal? (first\
    \ paren_string) '(#\\Space)\n              (first groups))]\n      [else\n   \
    \    (loop (rest paren_string)\n             (cons (first groups) groups))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first groups))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first groups)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\Space)\n              (first\
    \ groups))]\n      [else\n       (loop (rest paren_string)\n             (cons\
    \ (first groups) groups))]\n      [(equal? (first paren_string) '(#\\Space)\n\
    \              (first groups))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first groups) groups))]\n      [(equal? (first paren", " \
    \ (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (if (empty?\
    \ paren_string)\n        result\n        (loop (rest paren_string)\n         \
    \     (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_string '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse paren_list)]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) paren_list)\n                    (first paren_string)))]\n\
    \      [(char=? (first paren_string) ')\n       (loop (rest paren_string)\n  \
    \           (cons (first paren_string) paren_list)\n             (first paren_string))\n\
    \       (reverse paren_list)]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (first paren_string))\n\
    \       (reverse paren_list)])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(char=? (car\
    \ paren_string) '(#\\Space)] \n       ;; This case is for handling spaces between\
    \ parens\n       ;; This case is for handling spaces between parens\n       (loop\
    \ (cdr paren_string) (cons (car paren_string) paren_list) (inc paren_count))\n\
    \       ;; This case is for handling spaces between parens\n       ;; This case\
    \ is for handling spaces between parens\n       (loop (cdr paren_string) (cons\
    \ (car paren_string) paren_list) (inc paren_count))\n       ;; This case is for\
    \ handling spaces between parens\n       ;; This case is for handling spaces between\
    \ parens\n       (loop (cdr paren_string) (cons (car paren_string) paren_list)\
    \ (inc paren_count))\n       ;; This case is for handling spaces between parens\n\
    \       ;; This case is for handling spaces between parens\n       (loop (cdr\
    \ paren_string) (cons (car paren_string) paren_list) (inc paren_count))\n    \
    \   ;; This case is for handling spaces between parens\n       ;; This case is\
    \ for handling spaces between parens\n       (loop (cdr paren_string) (cons (car\
    \ paren_string) paren_list) (inc paren_count))\n       ;; This case is for handling\
    \ spaces between parens\n       ;; This case is for handling spaces between parens\n\
    \       (loop (cdr paren_string) (cons (car paren_string) paren_list) (inc paren_count))\n\
    \       ;; This case is for handling spaces between parens\n       ;; This case\
    \ is for handling spaces between parens\n       (loop (cdr paren_string) (cons\
    \ (car paren_string) paren_list) (inc paren_count))\n       ;; This case is for\
    \ handling spaces between parens\n       ;; This case is for handling spaces between\
    \ parens\n       (loop (cdr paren_string) (cons (car paren_string) paren_list)\
    \ (inc paren_count))\n       ;; This case is for handling spaces between parens\n\
    \       ;; This case is for handling spaces between parens\n       (loop (cdr\
    \ paren_string) (cons (car paren_string) paren_list) (inc paren_count))\n    \
    \   ;", "  (let loop ((paren_string paren_string)\n             (paren_list '())\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_list]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (inc paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (inc paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (inc paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (inc paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (inc paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (inc paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (inc paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (inc paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (inc paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (inc paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (inc paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (inc paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (inc paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (inc paren_count))]\n\
    \      [(char=? (first paren_string) '('", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (if (empty? paren_string)\n        result\n \
    \       (loop (rest paren_string)\n              (cons (first paren_string)\n\
    \                    (loop (rest paren_string)\n                          result))))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(equal? (first paren_string) '(\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) paren_list)\n\
    \                         paren_count))\n       (loop (rest paren_string)\n  \
    \           (cons (first paren_string) paren_list)\n             paren_count)]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (+ 1 paren_count))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (groups ())\n             (current_group ())\n \
    \            (current_group_is_closed false))\n    (if (empty? paren_string)\n\
    \        (reverse groups)\n        (let ((char (car paren_string)))\n        \
    \  (if (char= char #\\)\n              (loop (cdr paren_string)\n            \
    \        (cons (car current_group) groups)\n                    (cdr current_group)\n\
    \                    (not (equal? (car current_group) char)))\n              (loop\
    \ (cdr paren_string)\n                    (cons (car current_group) groups)\n\
    \                    (cdr current_group)\n                    (equal? (car current_group)\
    \ char)))))))\n", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (if (empty? paren_string)\n       \
    \ (reverse paren_list)\n        (let ((char (first paren_string)))\n         \
    \ (if (char= char #\\)\n              (loop (rest paren_string)\n            \
    \        (cons char (reverse paren_list))\n                    (+ paren_count\
    \ 1))\n              (loop (rest paren_string)\n                    (cons char\
    \ (reverse paren_list))\n                    (+ paren_count 0))))))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (result '()))\n    (cond\n \
    \     [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n  \
    \    [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons paren_string\
    \ paren_list))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons paren_list paren_list))]\n      [(char=? (first paren_string) '(#\\))\
    \ (loop (rest paren_string) (cons paren_list paren_list))]\n      [(char=? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons paren_list paren_list))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons paren_list\
    \ paren_list))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons paren_list paren_list))]\n      [(char=? (first paren_string) '(#\\))\
    \ (loop (rest paren_string) (cons paren_list paren_list))]\n      [(char=? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons paren_list paren_list))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons paren_list\
    \ paren_list))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons paren_list paren_list))]\n      [(char=? (first paren_string) '(#\\))\
    \ (loop (rest paren_string) (cons paren_list paren_list))]\n      [(char=? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons paren_list paren_list))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons paren_list\
    \ paren_list))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons paren_list paren_list))]\n      [(char=? (first paren_string) '(#\\))\
    \ (loop (rest paren_string) (cons paren_list paren_list))]\n      [(char=? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons paren", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (if (empty? paren_string)\n        (reverse paren_list)\n        (let ((char\
    \ (car paren_string)))\n          (if (char=? char #\\)\n              (loop (cdr\
    \ paren_string)\n                    (cons (car paren_list) paren_list)\n    \
    \                (+ paren_count 1))\n              (loop (cdr paren_string)\n\
    \                    (cons (car paren_string) paren_list)\n                  \
    \  (+ paren_count 1))))))))\n", "  (let loop ((paren_string paren_string)\n  \
    \           (paren_list '())\n             (paren_count 0))\n    (cond\n     \
    \ [(empty? paren_string) paren_list]\n      [(char=? (car paren_string) '(') (loop\
    \ (cdr paren_string) (cons (car paren_string) paren_list) (inc paren_count))]\n\
    \      [(char=? (car paren_string) ')') (loop (cdr paren_string) (cons (car paren_list)\
    \ paren_list) (inc paren_count))]\n      [else (loop (cdr paren_string) (cons\
    \ (car paren_string) paren_list) (inc paren_count))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n     \
    \ [(char=? (first paren_string) '(\n               (loop (rest paren_string)\n\
    \                       (cons (first paren_string) paren_list)\n             \
    \          (add1 paren_count)))]\n      [(char=? (first paren_string) '(\n   \
    \            (loop (rest paren_string)\n                       (cons (first paren_string)\
    \ paren_list)\n                       (add1 paren_count)))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) paren_list)\n       \
    \      (add1 paren_count))]\n      [else\n       (loop (rest paren_string)\n \
    \            (cons (first paren_string) paren_list)\n             (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '())\n         \
    \    (group (make-string 0 0))\n             (group_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse groups)]\n      [(equal? (first paren_string)\
    \ '(\n                  (loop (rest paren_string)\n                         (cons\
    \ group groups)\n                         (make-string 0 0))\n               \
    \   (loop (rest paren_string)\n                         (cons group groups)\n\
    \                         (make-string 0 0))\n                  (loop (rest paren_string)\n\
    \                         (cons group groups)\n                         (make-string\
    \ 0 0)))]\n      [else\n       (loop (rest paren_string)\n             (cons group\
    \ groups)\n             (make-string 0 0))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons group groups)\n             (make-string 0 0))]\n    )\n \
    \ )\n)\n", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_string '()))\n    (cond\n      [(empty? paren_string)\
    \ paren_list]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) ", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(equal? (first paren_string) '(#\\Space)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [else (loop (rest paren_string)\
    \ (cons (first paren_string) (loop (rest paren_string) (cons (first paren_string)\
    \ result))))]))))\n", "  (let loop ((paren_string paren_string)\n            \
    \ (paren_list '())\n             (paren_string (car paren_string))\n         \
    \    (i 0))\n    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n\
    \      [(char=? (car paren_string) '(#\\Space)] \n      [(char=? (car paren_string)\
    \ '(#\\Newline)] \n      [(char=? (car paren_string) '(#\\Tab)] \n      [(char=?\
    \ (car paren_string) '(#\\Newline)\n       (loop (cdr paren_string) (cons (car\
    \ paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\Space)\n\
    \       (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n    \
    \  [(char=? (car paren_string) '(#\\Newline)\n       (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    Tab)\n       (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n\
    \      [(char=? (car paren_string) '(#\\Newline)\n       (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    Space)\n       (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n\
    \      [(char=? (car paren_string) '(#\\Tab)\n       (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    Newline)\n       (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n\
    \      [(char=? (car paren_string) '(#\\Space)\n       (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    Newline)\n       (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n\
    \      [(char=? (car paren_string) '(#\\Space)\n       (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (car paren_string) '( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse result)\n       ]\n      [(equal? (first paren_string) '(\n \
    \                 (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) result)))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) result))\n       ]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) result))\n       ]\n      )\n     )\n\
    \   )\n  )\n", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_string (car paren_string))\n             (paren_count\
    \ 0))\n    (cond ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((char=? paren_string #\\)\n           (set! paren_count (+ paren_count\
    \ 1))\n           (set! paren_string (substring paren_string 0 (+ 1 paren_count))))\n\
    \          ((", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (open_braces '())\n             (close_braces '()))\n   \
    \ (cond\n      [(empty? paren_string)\n       (reverse (append paren_list open_braces\
    \ close_braces))]\n      [(char=? (first paren_string) '(#\\Space)] \n      [(char=?\
    \ (first paren_string) '(#\\Newline)] \n      [else\n       (loop (rest paren_string)\n\
    \             (append paren_list (list paren_string))\n             (append open_braces\
    \ (list paren_string))\n             (append close_braces (list paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (append paren_list\
    \ (list paren_string))\n             (append open_braces (list paren_string))\n\
    \             (append close_braces (list paren_string)))]\n      [else\n     \
    \  (loop (rest paren_string)\n             (append paren_list (list paren_string))\n\
    \             (append open_braces (list paren_string))\n             (append close_braces\
    \ (list paren_string)))]\n      [else\n       (loop (rest paren_string)\n    \
    \         (append paren_list (list paren_string))\n             (append open_braces\
    \ (list paren_string))\n             (append close_braces (list paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (append paren_list\
    \ (list paren_string))\n             (append open_braces (list paren_string))\n\
    \             (append close_braces (list paren_string)))]\n      [else\n     \
    \  (loop (rest paren_string)\n             (append paren_list (list paren_string))\n\
    \             (append open_braces (list paren_string))\n             (append close_braces\
    \ (list paren_string)))]\n      [else\n       (loop (rest paren_string)\n    \
    \         (append paren_list (list paren_string))\n             (append open_braces\
    \ (list paren_string))\n             (append close_braces (list paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (append paren_list\
    \ (list paren_string))\n             (append open_braces (list paren_string))\n\
    \             (append close_braces (list paren_string)))]\n      [else\n     \
    \  (loop (rest paren_string)\n             (append paren_list (list paren_string))\n\
    \             (append open_braces (list paren_string))\n             (append close_braces\
    \ (list paren_string)))]\n      [else\n       (loop (rest paren_string)\n    \
    \         (append paren_list (list paren_string))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (if (empty? paren_string)\n \
    \       result\n        (loop (rest paren_string)\n              (cons (first\
    \ paren_string)\n                    (loop (rest paren_string)\n             \
    \             result))))))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (paren_list '())\n             (paren_count 0))\n    (cond\n      [(empty?\
    \ paren_string) paren_list]\n      [(char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) paren_count)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) paren_count)]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) paren_count)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) paren_count)]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) paren_count)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) paren_count)]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) paren_count)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) paren_count)]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) paren_count)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) paren_count)]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) paren_count)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) paren_count)]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list", "  (let loop ((paren_string paren_string)\n     \
    \        (paren_list '())\n             (paren_string '()))\n    (cond\n     \
    \ [(empty? paren_string)\n       (reverse paren_list)]\n      [(equal? (first\
    \ paren_string) '(#\\Space)\n              (first paren_string))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n              (first ", "  (let\
    \ loop ((paren_string paren_string)\n             (result '()))\n    (cond ((string-empty?\
    \ paren_string)\n           (reverse result))\n          ((char= (first paren_string)\
    \ '(\n                     (loop (rest paren_string)\n                       \
    \      (cons (first paren_string) result))))\n          ((char= (first paren_string)\
    \ '(\n                     (loop (rest paren_string)\n                       \
    \      (loop (rest paren_string)\n                                  (cons (first\
    \ paren_string) result))))\n          ((char= (first paren_string) '(\n      \
    \               (loop (rest paren_string)\n                             (loop\
    \ (rest paren_string)\n                                  (loop (rest paren_string)\n\
    \                                        (cons (first paren_string) result))))\n\
    \          ((char= (first paren_string) '(\n                     (loop (rest paren_string)\n\
    \                             (loop (rest paren_string)\n                    \
    \              (loop (rest paren_string)\n                                   \
    \     (loop (rest paren_string)\n                                            \
    \  (cons (first paren_string) result))))))\n          ((char= (first paren_string)\
    \ '(\n                     (loop (rest paren_string)\n                       \
    \      (loop (rest paren_string)\n                                  (loop (rest\
    \ paren_string)\n                                        (loop (rest paren_string)\n\
    \                                              (loop (rest paren_string)\n   \
    \                                                 (cons (first paren_string) result))))))\n\
    \          ((char= (first paren_string) '(\n                     (loop (rest paren_string)\n\
    \                             (loop (rest paren_string)\n                    \
    \              (loop (rest paren_string)\n                                   \
    \     (loop (rest paren_string)\n                                            \
    \  (loop (rest paren_string)\n                                               \
    \     (loop (rest paren_string)\n                                            \
    \              (cons (first paren_string) result)))))))))\n    (loop (rest paren_string)\n\
    \          (loop (rest paren_string)\n                (loop (rest paren_string)\n\
    \                      (loop (rest paren_string)\n                           \
    \ (loop (rest paren_string)\n                                  (loop (rest paren_string)\n\
    \                                        (loop (rest paren_string)\n         \
    \                                     (loop (rest paren_string)\n            \
    \                                        (cons (first paren_string) result))))))))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_list]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list) (inc paren_count))]\n      [(char=? (car paren_string) ')') (loop\
    \ (cdr paren_string) (cons (car paren_list) paren_list) (inc paren_count))]\n\
    \      [else (loop (cdr paren_string) (cons (car paren_string) paren_list) (inc\
    \ paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_list '())\n             (open_braces '()))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse paren_list)]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (rest open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\))\n       (loop (", "  (let loop ((paren_string paren_string)\n      \
    \       (paren_list '())\n             (paren_count 0))\n    (if (string-empty?\
    \ paren_string)\n        (reverse paren_list)\n        (let ((char (car paren_string)))\n\
    \          (if (char= char #\\)\n              (loop (cdr paren_string)\n    \
    \                (cons (car paren_list) paren_list)\n                    (+ paren_count\
    \ 1)))\n          (loop (cdr paren_string)\n                (cons (car paren_string)\
    \ paren_list)\n                (+ paren_count 1))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n     \
    \ [(char=? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) paren_list)\n                \
    \    (+ 1 paren_count)))]\n      [else\n       (loop (rest paren_string)\n   \
    \          (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (if (empty?\
    \ paren_string)\n        result\n        (loop (rest paren_string)\n         \
    \     (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '())\n             (group_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse groups)]\n      [(char=? (car paren_string) '(\n\
    \              (loop (cdr paren_string)\n                    (cons (car paren_string)\
    \ groups)\n                    (+ group_count 1)))]\n      [else\n       (loop\
    \ (cdr paren_string)\n             (cons (car paren_string) groups)\n        \
    \     (+ group_count 1))]\n      )))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond ((null? paren_string)\n           (reverse\
    \ result))\n          ((char=? (car paren_string) '( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [else\
    \ (loop (rest paren_string) (cons (first paren_string) result))]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (result '()))\n    (cond\n \
    \     [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    Space) empty?)\n       (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [else (loop (rest paren_string) (cons (first paren_string) result))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) paren_list)\n       \
    \      (+ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n  \
    \           (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      )))\n", "  (let loop ((paren_string paren_string)\n            \
    \ (groups ())\n             (group_count 0))\n    (if (string-empty? paren_string)\n\
    \        (reverse groups)\n        (let ((char (car paren_string)))\n        \
    \  (if (char= char #\\)\n              (loop (cdr paren_string)\n            \
    \        (cons (car paren_string) groups)\n                    (+ group_count\
    \ 1)))\n              (loop (cdr paren_string)\n                    (cons (car\
    \ paren_string) groups)\n                    (+ group_count 1))))))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_list '())\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) paren_list)\n\
    \                    (+ 1 paren_count)))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (open_braces '()))\n    (cond ((string-length paren_string) paren_list)\n\
    \          ((char= (char paren_string 0) #\\Space) paren_list)\n          ((char=\
    \ (char paren_string 0) #\\Newline) paren_list)\n          ((char= (char paren_string\
    \ 0) #\\Tab) paren_list)\n          ((char= (char paren_string 0) #\\Newline)\
    \ paren_list)\n          ((char= (char paren_string 0) #\\Space) paren_list)\n\
    \          ((char= (char paren_string 0) #\\Brace) (loop (substring paren_string\
    \ 1 -1)\n                                                   (append paren_list\
    \ open_braces)\n                                                   (append open_braces\
    \ '())))\n          ((char= (char paren_string 0) #\\Bracket) (loop (substring\
    \ paren_string 1 -1)\n                                                   (append\
    \ paren_list open_braces)\n                                                  \
    \ (append open_braces '())))\n          ((char= (char paren_string 0) #\\Paren)\
    \ (loop (substring paren_string 1 -1)\n                                      \
    \             (append paren_list open_braces)\n                              \
    \                     (append open_braces '())))\n          ((char= (char paren_string\
    \ 0) #\\Newline) paren_list)\n          ((char= (char paren_string 0) #\\Space)\
    \ paren_list)\n          ((char= (char paren_string 0) #\\Newline) paren_list)\n\
    \          ((char= (char paren_string 0) #\\Space) paren_list)\n          ((char=\
    \ (char paren_string 0) #\\Space) paren_list)\n          ((char= (char paren_string\
    \ 0) #\\Space) paren_list)\n          ((char= (char paren_string 0) #\\Space)\
    \ paren_list)\n          ((char= (char paren_string 0) #\\Space) paren_list)\n\
    \          ((char= (char paren_string 0) #\\Space) paren_list)\n          ((char=\
    \ (char paren_string 0) #\\Space) paren_list)\n          ((char= (char paren_string\
    \ 0) #\\Space) paren_list)\n          ((char= (char paren_string 0) #\\Space)\
    \ paren_list)\n          ((char= (char paren_string 0) #\\Space) paren_list)\n\
    \          ((char= (char paren_string 0) #\\Space) paren_list)\n          ((char=\
    \ (char paren_string 0) ", "  (let loop ((paren_string paren_string)\n       \
    \      (result '()))\n    (cond\n      [(empty? paren_string) result]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [else (loop (rest paren_string)\
    \ (cons (first paren_string) result))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups ())\n             (i 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(char=? (car paren_string) '(\n            \
    \  (loop (cdr paren_string) (cons (car paren_string) groups) (+ i 1)))]\n    \
    \  [else\n       (loop (cdr paren_string) (cons (car paren_string) groups) (+\
    \ i 1))]\n      )))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (result '()))\n    (cond\n      [(empty? paren_string) result]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(", "  (let loop ((paren_string paren_string)\n          \
    \   (groups '())\n             (group_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(equal? (first paren_string) '(#\\))\n     \
    \  (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest ", "  (let loop ((paren_string\
    \ paren_string)\n             (groups ())\n             (i 0))\n    (cond\n  \
    \    [(empty? paren_string)\n       (reverse groups)]\n      [(char=? (car paren_string)\
    \ '()\n              (loop (cdr paren_string)\n                    (cons (car\
    \ paren_string)\n                          groups)\n                    (inc i)))]\n\
    \      [else\n       (loop (cdr paren_string)\n             (cons (car paren_string)\n\
    \                   groups)\n             (inc i))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n     \
    \ [(char=? (car paren_string) '(\n               (loop (cdr paren_string)\n  \
    \                    (cons (car paren_list) paren_list)\n                    \
    \  (add1 (cdr paren_count))))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string) paren_list)\n             (add1 (cdr paren_count)))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_list]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse result)\n       ]\n\
    \      [(equal? (first paren_string) '(#\\Space))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [else\n       (loop (rest\
    \ paren_string) (cons (first paren_string) (cons (rest paren_string) result))))]))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [else (loop (rest paren_string) (cons (first paren_string)\
    \ result))])))\n", "  (let loop ((paren_string paren_string)\n             (groups\
    \ ())\n             (open_braces 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(char=? (car paren_string) '(\n            \
    \   (loop (cdr paren_string)\n                      (cons (car paren_string) groups)\n\
    \                      (add1 open_braces)))]\n      [(char=? (car paren_string)\
    \ ')\n       (loop (cdr paren_string)\n             (cons (car paren_string) groups)\n\
    \             (add1 open_braces))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string) groups)\n             (add1 open_braces))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) paren_list)\n\
    \                    (+ 1 paren_count)))]\n      [(char=? (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) paren_list)\n                    (+ 1 paren_count)))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list)\n \
    \            (+ 1 paren_count))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count)\n\
    \             (cons (first paren_string) paren_list))]\n      )))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (result '()))\n    (cond\n \
    \     [(empty? paren_string)\n       (reverse result)\n       ]\n      [(char=?\
    \ (car paren_string) '(\n               (loop (cdr paren_string)\n           \
    \           (cons (car paren_string) result)))\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string) result))]\n      [(char=? (car paren_string)\
    \ '(\n               (loop (cdr paren_string)\n                      result))]\n\
    \      [(char=? (car paren_string) '(\n               (loop (cdr paren_string)\n\
    \                      (cons (car paren_string) result)))]\n      [(char=? (car\
    \ paren_string) '(\n               (loop (cdr paren_string)\n                \
    \      result))]\n      [(char=? (car paren_string) '(\n               (loop (cdr\
    \ paren_string)\n                      (cons (car paren_string) result)))]\n \
    \     [(char=? (car paren_string) '(\n               (loop (cdr paren_string)\n\
    \                      result))]\n      [(char=? (car paren_string) '(\n     \
    \          (loop (cdr paren_string)\n                      (cons (car paren_string)\
    \ result)))]\n      [(char=? (car paren_string) '(\n               (loop (cdr\
    \ paren_string)\n                      result))]\n      [(char=? (car paren_string)\
    \ '(\n               (loop (cdr paren_string)\n                      (cons (car\
    \ paren_string) result)))]\n      [(char=? (car paren_string) '(\n           \
    \    (loop (cdr paren_string)\n                      result))]\n      [(char=?\
    \ (car paren_string) '(\n               (loop (cdr paren_string)\n           \
    \           (cons (car paren_string) result)))]\n      [(char=? (car paren_string)\
    \ '(\n               (loop (cdr paren_string)\n                      result))]\n\
    \      [(char=? (car paren_string) '(\n               (loop (cdr paren_string)\n\
    \                      (cons (car paren_string) result)))]\n      [(char=? (car\
    \ paren_string) '(\n               (loop (cdr paren_string)\n                \
    \      result))]\n      [(char=? (car paren_string) '(\n               (loop (",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (if (empty?\
    \ paren_string)\n        result\n        (loop (rest paren_string)\n         \
    \     (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse (list paren_list))]\n      [(char=?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string)\n           \
    \  (cons (first paren_string)\n                   (loop (rest paren_string)\n\
    \                         (cons (first paren_string)\n                       \
    \        (loop (rest paren_string)\n                                     (cons\
    \ (first paren_string)\n                                          (loop (rest\
    \ paren_string)\n                                                (cons (first\
    \ paren_string)\n                                                      (loop (rest\
    \ paren_string)\n                                                            (cons\
    \ (first paren_string)\n                                                     \
    \           (loop (rest paren_string)\n                                      \
    \                              (cons (first paren_string)\n                  \
    \                                                      (loop (rest paren_string)\n\
    \                                                                            (cons\
    \ (first paren_string)\n                                                     \
    \                           (loop (rest paren_string)\n                      \
    \                                                                (cons (first\
    \ paren_string)\n                                                            \
    \                                (loop (rest paren_string)\n                 \
    \                                                                            \
    \     (cons (first paren_string)\n                                           \
    \                                                             (loop (rest paren_string)\n\
    \                                                                            \
    \                                  (cons (first paren_string)\n              \
    \                                                                            \
    \                          (loop (rest paren_string)\n                       \
    \                                                                            \
    \                       (cons (first paren_string)\n                         \
    \                                                                            \
    \                         (loop (rest paren_string)\n                        \
    \                                                                            \
    \                                (cons (first paren_string)\n                \
    \                                                                            \
    \                                            (loop (rest paren_string)\n     \
    \                                                                            \
    \                                                           (cons (first paren_string)\n\
    \                                                                            \
    \                                                                    (loop (rest\
    \ paren_string)\n                                                            \
    \                                                                            \
    \              (cons (first paren_string)\n                                  \
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                                            \
    \       (cons (first paren_string)\n                                         \
    \                                                                            \
    \                                                   (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                      (cons (first paren_string)\n                          \
    \                                                                            \
    \                                                                            \
    \  (loop (rest paren_string)\n                                               \
    \                                                                            \
    \                                                               (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                      (loop (rest paren_string)\n           \
    \                                                                            \
    \                                                                            \
    \                                 (cons (first paren_string)\n               \
    \                                                                            \
    \                                                                            \
    \                                 (loop (rest paren_string)\n                \
    \                                                                            \
    \                                                                            \
    \                                    (cons (first paren_string)\n            \
    \                                                                            \
    \                                                                            \
    \                                            (loop (rest paren_string)\n     \
    \                                                                            \
    \                                                                            \
    \                                                         (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                                                    (loop (rest\
    \ paren_string)\n                                                            \
    \                                                                            \
    \                                                                            \
    \              (cons (first paren_string)\n                                  \
    \                                                                            \
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       (cons (first paren_string)\n                                         \
    \                                                                            \
    \           ", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_string (car paren_string))\n             (paren_count\
    \ 0))\n    (cond ((char= paren_string '())\n           (reverse paren_list))\n\
    \          ((char= paren_string '(())\n           (loop (cdr paren_string)\n \
    \                (cons (car paren_string) paren_list)\n                 (car paren_string)\n\
    \                 (add1 paren_count)))\n          ((char= paren_string '(()())\n\
    \           (loop (cdr paren_string)\n                 (cons (car paren_string)\
    \ paren_list)\n                 (car paren_string)\n                 (add1 paren_count)))\n\
    \          (else\n           (loop (cdr paren_string)\n                 (cons\
    \ (car paren_string) paren_list)\n                 (car paren_string)\n      \
    \           (add1 paren_count))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups ())\n             (group_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse groups)]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups)\n             (add1 group_count))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond [(empty? paren_string)\n\
    \           (reverse result)]\n          [(char=? (car paren_string) '(#\\))\n\
    \           (loop (cdr paren_string)\n                 (cons (car paren_string)\
    \ result))]\n          [else\n           (loop (cdr paren_string)\n          \
    \       (cons (car paren_string) result))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (groups ())\n             (current_group ())\n \
    \            (current_group_length 0))\n    (if (empty? paren_string)\n      \
    \  (reverse groups)\n        (let ((char (car paren_string)))\n          (if (char=\
    \ char #\\)\n              (loop (cdr paren_string)\n                    (cons\
    \ (car current_group) groups)\n                    (cons (car current_group) (cons\
    \ char current_group_length))\n                    (+ 1 (cdr current_group_length)))\n\
    \              (loop (cdr paren_string)\n                    (cons (car current_group)\
    \ groups)\n                    (cons (car current_group) (cons char current_group_length))\n\
    \                    (+ 1 (cdr current_group_length)))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (groups ())\n             (current_group ()))\n\
    \    (if (empty? paren_string)\n        (reverse groups)\n        (let ((char\
    \ (car paren_string)))\n          (if (char= char #\\)\n              (loop (cdr\
    \ paren_string)\n                    (cons (car current_group) groups)\n     \
    \               (cons char current_group))\n              (loop (cdr paren_string)\n\
    \                    (cons (car current_group) groups)\n                    (cons\
    \ char current_group)))))))\n", "  (let loop ((paren_string paren_string)\n  \
    \           (result '()))\n    (cond\n      [(empty? paren_string) result]\n \
    \     [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [else (loop (rest\
    \ paren_string) (cons (first paren_string) result))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (if (empty? paren_string)\n \
    \       result\n        (loop (rest paren_string)\n              (cons (first\
    \ paren_string)\n                    (loop (rest paren_string)\n             \
    \             result))))))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (paren_list '())\n             (paren_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse (list paren_list))]\n      [(equal? (first paren_string)\
    \ '(())) ; Found an open paren\n       (loop (rest paren_string)\n           \
    \  (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]\n\
    \      [else ; Found a closing paren\n       (loop (rest paren_string)\n     \
    \        (cons (first paren_string) paren_list)\n             (+ 1 paren_count))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (+ 1 paren_count))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (if (empty? paren_string)\n        (reverse groups)\n\
    \        (let ((char (car paren_string)))\n          (if (char= char #\\)\n  \
    \            (loop (cdr paren_string)\n                    (cons (car paren_string)\
    \ groups))\n              (loop (cdr paren_string)\n                    (cons\
    \ (car paren_string) (cons char groups))))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string) paren_list]\n      [(char= (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (inc\
    \ paren_count))]\n      [(char= (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (inc paren_count))]\n      [else (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (inc paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) paren_list)\n\
    \                    (+ 1 paren_count)))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                     (cons (first paren_string) paren_list)\n\
    \                     (add1 (first paren_string))))]\n      [(char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                     (cons (first\
    \ paren_string) paren_list)\n                     (add1 (first paren_string))))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (add1 (first paren_string)))]\n      [(char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                     (cons (first\
    \ paren_string) paren_list)\n                     (add1 (first paren_string))))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (add1 (first paren_string)))\n       (char= (first paren_string)\
    \ ')\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (add1 (first paren_string)))]\n      [(char= (first\
    \ paren_string) ')\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) paren_list)\n             (add1 (first paren_string)))\n     \
    \  (char= (first paren_string) '(\n              (loop (rest paren_string)\n \
    \                    (cons (first paren_string) paren_list)\n                \
    \     (add1 (first paren_string))))]\n      [(char= (first paren_string) '(\n\
    \              (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ paren_list)\n                     (add1 (first paren_string))))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list)\n \
    \            (add1 (first paren_string)))\n       (char= (first paren_string)\
    \ ')\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (add1 (first paren_string)))]\n      [(char= (first\
    \ paren_string) ')\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) paren_list)\n             (add1 (first paren_string)))\n     \
    \  (char= (first paren_string) '(\n              (loop (rest paren_string)\n \
    \                    (cons (first paren_string) paren_list)\n                \
    \     (add1 (first paren_string))))\n       (loop (rest paren_string)\n      \
    \       (", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (if (empty? paren_string)\n        result\n        (loop (rest paren_string)\n\
    \              (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [else (loop (rest\
    \ paren_string) (cons (first paren_string) result))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_string (car\
    \ paren_string))\n             (paren_count 0))\n    (if (char=? paren_string\
    \ #\\)\n        (if (> paren_count 0)\n            (loop (cdr paren_string)\n\
    \                  (cons (car paren_list)\n                        (cons (car\
    \ paren_string)\n                              paren_list))\n                \
    \  (cdr paren_string)\n                  (+ paren_count 1)))\n        (loop (cdr\
    \ paren_string)\n              (cons (car paren_list)\n                    (cons\
    \ (car paren_string)\n                          paren_list))\n              (cdr\
    \ paren_string)\n              (+ paren_count 1)))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (open_braces '()))\n\
    \    (cond\n      [(empty? paren_string) empty]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (cons\
    \ (first paren_string) open_braces))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (cons (first\
    \ paren_string) open_braces))]\n      [(char=? (first paren_string) '(#\\)) (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (cons (first paren_string)\
    \ open_braces))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (cons (first paren_string) open_braces))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (cons (first paren_string) open_braces))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (cons (first paren_string) open_braces))]\n      [(char=? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list)\
    \ (cons (first paren_string) open_braces))]\n      [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) paren_list) (cons\
    \ (first paren_string) open_braces))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) paren_list) (cons (first\
    \ paren_string) open_braces))]\n      [(char=? (first paren_string) '(#\\)) (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (cons (first paren_string)\
    \ open_braces))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (cons (first paren_string) open_braces))]\n\
    \      [(char=? (first paren_string) '(", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond ((string-empty? paren_string)\n       \
    \    (reverse result))\n          ((char=? (first paren_string) '(\n         \
    \          (loop (rest paren_string)\n                           (cons (first\
    \ paren_string) result))))\n           (loop (rest paren_string)\n           \
    \        (cons (first paren_string) result)))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n                   (loop (rest paren_string)\n                         \
    \  (cons (first paren_string) result))))\n          ((char=? (first paren_string)\
    \ '(\n", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse result)\n       ]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))\n       ]\n      [else\n       (loop (rest\
    \ paren_string) (cons (first paren_string) result))\n       ]\n      )\n    )\n\
    \  )\n", "  (let loop ((paren_string paren_string)\n             (paren_list '())\n\
    \             (paren_string '()))\n    (cond\n      [(empty? paren_string)\n \
    \      (reverse paren_list)]\n      [(equal? (first paren_string) '( () ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (",
  "  (let loop ((paren_string paren_string)\n             (groups ())\n          \
    \   (current_group ()))\n    (if (empty? paren_string)\n        (reverse groups)\n\
    \        (let ((char (car paren_string)))\n          (if (char= char #\\)\n  \
    \            (loop (cdr paren_string)\n                    (cons (car current_group)\
    \ groups)\n                    (cons char current_group))\n              (loop\
    \ (cdr paren_string)\n                    (cons (car current_group) groups)\n\
    \                    (cons char current_group)))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [else (loop (rest paren_string)\
    \ (cons (first paren_string) result))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '())\n             (i 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(char=? (car paren_string) '( () ))\n      \
    \ (loop (cdr paren_string)\n             (cons (car paren_string) groups)\n  \
    \           (+ i 1))]\n      [else\n       (loop (cdr paren_string)\n        \
    \     (cons (car paren_string)\n                    (loop (cdr paren_string)\n\
    \                          (cons (car paren_string)\n                        \
    \        groups)\n                          i))]\n    )\n  )\n)\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_list '())\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n\
    \      [(char=? (car paren_string) '(#\\Space)] \n       ;; This means we found\
    \ a nested parenthesis group\n       (loop (cdr paren_string)\n             (cons\
    \ (car paren_string) paren_list)\n             (+ 1 paren_count))\n       ;; This\
    \ means we found a closed parenthesis group\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string) paren_list)\n             (- 1 paren_count))\n\
    \       ;; This means we found a group of parenthesis group\n       (loop (cdr\
    \ paren_string)\n             (cons (car paren_string)\n                   (cons\
    \ (list '() paren_list)\n                          (list '() paren_list)))\n \
    \            (+ 1 paren_count))\n       ;; This means we found a group of parenthesis\
    \ group\n       (loop (cdr paren_string)\n             (cons (car paren_string)\n\
    \                   (cons (list '() paren_list)\n                          (list\
    \ '() paren_list)))\n             (- 1 paren_count))\n       ;; This means we\
    \ found a group of parenthesis group\n       (loop (cdr paren_string)\n      \
    \       (cons (car paren_string)\n                   (cons (list '() paren_list)\n\
    \                          (list '() paren_list)))\n             (- 1 paren_count))\n\
    \       ;; This means we found a group of parenthesis group\n       (loop (cdr\
    \ paren_string)\n             (cons (car paren_string)\n                   (cons\
    \ (list '() paren_list)\n                          (list '() paren_list)))\n \
    \            (- 1 paren_count))\n       ;; This means we found a group of parenthesis\
    \ group\n       (loop (cdr paren_string)\n             (cons (car paren_string)\n\
    \                   (cons (list '() paren_list)\n                          (list\
    \ '() paren_list)))\n             (- 1 paren_count))\n       ;; This means we\
    \ found a group of parenthesis group\n       (loop (cdr paren_string)\n      \
    \       (cons (car paren_string)\n                   (cons (list '() paren_list)\n\
    \                          (list '() paren_list)))\n             (- 1 paren_count))\n\
    \       ;; This means we found a group of parenthesis group\n       (", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_list '())\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                     (cons (first paren_string) paren_list)\n\
    \                     (add1 paren_count)))]\n      [(char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                     (cons (first\
    \ paren_string) paren_list)\n                     (add1 paren_count)))\n     \
    \  (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (add1 paren_count))]\n      [(char= (first paren_string) ')\n  \
    \     (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (add1 paren_count))]\n      [(char= (first paren_string) ')\n  \
    \     (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (add1 paren_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) paren_list)\n               \
    \      (add1 paren_count)))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) paren_list)\n             (add1 paren_count))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list)\n \
    \            (add1 paren_count))]\n      [(char= (first paren_string) '(\n   \
    \           (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ paren_list)\n                     (add1 paren_count)))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (add1 paren_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(char= (first paren_string) ')\n       (loop (rest paren_string)\n   \
    \          (cons (first paren_string) paren_list)\n             (add1 paren_count))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (add1 paren_count))\n       (loop (rest paren_string)\n        \
    \     (", "  (let loop ((paren_string paren_string)\n             (groups ())\n\
    \             (current_group ())\n             (current_group_size 0))\n    (if\
    \ (empty? paren_string)\n        (reverse groups)\n        (let ((char (car paren_string)))\n\
    \          (if (char= char #\\)\n              (loop (cdr paren_string)\n    \
    \                (cons (car current_group) groups)\n                    (cons\
    \ (car current_group) (cons char current_group_size))\n                    (+\
    \ current_group_size 1))\n              (loop (cdr paren_string)\n           \
    \         (cons (car current_group) groups)\n                    (cons char current_group)\n\
    \                    (+ current_group_size 1)))))\n    (loop (cdr paren_string)\n\
    \          (cons (car current_group) groups)\n          (cons (car current_group)\
    \ current_group)\n          (+ current_group_size 1))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse result)\n       ]\n      [(char=? (first paren_string) '(\n \
    \              (loop (rest paren_string)\n                       (cons (first\
    \ paren_string) result)))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) result))\n       ]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) result))\n       ]\n      )))\n", " \
    \ (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse result)]\n      [(equal? (first\
    \ paren_string) '(\n                  (loop (rest paren_string)\n            \
    \             (cons (first paren_string) result)))]\n      [(equal? (first paren_string)\
    \ '(\n                  (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) result)))]\n      [(equal? (first paren_string) '(\n  \
    \                (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) result)))]\n      [(equal? (first paren_string) '(\n         \
    \         (loop (rest paren_string)\n                         (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '(\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) result)))]\n\
    \      [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '(\n                  (loop (rest paren_string)\n     \
    \                    (cons (first paren_string) result)))]\n      [(equal? (first\
    \ paren_string) '(\n                  (loop (rest paren_string)\n            \
    \             (cons (first paren_string) result)))]\n      [(equal? (first paren_string)\
    \ '(\n                  (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) result)))]\n      [(equal? (first paren_string) '(\n  \
    \                (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) result)))]\n      [(equal? (first paren_string) '(\n         \
    \         (loop (rest paren_string)\n                         (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '(\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) result)))]\n\
    \      [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '(\n                  (loop (rest paren_string)\n     \
    \                    (cons (first paren_string) result)))]\n      [(equal? (first\
    \ paren_string) '(\n                  (loop (rest paren_string)\n            \
    \             (cons (first paren_string) result)))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string) paren_list]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) 1)]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) 2)]\n      [(char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) 3)]\n      [(char=\
    \ (first paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) 4)]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) 5)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) 6)]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) 7)]\n      [(char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) 8)]\n      [(char=\
    \ (first paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) 9)]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) 10)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_list) 11)]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) 12)]\n      [(char= (first paren_string) '( () ))\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) 13)]\n    \
    \  [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) 14)]\n      [(char= (first paren_string) '( () )) ",
  "  (let loop ((paren_string paren_string)\n             (groups ())\n          \
    \   (group_count 0))\n    (cond ((null? paren_string)\n           (reverse groups))\n\
    \          ((char= (first paren_string) '( () ))\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups)\n\
    \                 (add1 group_count)))\n          ((char= (first paren_string)\
    \ '( () ))\n           (loop (rest paren_string)\n                 (cons (first\
    \ paren_string)\n                      groups)\n                 (add1 group_count)))\n\
    \          ((char= (first paren_string) '( () ))\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups)\n\
    \                 (add1 group_count)))\n          ((char= (first paren_string)\
    \ '( () ))\n           (loop (rest paren_string)\n                 (cons (first\
    \ paren_string)\n                      groups)\n                 (add1 group_count)))\n\
    \          ((char= (first paren_string) '( () ))\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups)\n\
    \                 (add1 group_count)))\n          ((char= (first paren_string)\
    \ '( () ))\n           (loop (rest paren_string)\n                 (cons (first\
    \ paren_string)\n                      groups)\n                 (add1 group_count)))\n\
    \          ((char= (first paren_string) '( () ))\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups)\n\
    \                 (add1 group_count)))\n          ((char= (first paren_string)\
    \ '( () ))\n           (loop (rest paren_string)\n                 (cons (first\
    \ paren_string)\n                      groups)\n                 (add1 group_count)))\n\
    \          ((char= (first paren_string) '( () ))\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups)\n\
    \                 (add1 group_count)))\n          ((char= (first paren_string)\
    \ '( () ))\n           (loop (rest paren_string)\n                 (cons (first\
    \ paren_string)\n                      groups)\n                 (add1 group_count)))\n\
    \          ((char= (first paren_string) '( () ))\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups)\n\
    \                 (add1 group_count)))\n          ((char= (first paren_string)\
    \ '( () ))", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (if (empty? paren_string)\n       \
    \ (reverse paren_list)\n        (let ((char (car paren_string)))\n          (if\
    \ (char= char #\\)\n              (loop (cdr paren_string)\n                 \
    \   (cons (car paren_list) paren_list)\n                    (+ paren_count 1))\n\
    \              (loop (cdr paren_string)\n                    (cons (car paren_list)\
    \ paren_list)\n                    paren_count)))))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThanks so much! This was very helpful.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  (let loop ((paren_string paren_string)\n             (groups\
    \ ()))\n    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n  \
    \    [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) groups)))]\n      [(equal?\
    \ (first paren_string) '(\n                  (loop (rest paren_string)\n     \
    \                    (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))]\n\
    \      [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) groups))\n              \
    \    (loop (rest paren_string)\n                         (cons (first paren_string)\
    \ groups))\n                  (loop (rest paren_string)\n                    \
    \     (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(\n                  (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups))\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) groups))\n              \
    \    (loop (rest paren_string)\n                         (cons (first paren_string)\
    \ groups))\n                  (loop (rest paren_string)\n                    \
    \     (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(\n                  (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups))\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) groups))\n              \
    \    (loop (rest paren_string)\n                         (cons (first paren_string)\
    \ groups))\n                  (loop (rest paren_string)\n                    \
    \     (cons (first paren_string) groups))\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(\n                  (loop (rest paren_string)\n     \
    \                    (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) groups))\n                  (loop (rest paren_string)\n      \
    \                   (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '())\n             (group_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse groups)]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups)\n             (+ group_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          (cons (first paren_string)\n                      \
    \          groups)\n                          (+ group_count 1)))]\n    )\n  )\n\
    )\n", "  (let loop ((paren_string paren_string)\n             (groups '())\n \
    \            (group_count 0))\n    (cond\n      [(empty? paren_string)\n     \
    \  (reverse groups)]\n      [(char=? (first paren_string) '(#\\Space)\n      \
    \        (loop (rest paren_string)\n                     (cons groups (reverse\
    \ groups))\n                     (+ group_count 1)))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (cons groups (reverse groups))\n         \
    \    (+ group_count 1))]\n      [else\n       (loop (rest paren_string)\n    \
    \         (cons groups (reverse groups))\n             (+ group_count 1))]\n \
    \     [else\n       (loop (rest paren_string)\n             (cons groups (reverse\
    \ groups))\n             (+ group_count 1))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (cons groups (reverse groups))\n             (+\
    \ group_count 1))]\n      [else\n       (loop (rest paren_string)\n          \
    \   (cons groups (reverse groups))\n             (+ group_count 1))]\n      [else\n\
    \       (loop (rest paren_string)\n             (cons groups (reverse groups))\n\
    \             (+ group_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons groups (reverse groups))\n             (+ group_count 1))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons groups (reverse\
    \ groups))\n             (+ group_count 1))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (cons groups (reverse groups))\n             (+\
    \ group_count 1))]\n      [else\n       (loop (rest paren_string)\n          \
    \   (cons groups (reverse groups))\n             (+ group_count 1))]\n      [else\n\
    \       (loop (rest paren_string)\n             (cons groups (reverse groups))\n\
    \             (+ group_count 1))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons groups (reverse groups))\n             (+ group_count 1))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons groups (reverse\
    \ groups))\n             (+ group_count 1))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (cons groups (reverse groups))\n             (+\
    \ group_count 1))]\n      [else\n       (loop (rest paren_string)\n          \
    \   (cons groups (reverse groups))\n             (+ group_count 1))]\n      [else\n\
    \       (loop (rest paren_string)\n             (cons groups (reverse groups))\n\
    \             (+ group_count 1))]\n      [", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (first paren_string) '(#\\Space) empty?)\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    Space) (empty? result))]\n      [(char=? (first paren_string) '(#\\Space) (empty?\
    \ result))]\n      [else\n       (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      ]))\n  result)\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '())\n             (group_count 0))\n    (cond ((null? paren_string)\n\
    \           (reverse groups))\n          ((char=? (car paren_string) '(\n    \
    \               (loop (cdr paren_string)\n                         (cons (cons\
    \ (car paren_string) groups) groups)\n                         group_count))\n\
    \           (loop (cdr paren_string)\n                 (cons (car paren_string)\
    \ groups)\n                 group_count))\n          ((char=? (car paren_string)\
    \ ')\n           (loop (cdr paren_string)\n                 (cons (car paren_string)\
    \ groups)\n                 group_count))\n          (else\n           (loop (cdr\
    \ paren_string)\n                 (cons (car paren_string) groups)\n         \
    \        group_count)))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char=? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) (cons (first paren_string)\
    \ groups))])]))\n", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '()))\n    (if (empty? paren_string)\n        (reverse groups)\n        (let\
    \ ((char (car paren_string)))\n          (if (char= char #\\)\n              (loop\
    \ (cdr paren_string)\n                    (cons (car paren_string) groups))\n\
    \              (loop (cdr paren_string)\n                    (cons (car paren_string)\
    \ (cons char groups)))))))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (paren_list '())\n             (paren_string (car paren_string))\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (reverse paren_list)]\n      [(char=? (car paren_string) '(\n            \
    \   (loop (cdr paren_string)\n                      (cons (car paren_string) paren_list)\n\
    \                      (cdr paren_string)\n                      (+ paren_count\
    \ 1)))]\n      [(char=? (car paren_string) '(\n               (loop (cdr paren_string)\n\
    \                      (cons (car paren_string) paren_list)\n                \
    \      (cdr paren_string)\n                      (+ paren_count 0)))]\n      [(char=?\
    \ (car paren_string) '(\n               (loop (cdr paren_string)\n           \
    \           (cons (car paren_string) paren_list)\n                      (cdr paren_string)\n\
    \                      (+ paren_count -1)))]\n      [(char=? (car paren_string)\
    \ '(\n               (loop (cdr paren_string)\n                      (cons (car\
    \ paren_string) paren_list)\n                      (cdr paren_string)\n      \
    \                (+ paren_count 0)))]\n      [(char=? (car paren_string) '(\n\
    \               (loop (cdr paren_string)\n                      (cons (car paren_string)\
    \ paren_list)\n                      (cdr paren_string)\n                    \
    \  (+ paren_count 1)))]\n      [(char=? (car paren_string) '(\n              \
    \ (loop (cdr paren_string)\n                      (cons (car paren_string) paren_list)\n\
    \                      (cdr paren_string)\n                      (+ paren_count\
    \ -1)))]\n      [(char=? (car paren_string) '(\n               (loop (cdr paren_string)\n\
    \                      (cons (car paren_string) paren_list)\n                \
    \      (cdr paren_string)\n                      (+ paren_count 0)))]\n      [(char=?\
    \ (car paren_string) '(\n               (loop (cdr paren_string)\n           \
    \           (cons (car paren_string) paren_list)\n                      (cdr paren_string)\n\
    \                      (+ paren_count 1)))]\n      [(char=? (car paren_string)\
    \ '(\n               (loop (cdr paren_string)\n                      (cons (car\
    \ paren_string) paren_list)\n                      (cdr ", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string) paren_list]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '('", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (if (string-empty? paren_string)\n        result\n\
    \        (loop (substring paren_string 0 (string-length paren_string))\n     \
    \         (cons (substring paren_string 0 (string-length paren_string))\n    \
    \                result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char= (first paren_string) '( () )) (loop (rest\
    \ paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n   \
    \   [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string",
  "  (let loop ((paren_string paren_string)\n             (groups ()))\n    (cond\
    \ ((string=? paren_string \"\") groups)\n          ((char=? paren_string '(')\
    \ (loop (substring paren_string 0 (string-length paren_string))))\n          ((char=?\
    \ paren_string ')') (loop (substring paren_string 1 (string-length paren_string))))\n\
    \          (else (loop (substring paren_string 1 (string-length paren_string)))))\n\
    \    (loop (substring paren_string 0 (string-length paren_string))))\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  (let loop ((paren_string paren_string)\n\
    \             (groups '())\n             (current_group ''))\n    (if (empty?\
    \ paren_string)\n        (reverse groups)\n        (let ((char (car paren_string)))\n\
    \          (if (char= char #\\)\n              (loop (cdr paren_string)\n    \
    \                (cons (car paren_string) groups)\n                    current_group)\n\
    \              (loop (cdr paren_string)\n                    (cons current_group\
    \ (cons (car paren_string) groups))\n                    '())))))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (groups ()))\n    (if (string-empty?\
    \ paren_string)\n        (reverse groups)\n        (let ((char (char-at (string->list\
    \ paren_string) 0)))\n          (if (char-equal? char #\\)\n              (loop\
    \ (substring paren_string 0 (char-index paren_string #\\)))\n              (loop\
    \ (substring paren_string 1 (char-index paren_string #\\))\n                 \
    \   (cons (substring paren_string 0 (char-index paren_string #\\))\n         \
    \                 groups)))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(equal? (first\
    \ paren_string) '(#\\))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) paren_list)\n             (add1 paren_count))]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string)\n           \
    \  (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (add1 paren_count))]\n\
    \      [(", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (cond\n      [(empty? paren_string) result]\n      [(char=? (first paren_string)\
    \ '(#\\Space) empty?)\n       (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\Space) (empty? result))]\n\
    \      [(char=? (first paren_string) '(#\\Space) (empty? (rest paren_string)))\n\
    \       (loop (rest paren_string) (cons (first paren_string) result))]\n     \
    \ [else\n       (loop (rest paren_string) (cons (first paren_string) (loop (rest\
    \ paren_string) result)))]\n      )))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond [(empty? paren_string) result]\n      \
    \    [(char= (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n          [(char= (first paren_string) '(#\\)) (loop\
    \ (rest paren_string) (cons (first paren_string) result))]\n          [(char=\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n          [(char= (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n          [(char= (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \       [(char= (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n          [(char= (first paren_string) '(#\\)) (loop\
    \ (rest paren_string) (cons (first paren_string) result))]\n          [(char=\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n          [(char= (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n          [(char= (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \       [(char= (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n          [(char= (first paren_string) '(#\\)) (loop\
    \ (rest paren_string) (cons (first paren_string) result))]\n          [(char=\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n          [(char= (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n          [(char= (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \       [(char= (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n          [(char", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_string (car paren_string))\n\
    \             (paren_count 0))\n    (if (or (char=? paren_string #\\Space)\n \
    \           (char=? paren_string #\\Newline))\n        (append paren_list (list\
    \ paren_string))\n        (loop (cdr paren_string)\n              (cons (car paren_string)\n\
    \                    (loop (cdr paren_string)\n                          (cons\
    \ (car paren_string)\n                                paren_list))\n         \
    \     (car paren_string)\n              (+ paren_count 1)))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse result)\n       ]\n      [(char=? (car paren_string)\
    \ '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Newline)]\n      [(char=?\
    \ (car paren_string) '(#\\Tab)]\n      [(char=? (car paren_string) '(#\\Newline)]\n\
    \      [(char=? (car paren_string) '(#\\Space)]\n      [(char=? (car paren_string)\
    \ '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Space)]\n      [(char=?\
    \ (car paren_string) '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Space)]\n\
    \      [(char=? (car paren_string) '(#\\Space)]\n      [(char=? (car paren_string)\
    \ '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Space)]\n      [(char=?\
    \ (car paren_string) '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Space)]\n\
    \      [(char=? (car paren_string) '(#\\Space)]\n      [(char=? (car paren_string)\
    \ '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Space)]\n      [(char=?\
    \ (car paren_string) '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Space)]\n\
    \      [(char=? (car paren_string) '(#\\Space)]\n      [(char=? (car paren_string)\
    \ '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Space)]\n      [(char=?\
    \ (car paren_string) '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Space)]\n\
    \      [(char=? (car paren_string) '(#\\Space)]\n      [(char=? (car paren_string)\
    \ '(#\\Space)]\n      [(char=? (car paren_string) '(#\\Space)]\n      [(char=?\
    \ (car paren_string) '(#\\Space)]", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(char=? (first\
    \ paren_string) '(#\\))])\n      (loop (rest paren_string)\n             (cons\
    \ (first paren_string)\n                   (loop (rest paren_string)\n       \
    \                  (cons (first paren_string)\n                              \
    \ (loop (rest paren_string)\n                                     (cons (first\
    \ paren_string)\n                                           (loop (rest paren_string)\n\
    \                                                 (cons (first paren_string)\n\
    \                                                      (loop (rest paren_string)\n\
    \                                                            (cons (first paren_string)\n\
    \                                                                (loop (rest paren_string)\n\
    \                                                                    (cons (first\
    \ paren_string)\n                                                            \
    \            (loop (rest paren_string)\n                                     \
    \                                       (cons (first paren_string)\n         \
    \                                                                       (loop\
    \ (rest paren_string)\n                                                      \
    \                                (cons (first paren_string)\n                \
    \                                                                            (loop\
    \ (rest paren_string)\n                                                      \
    \                                            (cons (first paren_string)\n    \
    \                                                                            \
    \                        (loop (rest paren_string)\n                         \
    \                                                                            \
    \         (cons (first paren_string)\n                                       \
    \                                                                            \
    \ (loop (rest paren_string)\n                                                \
    \                                                                          (cons\
    \ (first paren_string)\n                                                     \
    \                                                                         (loop\
    \ (rest paren_string)\n                                                      \
    \                                                                          (cons\
    \ (first paren_string)\n                                                     \
    \                                                                            \
    \   (loop (rest paren_string)\n                                              \
    \                                                                            \
    \            (cons (first paren_string)\n                                    \
    \                                                                            \
    \                            (loop (rest paren_string)\n                     \
    \                                                                            \
    \                                             (cons (first paren_string)\n   \
    \                                                                            \
    \                                                                     (loop (rest\
    \ paren_string)\n                                                            \
    \                                                                            \
    \              (cons (first paren_string)\n                                  \
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                                            \
    \       (cons (first paren_string)\n                                         \
    \                                                                            \
    \                                                   (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                      (cons (first paren_string)\n                          \
    \                                                                            \
    \                                                                            \
    \  (loop (rest paren_string)\n                                               \
    \                                                                            \
    \                                                               (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                      (loop (rest paren_string)\n           \
    \                                                                            \
    \                                                                            \
    \                             (cons (first paren_string)\n                   \
    \                                                                            \
    \                                                                            \
    \                         (loop (rest paren_string)\n                        \
    \                                                                            \
    \                                                                            \
    \                      (cons (first paren_string)\n                          \
    \                                                                            \
    \                                                                            \
    \                          (loop (rest paren_string)\n                       \
    \                                                                            \
    \                                                                            \
    \                               (cons (first paren_string)\n                 \
    \                                                                            \
    \                                                                            \
    \                                           (loop (rest paren_string)\n      \
    \                                                                            \
    \                                                                            \
    \                                                        (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                                                    (loop (rest\
    \ paren", "  (let loop ((paren_string paren_string)\n             (groups ())\n\
    \             (current_group ())\n             (current_group_is_closed false))\n\
    \    (if (string-empty? paren_string)\n        (reverse groups)\n        (let\
    \ ((char (char-at (string->list paren_string) 0)))\n          (if (char-whitespace?\
    \ char)\n              (loop (string->list paren_string)\n                   \
    \ (cons current_group groups)\n                    false)\n              (if (char-equal?\
    \ char #\\)\n                  (loop (string->list paren_string)\n           \
    \             (cons current_group groups)\n                        true)\n   \
    \               (loop (string->list paren_string)\n                        (cons\
    \ (cons current_group ()) groups)\n                        false)))))))\n", " \
    \ (let loop ((paren_string paren_string)\n             (paren_list '())\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(equal? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                     (cons (first paren_string) paren_list)\n\
    \                     (add1 paren_count)))]\n      [(equal? (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                     (cons (first\
    \ paren_string) paren_list)\n                     (add1 paren_count)))]\n    \
    \  [(equal? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) paren_list)\n               \
    \      (add1 paren_count)))]\n      [(equal? (first paren_string) '(\n       \
    \       (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ paren_list)\n                     (add1 paren_count)))]\n      [(equal? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \     (cons (first paren_string) paren_list)\n                     (add1 paren_count)))]\n\
    \      [(equal? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) paren_list)\n               \
    \      (add1 paren_count)))]\n      [(equal? (first paren_string) '(\n       \
    \       (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ paren_list)\n                     (add1 paren_count)))]\n      [(equal? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \     (cons (first paren_string) paren_list)\n                     (add1 paren_count)))]\n\
    \      [(equal? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) paren_list)\n               \
    \      (add1 paren_count)))]\n      [(equal? (first paren_string) '(\n       \
    \       (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ paren_list)\n                     (add1 paren_count)))]\n      [(equal? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \     (cons (first paren_string) paren_list)\n                     (add1 paren_count)))]\n\
    \      [(equal? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) paren_list)\n               \
    \      (add1 paren_count)))]\n      [(equal? (first paren_string) '(\n       \
    \       (loop", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse paren_list)]\n      [(char=? (first paren_string) '(\n      \
    \        (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ paren_list)\n                    (+ 1 paren_count)))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list)\n \
    \            (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (first paren_string) '(#\\Space) empty?)\n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    Space) (empty? result))]\n      [(char=? (first paren_string) '(#\\Space) (empty?\
    \ result))]\n      [else\n       (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      ]))\n  result)\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car\
    \ paren_string) result))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr\
    \ paren_string) (cons (car paren_string) result))]\n      [(char=? (car paren_string)\
    \ '(#\\)) (loop (cdr paren_string) (cons (car paren_string) result))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) result))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) result))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) result))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) result))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) result))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) result))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) result))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr ", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_list]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) paren_list))]\n      [(char=?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list))]\n      [(char=? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) paren_list))]\n      [(char=? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) paren", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n     \
    \ [(char=? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) paren_list)\n                \
    \    (+ 1 paren_count)))]\n      [else\n       (loop (rest paren_string)\n   \
    \          (cons (first paren_string) paren_list)\n             (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '())\n         \
    \    (group_count 0))\n    (if (empty? paren_string)\n        (reverse groups)\n\
    \        (let ((char (first paren_string)))\n          (if (char= char #\\)\n\
    \              (loop (rest paren_string)\n                    (cons group groups)\n\
    \                    (+ group_count 1))\n              (loop (rest paren_string)\n\
    \                    (cons char groups)\n                    (+ group_count 1))))))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char= (first paren_string) '( ()\
    \ )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=\
    \ (first paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ (loop (rest paren_string))))]\n      [(char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string))))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ result)\n       ]\n      [(char=? (car paren_string) '( ( )\n              \
    \    (loop (cdr paren_string)\n                        (cons (car paren_string)\
    \ result)))]\n      [(char=? (car paren_string) '( ( )\n                  (loop\
    \ (cdr paren_string)\n                        (cons (car paren_string) result)))]\n\
    \      [(char=? (car paren_string) '( ( )\n                  (loop (cdr paren_string)\n\
    \                        (cons (car paren_string) result)))]\n      [(char=? (car\
    \ paren_string) '( ( )\n                  (loop (cdr paren_string)\n         \
    \               (cons (car paren_string) result)))]\n      [(char=? (car paren_string)\
    \ '( ( )\n                  (loop (cdr paren_string)\n                       \
    \ (cons (car paren_string) result)))]\n      [(char=? (car paren_string) '( (\
    \ )\n                  (loop (cdr paren_string)\n                        (cons\
    \ (car paren_string) result)))]\n      [(char=? (car paren_string) '( ( )\n  \
    \                (loop (cdr paren_string)\n                        (cons (car\
    \ paren_string) result)))]\n      [(char=? (car paren_string) '( ( )\n       \
    \           (loop (cdr paren_string)\n                        (cons (car paren_string)\
    \ result)))]\n      [(char=? (car paren_string) '( ( )\n                  (loop\
    \ (cdr paren_string)\n                        (cons (car paren_string) result)))]\n\
    \      [(char=? (car paren_string) '( ( )\n                  (loop (cdr paren_string)\n\
    \                        (cons (car paren_string) result)))]\n      [(char=? (car\
    \ paren_string) '( ( )\n                  (loop (cdr paren_string)\n         \
    \               (cons (car paren_string) result)))]\n      [(char=? (car paren_string)\
    \ '( ( )\n                  (loop (cdr paren_string)\n                       \
    \ (cons (car paren_string) result)))]\n      [(char=? (car paren_string) '( (\
    \ )\n                  (loop (cdr paren_string)\n                        (cons\
    \ (car paren_string) ", "  (let loop ((paren_string paren_string)\n          \
    \   (groups '())\n             (group_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(equal? (first paren_string) '(\n          \
    \    (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ groups)\n                     (add1 group_count)))]\n      [(equal? (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                     (cons (first\
    \ paren_string) groups)\n                     (add1 group_count)))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) groups)\n     \
    \        (add1 group_count))]\n      [(equal? (first paren_string) '(\n      \
    \        (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ groups)\n                     (add1 group_count)))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))]\n      [(equal? (first paren_string) '(\n \
    \             (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ groups)\n                     (add1 group_count)))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))]\n\
    \      [(equal? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) groups)\n                   \
    \  (add1 group_count)))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) groups)\n             (add1 group_count))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) groups)\n     \
    \        (add1 group_count))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) groups)\n             (add1 group_count))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) groups)\n     \
    \        (add1 group_count))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) groups)\n             (add1 group_count))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) groups)\n     \
    \        (add1 ", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse paren_list)]\n      [(char=? (first paren_string) '(\n      \
    \        (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ paren_list)\n                    (add1 (first paren_string)))\n            \
    \  (loop (rest paren_string)\n                    (cons (first paren_string) paren_list)\n\
    \                    (add1 (first paren_string))))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list)\n \
    \            (add1 (first paren_string)))]))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
