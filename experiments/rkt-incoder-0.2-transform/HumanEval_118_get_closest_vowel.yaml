name: HumanEval_118_get_closest_vowel
language: rkt
prompt: "#lang racket\n\n;; You are given a word. Your task is to find the closest\
  \ vowel that stands between \n;; two consonants from the right side of the word\
  \ (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return\
  \ empty string if you didn't\n;; find any vowel met the above condition. \n;; You\
  \ may assume that the given string contains English letter only.\n;; Example:\n\
  ;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\"\
  )\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel\
  \ \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (define (helper word vowel)\n    (cond\n      [(empty? word) \"\"\
    ]\n      [(equal? (first word) vowel) vowel]\n      [else (helper (rest word)\
    \ (cons (first word) vowel))]\n    ))\n  (helper (reverse word) '()))\n", "  (let\
    \ loop ((word word) (vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n  \
    \        ((char=? (car word) 'a) (loop (cdr word) (cons vowels 'e)))\n       \
    \   ((char=? (car word) 'e) (loop (cdr word) (cons vowels 'i)))\n          ((char=?\
    \ (car word) 'i) (loop (cdr word) (cons vowels 'o)))\n          ((char=? (car\
    \ word) 'o) (loop (cdr word) (cons vowels 'u)))\n          ((char=? (car word)\
    \ 'u) (loop (cdr word) (cons vowels 'a)))\n          (else (loop (cdr word) (cons\
    \ vowels 'a))))))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word)\
    \ 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (get-vowel\
    \ (rest word))]))\n", "  (let loop ((vowels '(a e i o u)) (word word) (i 0))\n\
    \    (cond ((null? word) \"\")\n          ((char=? (car word) (car vowels)) (loop\
    \ (cdr vowels) (cdr word) (+ i 1)))\n          ((char=? (car word) (cdr vowels))\
    \ (loop (cdr vowels) (cdr word) (+ i 1)))\n          ((char=? (car word) (cdr\
    \ vowels) (cdr vowels)) (loop (cdr vowels) (cdr word) (+ i 1)))\n          (else\
    \ (loop (cdr vowels) (cdr word) (+ i 1))))))\n", "  (define (vowel-search word\
    \ vowel)\n    (cond [(empty? word) \"\"]\n          [(equal? (first word) vowel)\
    \ (vowel-search (rest word) vowel)]\n          [else (vowel-search (rest word)\
    \ (cons (first word) vowel))]))\n  (vowel-search word 'u))\n", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond [(empty? word) \"\"]\n          [(char=? (first word)\
    \ 'a) (first vowels)]\n          [(char=? (first word) 'e) (first vowels)]\n \
    \         [(char=? (first word) 'i) (first vowels)]\n          [(char=? (first\
    \ word) 'o) (first vowels)]\n          [(char=? (first word) 'u) (first vowels)]\n\
    \          [else (first vowels)]))\n  )\n", "  (let loop ((word word) (vowels\
    \ '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((char-before (car\
    \ word) vowels) (car word))\n          ((char-before (car word) (cons (car word)\
    \ vowels)) (car word))\n          ((char-before (car word) (cons (car word) (cons\
    \ (car word) vowels))) (car word))\n          ((char-before (car word) (cons (car\
    \ word) (cons (car word) (cons (car word) vowels))))\n          ((char-before\
    \ (car word) (cons (car word) (cons (car word) (cons (car word) (cons (car word)\
    \ vowels))))))\n    (loop (cdr word) (cons (car word) vowels))))\n", "  (cond\
    \ [(empty? word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n        [else (get-closest-vowel (rest\
    \ word))]))\n", "  (let loop ((word word) (vowels '(a e i o u)))\n    (cond ((null?\
    \ word) \"\")\n          ((char=? (car word) 'a) (loop (cdr word) (cons vowels\
    \ 'e)))\n          ((char=? (car word) 'e) (loop (cdr word) (cons vowels 'i)))\n\
    \          ((char=? (car word) 'i) (loop (cdr word) (cons vowels 'o)))\n     \
    \     ((char=? (car word) 'o) (loop (cdr word) (cons vowels 'u)))\n          ((char=?\
    \ (car word) 'u) (loop (cdr word) (cons vowels 'a)))\n          (else (loop (cdr\
    \ word) (cons vowels 'a))))))\n", "  (define (helper word vowel i j)\n    (cond\
    \ ((null? word) \"\")\n          ((char=? (car word) vowel) vowel)\n         \
    \ ((char=? (car word) (cdr word)) (helper (cdr word) vowel (+ i 1) j))\n     \
    \     ((char=? (car word) (car word)) (helper (cdr word) vowel i (+ j 1)))\n \
    \         ((char=? (car word) (cdr word)) (helper (cdr word) vowel (+ i 1) (+\
    \ j 1)))\n          (else (helper (cdr word) vowel (+ i 1) (+ j 1)))))\n  (helper\
    \ word 'a 'b 'c))\n", "  (define (vowel-check word)\n    (cond [(empty? word)\
    \ \"\"]\n          [(char=? (first word) 'a) (cons (first word) (vowel-check (rest\
    \ word)))]\n          [(char=? (first word) 'e) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'i) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'o) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'u) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [else (vowel-check (rest word))]))\n  (vowel-check\
    \ word))\n", "  (define (helper word vowel vowel-count vowel-index)\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(equal? vowel (first word)) (cons (first word)\
    \ vowel-count)]\n      [(equal? (first word) vowel) (helper (rest word) vowel\
    \ (cons (first word) vowel-count) vowel-index)]\n      [(equal? (first word) (first\
    \ vowel)) (helper (rest word) (first vowel) (cons (first word) vowel-count) vowel-index)]\n\
    \      [(equal? (first word) (first vowel) (first vowel-index)) (helper (rest\
    \ word) (first vowel) (cons (first word) vowel-count) vowel-index)]\n      [(equal?\
    \ (first word) (first vowel) (first vowel-index) (first vowel-index)) (helper\
    \ (rest word) (first vowel) (cons (first word) vowel-count) vowel-index)]\n  \
    \    [(equal? (first word) (first vowel) (first vowel-index) (first vowel-index)\
    \ (first vowel-index)) (helper (rest word) (first vowel) (cons (first word) vowel-count)\
    \ vowel-index)]\n      [(equal? (first word) (first vowel) (first vowel-index)\
    \ (first vowel-index) (first vowel-index) (first vowel-index)) (helper (rest word)\
    \ (first vowel) (cons (first word) vowel-count) vowel-index)]\n      [(equal?\
    \ (first word) (first vowel) (first vowel-index) (first vowel-index) (first vowel-index)\
    \ (first vowel-index) (first vowel-index)) (helper (rest word) (first vowel) (cons\
    \ (first word) vowel-count) vowel-index)]\n      [(equal? (first word) (first\
    \ vowel) (first vowel-index) (first vowel-index) (first vowel-index) (first vowel-index)\
    \ (first vowel-index) (first vowel-index)) (helper (rest word) (first vowel) (cons\
    \ (first word) vowel-count) vowel-index)]\n      [(equal? (first word) (first\
    \ vowel) (first vowel-index) (first vowel-index) (first vowel-index) (first vowel-index)\
    \ (first vowel-index) (first vowel-index) (first vowel-index)) (helper (rest word)\
    \ (first vowel) (cons (first word) vowel-count) vowel-index)]\n      [(equal?\
    \ (first word) (first vowel) (first vowel-index) (first vowel-index) (first vowel-index)\
    \ (first vowel-index) (first vowel", "  (let ([vowels '(a e i o u)])\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(equal? (first word) vowels) (first word)]\n\
    \      [(equal? (first word) (first vowels)) (first word)]\n      [(equal? (first\
    \ word) (first vowels) (second word)) (first word)]\n      [(equal? (first word)\
    \ (first vowels) (second word) (third word)) (first word)]\n      [(equal? (first\
    \ word) (first vowels) (second word) (third word) (fourth word)) (first word)]\n\
    \      [(equal? (first word) (first vowels) (second word) (third word) (fourth\
    \ word) (fifth word)) (first word)]\n      [(equal? (first word) (first vowels)\
    \ (second word) (third word) (fourth word) (fifth word) (sixth word)) (first word)]\n\
    \      [(equal? (first word) (first vowels) (second word) (third word) (fourth\
    \ word) (fifth word) (sixth word) (seventh word)) (first word)]\n      [(equal?\
    \ (first word) (first vowels) (second word) (third word) (fourth word) (fifth\
    \ word) (sixth word) (seventh word) (eigth word)) (first word)]\n      [(equal?\
    \ (first word) (first vowels) (second word) (third word) (fourth word) (fifth\
    \ word) (sixth word) (seventh word) (eigth word) (tenth word)) (first word)]\n\
    \      [(equal? (first word) (first vowels) (second word) (third word) (fourth\
    \ word) (fifth word) (sixth word) (seventh word) (eigth word) (tenth word) (eleventh\
    \ word)) (first word)]\n      [(equal? (first word) (first vowels) (second word)\
    \ (third word) (fourth word) (fifth word) (sixth word) (seventh word) (eigth word)\
    \ (tenth word) (eleventh word) (twelfth word)) (first word)]\n      [(equal? (first\
    \ word) (first vowels) (second word) (third word) (fourth word) (fifth word) (sixth\
    \ word) (seventh word) (eigth word) (tenth word) (eleventh word) (twelfth word)\
    \ (thirteenth word)) (first word)]\n      [(equal? (first word) (first vowels)\
    \ (second word) (third word) (fourth word) (fifth word) (", "  (let loop ((word\
    \ word) (vowels '(a e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member\
    \ (first word) vowels) (first word)]\n      [else (loop (rest word) (concat vowels\
    \ (rest word)))]\n    )\n  )\n)\n", "  (let loop ((word word)\n             (vowels\
    \ '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((member (char-code\
    \ (car word)) vowels) (car word))\n          ((member (char-code (cadr word))\
    \ vowels) (cadr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char", "  (cond\n    [(empty? word) \"\"]\n    [(equal?\
    \ (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first\
    \ word)]))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n\
    \          ((char=? (char-code (car word)) (first vowels)) \n           (get_closest_vowel\
    \ (cdr word)))\n          ((char=? (char-code (car word)) (last vowels)) \n  \
    \         (get_closest_vowel (cdr word)))\n          (else (get_closest_vowel\
    \ (cdr word)))))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this solution\
    \ will fail for \"ab\", since it returns \"a\" instead of \"\".\n<|/ c |>\n<|\
    \ c |>\nThanks for pointing that out. I fixed the code accordingly.\n<|/ c |>\n\
    <| a tags=racket,scheme |>\nI wrote a solution using only Racket and R5RS Scheme.\
    \ \n<code>", "  (define (vowel-search word vowel)\n    (cond ((null? word) \"\"\
    )\n          ((char=? (car word) vowel) (car word))\n          ((char=? (car word)\
    \ (vowel string)) (vowel-search (cdr word) vowel))\n          ((char=? (car word)\
    \ (vowel string) (vowel string)) (vowel-search (cdr word) vowel))\n          (else\
    \ (vowel-search (cdr word) vowel))))\n  (vowel-search word \"a\"))\n", "  (define\
    \ (helper word vowel start end)\n    (cond\n      [(empty? word) \"\"]\n     \
    \ [(equal? vowel (first word)) vowel]\n      [(equal? (first word) vowel) (helper\
    \ (rest word) (first word) (add1 start))]\n      [else (helper (rest word) (first\
    \ word) (add1 start))]))\n  (helper (reverse word) \"\" 0 length))\n", "  (let\
    \ ([vowels '(a e i o u)])\n    (cond [(empty? word) \"\"]\n          [(char=?\
    \ (first word) 'a) (first vowels)]\n          [(char=? (first word) 'e) (first\
    \ vowels)]\n          [(char=? (first word) 'i) (first vowels)]\n          [(char=?\
    \ (first word) 'o) (first vowels)]\n          [(char=? (first word) 'u) (first\
    \ vowels)]\n          [else (first vowels)]))\n  )\n", "  (let ((vowels '(a e\
    \ i o u)))\n    (cond ((null? word) \"\")\n          ((char=? (char-code (car\
    \ word)) #\\a) (first vowels))\n          ((char=? (char-code (car word)) #\\\
    e) (first vowels))\n          ((char=? (char-code (car word)) #\\i) (first vowels))\n\
    \          ((char=? (char-code (car word)) #\\o) (first vowels))\n          ((char=?\
    \ (char-code (car word)) #\\u) (first vowels))\n          (else (first vowels)))))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (get-vowel (rest word))]))\n",
  "  (cond [(empty? word) \"\"]\n        [(vowel? (first word)) (first word)]\n  \
    \      [else (get-closest-vowel (rest word))]))\n", "  (define (vowel-check vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(equal? vowel (first word))\
    \ vowel]\n      [else (vowel-check (rest word) vowel)]))\n  (vowel-check (first\
    \ word) (substring (second word) 0 (- (length word) 2)))\n)\n", "  (cond [(empty?\
    \ word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n        [else (first word)]\n  )\n)\n", "  (define (helper word\
    \ vowel vowel-index)\n    (cond ((null? word) \"\")\n          ((char=? (car word)\
    \ vowel) vowel)\n          ((char=? (car word) (cdr word)) (helper (cdr word)\
    \ vowel (+ vowel-index 1)))\n          (else (helper (cdr word) vowel (+ vowel-index\
    \ 1)))))\n  (helper word 'u (- (length word) 1)))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nI like your solution, however it fails for \"ab\" which should\
    \ return \"\".\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\nI like your solution, however it fails\
    \ for \"ab\" which should return \"\".\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, however it fails for \"ab\" which should return \"\".\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "  (cond [(empty? word) \"\"]\n        [(vowel? (car\
    \ word)) (car word)]\n        [else (get_closest_vowel (cdr word))]))\n", "  (define\
    \ (vowel-check word)\n    (cond\n      [(empty? word) \"\"]\n      [(char=? (first\
    \ word) 'a) (vowel-check (rest word))]\n      [(char=? (first word) 'e) (vowel-check\
    \ (rest word))]\n      [(char=? (first word) 'i) (vowel-check (rest word))]\n\
    \      [(char=? (first word) 'o) (vowel-check (rest word))]\n      [(char=? (first\
    \ word) 'u) (vowel-check (rest word))]\n      [(char=? (first word) 'A) (vowel-check\
    \ (rest word))]\n      [(char=? (first word) 'E) (vowel-check (rest word))]\n\
    \      [(char=? (first word) 'I) (vowel-check (rest word))]\n      [(char=? (first\
    \ word) 'O) (vowel-check (rest word))]\n      [(char=? (first word) 'U) (vowel-check\
    \ (rest word))]\n      [else (vowel-check (rest word))]\n      ))\n  (vowel-check\
    \ word))\n", "  (define (vowel-check word)\n    (cond\n      [(empty? word) \"\
    \"]\n      [(char=? (first word) 'a) (cons (first word) (vowel-check (rest word)))]\n\
    \      [(char=? (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n\
    \      [(char=? (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n\
    \      [(char=? (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n\
    \      [(char=? (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n\
    \      [else (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((char=? (char-code\
    \ (car word)) #\\a) (first vowels))\n          ((char=? (char-code (car word))\
    \ #\\e) (first vowels))\n          ((char=? (char-code (car word)) #\\i) (first\
    \ vowels))\n          ((char=? (char-code (car word)) #\\o) (first vowels))\n\
    \          ((char=? (char-code (car word)) #\\u) (first vowels))\n          ((char=?\
    \ (char-code (car word)) #\\U) (first vowels))\n          ((char=? (char-code\
    \ (car word)) #\\y) (first vowels))\n          ((char=? (char-code (car word))\
    \ #\\g) (first vowels))\n          ((char=? (char-code (car word)) #\\U) (first\
    \ vowels))\n          ((char=? (char-code (car word)) #\\g) (first vowels))\n\
    \          ((char=? (char-code (car word)) #\\Y) (first vowels))\n          ((char=?\
    \ (char-code (car word)) #\\g) (first vowels))\n          ((char=? (char-code\
    \ (car word)) #\\G) (first vowels))\n          ((char=? (char-code (car word))\
    \ #\\g) (first vowels))\n          ((char=? (char-code (car word)) #\\G) (first\
    \ vowels))\n          ((char=? (char-code (car word)) #\\g) (first vowels))\n\
    \          ((char=? (char-code (car word)) #\\G) (first vowels))\n          ((char=?\
    \ (char-code (car word)) #\\g) (first vowels))\n          ((char=? (char-code\
    \ (car word)) #\\G) (first vowels))\n          ((char=? (char-code (car word))\
    \ #\\g) (first vowels))\n          ((char=? (char-code (car word)) #\\G) (first\
    \ vowels))\n          ((char=? (char-code (car word)) #\\g) (first vowels))\n\
    \          ((char=? (char-code (car word)) #\\G) (first vowels))\n          ((char=?\
    \ (char-code (car word)) #\\g) (first vowels))\n          ((char=? (char-code\
    \ (car ", "  (let loop ((word word)\n             (vowels '(a e i o u)))\n   \
    \ (cond ((null? word) \"\")\n          ((member (char-code (car word)) vowels)\
    \ (car word))\n          (else (loop (cdr word) (cons vowels))))))\n", "  (define\
    \ (vowel-check word)\n    (cond [(empty? word) \"\"]\n          [(char=? (first\
    \ word) 'a) (vowel-check (rest word))]\n          [(char=? (first word) 'e) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'i) (vowel-check (rest word))]\n\
    \          [(char=? (first word) 'o) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'u) (vowel-check (rest word))]\n          [else (vowel-check (rest\
    \ word))]))\n  (vowel-check word))\n", "  (define (vowel-check word)\n    (let\
    \ loop ((vowels '(a e i o u))\n               (vowel-count 0))\n      (cond ((null?\
    \ word) \"\")\n            ((char=? (car word) (car vowels)) \n             (add1\
    \ vowel-count))\n            (else (loop (cdr vowels) (add1 vowel-count)))))\n\
    \  (vowel-check word))\n", "  (define (vowel-check word)\n    (cond [(empty? word)\
    \ \"\"]\n          [(char=? (first word) 'a) (vowel-check (rest word))]\n    \
    \      [(char=? (first word) 'e) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'i) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'o) (vowel-check (rest word))]\n          [(char=? (first word) 'u) (vowel-check\
    \ (rest word))]\n          [else (vowel-check (rest word))]))\n  (vowel-check\
    \ word))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((empty? word) \"\")\n\
    \          ((member (char-after (last word) word) vowels) (last word))\n     \
    \     ((member (char-before (last word) word) vowels) (first word))\n        \
    \  (else (get-closest-vowel (char-before (last word) word) vowels)))))\n", " \
    \ (define (vowel-check word)\n    (cond [(empty? word) \"\"]\n          [(char=?\
    \ (first word) 'a) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'A) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'E) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'I) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'O) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'U) (cons (first word) (vowel-check (rest word)))]\n          [else\
    \ (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (let loop ((vowels\
    \ '(a e i o u))\n             (word word))\n    (cond ((null? word) \"\")\n  \
    \        ((member (car word) vowels) (car word))\n          ((member (cdr word)\
    \ vowels) (car word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (", "  (define (vowel-check vowel)\n    (cond [(string=? (vowel-check\
    \ vowel) vowel) vowel]\n          [else (vowel-check (cons vowel vowels))]))\n\
    \  (vowel-check (reverse word)))\n", "  (define (vowel-check word)\n    (cond\
    \ [(empty? word) \"\"]\n          [(char=? (first word) 'a) (vowel-check (rest\
    \ word))]\n          [(char=? (first word) 'e) (vowel-check (rest word))]\n  \
    \        [(char=? (first word) 'i) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'o) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'u) (vowel-check (rest word))]\n          [else (vowel-check (rest word))]))\n\
    \  (vowel-check word))\n", "  (let loop ((word word) (vowels '(a e i o u)))\n\
    \    (cond ((null? word) \"\")\n          ((char=? (car word) (car vowels)) (car\
    \ vowels))\n          ((char=? (car word) (cadr vowels)) (loop (cdr word) vowels))\n\
    \          ((char=? (car word) (caddr vowels)) (loop (cdr word) vowels))\n   \
    \       ((char=? (car word) (caddr vowels) (loop (cdr word) vowels))\n       \
    \    (loop (cdr word) vowels))\n          (else (loop (cdr word) vowels)))))\n",
  "  (define (helper word vowel vowels)\n    (cond\n      [(empty? vowels) \"\"]\n\
    \      [(equal? (first vowels) vowel) (helper (rest word) vowel (rest vowels))]\n\
    \      [else (helper (rest word) vowel (rest vowels))]))\n  (helper (reverse word)\
    \ vowels '(a e i o u)))\n", "  (define (vowel-check word)\n    (cond [(empty?\
    \ word) \"\"]\n          [(char-lower-case? (first word)) (first word)]\n    \
    \      [(char-upper-case? (first word)) (first word)]\n          [(char-title-case?\
    \ (first word)) (first word)]\n          [(char-symbol? (first word)) (first word)]\n\
    \          [(char-digit? (first word)) (first word)]\n          [(char-whitespace?\
    \ (first word)) (first word)]\n          [(char-ascii? (first word)) (first word)]\n\
    \          [(char-control? (first word)) (first word)]\n          [(char-graph?\
    \ (first word)) (first word)]\n          [(char-print? (first word)) (first word)]\n\
    \          [(char-other? (first word)) (first word)]\n          [(char-other?\
    \ (second word)) (first word)]\n          [(char-other? (third word)) (first word)]\n\
    \          [(char-other? (fourth word)) (first word)]\n          [(char-other?\
    \ (fifth word)) (first word)]\n          [(char-other? (sixth word)) (first word)]\n\
    \          [(char-other? (seventh word)) (first word)]\n          [(char-other?\
    \ (eighth word)) (first word)]\n          [(char-other? (ninth word)) (first word)]\n\
    \          [(char-other? (tenth word)) (first word)]\n          [(char-other?\
    \ (eleventh word)) (first word)]\n          [(char-other? (twelfth word)) (first\
    \ word)]\n          [(char-other? (thirteenth word)) (first word)]\n         \
    \ [(char-other? (fourteenth word)) (first word)]\n          [(char-other? (fifteenth\
    \ word)) (first word)]\n          [(char-other? (sixteenth word)) (first word)]\n\
    \          [(char-other? (seventeenth word)) (first word)]\n          [(char-other?\
    \ (eighteenth word)) (first word)]\n          [(char-other? (nineteenth word))\
    \ (first word)]\n          [(char-other? (twentieth word)) (first word)]\n   \
    \       [(char-other? (twenty-first word)) (first word)]\n          [(char-other?\
    \ (twenty-second word)) (first word", "  (let ((vowels '(a e i o u)))\n    (cond\
    \ ((null? word) \"\")\n          ((char-after (last word) ?a) (first vowels))\n\
    \          ((char-after (last word) ?e) (first vowels))\n          ((char-after\
    \ (last word) ?i) (first vowels))\n          ((char-after (last word) ?o) (first\
    \ vowels))\n          ((char-after (last word) ?u) (first vowels))\n         \
    \ (else (first vowels)))))\n", "  (let loop ((word word) (vowels '(a e i o u)))\n\
    \    (cond ((null? word) \"\")\n          ((char=? (car word) 'a) (loop (cdr word)\
    \ (cons vowels '(a e i o u))))\n          ((char=? (car word) 'e) (loop (cdr word)\
    \ (cons vowels '(a e i o u))))\n          ((char=? (car word) 'i) (loop (cdr word)\
    \ (cons vowels '(a e i o u))))\n          ((char=? (car word) 'o) (loop (cdr word)\
    \ (cons vowels '(a e i o u))))\n          ((char=? (car word) 'u) (loop (cdr word)\
    \ (cons vowels '(a e i o u))))\n          (else (loop (cdr word) vowels)))))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n  )\n)\n", " \
    \ (define (vowel-check vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n\
    \      [else (vowel-check (cdr vowel) word)])\n  )\n  (vowel-check (car word)\
    \ word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a)\
    \ (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n\
    \  )\n)\n", "  (define (vowel-count vowel)\n    (cond\n      [(char=? (char-code\
    \ vowel) 97) (+ 1 (vowel-count (char-code (char vowel -1))))]\n      [(char=?\
    \ (char-code vowel) 65) (+ 1 (vowel-count (char-code (char vowel -1))))]\n   \
    \   [(char=? (char-code vowel) 90) (+ 1 (vowel-count (char-code (char vowel -1))))]\n\
    \      [(char=? (char-code vowel) 48) (+ 1 (vowel-count (char-code (char vowel\
    \ -1))))]\n      [else 0]))\n  (define (vowel-count vowel)\n    (cond\n      [(char=?\
    \ (char-code vowel) 97) (+ 1 (vowel-count (char-code (char vowel -1))))]\n   \
    \   [(char=? (char-code vowel) 65) (+ 1 (vowel-count (char-code (char vowel -1))))]\n\
    \      [(char=? (char-code vowel) 90) (+ 1 (vowel-count (char-code (char vowel\
    \ -1))))]\n      [(char=? (char-code vowel) 48) (+ 1 (vowel-count (char-code (char\
    \ vowel -1))))]\n      [else 0]))\n  (define (vowel-count vowel)\n    (cond\n\
    \      [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code (char vowel\
    \ -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count (char-code (char\
    \ vowel -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count (char-code\
    \ (char vowel -1))))]\n      [(char=? (char-code vowel) 48) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [else 0]))\n  (define (vowel-count vowel)\n\
    \    (cond\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code\
    \ (char vowel -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 48) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [", "  (cond [(empty? word) \"\"]\n  \
    \      [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \        [else (cons (first word) (get_closest_vowel (rest word)))]))\n", "  (define\
    \ (vowel-count vowel)\n    (cond\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count\
    \ (char-code (substring vowel 0 1)))) ]\n      [(char=? (char-code vowel) 65)\
    \ (+ 1 (vowel-count (char-code (substring vowel 0 1)))) ]\n      [(char=? (char-code\
    \ vowel) 90) (+ 1 (vowel-count (char-code (substring vowel 0 1)))) ]\n      [(char=?\
    \ (char-code vowel) 122) (+ 1 (vowel-count (char-code (substring vowel 0 1))))\
    \ ]\n      [else 0]\n      ))\n  (define (vowel-count vowel)\n    (cond\n    \
    \  [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code (substring vowel\
    \ 0 1)))) ]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count (char-code\
    \ (substring vowel 0 1)))) ]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count\
    \ (char-code (substring vowel 0 1)))) ]\n      [(char=? (char-code vowel) 122)\
    \ (+ 1 (vowel-count (char-code (substring vowel 0 1)))) ]\n      [else 0]\n  \
    \    ))\n  (define (vowel-count vowel)\n    (cond\n      [(char=? (char-code vowel)\
    \ 97) (+ 1 (vowel-count (char-code (substring vowel 0 1)))) ]\n      [(char=?\
    \ (char-code vowel) 65) (+ 1 (vowel-count (char-code (substring vowel 0 1))))\
    \ ]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count (char-code (substring\
    \ vowel 0 1)))) ]\n      [(char=? (char-code vowel) 122) (+ 1 (vowel-count (char-code\
    \ (substring vowel 0 1)))) ]\n      [else 0]\n      ))\n  (define (vowel-count\
    \ vowel)\n    (cond\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code\
    \ (substring vowel 0 1)))) ]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (substring vowel 0 1)))) ]\n      [(char=? (char-code vowel) 90)\
    \ (+ 1 (vowel-count (char-code ", "  (let loop ((word word)\n             (vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member (first\
    \ word) vowels) (first word)]\n      [else (loop (rest word) (conj vowels (first\
    \ word)))]\n    )\n  )\n)\n", "  (cond [(empty? word) \"\"]\n        [(equal?\
    \ (first word) 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'e) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n        [else\
    \ (cons (first word) (get_closest_vowel (rest word)))]))\n", "  (let loop ((vowels\
    \ '(a e i o u))\n             (word word))\n    (cond ((null? word) \"\")\n  \
    \        ((char-before (car word) vowels) (car word))\n          ((char-before\
    \ (car word) vowels) (loop (cdr vowels) (cdr word)))\n          (else (loop (cdr\
    \ vowels) (cdr word)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks\
    \ for your answer! But I still don't understand how this works. Could you please\
    \ explain it step by step? Thanks!\n<|/ c |>\n<| c |>\nI added some comments.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! But I still don't\
    \ understand how this works. Could you please explain it step by step? Thanks!\n\
    <|/ c |>\n<| c |>\nI added some comments. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! But I still don't understand how this works. Could you\
    \ please explain it step by step? Thanks!\n<|/ c |>\n<| a tags=racket,scheme |>\n\
    <code>", "  (cond [(empty? word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n        [else (get_closest_vowel (rest\
    \ word))]))\n", "  (let ([vowels '(a e i o u)])\n    (cond\n      [(empty? word)\
    \ \"\"]\n      [(member (first word) vowels) (first word)]\n      [else (get_closest_vowel\
    \ (rest word))])))\n", "  (define (helper word vowel)\n    (cond [(empty? word)\
    \ \"\"]\n          [(char=? (car word) vowel) vowel]\n          [(char=? (car\
    \ word) (cdr word)) (helper (cdr word) vowel)]\n          [else (helper (cdr word)\
    \ vowel)]))\n  (helper word 'u))\n", "  (define (vowel-search word vowel)\n  \
    \  (cond [(empty? word) \"\"]\n          [(equal? (first word) vowel) (vowel-search\
    \ (rest word) vowel)]\n          [else (vowel-search (rest word) (first vowel))]))\n\
    \  (vowel-search word 'a))\n", "  (define (vowel-check word)\n    (cond [(empty?\
    \ word) \"\"]\n          [(equal? (first word) 'a) (vowel-check (rest word))]\n\
    \          [(equal? (first word) 'e) (vowel-check (rest word))]\n          [(equal?\
    \ (first word) 'i) (vowel-check (rest word))]\n          [(equal? (first word)\
    \ 'o) (vowel-check (rest word))]\n          [(equal? (first word) 'u) (vowel-check\
    \ (rest word))]\n          [else (vowel-check (rest word))]))\n  (vowel-check\
    \ word))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word) 'a)\
    \ (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (cons (first\
    \ word) (get_closest_vowel (rest word)))]))\n", "  (define (vowel-check word)\n\
    \    (define (vowel-check word i)\n      (cond [(char=? (char-code (car word))\
    \ (char #\\a)) (cons (car word) vowel-check (cdr word) i)]\n            [(char=?\
    \ (char-code (car word)) (char #\\e)) (cons (car word) vowel-check (cdr word)\
    \ i)]\n            [(char=? (char-code (car word)) (char #\\i)) (cons (car word)\
    \ vowel-check (cdr word) i)]\n            [(char=? (char-code (car word)) (char\
    \ #\\o)) (cons (car word) vowel-check (cdr word) i)]\n            [(char=? (char-code\
    \ (car word)) (char #\\u)) (cons (car word) vowel-check (cdr word) i)]\n     \
    \       [else (vowel-check (cdr word) i)]))\n    (vowel-check word 0))\n  (define\
    \ (vowel-check word i)\n    (cond [(char=? (char-code (car word)) (char #\\a))\
    \ (cons (car word) vowel-check (cdr word) i)]\n            [(char=? (char-code\
    \ (car word)) (char #\\e)) (cons (car word) vowel-check (cdr word) i)]\n     \
    \       [(char=? (char-code (car word)) (char #\\i)) (cons (car word) vowel-check\
    \ (cdr word) i)]\n            [(char=? (char-code (car word)) (char #\\o)) (cons\
    \ (car word) vowel-check (cdr word) i)]\n            [(char=? (char-code (car\
    \ word)) (char #\\u)) (cons (car word) vowel-check (cdr word) i)]\n          \
    \  [else (vowel-check (cdr word) i)]))\n  (vowel-check word 0))\n</code>\n<|/\
    \ a tags=racket,scheme |>\n<| c |>\nI like your solution, but I wonder why you\
    \ didn't use `(define (vowel-check word i)` instead of `(define (vowel-check word\
    \ i)`\n<|/ c |>\n<| c |>\nI didn't use `(define (vowel-check word i)` because\
    \ I thought it would be more clear to understand what happens inside `(vowel-check ",
  "  (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond ((empty?\
    \ word) \"\")\n          ((member (first word) vowels) (first word))\n       \
    \   ((member (first word) '(A E I O U)) (first word))\n          ((member (first\
    \ word) '(a e i o u)) (first word))\n          ((member (first word) '(A E I O\
    \ U)) (first word))\n          ((member (first word) '(a e i o u)) (first word))\n\
    \          ((member (first word) '(A E I O U)) (first word))\n          ((member\
    \ (first word) '(a e i o u)) (first word))\n          ((member (first word) '(A\
    \ E I O U)) (first word))\n          ((member (first word) '(a e i o u)) (first\
    \ word))\n          ((member (first word) '(A E I O U)) (first word))\n      \
    \    ((member (first word) '(a e i o u)) (first word))\n          ((member (first\
    \ word) '(A E I O U)) (first word))\n          ((member (first word) '(a e i o\
    \ u)) (first word))\n          ((member (first word) '(A E I O U)) (first word))\n\
    \          ((member (first word) '(a e i o u)) (first word))\n          ((member\
    \ (first word) '(A E I O U)) (first word))\n          ((member (first word) '(a\
    \ e i o u)) (first word))\n          ((member (first word) '(A E I O U)) (first\
    \ word))\n          ((member (first word) '(a e i o u)) (first word))\n      \
    \    ((member (first word) '(A E I O U)) (first word))\n          ((member (first\
    \ word) '(a e i o u)) (first word))\n          ((member (first word) '(A E I O\
    \ U)) (first word))\n          ((member (first word) '(a e i o u)) (first word))\n\
    \          ((member (first word) '(A E I O U)) (first word))\n          ((member\
    \ (first word) '(", "  (define (vowel-search word vowel)\n    (cond [(empty? word)\
    \ \"\"]\n          [(equal? (first word) vowel) (vowel-search (rest word) vowel)]\n\
    \          [(equal? (first word) (substring (second word) 0 1)) (vowel-search\
    \ (rest word) (substring (second word) 0 1))]\n          [else (vowel-search (rest\
    \ word) (substring (second word) 0 1))]))\n  (vowel-search word (substring (second\
    \ word) 0 1)))\n", "  (define (vowel-check word vowel)\n    (cond\n      [(string=?\
    \ vowel word) vowel]\n      [else (vowel-check (substring word (+ 0 (string-length\
    \ word)) 1) vowel)]\n      ))\n  (vowel-check word (first vowels)))\n", "  (define\
    \ (vowel-test vowel)\n    (cond\n      [(char=? (char-code vowel) 97) (char=?\
    \ (char-code vowel) 65)]\n      [(char=? (char-code vowel) 65) (char=? (char-code\
    \ vowel) 97)]\n      [(char=? (char-code vowel) 65) (char=? (char-code vowel)\
    \ 90)]\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 90)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 88)]\n      [(char=?\
    \ (char-code vowel) 97) (char=? (char-code vowel) 88)]\n      [(char=? (char-code\
    \ vowel) 65) (char=? (char-code vowel) 87)]\n      [(char=? (char-code vowel)\
    \ 97) (char=? (char-code vowel) 87)]\n      [(char=? (char-code vowel) 65) (char=?\
    \ (char-code vowel) 86)]\n      [(char=? (char-code vowel) 97) (char=? (char-code\
    \ vowel) 86)]\n      [(char=? (char-code vowel) 65) (char=? (char-code vowel)\
    \ 85)]\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 85)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 84)]\n      [(char=?\
    \ (char-code vowel) 97) (char=? (char-code vowel) 84)]\n      [(char=? (char-code\
    \ vowel) 65) (char=? (char-code vowel) 83)]\n      [(char=? (char-code vowel)\
    \ 97) (char=? (char-code vowel) 83)]\n      [(char=? (char-code vowel) 65) (char=?\
    \ (char-code vowel) 82)]\n      [(char=? (char-code vowel) 97) (char=? (char-code\
    \ vowel) 82)]\n      [(char=? (char-code vowel) 65) (char=? (char-code vowel)\
    \ 81)]\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 81)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 80)]\n      [(char=?\
    \ (char-code vowel) 97) (char=? (char-", "  (let loop ((word word) (vowels '(a\
    \ e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member (first word)\
    \ vowels) (first word)]\n      [else (loop (rest word) (cons vowels (rest word)))]\n\
    \    )\n  )\n)\n", "  (define (vowel-check word)\n    (cond [(empty? word) \"\"\
    ]\n          [(char=? (first word) 'a) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'e) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'i) (vowel-check (rest word))]\n          [(char=? (first word) 'o) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'u) (vowel-check (rest word))]\n\
    \          [else (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (let\
    \ ((vowels '(a e i o u)))\n    (let loop ((word word)\n               (vowels\
    \ vowels)\n               (found '()))\n      (cond ((null? word) '())\n     \
    \       ((member (car word) vowels) found)\n            (else (loop (cdr word)\
    \ (cons (car word) vowels) (cons (car word) found)))))))\n", "  (cond\n    [(empty?\
    \ word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (first word)]))\n", "  (define (vowel-check vowel word)\n\
    \    (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first word)) (vowel-check\
    \ vowel (rest word))]\n      [else (vowel-check vowel (rest word))]))\n  (vowel-check\
    \ (first word) word))\n", "  (define (vowel-check vowel word)\n    (cond\n   \
    \   [(empty? word) \"\"]\n      [(equal? (first word) vowel) (vowel-check vowel\
    \ (rest word))]\n      [else (vowel-check vowel (rest word))]\n      ))\n  (vowel-check\
    \ (first word) word))\n", "  (let loop ((word word) (vowels '(a e i o u)))\n \
    \   (cond ((null? word) \"\")\n          ((char-after (car word) vowels) (car\
    \ word))\n          ((char-after (car word) vowels) (loop (cdr word) vowels))\n\
    \          (else (loop (cdr word) vowels)))))\n", "  (define (vowel-check vowel)\n\
    \    (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 65)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97)]\n      [else\
    \ vowel]))\n  (define (consonant-check consonant)\n    (cond\n      [(char=? (char-code\
    \ consonant) 97) (char=? (char-code consonant) 65)]\n      [(char=? (char-code\
    \ consonant) 65) (char=? (char-code consonant) 97)]\n      [else consonant]))\n\
    \  (define (vowel-consonant-check vowel consonant)\n    (cond\n      [(char=?\
    \ (char-code vowel) 97) (char=? (char-code consonant) 65)]\n      [(char=? (char-code\
    \ vowel) 65) (char=? (char-code consonant) 97)]\n      [else (consonant-check\
    \ consonant)]))\n  (define (vowel-consonant-check-1 vowel consonant)\n    (cond\n\
    \      [(char=? (char-code vowel) 97) (char=? (char-code consonant) 65)]\n   \
    \   [(char=? (char-code vowel) 65) (char=? (char-code consonant) 97)]\n      [else\
    \ (consonant-check consonant)]))\n  (define (vowel-consonant-check-2 vowel consonant)\n\
    \    (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code consonant)\
    \ 65)]\n      [(char=? (char-code vowel) 65) (char=? (char-code consonant) 97)]\n\
    \      [else (consonant-check consonant)]))\n  (define (vowel-consonant-check-3\
    \ vowel consonant)\n    (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code\
    \ consonant) 65)]\n      [(char=? (char-code vowel) 65) (char=? (char-code consonant)\
    \ 97)]\n      [else (consonant-check consonant)]))\n  (define (vowel-consonant-check-4\
    \ vowel consonant)\n    (cond\n      [(char=? (char-code vowel) 97) (", "  (let\
    \ ((vowels '(a e i o u)))\n    (let loop ((word word) (vowels vowels))\n     \
    \ (cond ((null? word) \"\")\n            ((char-before (car word) (car vowels))\
    \ (car vowels))\n            (else (loop (cdr word) vowels))))))\n", "  (define\
    \ (vowel-search word vowel)\n    (cond ((null? word) \"\")\n          ((char=?\
    \ (car word) vowel) (car word))\n          ((char=? (car word) (cdr word)) (vowel-search\
    \ (cdr word) vowel))\n          (else (vowel-search (cdr word) vowel))))\n  (vowel-search\
    \ word 'a'))\n", "  (define (vowel-check word)\n    (define (vowel-check word\
    \ index)\n      (cond ((null? word) \"\")\n            ((equal? (char-code (car\
    \ word)) 97) (vowel-check (cdr word) (+ index 1)))\n            ((equal? (char-code\
    \ (car word)) 65) (vowel-check (cdr word) (+ index 2)))\n            ((equal?\
    \ (char-code (car word)) 97) (vowel-check (cdr word) (+ index 3)))\n         \
    \   ((equal? (char-code (car word)) 65) (vowel-check (cdr word) (+ index 4)))\n\
    \            (else (vowel-check (cdr word) (+ index 5)))))\n    (vowel-check word\
    \ 0))\n  (vowel-check word 0))\n", "  (define (vowel-search word)\n    (let loop\
    \ ((vowels '(a e i o u))\n               (vowel-count 0))\n      (cond ((null?\
    \ word) \"\")\n            ((char=? (car word) (car vowels)) (car vowels))\n \
    \           (else (loop (cdr vowels) (+ vowel-count 1))))))\n  (vowel-search word))\n",
  "  (define (vowel-check vowel word)\n    (cond ((null? word) \"\")\n          ((char=?\
    \ (car word) vowel) (car word))\n          ((char=? (car word) (cdr word)) (vowel-check\
    \ (cdr word) word))\n          ((char=? (car word) (cdr word)) (vowel-check (cdr\
    \ word) word))\n          (else (vowel-check (cdr word) word))))\n  (vowel-check\
    \ (car word) word))\n", "  (define (helper word vowel)\n    (cond\n      [(empty?\
    \ word) \"\"]\n      [(equal? (first word) vowel) (second word)]\n      [else\
    \ (helper (rest word) (cons (first word) vowel))]\n      ))\n  (helper word '()))\n",
  "  (cond [(empty? word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n        [else (first word)]\n        ))\n",
  "  (define (helper word vowel index count)\n    (cond\n      [(empty? word) \"\"\
    ]\n      [(equal? vowel (first word)) (helper word vowel (cdr word) count)]\n\
    \      [(equal? (first word) vowel) (helper (cdr word) vowel (cdr index) count)]\n\
    \      [(equal? (first word) (first vowel)) (helper (cdr word) (first vowel) (cdr\
    \ index) count)]\n      [(equal? (first word) (first vowel) (first index)) (helper\
    \ (cdr word) (first vowel) (cdr index) (cdr count))]\n      [else (helper (cdr\
    \ word) (first vowel) (cdr index) (cdr count))]\n    )\n  )\n  (helper word 'a\
    \ '0 0)\n)\n", "  (define (vowel-check word)\n    (let loop ((vowels '(a e i o\
    \ u))\n               (vowel-count 0))\n      (cond ((null? word) \"\")\n    \
    \        ((member (car word) vowels) (cons (car word) vowel-count))\n        \
    \    (else (loop (cdr word) (+ vowel-count 1))))))\n  (vowel-check word))\n",
  "  (define (helper word vowel)\n    (cond [(empty? word) \"\"]\n          [(equal?\
    \ (first word) vowel) (helper (rest word) vowel)]\n          [else (helper (rest\
    \ word) (first vowel))]))\n  (helper word 'a))\n", "  (define (vowel-count vowel)\n\
    \    (cond\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code\
    \ (char vowel -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 122) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [else 0]))\n  (define (vowel-count vowel)\n\
    \    (cond\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code\
    \ (char vowel -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 122) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [else 0]))\n  (define (vowel-count vowel)\n\
    \    (cond\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code\
    \ (char vowel -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 122) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [else 0]))\n  (define (vowel-count vowel)\n\
    \    (cond\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code\
    \ (char vowel -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 122) (+ 1 (vowel-count\
    \ (char-code (char vowel -1", "  (define (vowel-check vowel word)\n    (cond\n\
    \      [(string=? vowel word) vowel]\n      [else (vowel-check (cdr vowel) word)])\n\
    \  )\n  (vowel-check (car word) word))\n", "  (define (vowel-check word)\n   \
    \ (cond\n      [(empty? word) \"\"]\n      [(char=? (first word) 'a) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [(char=? (first word) 'e) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [(char=? (first word) 'i) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [(char=? (first word) 'o) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [(char=? (first word) 'u) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [(char=? (first word) 'A) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [(char=? (first word) 'E) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [(char=? (first word) 'I) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [(char=? (first word) 'O) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [(char=? (first word) 'U) (cons (first\
    \ word) (vowel-check (rest word)))]\n      [else (cons (first word) (vowel-check\
    \ (rest word)))]))\n  (vowel-check word))\n", "  (let loop ((word word)\n    \
    \         (vowels '(a e i o u))\n             (vowel-count 0))\n    (cond ((null?\
    \ word) \"\")\n          ((member (car word) vowels) (cons (car word) vowels))\n\
    \          ((member (car word) vowels) (loop (cdr word) (cons (car word) vowels)\
    \ (+ vowel-count 1)))\n          ((member (car word) vowels) (loop (cdr word)\
    \ (cons (car word) vowels) vowel-count))\n          (else (loop (cdr word) (cons\
    \ (car word) vowels) vowel-count)))))\n", "  (define (helper word vowel index\
    \ vowel-index)\n    (cond [(null? vowel-index) \"\"]\n          [(equal? (substring\
    \ vowel 0 1) (substring word 0 index))\n           (helper (substring word 0 index)\
    \ (cons vowel vowel-index) (+ index 1) vowel-index)]\n          [else (helper\
    \ (substring word 0 index) (cons vowel vowel-index) (+ index 1) vowel-index)]))\n\
    \  (helper word '() 0 0))\n", "  (define (helper word vowel vowels)\n    (cond\
    \ [(empty? vowels) \"\"]\n          [(equal? (first vowels) vowel) (helper (rest\
    \ word) vowel (rest vowels))]\n          [else (helper (rest word) vowel (append\
    \ vowels (first vowels)))]))\n  (helper word (first word) (list word)))\n", " \
    \ (define (vowel-test c)\n    (cond\n      [(char=? (char-code c) 97) (char=?\
    \ (char-code c) 65)]\n      [(char=? (char-code c) 65) (char=? (char-code c) 90)]\n\
    \      [(char=? (char-code c) 48) (char=? (char-code c) 57)]\n      [else false]))\n\
    \  (define (vowel-test c)\n    (cond\n      [(char=? (char-code c) 97) (char=?\
    \ (char-code c) 65)]\n      [(char=? (char-code c) 65) (char=? (char-code c) 90)]\n\
    \      [(char=? (char-code c) 48) (char=? (char-code c) 57)]\n      [else false]))\n\
    \  (define (vowel-test c)\n    (cond\n      [(char=? (char-code c) 97) (char=?\
    \ (char-code c) 65)]\n      [(char=? (char-code c) 65) (char=? (char-code c) 90)]\n\
    \      [(char=? (char-code c) 48) (char=? (char-code c) 57)]\n      [else false]))\n\
    \  (define (vowel-test c)\n    (cond\n      [(char=? (char-code c) 97) (char=?\
    \ (char-code c) 65)]\n      [(char=? (char-code c) 65) (char=? (char-code c) 90)]\n\
    \      [(char=? (char-code c) 48) (char=? (char-code c) 57)]\n      [else false]))\n\
    \  (define (vowel-test c)\n    (cond\n      [(char=? (char-code c) 97) (char=?\
    \ (char-code c) 65)]\n      [(char=? (char-code c) 65) (char=? (char-code c) 90)]\n\
    \      [(char=? (char-code c) 48) (char=? (char-code c) 57)]\n      [else false]))\n\
    \  (define (vowel-test c)\n    (cond\n      [(char=? (char-code c) 97) (char=?\
    \ (char-code c) 65)]\n      [(char=? (char-code c) 65) (char=? (char-code c) 90)]\n\
    \      [(char=? (char-code c) 48) (char=? (char-code c) 57)]\n      [else false]))\n\
    \  (define ", "  (define (helper word vowel)\n    (cond\n      [(empty? word)\
    \ \"\"]\n      [(equal? (first word) vowel) (second word)]\n      [else (helper\
    \ (rest word) (cons (first word) vowel))]))\n  (helper (reverse word) '()))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((char-after\
    \ (car word) (car vowels)) (car vowels))\n          ((char-after (car word) (car\
    \ (cdr vowels))) (car (cdr vowels)))\n          ((char-after (car word) (car (cdr\
    \ (cdr vowels))))\n           (get_closest_vowel (cdr (cdr word))))\n        \
    \  (else (get-closest-vowel (cdr word)))))\n", "  (define (vowel-check word index)\n\
    \    (cond\n      [(char=? (char-code (car word)) (char #\\a)) (cons (char-code\
    \ (car word)) vowel-check (+ index 1))]\n      [(char=? (char-code (car word))\
    \ (char #\\e)) (cons (char-code (car word)) vowel-check (+ index 1))]\n      [(char=?\
    \ (char-code (car word)) (char #\\i)) (cons (char-code (car word)) vowel-check\
    \ (+ index 1))]\n      [(char=? (char-code (car word)) (char #\\o)) (cons (char-code\
    \ (car word)) vowel-check (+ index 1))]\n      [(char=? (char-code (car word))\
    \ (char #\\u)) (cons (char-code (car word)) vowel-check (+ index 1))]\n      [else\
    \ (cons (char-code (car word)) vowel-check (+ index 1))]))\n  (vowel-check word\
    \ 0))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (first word)]))\n", "  (cond\
    \ [(empty? word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n        [else (get-closest-vowel (rest\
    \ word))]))\n", "  (let ((vowels '(a e i o u)))\n    (let loop ((word word) (vowels\
    \ vowels))\n      (cond ((null? word) \"\")\n            ((char=? (car word) (car\
    \ vowels)) (loop (cdr word) vowels))\n            (else (loop (cdr word) (cdr\
    \ vowels)))))))\n", "  (define (vowel-finder start end)\n    (cond\n      [(char=?\
    \ (char-code (substring word start)) #\\a) (substring word (+ start 1))]\n   \
    \   [(char=? (char-code (substring word start)) #\\e) (substring word (+ start\
    \ 1))]\n      [(char=? (char-code (substring word start)) #\\i) (substring word\
    \ (+ start 1))]\n      [(char=? (char-code (substring word start)) #\\o) (substring\
    \ word (+ start 1))]\n      [(char=? (char-code (substring word start)) #\\u)\
    \ (substring word (+ start 1))]\n      [else (substring word start)]\n    )\n\
    \  )\n  (define (vowel-finder start end)\n    (cond\n      [(char=? (char-code\
    \ (substring word start)) #\\a) (substring word (+ start 1))]\n      [(char=?\
    \ (char-code (substring word start)) #\\e) (substring word (+ start 1))]\n   \
    \   [(char=? (char-code (substring word start)) #\\i) (substring word (+ start\
    \ 1))]\n      [(char=? (char-code (substring word start)) #\\o) (substring word\
    \ (+ start 1))]\n      [(char=? (char-code (substring word start)) #\\u) (substring\
    \ word (+ start 1))]\n      [else (substring word start)]\n    )\n  )\n  (define\
    \ (vowel-finder start end)\n    (cond\n      [(char=? (char-code (substring word\
    \ start)) #\\a) (substring word (+ start 1))]\n      [(char=? (char-code (substring\
    \ word start)) #\\e) (substring word (+ start 1))]\n      [(char=? (char-code\
    \ (substring word start)) #\\i) (substring word (+ start 1))]\n      [(char=?\
    \ (char-code (substring word start)) #\\o) (substring word (+ start 1))]\n   \
    \   [(char=? (char-code (substring word start)) #\\u) (substring word (+ start\
    \ 1))]\n      [else (substring word start)]\n    )\n  )\n  (define (vowel-finder\
    \ start end)\n    (cond\n      [(char=? (char-code (substring word start)) #\\",
  "  (define (helper word vowel index count)\n    (cond\n      [(empty? word) \"\"\
    ]\n      [(equal? vowel (first word)) (helper (rest word) vowel (+ index 1) count)]\n\
    \      [(equal? (first word) vowel) (helper (rest word) vowel (+ index 1) (+ count\
    \ 1))]\n      [(equal? (first word) (first word)) (helper (rest word) (first word)\
    \ (+ index 1) count)]\n      [else (helper (rest word) (first word) (+ index 1)\
    \ count)]))\n  (helper word (first word) 0 0))\n", "  (define (helper word vowel)\n\
    \    (cond [(empty? word) \"\"]\n          [(char=? (first word) vowel) vowel]\n\
    \          [else (helper (rest word) (char=? (first word) vowel))]))\n  (helper\
    \ word 'a))\n", "  (let loop ((word word)\n             (vowels '(a e i o u)))\n\
    \    (cond ((null? word) \"\")\n          ((char=? (car word) 'a) (loop (cdr word)\
    \ vowels))\n          ((char=? (car word) 'e) (loop (cdr word) vowels))\n    \
    \      ((char=? (car word) 'i) (loop (cdr word) vowels))\n          ((char=? (car\
    \ word) 'o) (loop (cdr word) vowels))\n          ((char=? (car word) 'u) (loop\
    \ (cdr word) vowels))\n          (else (loop (cdr word) vowels)))))\n", "  (let\
    \ loop ((word word)\n             (vowels '(a e i o u)))\n    (cond ((null? word)\
    \ \"\")\n          ((member (char-code (car word)) vowels) (car word))\n     \
    \     (else (loop (cdr word) (cons (car word) vowels)))))))\n", "  (define (vowel-check\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(char=? (first word) 'a)\
    \ (cons (first word) (vowel-check (rest word)))]\n      [(char=? (first word)\
    \ 'e) (cons (first word) (vowel-check (rest word)))]\n      [(char=? (first word)\
    \ 'i) (cons (first word) (vowel-check (rest word)))]\n      [(char=? (first word)\
    \ 'o) (cons (first word) (vowel-check (rest word)))]\n      [(char=? (first word)\
    \ 'u) (cons (first word) (vowel-check (rest word)))]\n      [else (vowel-check\
    \ (rest word))]\n      ))\n  (vowel-check word))\n", "  (let loop ((word word)\
    \ (vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((char=? (car\
    \ word) 'a) (loop (cdr word) vowels))\n          ((char=? (car word) 'e) (loop\
    \ (cdr word) vowels))\n          ((char=? (car word) 'i) (loop (cdr word) vowels))\n\
    \          ((char=? (car word) 'o) (loop (cdr word) vowels))\n          ((char=?\
    \ (car word) 'u) (loop (cdr word) vowels))\n          (else (loop (cdr word) vowels)))))\n",
  "  (define (vowel-test word)\n    (let loop ((vowels '(a e i o u))\n           \
    \    (i 0))\n      (if (null? vowels)\n          (if (= i 0)\n              (if\
    \ (= (length word) 0)\n                  \"\"\n                  (substring word\
    \ 0 (- (length word) i)))\n              (substring word 0 (- (length word) i)))\n\
    \          (let ((v (car vowels)))\n            (if (= i (- (length word) 1))\n\
    \                (if (= (length word) 1)\n                    \"\"\n         \
    \           (substring word 0 (- (length word) i)))\n                (if (= (length\
    \ word) 2)\n                    (if (= (substring word 0 (- (length word) 2))\
    \ v)\n                        (substring word 0 (- (length word) i)))\n      \
    \              (if (= (substring word 0 (- (length word) 1)) v)\n            \
    \            (substring word 0 (- (length word) i))))\n                (if (=\
    \ (length word) 3)\n                    (if (= (substring word 0 (- (length word)\
    \ 2)) v)\n                        (substring word 0 (- (length word) i)))\n  \
    \                  (if (= (substring word 0 (- (length word) 1)) v)\n        \
    \                (substring word 0 (- (length word) i))))\n                (if\
    \ (= (length word) 4)\n                    (if (= (substring word 0 (- (length\
    \ word) 2)) v)\n                        (substring word 0 (- (length word) i)))\n\
    \                    (if (= (substring word 0 (- (length word) 1)) v)\n      \
    \                  (substring word 0 (- (length word) i))))\n                (if\
    \ (= (length word) 5)\n                    (if (= (substring word 0 (- (length\
    \ word) 2)) v)\n                        (substring word 0 (- (length word) i)))\n\
    \                    (if (= (substring word 0 (- (length word) 1)) v)\n      \
    \                  (substring word 0 (- (length word) i))))\n                (if\
    \ (= (length word) 6)\n                    (if (= (substring word 0 (- (length\
    \ word) 2)) v)\n                        (substring word 0 (- (length word) i)))\n\
    \                    (if (= (substring word 0 (- (length word) 1)) v)\n      \
    \                  (substring word 0 (- (length word) i))))\n                (if\
    \ (= (length word) 7)\n                    (if (= (substring word 0 (- (length\
    \ word) 2)) v)\n                        (substring word 0 (- (length word) i)))\n\
    \                    (if (= (substring word 0 (- (length word) 1)) v)\n      \
    \                  (substring word 0 (- (length word) i))))\n                (if\
    \ (", "  (define (helper word vowel vowel-index vowel-count)\n    (cond [(vowel-count\
    \ > 0)\n           (cond [(vowel-index > 0)\n                  (helper (substring\
    \ word 0 vowel-index) vowel (- vowel-index 1) (- vowel-count 1))]\n          \
    \       [(vowel-index = 0)\n                  (if (equal? (char-code vowel) (char-code\
    \ (substring word vowel-index vowel-count)))\n                      (substring\
    \ word 0 vowel-index)\n                      (helper (substring word 0 vowel-index)\
    \ vowel (- vowel-index 1) (- vowel-count 1)))]\n                 [else\n     \
    \             (helper (substring word 0 vowel-index) vowel (- vowel-index 1) (-\
    \ vowel-count 1))])]\n          [else\n           (if (equal? (char-code vowel)\
    \ (char-code (substring word vowel-index vowel-count)))\n              (substring\
    \ word 0 vowel-index)\n              (helper (substring word 0 vowel-index) vowel\
    \ (- vowel-index 1) (- vowel-count 1)))])\n  (helper word 'a 0 0))\n", "  (define\
    \ (vowel-search vowel word)\n    (cond [(empty? word) \"\"]\n          [(equal?\
    \ (first word) vowel) (vowel-search vowel (rest word))]\n          [else (vowel-search\
    \ (first word) (cons (first word) (second word)))]))\n  (vowel-search 'u (reverse\
    \ word)))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a)\
    \ (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (get-closest-vowel\
    \ (rest word))]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n\
    \  )\n)\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n \
    \         ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char-after (last word) vowels) (first word)) (first word))\n\
    \          ((equal? (char", "  (cond [(empty? word) \"\"]\n        [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e)\
    \ (get_closest_vowel (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n        [else\
    \ (first word)]))\n", "  (define (vowel-search word)\n    (let loop ((word word)\n\
    \               (vowels '(a e i o u)))\n      (cond ((null? word) \"\")\n    \
    \        ((vowel? (first word)) (first word))\n            (else (loop (rest word)\
    \ (cons (first word) vowels)))))\n  (vowel-search word))\n", "  (let loop ((word\
    \ word)\n             (vowels '(a e i o u)))\n    (cond ((empty? word) \"\")\n\
    \          ((member (char-code (car word)) vowels) (car word))\n          ((member\
    \ (char-code (cadr word)) vowels) (cadr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char", "  (define (vowel-check\
    \ vowel)\n    (cond ((char=? (char-code vowel) 97) (char=? (char-code vowel) 65))\n\
    \          ((char=? (char-code vowel) 65) (char=? (char-code vowel) 97))\n   \
    \       ((char=? (char-code vowel) 65) (char=? (char-code vowel) 65))\n      \
    \    ((char=? (char-code vowel) 97) (char=? (char-code vowel) 97))\n         \
    \ ((char=? (char-code vowel) 97) (char=? (char-code vowel) 97))\n          ((char=?\
    \ (char-code vowel) 65) (char=? (char-code vowel) 97))\n          ((char=? (char-code\
    \ vowel) 65) (char=? (char-code vowel) 97))\n          ((char=? (char-code vowel)\
    \ 97) (char=? (char-code vowel) 97))\n          ((char=? (char-code vowel) 97)\
    \ (char=? (char-code vowel) 97))\n          ((char=? (char-code vowel) 65) (char=?\
    \ (char-code vowel) 97))\n          ((char=? (char-code vowel) 65) (char=? (char-code\
    \ vowel) 97))\n          ((char=? (char-code vowel) 97) (char=? (char-code vowel)\
    \ 97))\n          ((char=? (char-code vowel) 97) (char=? (char-code vowel) 97))\n\
    \          ((char=? (char-code vowel) 65) (char=? (char-code vowel) 97))\n   \
    \       ((char=? (char-code vowel) 65) (char=? (char-code vowel) 97))\n      \
    \    ((char=? (char-code vowel) 97) (char=? (char-code vowel) 97))\n         \
    \ ((char=? (char-code vowel) 97) (char=? (char-code vowel) 97))\n          ((char=?\
    \ (char-code vowel) 65) (char=? (char-code vowel) 97))\n          ((char=? (char-code\
    \ vowel) 65) (char=? (char-code vowel) 97))\n          ((char=? (char-code vowel)\
    \ 97) (char=? (char-code vowel) 97))\n          ((char=? (char-code vowel) 97)\
    \ (char=? (char-code vowel) 97))\n          ((char=? (char-code vowel) 65) (char=?\
    \ (char-code ", "  (let loop ((word word)\n             (vowels '(a e i o u))\n\
    \             (vowel-count 0))\n    (cond\n      [(empty? word) \"\"]\n      [(member\
    \ (first word) vowels) (first word)]\n      [(member (first word) vowels) (loop\
    \ (rest word) (cons vowels vowel-count))\n       (loop (rest word) (cons vowels\
    \ vowel-count))]\n      [else (loop (rest word) (cons vowels vowel-count))]))))\n",
  "  (define (vowel-check vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n\
    \      [(string=? (substring word (- vowel 1)) vowel) vowel]\n      [else \"\"\
    ]))\n  (vowel-check (vowel-check word (substring word (- 1 (string-length word)))\
    \ ) word))\n", "  (let loop ((word word) (vowels '(a e i o u)))\n    (cond ((null?\
    \ word) \"\")\n          ((char=? (car word) (car vowels)) (car vowels))\n   \
    \       ((char=? (car word) (cadr vowels)) (loop (cdr word) vowels))\n       \
    \   ((char=? (car word) (caddr vowels)) (loop (cdr word) vowels))\n          ((char=?\
    \ (car word) (cadddr vowels)) (loop (cdr word) vowels))\n          (else (loop\
    \ (cdr word) vowels)))))\n", "  (let ([vowels '(a e i o u)])\n    (cond [(empty?\
    \ word) \"\"]\n          [(member (first word) vowels) (first word)]\n       \
    \   [else (get_closest_vowel (rest word))]))) \n", "  (define (vowel-count vowel)\n\
    \    (cond\n      [(string=? (vowel-char vowel) 'a) (+ 1 (vowel-count (vowel-next\
    \ vowel)))]\n      [(string=? (vowel-char vowel) 'e) (+ 1 (vowel-count (vowel-next\
    \ vowel)))]\n      [(string=? (vowel-char vowel) 'i) (+ 1 (vowel-count (vowel-next\
    \ vowel)))]\n      [(string=? (vowel-char vowel) 'o) (+ 1 (vowel-count (vowel-next\
    \ vowel)))]\n      [(string=? (vowel-char vowel) 'u) (+ 1 (vowel-count (vowel-next\
    \ vowel)))]\n      [else 0]))\n  (define (vowel-char vowel)\n    (cond\n     \
    \ [(string=? (vowel-next vowel) 'a) (vowel-char vowel)]\n      [(string=? (vowel-next\
    \ vowel) 'e) (vowel-char vowel)]\n      [(string=? (vowel-next vowel) 'i) (vowel-char\
    \ vowel)]\n      [(string=? (vowel-next vowel) 'o) (vowel-char vowel)]\n     \
    \ [(string=? (vowel-next vowel) 'u) (vowel-char vowel)]\n      [else \"\"]))\n\
    \  (define (vowel-next vowel)\n    (cond\n      [(string=? (vowel-next vowel)\
    \ 'a) (vowel-next (vowel-char vowel))]\n      [(string=? (vowel-next vowel) 'e)\
    \ (vowel-next (vowel-char vowel))]\n      [(string=? (vowel-next vowel) 'i) (vowel-next\
    \ (vowel-char vowel))]\n      [(string=? (vowel-next vowel) 'o) (vowel-next (vowel-char\
    \ vowel))]\n      [(string=? (vowel-next vowel) 'u) (vowel-next (vowel-char vowel))]\n\
    \      [else \"\"]))\n  (define (vowel-prev vowel)\n    (cond\n      [(string=?\
    \ (vowel-prev vowel) 'a) (vowel-prev (vowel-char vowel))]\n      [(string=? (vowel-prev\
    \ vowel) 'e) (vowel-prev (vowel-char vowel))]\n      [(string=? (vowel-prev vowel)\
    \ 'i) (vowel-prev (vowel-char vowel))]\n      [(string=? (vowel-prev vowel) 'o)\
    \ (vowel-prev (vowel-char vowel))]\n      [(string=? (vowel-prev vowel) '", " \
    \ (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (cons (first word) (get_closest_vowel\
    \ (rest word)))]))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e)\
    \ (get_closest_vowel (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n        [else\
    \ (first word)]\n        )\n  )\n", "  (cond [(empty? word) \"\"]\n        [(equal?\
    \ (first word) 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'e) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n        [else\
    \ (get-vowel-from-right (rest word))]))\n", "  (define (vowel-check word vowel)\n\
    \    (cond\n      [(empty? word) empty]\n      [(equal? (first word) vowel) (second\
    \ word)]\n      [else (vowel-check (rest word) vowel)]))\n  (vowel-check word\
    \ (first word)))\n", "  (define (helper word vowel)\n    (cond ((null? word) \"\
    \")\n          ((char=? (car word) vowel) vowel)\n          ((char=? (car word)\
    \ (cdr word)) (helper (cdr word) vowel))\n          (else (helper (cdr word) vowel))))\n\
    \  (helper word '()))\n", "  (let loop ((word word)\n             (vowels '(a\
    \ e i o u))\n             (vowel-count 0))\n    (cond ((null? word) \"\")\n  \
    \        ((char=? (first word) 'a) (loop (rest word) (cons first vowels) (add1\
    \ vowel-count)))\n          ((char=? (first word) 'e) (loop (rest word) (cons\
    \ first vowels) (add1 vowel-count)))\n          ((char=? (first word) 'i) (loop\
    \ (rest word) (cons first vowels) (add1 vowel-count)))\n          ((char=? (first\
    \ word) 'o) (loop (rest word) (cons first vowels) (add1 vowel-count)))\n     \
    \     ((char=? (first word) 'u) (loop (rest word) (cons first vowels) (add1 vowel-count)))\n\
    \          ((char=? (first word) 'A) (loop (rest word) (cons first vowels) (add1\
    \ vowel-count)))\n          ((char=? (first word) 'E) (loop (rest word) (cons\
    \ first vowels) (add1 vowel-count)))\n          ((char=? (first word) 'I) (loop\
    \ (rest word) (cons first vowels) (add1 vowel-count)))\n          ((char=? (first\
    \ word) 'O) (loop (rest word) (cons first vowels) (add1 vowel-count)))\n     \
    \     ((char=? (first word) 'U) (loop (rest word) (cons first vowels) (add1 vowel-count)))\n\
    \          (else (loop (rest word) (cons first vowels) (add1 vowel-count)))))\n\
    \  (if (< vowel-count (length vowels))\n      (first vowels)\n      (loop (rest\
    \ word) vowels vowel-count)))\n", "  (define (vowel-check word vowel)\n    (cond\n\
    \      [(empty? word) empty]\n      [(equal? (first word) vowel) (second word)]\n\
    \      [else (vowel-check (rest word) vowel)]))\n  (vowel-check word (first word)))\n",
  "  (define (vowel-search word vowel)\n    (cond\n      [(empty? word) \"\"]\n  \
    \    [(equal? (first word) vowel) (vowel-search (rest word) vowel)]\n      [else\
    \ (vowel-search (rest word) (cons (first word) vowel))]\n      ))\n  (vowel-search\
    \ word \"a\"))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word)\
    \ 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (cons (first\
    \ word) (get_closest_vowel (rest word)))]))\n", "  (define (vowel-search word\
    \ vowel)\n    (cond [(empty? word) \"\"]\n          [(equal? (first word) vowel)\
    \ (vowel-search rest (rest vowel))]\n          [else (vowel-search (rest word)\
    \ (cons (first word) vowel))]))\n  (vowel-search word 'u))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (let loop ((word word)\n               (vowels vowels)\n\
    \               (index 0))\n      (cond ((null? word) \"\")\n            ((char=?\
    \ (char-code (car word)) (first vowels)) \n             (loop (cdr word) (cons\
    \ (first vowels) vowels) (add1 index)))\n            (else (loop (cdr word) (cons\
    \ (first vowels) vowels) index))))))\n", "  (define (helper word vowel index count)\n\
    \    (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first word)) (helper\
    \ (rest word) vowel (+ index 1) count)]\n      [(equal? (first word) vowel) (helper\
    \ (rest word) vowel (+ index 1) (+ count 1))]\n      [else (helper (rest word)\
    \ vowel (+ index 1) count)]))\n  (helper word (first word) 0 0))\n", "  (let loop\
    \ ((word word)\n             (vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ word) \"\"]\n      [(member (first word) vowels) (first word)]\n      [else\
    \ (loop (rest word) (concat vowels (rest word)))]\n    )))\n", "  (let loop ((word\
    \ word)\n             (vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n\
    \          ((member (car word) vowels) (car word))\n          ((member (cdr word)\
    \ vowels) (car word))\n          ((member (car word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (car word)\
    \ vowels) (loop (cdr word) (cons (car word) vowels)))\n          ((member (cdr\
    \ word) vowels) (loop (cdr word) (cons (car word) vowels)))\n          (else (loop\
    \ (cdr word) (cons (car word) vowels))))))\n", "  (define (vowel-check word)\n\
    \    (cond [(empty? word) \"\"]\n          [(char=? (first word) 'a) (cons (first\
    \ word) (vowel-check (rest word)))]\n          [(char=? (first word) 'e) (cons\
    \ (first word) (vowel-check (rest word)))]\n          [(char=? (first word) 'i)\
    \ (cons (first word) (vowel-check (rest word)))]\n          [(char=? (first word)\
    \ 'o) (cons (first word) (vowel-check (rest word)))]\n          [(char=? (first\
    \ word) 'u) (cons (first word) (vowel-check (rest word)))]\n          [else (vowel-check\
    \ (rest word))]))\n  (vowel-check word))\n", "  (let ((vowels '(a e i o u)))\n\
    \    (let loop ((word word) (vowels vowels))\n      (cond ((null? word) \"\")\n\
    \            ((char=? (car word) (car vowels)) (car vowels))\n            (else\
    \ (loop (cdr word) (cons (car word) vowels)))))))\n", "  (cond [(empty? word)\
    \ \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n        [else (first word)]\n        ))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member (car word)\
    \ vowels) (car word)]\n      [else (get-closest-vowel (cdr word) vowels)])))\n",
  "  (define (vowel-check word vowel)\n    (cond\n      [(empty? word) \"\"]\n   \
    \   [(equal? vowel (first word)) (vowel-check (rest word) vowel)]\n      [else\
    \ (vowel-check (rest word) (first vowel))]))\n  (vowel-check word 'u))\n", " \
    \ (define (vowel-check word)\n    (define (vowel-check word vowel)\n      (cond\n\
    \        [(empty? word) empty]\n        [(equal? (first word) vowel) (vowel-check\
    \ (rest word) (first vowel))]\n        [else (vowel-check (rest word) vowel)]))\n\
    \    (vowel-check word 'a'))\n  (vowel-check word 'A'))\n", "  (define (vowel-search\
    \ word vowel)\n    (cond ((null? word) \"\")\n          ((char=? (car word) vowel)\
    \ (car word))\n          ((char=? (car word) (cdr word)) (vowel-search (cdr word)\
    \ vowel))\n          (else (vowel-search (cdr word) vowel))))\n  (vowel-search\
    \ word 'u))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word) 'a)\
    \ (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (first word)]\n\
    \        )\n  )\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word)\
    \ 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (get-vowel-between\
    \ (first word) (first word) (rest word))]))\n", "  (define (vowel-finder word\
    \ start end)\n    (cond [(empty? word) \"\"]\n          [(equal? (char-code (car\
    \ word)) 97) (vowel-finder word (+ start 1) end)]\n          [(equal? (char-code\
    \ (car word)) 65) (vowel-finder word start (+ end 1))]\n          [(equal? (char-code\
    \ (car word)) 97) (vowel-finder word start (+ end 1))]\n          [(equal? (char-code\
    \ (car word)) 65) (vowel-finder word (+ start 1) end)]\n          [else (vowel-finder\
    \ word (+ start 1) end)])\n  (vowel-finder word 0 word))\n", "  (let loop ((word\
    \ word)\n             (vowels '(a e i o u))\n             (vowel-count 0))\n \
    \   (cond ((null? word) \"\")\n          ((member (char-code (car word)) vowels)\
    \ (loop (cdr word) vowels vowel-count))\n          ((< vowel-count (length vowels))\
    \ (loop (cdr word) vowels (+ vowel-count 1)))\n          (else (loop (cdr word)\
    \ vowels (+ vowel-count 1))))))\n", "  (let loop ((word word)\n             (vowels\
    \ '(a e i o u))\n             (vowel-count 0))\n    (cond ((null? word) \"\")\n\
    \          ((char=? (car word) 'a) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          ((char=? (car word) 'e) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          ((char=? (car word) 'i) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          ((char=? (car word) 'o) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          ((char=? (car word) 'u) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          ((char=? (car word) 'A) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          ((char=? (car word) 'E) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          ((char=? (car word) 'I) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          ((char=? (car word) 'O) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          ((char=? (car word) 'U) (loop (cdr word) (cons car vowels) vowel-count))\n\
    \          (else (loop (cdr word) (cons car vowels) vowel-count)))))\n", "  (let\
    \ ([vowels '(a e i o u)])\n    (let ([i (string-length word)])\n      (cond [(=\
    \ i 0) \"\"]\n            [(= i (- i 1)) (first vowels)]\n            [else (let\
    \ ([c (char-code (substring word i (- i 1)))])\n                    (cond [(or\
    \ (char-lower-case c) (char-upper-case c)) (first vowels)]\n                 \
    \         [else (first vowels)]))]))))\n", "  (define (helper word vowel)\n  \
    \  (cond\n      [(empty? word) \"\"]\n      [(equal? (first word) vowel) (second\
    \ word)]\n      [else (helper (rest word) (cons (first word) vowel))]))\n  (helper\
    \ word '()))\n", "  (let ((vowels '(a e i o u)))\n    (let loop ((word word)\n\
    \               (vowels vowels)\n               (vowel (car vowels))\n       \
    \        (vowel-index (length vowels)))\n      (cond ((null? word) \"\")\n   \
    \         ((null? (cdr word)) (loop (cdr word) vowels vowel vowel-index))\n  \
    \          (else (loop (cdr word) (cdr vowels) (car vowel) (cdr vowel-index)))))))\n",
  "  (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond ((null?\
    \ word) \"\")\n          ((member (char-code (car word)) vowels) (car word))\n\
    \          ((member (char-code (cadr word)) vowels) (cadr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (cadddr word)) vowels) (cadddr word))\n          ((member (char-code (car word)\
    \ (cadr word)) vowels) (car word))\n          ((member (char-code (car word) (caddr\
    \ word)) vowels) (car word))\n          ((member (char-code (car word) (cadddr\
    \ word)) vowels) (car word))\n          ((member (char-code (cadr word) (cadddr\
    \ word)) vowels) (cadr word))\n          ((member (char-code (cadr word) (cadddr\
    \ word)) vowels) (cadr word))\n          ((member (char-code (caddr word) (cadddr\
    \ word)) vowels) (caddr word))\n          ((member (char-code (caddr word) (cadddr\
    \ word)) vowels) (caddr word))\n          ((member (char-code (cadddr word) (cadddr\
    \ word)) vowels) (cadddr word))\n          ((member (char-code (cadddr word) (cadddr\
    \ word)) vowels) (cadddr word))\n          ((member (char-code (car word) (cadddr\
    \ word)) vowels) (car word))\n          ((member (char-code (car word) (cadddr\
    \ word)) vowels) (car word))\n          ((member (char-code (car word) (cadddr\
    \ word)) vowels) (car word))\n          ((member (char-code (cadr word) (cadddr\
    \ word)) vowels) (cadr word))\n          ((member (char-code (cadr word) (cadddr\
    \ word)) vowels) (cadr word))\n          ((member (char-code (caddr word) (cadddr\
    \ word)) vowels) (caddr word))\n          ((member (char-code (caddr word) (cadddr\
    \ word)) vowels) (caddr ", "  (let loop ((word word)\n             (vowels '(a\
    \ e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member (first word)\
    \ vowels) (first word)]\n      [else (loop (rest word) (cons vowels (rest word)))]\n\
    \    )\n  )\n)\n", "  (let loop ((word word) (vowels '(a e i o u)))\n    (cond\
    \ ((null? word) \"\")\n          ((char=? (car word) (car vowels)) (loop (cdr\
    \ word) (cons (car word) vowels)))\n          (else (loop (cdr word) (cons (car\
    \ word) vowels))))))\n", "  (define (helper word vowel vowel-count vowel-count)\n\
    \    (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first word)) vowel]\n\
    \      [(equal? (first word) vowel) (helper (rest word) vowel (+ vowel 1) vowel-count)]\n\
    \      [(equal? (first word) (first word)) (helper (rest word) (first word) (+\
    \ vowel 1) vowel-count)]\n      [(equal? (first word) (first word)) (helper (rest\
    \ word) (first word) (+ vowel 1) vowel-count)]\n      [else (helper (rest word)\
    \ vowel (+ vowel 1) vowel-count)]))\n  (helper (reverse word) 'u (length word)\
    \ 0))\n", "  (define (helper word vowel vowels)\n    (cond ((null? vowels) \"\"\
    )\n          ((char=? (car vowel) vowel) (car vowels))\n          (else (helper\
    \ (cdr word) vowel (cdr vowels)))))\n  (helper word '(a e i o u) '()))\n", " \
    \ (let ((vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((char=?\
    \ (char-code (car word)) (first vowels)) \n           (get_closest_vowel (cdr\
    \ word)))\n          ((char=? (char-code (car word)) (last vowels)) \n       \
    \    (get_closest_vowel (cdr word)))\n          (else (get-closest-vowel (cdr\
    \ word) vowels)))))\n", "  (define (vowel-search vowel word)\n    (cond [(empty?\
    \ word) \"\"]\n          [(equal? (first word) vowel) (vowel-search vowel (rest\
    \ word))]\n          [else (vowel-search (first word) (cons (first word) (rest\
    \ word)))]))\n  (vowel-search 'a '(cons word '())))\n", "  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(char=? vowel ?a) (char=? word ?a)]\n      [(char=?\
    \ vowel ?e) (char=? word ?e)]\n      [(char=? vowel ?i) (char=? word ?i)]\n  \
    \    [(char=? vowel ?o) (char=? word ?o)]\n      [(char=? vowel ?u) (char=? word\
    \ ?u)]\n      [(char=? vowel ?A) (char=? word ?A)]\n      [(char=? vowel ?E) (char=?\
    \ word ?E)]\n      [(char=? vowel ?I) (char=? word ?I)]\n      [(char=? vowel\
    \ ?O) (char=? word ?O)]\n      [(char=? vowel ?U) (char=? word ?U)]\n      [(char=?\
    \ vowel ?a) (char=? word ?a)]\n      [(char=? vowel ?e) (char=? word ?e)]\n  \
    \    [(char=? vowel ?i) (char=? word ?i)]\n      [(char=? vowel ?o) (char=? word\
    \ ?o)]\n      [(char=? vowel ?u) (char=? word ?u)]\n      [(char=? vowel ?A) (char=?\
    \ word ?A)]\n      [(char=? vowel ?E) (char=? word ?E)]\n      [(char=? vowel\
    \ ?I) (char=? word ?I)]\n      [(char=? vowel ?O) (char=? word ?O)]\n      [(char=?\
    \ vowel ?U) (char=? word ?U)]\n      [(char=? vowel ?a) (char=? word ?a)]\n  \
    \    [(char=? vowel ?e) (char=? word ?e)]\n      [(char=? vowel ?i) (char=? word\
    \ ?i)]\n      [(char=? vowel ?o) (char=? word ?o)]\n      [(char=? vowel ?u) (char=?\
    \ word ?u)]\n      [(char=? vowel ?A) (char=? word ?A)]\n      [(char=? vowel\
    \ ?E) (char=? word ?E)]\n      [(char=? vowel ?I) (char=? ", "  (let loop ((word\
    \ word)\n             (vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n\
    \          ((member (char-code (car word)) vowels) (car word))\n          ((member\
    \ (char-code (cadr word)) vowels) (cadr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (cadddr word))\
    \ vowels) (cadddr word))\n          ((member (char-code (car word)) vowels) (car\
    \ word))\n          ((member (char-code (cadr word)) vowels) (cadr word))\n  \
    \        ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (cadddr word)) vowels) (cadddr word))\n          ((member (char-code\
    \ (car word)) vowels) (car word))\n          ((member (char-code (cadr word))\
    \ vowels) (cadr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (cadddr word)) vowels) (cadddr word))\n\
    \          ((member (char-code (car word)) vowels) (car word))\n          ((member\
    \ (char-code (cadr word)) vowels) (cadr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (cadddr word))\
    \ vowels) (cadddr word))\n          ((member (char-code (car word)) vowels) (car\
    \ word))\n          ((member (char-code (cadr word)) vowels) (cadr word))\n  \
    \        ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (cadddr word)) vowels) (cadddr word))\n          ((member (char-code\
    \ (car word)) vowels) (car word))\n          ((member (char-code (cadr word))\
    \ vowels) (cadr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (cadddr word)) vowels) (cadddr word))\n\
    \          ((member", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (get-closest-vowel\
    \ (rest word))]))\n", "  (define (vowel-check word)\n    (cond [(empty? word)\
    \ \"\"]\n          [(char=? (first word) 'a) (cons (first word) (vowel-check (rest\
    \ word)))]\n          [(char=? (first word) 'e) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'i) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'o) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'u) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [else (vowel-check (rest word))]))\n  (vowel-check\
    \ word))\n", "  (define (helper word vowel)\n    (cond\n      [(empty? word) \"\
    \"]\n      [(equal? (first word) vowel) vowel]\n      [else (helper (rest word)\
    \ (cons (first word) vowel))]\n      ))\n  (helper (reverse word) '()))\n", " \
    \ (let loop ((word word) (vowels '(a e i o u)))\n    (cond ((null? word) \"\"\
    )\n          ((member (char-code (car word)) vowels) (car word))\n          ((member\
    \ (char-code (cadr word)) vowels) (cadr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (cadddr word))\
    \ vowels) (cadddr word))\n          ((member (char-code (car word)) vowels) (car\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (cadddr word)) vowels) (cadddr word))\n       \
    \   ((member (char-code (cadddr word)) vowels) (cadddr word))\n          ((member\
    \ (char-code (cadddr word)) vowels) (cadddr word))\n          ((member (char-code\
    \ (cadddr word)) vowels) (cadddr word))\n          ((member (char-code (cadddr\
    \ word)) vowels) (cadddr word))\n          ((member (char-code (cadddr word))\
    \ vowels) (cadddr word))\n          ((member (char-code (cadddr word)) vowels)\
    \ (cadddr word))\n          ((member (char-code (cadddr word)) vowels) (cadddr\
    \ word))\n          ((member (char-code (cadddr word)) vowels) (cadddr word))\n\
    \          ((member (char-code (cadddr word)) vowels) (cadddr word))\n       \
    \   ((member (char-code (cadddr word)) vowels) (cadddr word))\n          ((member\
    \ (char-code (cadddr word)) vowels) (cadddr word))\n          ((member (char-code\
    \ (cadddr word)) vowels) (cadddr word))\n          ((member (char-code (cadddr\
    \ word)) vowels) (cadddr word))\n          ((member (char-code (cadddr word))\
    \ vowels) (cadddr word))\n          ((member (char-code (cadddr word)) vowels)\
    \ (cadddr word))\n          ((member (char-code (cadddr word)) vowel", "  (define\
    \ (vowel-check vowel word)\n    (cond\n      [(string=? (substring word (+ 0 (string-length\
    \ word)) 1) vowel)\n       (substring word (+ 0 (string-length word)) 1)]\n  \
    \    [else \"\"]))\n  (define (consonant-check consonant word)\n    (cond\n  \
    \    [(string=? (substring word (+ 0 (string-length word)) 1) consonant)\n   \
    \    (substring word (+ 0 (string-length word)) 1)]\n      [else \"\"]))\n  (define\
    \ (vowel-check vowel word)\n    (cond\n      [(string=? (substring word (+ 0 (string-length\
    \ word)) 1) vowel)\n       (substring word (+ 0 (string-length word)) 1)]\n  \
    \    [else \"\"]))\n  (define (consonant-check consonant word)\n    (cond\n  \
    \    [(string=? (substring word (+ 0 (string-length word)) 1) consonant)\n   \
    \    (substring word (+ 0 (string-length word)) 1)]\n      [else \"\"]))\n  (define\
    \ (vowel-check vowel word)\n    (cond\n      [(string=? (substring word (+ 0 (string-length\
    \ word)) 1) vowel)\n       (substring word (+ 0 (string-length word)) 1)]\n  \
    \    [else \"\"]))\n  (define (consonant-check consonant word)\n    (cond\n  \
    \    [(string=? (substring word (+ 0 (string-length word)) 1) consonant)\n   \
    \    (substring word (+ 0 (string-length word)) 1)]\n      [else \"\"]))\n  (define\
    \ (vowel-check vowel word)\n    (cond\n      [(string=? (substring word (+ 0 (string-length\
    \ word)) 1) vowel)\n       (substring word (+ 0 (string-length word)) 1)]\n  \
    \    [else \"\"]))\n  (define (consonant-check consonant word)\n    (cond\n  \
    \    [(string=? (substring word (+ 0 (string-length word)) 1) consonant)\n   \
    \    (substring word (+ 0 (string-length word)) 1)]\n      [else \"\"]))\n  (define\
    \ (vowel-check vowel word)\n    (cond\n      [(string=? (substring word (+ 0 (string-length\
    \ word)) 1) vowel)\n       (substring word (+ 0 (string-length word)) 1)]\n  \
    \    [else \"\"]))\n  (define (consonant-check consonant word)\n    (cond\n  \
    \    [(string=? (substring word (+ 0 (string-length word)) 1) consonant)\n   \
    \    (substring word (", "  (let loop ((vowels '(a e i o u))\n             (word\
    \ word))\n    (cond ((null? word) \"\")\n          ((member (char-code (car word))\
    \ vowels) (car word))\n          ((member (char-code (cadr word)) vowels) (cadr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (", "  (define (vowel-check word)\n    (define (vowel-check\
    \ word index)\n      (cond\n        [(empty? word) empty]\n        [(equal? (char-after\
    \ (car word) index) (car vowels)) (car vowels)]\n        [else (vowel-check (cdr\
    \ word) (+ index 1))]))\n    (vowel-check (reverse word) 0))\n  (vowel-check word\
    \ 0))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n        [else (first word)]))\n", "  (define\
    \ (helper word vowel index count)\n    (cond\n      [(empty? word) \"\"]\n   \
    \   [(equal? vowel (first word)) (helper (rest word) vowel (+ index 1) count)]\n\
    \      [else (helper (rest word) vowel (+ index 1) (+ count 1))]))\n  (helper\
    \ (reverse word) 'u (length word) 0))\n", "  (define (helper word vowel index\
    \ count)\n    (cond ((null? word) \"\")\n          ((equal? (char-code (car word))\
    \ (char-code vowel)) vowel)\n          ((char-code (car word)) (helper (cdr word)\
    \ vowel (+ index 1) count))\n          (else (helper (cdr word) vowel (+ index\
    \ 1) count))))\n  (helper (reverse word) 'u (length word) 0))\n", "  (cond\n \
    \   [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n  \
    \  [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (cons (first word) (get_closest_vowel (rest word)))]))\n",
  "  (define (vowel-check word)\n    (cond\n      [(empty? word) \"\"]\n      [(char=?\
    \ (first word) 'a) (cons (first word) (vowel-check (rest word)))]\n      [(char=?\
    \ (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n      [(char=?\
    \ (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n      [(char=?\
    \ (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n      [(char=?\
    \ (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n      [else\
    \ (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (cond [(empty? word)\
    \ \"\"]\n        [(vowel? (car word)) (car word)]\n        [else (get_closest_vowel\
    \ (cdr word))]))\n", "  (define (vowel-check word vowel)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(equal? (first word) vowel) (second word)]\n      [else\
    \ (vowel-check (rest word) vowel)]))\n  (vowel-check word (first word)))\n", " \
    \ (define (vowel-check word vowel)\n    (cond [(empty? word) \"\"]\n         \
    \ [(equal? (first word) vowel) (vowel-check (rest word) vowel)]\n          [else\
    \ (vowel-check (rest word) vowel)]))\n  (vowel-check word 'u))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n  \
    \  [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (first word)]\n  )\n)\n", "  (define (vowel-check vowel\
    \ word)\n    (cond ((null? word) \"\")\n          ((char=? (char-code vowel) (char-code\
    \ (car word))) vowel)\n          ((char=? (char-code vowel) (char-code (cadr word)))\
    \ vowel)\n          ((char=? (char-code vowel) (char-code (caddr word))) vowel)\n\
    \          ((char=? (char-code vowel) (char-code (cadddr word))) vowel)\n    \
    \      ((char=? (char-code vowel) (char-code (car word))) vowel)\n          ((char=?\
    \ (char-code vowel) (char-code (cadr word))) vowel)\n          ((char=? (char-code\
    \ vowel) (char-code (caddr word))) vowel)\n          ((char=? (char-code vowel)\
    \ (char-code (cadddr word))) vowel)\n          (else (vowel-check (car word) (cdr\
    \ word)))))\n  (vowel-check (car word) (cdr word)))\n", "  (let ((vowels '(a e\
    \ i o u)))\n    (cond ((null? word) \"\")\n          ((char=? (char-code (car\
    \ word)) (first vowels)) \n           (get_closest_vowel (cdr word)))\n      \
    \    ((char=? (char-code (car word)) (last vowels)) \n           (get_closest_vowel\
    \ (cdr word)))\n          (else (get_closest_vowel (cdr word)))))\n</code>\n<|/\
    \ a tags=racket,scheme |>\n<| c |>\nThank you so much! I really appreciate your\
    \ help!\n<|/ c |>\n<| c |>\nYou're welcome! If this answer helped you, please\
    \ consider accepting it by clicking the check mark to the left of it. This will\
    \ indicate to future readers that it worked for you.\n<|/ c |>\n<| c |>\nI did\
    \ but since I am new here it says I have to wait 2 minutes before I can accept\
    \ it. Thanks again!\n<|/ c |>\n<| c |>\nNo worries, glad I could help.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "  (cond [(empty? word) \"\"]\n        [(vowel?\
    \ (car word)) (car word)]\n        [else (get-closest-vowel (cdr word))]))\n",
  "  (define (vowel-check word)\n    (cond [(empty? word) \"\"]\n          [(char=?\
    \ (first word) 'a) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'e) (vowel-check (rest word))]\n          [(char=? (first word) 'i) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'o) (vowel-check (rest word))]\n\
    \          [(char=? (first word) 'u) (vowel-check (rest word))]\n          [else\
    \ (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond [(empty? word) \"\"]\n          [(char=? (first word)\
    \ 'a) (first vowels)]\n          [(char=? (first word) 'e) (first vowels)]\n \
    \         [(char=? (first word) 'i) (first vowels)]\n          [(char=? (first\
    \ word) 'o) (first vowels)]\n          [(char=? (first word) 'u) (first vowels)]\n\
    \          [else (first vowels)]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c\
    \ |>\nThanks for your answer! I really appreciate it! I haven't learned about\
    \ `let` yet. Do you think it's possible to do this without `let`?\n<|/ c |>\n\
    <| c |>\nYes, it's possible. I'll post an answer in a minute.\n<|/ c |>\n<| c\
    \ |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\nHere's a solution without using let:\n<code>", "  (define (vowel-search\
    \ vowel word)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first\
    \ word)) (vowel-search vowel (rest word))]\n      [(equal? (first word) vowel)\
    \ (vowel-search vowel (rest word))]\n      [(equal? (first word) (first vowel))\
    \ (vowel-search vowel (rest word))]\n      [(equal? (first word) (first vowel)\
    \ (first word)) (vowel-search vowel (rest word))]\n      [(equal? (first word)\
    \ (first vowel) (first word) (first vowel)) (vowel-search vowel (rest word))]\n\
    \      [(equal? (first word) (first vowel) (first word) (first vowel) (first word))\
    \ (vowel-search vowel (rest word))]\n      [(equal? (first word) (first vowel)\
    \ (first word) (first vowel) (first word) (first vowel)) (vowel-search vowel (rest\
    \ word))]\n      [(equal? (first word) (first vowel) (first word) (first vowel)\
    \ (first word) (first vowel) (first word)) (vowel-search vowel (rest word))]\n\
    \      [(equal? (first word) (first vowel) (first word) (first vowel) (first word)\
    \ (first vowel) (first word) (first vowel)) (vowel-search vowel (rest word))]\n\
    \      [(equal? (first word) (first vowel) (first word) (first vowel) (first word)\
    \ (first vowel) (first word) (first vowel) (first word)) (vowel-search vowel (rest\
    \ word))]\n      [(equal? (first word) (first vowel) (first word) (first vowel)\
    \ (first word) (first vowel) (first word) (first vowel) (first word) (first vowel))\
    \ (vowel-search vowel (rest word))]\n      [(equal? (first word) (first vowel)\
    \ (first word) (first vowel) (first word) (first vowel) (first word) (first vowel)\
    \ (first word) (first vowel) (first word)) (vowel-search vowel (rest word))]\n\
    \      [(equal? (first word) (first vowel) (first word) (first vowel) (first word)\
    \ (first vowel) (first word) (first vowel) (first word) (first vowel) (first word)\
    \ (first vowel)) (vowel-search vowel (rest word))]\n      [(equal? (first word)\
    \ (first vowel) (first word) (first vowel) (first word) (first vowel) (first word)\
    \ (first vowel) (first word) (first vowel) (first word) (first vowel) (first word))\
    \ (vowel-search vowel (rest word))]\n      [(equal? (first word) (first vowel)\
    \ (first word) (first vowel", "  (define (vowel-count vowel)\n    (cond\n    \
    \  [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code (char vowel -1))))]\n\
    \      [(char=? (char-code vowel) 65) (+ 1 (vowel-count (char-code (char vowel\
    \ -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count (char-code (char\
    \ vowel -1))))]\n      [(char=? (char-code vowel) 122) (+ 1 (vowel-count (char-code\
    \ (char vowel -1))))]\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 122) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 122) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 90) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 122) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count\
    \ (char-code (char vowel -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code ", "  (define (vowel-check vowel word)\n    (cond ((null? word) \"\
    \")\n          ((char=? (car word) vowel) vowel)\n          ((char=? (car word)\
    \ (cdr word)) (vowel-check (cdr vowel) (cdr word)))\n          (else (vowel-check\
    \ (cdr vowel) word))))\n  (vowel-check (car word) word))\n", "  (define (vowel-search\
    \ word vowel)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? (first word)\
    \ vowel) (vowel-search (rest word) vowel)]\n      [else (vowel-search (rest word)\
    \ (cons (first word) vowel))]))\n  (vowel-search word 'a))\n", "  (define (vowel-check\
    \ vowel)\n    (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel)\
    \ 65)]\n      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97)]\n\
    \      [else false]))\n  (define (consonant-check consonant)\n    (cond\n    \
    \  [(char=? (char-code consonant) 97) (char=? (char-code consonant) 65)]\n   \
    \   [(char=? (char-code consonant) 65) (char=? (char-code consonant) 97)]\n  \
    \    [else false]))\n  (define (vowel-check vowel)\n    (cond\n      [(char=?\
    \ (char-code vowel) 97) (char=? (char-code vowel) 65)]\n      [(char=? (char-code\
    \ vowel) 65) (char=? (char-code vowel) 97)]\n      [else false]))\n  (define (consonant-check\
    \ consonant)\n    (cond\n      [(char=? (char-code consonant) 97) (char=? (char-code\
    \ consonant) 65)]\n      [(char=? (char-code consonant) 65) (char=? (char-code\
    \ consonant) 97)]\n      [else false]))\n  (define (vowel-check vowel)\n    (cond\n\
    \      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 65)]\n      [(char=?\
    \ (char-code vowel) 65) (char=? (char-code vowel) 97)]\n      [else false]))\n\
    \  (define (consonant-check consonant)\n    (cond\n      [(char=? (char-code consonant)\
    \ 97) (char=? (char-code consonant) 65)]\n      [(char=? (char-code consonant)\
    \ 65) (char=? (char-code consonant) 97)]\n      [else false]))\n  (define (vowel-check\
    \ vowel)\n    (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel)\
    \ 65)]\n      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97)]\n\
    \      [else false]))\n  (define (consonant-check consonant)\n    (cond\n    \
    \  [(char=? (char-code consonant) 97) (char=? (char-", "  (define (helper word\
    \ vowel)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? (first word) vowel)\
    \ (second word)]\n      [(equal? (first word) (substring (second word) 0 1)) \n\
    \       (helper (rest word) (substring (first word) 0 1))]\n      [(equal? (first\
    \ word) (substring (second word) 0 2)) \n       (helper (rest word) (substring\
    \ (first word) 0 2))]\n      [(equal? (first word) (substring (second word) 0\
    \ 3))\n       (helper (rest word) (substring (first word) 0 3))]\n      [(equal?\
    \ (first word) (substring (second word) 0 4))\n       (helper (rest word) (substring\
    \ (first word) 0 4))]\n      [(equal? (first word) (substring (second word) 0\
    \ 5))\n       (helper (rest word) (substring (first word) 0 5))]\n      [(equal?\
    \ (first word) (substring (second word) 0 6))\n       (helper (rest word) (substring\
    \ (first word) 0 6))]\n      [(equal? (first word) (substring (second word) 0\
    \ 7))\n       (helper (rest word) (substring (first word) 0 7))]\n      [(equal?\
    \ (first word) (substring (second word) 0 8))\n       (helper (rest word) (substring\
    \ (first word) 0 8))]\n      [(equal? (first word) (substring (second word) 0\
    \ 9))\n       (helper (rest word) (substring (first word) 0 9))]\n      [(equal?\
    \ (first word) (substring (second word) 0 10))\n       (helper (rest word) (substring\
    \ (first word) 0 10))]\n      [(equal? (first word) (substring (second word) 0\
    \ 11))\n       (helper (rest word) (substring (first word) 0 11))]\n      [(equal?\
    \ (first word) (substring (second word) 0 12))\n       (helper (rest word) (substring\
    \ (first word) 0 12))]\n      [(equal? (first word) (substring (second word) 0\
    \ 13))\n       (helper (rest word) (substring (first word) 0 13))]\n      [(equal?\
    \ (first word) (substring (second word) 0 14))\n       (helper (rest word) (substring\
    \ (first word) 0 14))]\n      [(equal? (first word) (substring (second word) 0\
    \ 15))\n       (helper (rest word) (substring (first word) 0 15))]\n      [(equal?\
    \ (first word) (substring (second word) 0 16))\n       (helper (rest word) (sub",
  "  (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond\n    \
    \  [(empty? word) \"\"]\n      [(member (first word) vowels) (first word)]\n \
    \     [else (loop (rest word) (cons vowels (rest word)))]\n      )))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n  \
    \  [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (get-closest-vowel (rest word))]))\n", "  (cond [(empty?\
    \ word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n        [else (get-vowel-between (first word) (first word) (rest\
    \ word))]))\n", "  (define (helper word vowel)\n    (cond [(empty? word) \"\"\
    ]\n          [(equal? (first word) vowel) (second word)]\n          [(equal? (first\
    \ word) (second vowel)) (second word)]\n          [else (helper (rest word) (cons\
    \ (first word) vowel))]))\n  (helper word '()))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (get-vowel (rest word))]))\n", "  (cond\n    [(empty? word) \"\"]\n\
    \    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (first word)]\n  )\n)\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(member (char-code (last word)) vowels) (last\
    \ word)]\n      [(member (char-code (first word)) vowels) (first word)]\n    \
    \  [else (let ((c (char-code (first word))))\n               (cond\n         \
    \        [(member (char-code (last word)) vowels) (last word)]\n             \
    \    [(member (char-code (first word)) vowels) (first word)]\n               \
    \  [(member (char-code (first word)) vowels) (first word)]\n                 [(member\
    \ (char-code (last word)) vowels) (last word)]\n                 [(member (char-code\
    \ (first word)) vowels) (first word)]\n                 [(member (char-code (last\
    \ word)) vowels) (last word)]\n                 [(member (char-code (first word))\
    \ vowels) (first word)]\n                 [(member (char-code (last word)) vowels)\
    \ (last word)]\n                 [(member (char-code (first word)) vowels) (first\
    \ word)]\n                 [(member (char-code (last word)) vowels) (last word)]\n\
    \                 [(member (char-code (first word)) vowels) (first word)]\n  \
    \               [(member (char-code (last word)) vowels) (last word)]\n      \
    \           [(member (char-code (first word)) vowels) (first word)]\n        \
    \         [(member (char-code (last word)) vowels) (last word)]\n            \
    \     [(member (char-code (first word)) vowels) (first word)]\n              \
    \   [(member (char-code (last word)) vowels) (last word)]\n                 [(member\
    \ (char-code (first word)) vowels) (first word)]\n                 [(member (char-code\
    \ (last word)) vowels) (last word)]\n                 [(member (char-code (first\
    \ word)) vowels) (first word)]\n                 [(member (char-code (last word))\
    \ vowels) (last word)]\n                 [(member (char-code (first word)) vowels)\
    \ (first word)]\n                 [(member (char-code (last word)) vowels) (last\
    \ word)]\n                 [(member (char-code (first word)) vowels) (first word)]\n\
    \                 [(member (char-code (last word)) vowels) (last word)]\n", " \
    \ (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (get-closest-vowel (rest word))]))\n",
  "  (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond\n    \
    \  [(empty? word) \"\"]\n      [(member (first word) vowels) (first word)]\n \
    \     [else (loop (rest word) (concat vowels (rest word)))])))\n", "  (define\
    \ (vowel-check vowel)\n    (cond\n      [(string=? (vowel-right vowel) word) vowel]\n\
    \      [else (vowel-check (vowel-left vowel))]\n      ))\n  (vowel-check (vowel-right\
    \ (vowel-left word))))\n", "  (define (vowel-search word vowel)\n    (cond\n \
    \     [(empty? word) \"\"]\n      [(equal? (first word) vowel) (vowel-search (rest\
    \ word) vowel)]\n      [(equal? (first word) (substring vowel 0 1)) (vowel-search\
    \ (rest word) (substring vowel 0 1))]\n      [(equal? (first word) (substring\
    \ vowel 1 2)) (vowel-search (rest word) (substring vowel 1 2))]\n      [(equal?\
    \ (first word) (substring vowel 2 3)) (vowel-search (rest word) (substring vowel\
    \ 2 3))]\n      [(equal? (first word) (substring vowel 3 4)) (vowel-search (rest\
    \ word) (substring vowel 3 4))]\n      [(equal? (first word) (substring vowel\
    \ 4 5)) (vowel-search (rest word) (substring vowel 4 5))]\n      [(equal? (first\
    \ word) (substring vowel 5 6)) (vowel-search (rest word) (substring vowel 5 6))]\n\
    \      [(equal? (first word) (substring vowel 6 7)) (vowel-search (rest word)\
    \ (substring vowel 6 7))]))\n  (vowel-search word (substring word (length word)\
    \ 1)))", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n  )\n)\n", " \
    \ (define (vowel-check vowel word)\n    (cond\n      [(equal? vowel word) vowel]\n\
    \      [(equal? (substring word 0 1) vowel) vowel]\n      [(equal? (substring\
    \ word 0 2) vowel) vowel]\n      [(equal? (substring word 0 3) vowel) vowel]\n\
    \      [(equal? (substring word 0 4) vowel) vowel]\n      [(equal? (substring\
    \ word 0 5) vowel) vowel]\n      [(equal? (substring word 0 6) vowel) vowel]\n\
    \      [(equal? (substring word 0 7) vowel) vowel]\n      [(equal? (substring\
    \ word 0 8) vowel) vowel]\n      [(equal? (substring word 0 9) vowel) vowel]\n\
    \      [(equal? (substring word 0 10) vowel) vowel]\n      [(equal? (substring\
    \ word 0 11) vowel) vowel]\n      [(equal? (substring word 0 12) vowel) vowel]\n\
    \      [(equal? (substring word 0 13) vowel) vowel]\n      [(equal? (substring\
    \ word 0 14) vowel) vowel]\n      [(equal? (substring word 0 15) vowel) vowel]\n\
    \      [(equal? (substring word 0 16) vowel) vowel]\n      [(equal? (substring\
    \ word 0 17) vowel) vowel]\n      [(equal? (substring word 0 18) vowel) vowel]\n\
    \      [(equal? (substring word 0 19) vowel) vowel]\n      [(equal? (substring\
    \ word 0 20) vowel) vowel]\n      [(equal? (substring word 0 21) vowel) vowel]\n\
    \      [(equal? (substring word 0 22) vowel) vowel]\n      [(equal? (substring\
    \ word 0 23) vowel) vowel]\n      [(equal? (substring word 0 24) vowel) vowel]\n\
    \      [(equal? (substring word 0 25) vowel) vowel]\n      [(equal? (substring\
    \ word 0 26) vowel) vowel]\n      [(equal? (substring word 0 27) vowel) vowel]\n\
    \      [(equal? (substring word 0 28) vowel) vowel]\n      [(equal? (substring\
    \ word 0 29) vowel) vowel]\n      [(equal? (substring word 0 30) vowel) vowel]\n\
    \      [(equal? (substring word 0 31) vowel) vowel]\n      [(equal? (substring\
    \ word 0 32) vowel) vowel]\n      [(equal? (substring word 0 33) vowel) vowel]\n\
    \      [(", "  (let ((vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n \
    \         ((char=? (car word) 'a) (first vowels))\n          ((char=? (car word)\
    \ 'e) (first vowels))\n          ((char=? (car word) 'i) (first vowels))\n   \
    \       ((char=? (car word) 'o) (first vowels))\n          ((char=? (car word)\
    \ 'u) (first vowels))\n          ((char=? (car word) 'A) (first vowels))\n   \
    \       ((char=? (car word) 'E) (first vowels))\n          ((char=? (car word)\
    \ 'I) (first vowels))\n          ((char=? (car word) 'O) (first vowels))\n   \
    \       ((char=? (car word) 'U) (first vowels))\n          ((char=? (car word)\
    \ 'a) (first vowels))\n          ((char=? (car word) 'e) (first vowels))\n   \
    \       ((char=? (car word) 'i) (first vowels))\n          ((char=? (car word)\
    \ 'o) (first vowels))\n          ((char=? (car word) 'u) (first vowels))\n   \
    \       ((char=? (car word) 'A) (first vowels))\n          ((char=? (car word)\
    \ 'E) (first vowels))\n          ((char=? (car word) 'I) (first vowels))\n   \
    \       ((char=? (car word) 'O) (first vowels))\n          ((char=? (car word)\
    \ 'U) (first vowels))\n          (else (first vowels)))))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond [(empty? word) \"\"]\n          [(char-before (last\
    \ word) ?a) (first vowels)]\n          [(char-before (last word) ?e) (first vowels)]\n\
    \          [(char-before (last word) ?i) (first vowels)]\n          [(char-before\
    \ (last word) ?o) (first vowels)]\n          [(char-before (last word) ?u) (first\
    \ vowels)]\n          [else (first vowels)]))) \n", "  (define (vowel-check word)\n\
    \    (define (vowel-check word vowel)\n      (cond ((null? word) vowel)\n    \
    \        ((char=? (car word) vowel) vowel)\n            (else (vowel-check (cdr\
    \ word) vowel))))\n    (vowel-check word '()))\n  (vowel-check word '()))\n",
  "  (define (vowel-check word)\n    (cond [(empty? word) \"\"]\n          [(char=?\
    \ (first word) 'a) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'e) (vowel-check (rest word))]\n          [(char=? (first word) 'i) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'o) (vowel-check (rest word))]\n\
    \          [(char=? (first word) 'u) (vowel-check (rest word))]\n          [else\
    \ (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond ((null? word) \"\")\n          ((char=? (char-after (last\
    \ word) 'a) vowels)\n           (char=? (char-after (last word) 'e) vowels)\n\
    \           (char=? (char-after (last word) 'i) vowels)\n           (char=? (char-after\
    \ (last word) 'o) vowels)\n           (char=? (char-after (last word) 'u) vowels))\n\
    \          (else (get-closest-vowel (rest word) vowels)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
