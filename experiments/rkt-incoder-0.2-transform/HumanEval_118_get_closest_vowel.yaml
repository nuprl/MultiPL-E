name: HumanEval_118_get_closest_vowel
language: rkt
prompt: "#lang racket\n\n;; You are given a word. Your task is to find the closest\
  \ vowel that stands between \n;; two consonants from the right side of the word\
  \ (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return\
  \ empty string if you didn't\n;; find any vowel met the above condition. \n;; You\
  \ may assume that the given string contains English letter only.\n;; Example:\n\
  ;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\"\
  )\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel\
  \ \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (define (helper word vowel)\n    (cond\n      [(empty? word) \"\"\
    ]\n      [(equal? (first word) vowel) vowel]\n      [else (helper (rest word)\
    \ (cons (first word) vowel))]\n    ))\n  (helper (reverse word) '()))\n", "  (let\
    \ loop ((word word) (vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n  \
    \        ((char=? (car word) 'a) (loop (cdr word) (cons vowels 'e)))\n       \
    \   ((char=? (car word) 'e) (loop (cdr word) (cons vowels 'i)))\n          ((char=?\
    \ (car word) 'i) (loop (cdr word) (cons vowels 'o)))\n          ((char=? (car\
    \ word) 'o) (loop (cdr word) (cons vowels 'u)))\n          ((char=? (car word)\
    \ 'u) (loop (cdr word) (cons vowels 'a)))\n          (else (loop (cdr word) (cons\
    \ vowels 'a))))))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word)\
    \ 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (get-vowel\
    \ (rest word))]))\n", "  (let loop ((vowels '(a e i o u)) (word word) (i 0))\n\
    \    (cond ((null? word) \"\")\n          ((char=? (car word) (car vowels)) (loop\
    \ (cdr vowels) (cdr word) (+ i 1)))\n          ((char=? (car word) (cdr vowels))\
    \ (loop (cdr vowels) (cdr word) (+ i 1)))\n          ((char=? (car word) (cdr\
    \ vowels) (cdr vowels)) (loop (cdr vowels) (cdr word) (+ i 1)))\n          (else\
    \ (loop (cdr vowels) (cdr word) (+ i 1))))))\n", "  (define (vowel-search word\
    \ vowel)\n    (cond [(empty? word) \"\"]\n          [(equal? (first word) vowel)\
    \ (vowel-search (rest word) vowel)]\n          [else (vowel-search (rest word)\
    \ (cons (first word) vowel))]))\n  (vowel-search word 'u))\n", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond [(empty? word) \"\"]\n          [(char=? (first word)\
    \ 'a) (first vowels)]\n          [(char=? (first word) 'e) (first vowels)]\n \
    \         [(char=? (first word) 'i) (first vowels)]\n          [(char=? (first\
    \ word) 'o) (first vowels)]\n          [(char=? (first word) 'u) (first vowels)]\n\
    \          [else (first vowels)]))\n  )\n", "  (let loop ((word word) (vowels\
    \ '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((char-before (car\
    \ word) vowels) (car word))\n          ((char-before (car word) (cons (car word)\
    \ vowels)) (car word))\n          ((char-before (car word) (cons (car word) (cons\
    \ (car word) vowels))) (car word))\n          ((char-before (car word) (cons (car\
    \ word) (cons (car word) (cons (car word) vowels))))\n          ((char-before\
    \ (car word) (cons (car word) (cons (car word) (cons (car word) (cons (car word)\
    \ vowels))))))\n    (loop (cdr word) (cons (car word) vowels))))\n", "  (cond\
    \ [(empty? word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n        [else (get-closest-vowel (rest\
    \ word))]))\n", "  (let loop ((word word) (vowels '(a e i o u)))\n    (cond ((null?\
    \ word) \"\")\n          ((char=? (car word) 'a) (loop (cdr word) (cons vowels\
    \ 'e)))\n          ((char=? (car word) 'e) (loop (cdr word) (cons vowels 'i)))\n\
    \          ((char=? (car word) 'i) (loop (cdr word) (cons vowels 'o)))\n     \
    \     ((char=? (car word) 'o) (loop (cdr word) (cons vowels 'u)))\n          ((char=?\
    \ (car word) 'u) (loop (cdr word) (cons vowels 'a)))\n          (else (loop (cdr\
    \ word) (cons vowels 'a))))))\n", "  (define (helper word vowel i j)\n    (cond\
    \ ((null? word) \"\")\n          ((char=? (car word) vowel) vowel)\n         \
    \ ((char=? (car word) (cdr word)) (helper (cdr word) vowel (+ i 1) j))\n     \
    \     ((char=? (car word) (car word)) (helper (cdr word) vowel i (+ j 1)))\n \
    \         ((char=? (car word) (cdr word)) (helper (cdr word) vowel (+ i 1) (+\
    \ j 1)))\n          (else (helper (cdr word) vowel (+ i 1) (+ j 1)))))\n  (helper\
    \ word 'a 'b 'c))\n", "  (define (vowel-check word)\n    (cond [(empty? word)\
    \ \"\"]\n          [(char=? (first word) 'a) (cons (first word) (vowel-check (rest\
    \ word)))]\n          [(char=? (first word) 'e) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'i) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'o) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'u) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [else (vowel-check (rest word))]))\n  (vowel-check\
    \ word))\n", "  (define (helper word vowel vowel-count vowel-index)\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(equal? vowel (first word)) (cons (first word)\
    \ vowel-count)]\n      [(equal? (first word) vowel) (helper (rest word) vowel\
    \ (cons (first word) vowel-count) vowel-index)]\n      [(equal? (first word) (first\
    \ vowel)) (helper (rest word) (first vowel) (cons (first word) vowel-count) vowel-index)]\n\
    \      [(equal? (first word) (first vowel) (first vowel-index)) (helper (rest\
    \ word) (first vowel) (cons (first word) vowel-count) vowel-index)]\n      [(equal?\
    \ (first word) (first vowel) (first vowel-index) (first vowel-index)) (helper\
    \ (rest word) (first vowel) (cons (first word) vowel-count) vowel-index)]\n  \
    \    [(equal? (first word) (first vowel) (first vowel-index) (first vowel-index)\
    \ (first vowel-index)) (helper (rest word) (first vowel) (cons (first word) vowel-count)\
    \ vowel-index)]\n      [(equal? (first word) (first vowel) (first vowel-index)\
    \ (first vowel-index) (first vowel-index) (first vowel-index)) (helper (rest word)\
    \ (first vowel) (cons (first word) vowel-count) vowel-index)]\n      [(equal?\
    \ (first word) (first vowel) (first vowel-index) (first vowel-index) (first vowel-index)\
    \ (first vowel-index) (first vowel-index)) (helper (rest word) (first vowel) (cons\
    \ (first word) vowel-count) vowel-index)]\n      [(equal? (first word) (first\
    \ vowel) (first vowel-index) (first vowel-index) (first vowel-index) (first vowel-index)\
    \ (first vowel-index) (first vowel-index)) (helper (rest word) (first vowel) (cons\
    \ (first word) vowel-count) vowel-index)]\n      [(equal? (first word) (first\
    \ vowel) (first vowel-index) (first vowel-index) (first vowel-index) (first vowel-index)\
    \ (first vowel-index) (first vowel-index) (first vowel-index)) (helper (rest word)\
    \ (first vowel) (cons (first word) vowel-count) vowel-index)]\n      [(equal?\
    \ (first word) (first vowel) (first vowel-index) (first vowel-index) (first vowel-index)\
    \ (first vowel-index) (first vowel", "  (let ([vowels '(a e i o u)])\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(equal? (first word) vowels) (first word)]\n\
    \      [(equal? (first word) (first vowels)) (first word)]\n      [(equal? (first\
    \ word) (first vowels) (second word)) (first word)]\n      [(equal? (first word)\
    \ (first vowels) (second word) (third word)) (first word)]\n      [(equal? (first\
    \ word) (first vowels) (second word) (third word) (fourth word)) (first word)]\n\
    \      [(equal? (first word) (first vowels) (second word) (third word) (fourth\
    \ word) (fifth word)) (first word)]\n      [(equal? (first word) (first vowels)\
    \ (second word) (third word) (fourth word) (fifth word) (sixth word)) (first word)]\n\
    \      [(equal? (first word) (first vowels) (second word) (third word) (fourth\
    \ word) (fifth word) (sixth word) (seventh word)) (first word)]\n      [(equal?\
    \ (first word) (first vowels) (second word) (third word) (fourth word) (fifth\
    \ word) (sixth word) (seventh word) (eigth word)) (first word)]\n      [(equal?\
    \ (first word) (first vowels) (second word) (third word) (fourth word) (fifth\
    \ word) (sixth word) (seventh word) (eigth word) (tenth word)) (first word)]\n\
    \      [(equal? (first word) (first vowels) (second word) (third word) (fourth\
    \ word) (fifth word) (sixth word) (seventh word) (eigth word) (tenth word) (eleventh\
    \ word)) (first word)]\n      [(equal? (first word) (first vowels) (second word)\
    \ (third word) (fourth word) (fifth word) (sixth word) (seventh word) (eigth word)\
    \ (tenth word) (eleventh word) (twelfth word)) (first word)]\n      [(equal? (first\
    \ word) (first vowels) (second word) (third word) (fourth word) (fifth word) (sixth\
    \ word) (seventh word) (eigth word) (tenth word) (eleventh word) (twelfth word)\
    \ (thirteenth word)) (first word)]\n      [(equal? (first word) (first vowels)\
    \ (second word) (third word) (fourth word) (fifth word) (", "  (let loop ((word\
    \ word) (vowels '(a e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member\
    \ (first word) vowels) (first word)]\n      [else (loop (rest word) (concat vowels\
    \ (rest word)))]\n    )\n  )\n)\n", "  (let loop ((word word)\n             (vowels\
    \ '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((member (char-code\
    \ (car word)) vowels) (car word))\n          ((member (char-code (cadr word))\
    \ vowels) (cadr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char", "  (cond\n    [(empty? word) \"\"]\n    [(equal?\
    \ (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first\
    \ word)]))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n\
    \          ((char=? (char-code (car word)) (first vowels)) \n           (get_closest_vowel\
    \ (cdr word)))\n          ((char=? (char-code (car word)) (last vowels)) \n  \
    \         (get_closest_vowel (cdr word)))\n          (else (get_closest_vowel\
    \ (cdr word)))))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this solution\
    \ will fail for \"ab\", since it returns \"a\" instead of \"\".\n<|/ c |>\n<|\
    \ c |>\nThanks for pointing that out. I fixed the code accordingly.\n<|/ c |>\n\
    <| a tags=racket,scheme |>\nI wrote a solution using only Racket and R5RS Scheme.\
    \ \n<code>", "  (define (vowel-search word vowel)\n    (cond ((null? word) \"\"\
    )\n          ((char=? (car word) vowel) (car word))\n          ((char=? (car word)\
    \ (vowel string)) (vowel-search (cdr word) vowel))\n          ((char=? (car word)\
    \ (vowel string) (vowel string)) (vowel-search (cdr word) vowel))\n          (else\
    \ (vowel-search (cdr word) vowel))))\n  (vowel-search word \"a\"))\n", "  (define\
    \ (helper word vowel start end)\n    (cond\n      [(empty? word) \"\"]\n     \
    \ [(equal? vowel (first word)) vowel]\n      [(equal? (first word) vowel) (helper\
    \ (rest word) (first word) (add1 start))]\n      [else (helper (rest word) (first\
    \ word) (add1 start))]))\n  (helper (reverse word) \"\" 0 length))\n", "  (let\
    \ ([vowels '(a e i o u)])\n    (cond [(empty? word) \"\"]\n          [(char=?\
    \ (first word) 'a) (first vowels)]\n          [(char=? (first word) 'e) (first\
    \ vowels)]\n          [(char=? (first word) 'i) (first vowels)]\n          [(char=?\
    \ (first word) 'o) (first vowels)]\n          [(char=? (first word) 'u) (first\
    \ vowels)]\n          [else (first vowels)]))\n  )\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
