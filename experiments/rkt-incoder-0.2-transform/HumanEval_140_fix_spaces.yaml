name: HumanEval_140_fix_spaces
language: rkt
prompt: "#lang racket\n\n;; Given a string text, replace all spaces in it with underscores,\
  \ \n;; and if a string has more than 2 consecutive spaces, \n;; then replace all\
  \ consecutive spaces with - \n;; >>> (fix_spaces \" Example\")\n;; \"Example\"\n\
  ;; >>> (fix_spaces \" Example 1\")\n;; \"Example_1\"\n;; >>> (fix_spaces \" Example\
  \ 2\")\n;; \"_Example_2\"\n;; >>> (fix_spaces \" Example 3\")\n;; \"_Example-3\"\
  \n(define (fix_spaces text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fix_spaces))\n\
  \    (check-equal? (candidate \"Example\") \"Example\")\n    (check-equal? (candidate\
  \ \"Mudasir Hanif \") \"Mudasir_Hanif_\")\n    (check-equal? (candidate \"Yellow\
  \ Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\")\n    (check-equal?\
  \ (candidate \"Exa   mple\") \"Exa-mple\")\n    (check-equal? (candidate \"   Exa\
  \ 1 2 2 mple\") \"-Exa_1_2_2_mple\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? text) \"\"]\n    [(equal? (first text) \" \"\
    ) (cons (first text) (fix_spaces (rest text)))]\n    [else (cons (first text)\
    \ (fix_spaces (rest text)))]))\n", "  (cond\n    [(empty? text) \"\"]\n    [(equal?\
    \ (first text) \" \") (cons (first text) (fix_spaces (rest text)))]\n    [else\
    \ (cons (first text) (fix_spaces (rest text)))]))\n", "  (cond\n    [(empty? text)\
    \ \"\"]\n    [(equal? (first text) \" \") (cons (first text) (fix_spaces (rest\
    \ text)))]\n    [else (cons (first text) (fix_spaces (rest text)))]))\n", "  (cond\n\
    \    [(empty? text) \"\"]\n    [(equal? (first text) \" \") (cons (first text)\
    \ (fix_spaces (rest text)))]\n    [else (cons (first text) (fix_spaces (rest text)))]))\n",
  "  (cond\n    [(empty? text) \"\"]\n    [(equal? (first text) \" \") (cons (first\
    \ text) (fix_spaces (rest text)))]\n    [(equal? (first text) \" \") (cons (first\
    \ text) (fix_spaces (rest text)))]\n    [else (cons (first text) (fix_spaces (rest\
    \ text)))]))\n", "  (let ([result (make-string (string-length text))])\n    (let\
    \ ([i (string-index text #\\Space)])\n      (if (< i 0)\n          result\n  \
    \        (set! i (- i 1))\n          (set! result (append result (substring text\
    \ i 1))))\n      (set! result (append result (substring text i 1))))\n    (if\
    \ (string-length result) > 2\n        (set! result (substring result 0 2))\n \
    \       result)))\n", "  (cond\n    [(empty? text) empty]\n    [(equal? (first\
    \ text) \" \") (cons (first text) (fix_spaces (rest text)))]\n    [(equal? (first\
    \ text) \" \") (cons (first text) (fix_spaces (rest text)))]\n    [else (cons\
    \ (first text) (fix_spaces (rest text)))]))\n", "  (cond\n    [(empty? text) \"\
    \"]\n    [(equal? (first text) \" \") (cons (first text) (fix_spaces (rest text)))]\n\
    \    [else (cons (first text) (fix_spaces (rest text)))]))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(equal? (first text) \" \") (cons (first text) (fix_spaces\
    \ (rest text)))]\n    [else (cons (first text) (fix_spaces (rest text)))]))\n",
  "  (cond\n    [(empty? text) \"\"]\n    [(equal? (first text) \" \") (cons (first\
    \ text) (fix_spaces (rest text)))]\n    [(equal? (first text) \" \") (cons (first\
    \ text) (fix_spaces (rest text)))]\n    [else (cons (first text) (fix_spaces (rest\
    \ text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(equal? (first text)\
    \ \" \") (cons (first text) (fix_spaces (rest text)))]\n    [else (cons (first\
    \ text) (fix_spaces (rest text)))]))\n", "  (cond\n    [(empty? text) text]\n\
    \    [(equal? (first text) \" \") (cons (first text) (fix_spaces (rest text)))]\n\
    \    [else (cons (first text) (fix_spaces (rest text)))]))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(equal? (first text) \" \") (cons (first text) (fix_spaces\
    \ (rest text)))]\n    [else (cons (first text) (fix_spaces (rest text)))]))\n",
  "  (cond\n    [(empty? text) empty]\n    [(equal? (first text) \" \") (cons (first\
    \ text) (fix_spaces (rest text)))]\n    [else (cons (first text) (fix_spaces (rest\
    \ text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(equal? (first text)\
    \ \" \") (cons (first text) (fix_spaces (rest text)))]\n    [else (cons (first\
    \ text) (fix_spaces (rest text)))]))\n", "  (cond\n    [(empty? text) \"\"]\n\
    \    [(equal? (first text) \" \") (cons (first text) (fix_spaces (rest text)))]\n\
    \    [else (cons (first text) (fix_spaces (rest text)))]))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(equal? (first text) \" \") (cons (first text) (fix_spaces\
    \ (rest text)))]\n    [else (cons (first text) (fix_spaces (rest text)))]))\n",
  "  (cond\n    [(empty? text) \"\"]\n    [(equal? (first text) \" \") (cons (first\
    \ text) (fix_spaces (rest text)))]\n    [else (cons (first text) (fix_spaces (rest\
    \ text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(equal? (first text)\
    \ \" \") (cons (first text) (fix_spaces (rest text)))]\n    [else (cons (first\
    \ text) (fix_spaces (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n\
    \    [(equal? (first text) \" \") (cons (first text) (fix_spaces (rest text)))]\n\
    \    [else (cons (first text) (fix_spaces (rest text)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
