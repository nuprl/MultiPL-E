name: HumanEval_100_make_a_pile
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, you have to make a pile of\
  \ n levels of stones.\n;; The first level has n stones.\n;; The number of stones\
  \ in the next level is:\n;; - the next odd number if n is odd.\n;; - the next even\
  \ number if n is even.\n;; Return the number of stones in each level in a list,\
  \ where element at index\n;; i represents the number of stones in the level (i+1).\n\
  ;; Examples:\n;; >>> (make_a_pile 3)\n;; (list 3 5 7)\n(define (make_a_pile n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n\
  \    (check-equal? (candidate 3) (list 3 5 7))\n    (check-equal? (candidate 4)\
  \ (list 4 6 8 10))\n    (check-equal? (candidate 5) (list 5 7 9 11 13))\n    (check-equal?\
  \ (candidate 6) (list 6 8 10 12 14 16))\n    (check-equal? (candidate 8) (list 8\
  \ 10 12 14 16 18 20 22))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((n n) (a 0))\n    (if (even? n)\n        (loop (/ n 2)\
    \ (+ a 1))\n        (loop (* n 2) (+ a 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (+ (* n n) (if (odd? n) (* 2 (odd? (+ n 1))) (even? (+ n 1))))\n\
    \            (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (+ (* n n) (if (odd? n) (* 2 (odd? (+ n 1))) (even? (+ n 1))))\n           \
    \ (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (let ([next (if\
    \ (even? n) (+ n 2) (+ n 1))])\n        (cons next (make_a_pile next)))))\n",
  "  (cond\n    [(zero? n) '()]\n    [(odd? n) (cons (+ n (odd? (quotient n 2))) (make_a_pile\
    \ (quotient n 2)))]\n    [else (cons (+ n (even? (quotient n 2))) (make_a_pile\
    \ (quotient n 2)))]))\n", "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (-\
    \ n 2) (make_a_pile (/ n 2)))]\n    [else (cons (- n 3) (make_a_pile (/ n 3)))]))\n",
  "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (+ n 1) (make_a_pile (/ n 2)))]\n\
    \    [(even? n) (cons (+ n 1) (make_a_pile (/ n 2)))]\n    [else (make_a_pile\
    \ (/ n 2))]))\n", "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (even?\
    \ n) (* 2 (odd? n)) (* 2 (even? n))))\n            (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (if (even? n)\n                (+ 1 (make-a_pile\
    \ (/ n 2)))\n                (+ 1 (make-a_pile (/ n 3))))\n            (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (let ([odds (make-a_pile (/\
    \ n 2))\n            evens (make-a_pile (* n 2))])\n        (cons (+ odds evens)\
    \ (make_a_pile (- n 1))))))\n", "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons\
    \ (+ n (floor (/ n 2))) (make_a_pile (- n 2)))]\n    [else (cons (+ n (floor (/\
    \ n 2))) (make_a_pile (- n 2)))]))\n", "  (if (zero? n)\n      '()\n      (cons\
    \ (if (odd? n) (+ n 2) (+ n 1))\n            (make_a_pile (- n 1)))))\n", "  (if\
    \ (= n 0)\n      '()\n      (cons (+ (* n n) (if (odd? n (+ n 1))\n          \
    \                 (* 2 (odd? n (+ n 1)))\n                           (* 2 (even?\
    \ n (+ n 1))))))))\n", "  (cond\n    [(= n 0) (list 0)]\n    [(odd? (modulo n\
    \ 2)) (cons (+ n 1) (make_a_pile (/ n 2)))]\n    [else (cons (+ n 1) (make_a_pile\
    \ (/ n 2)))]))\n", "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (+ n (floor\
    \ (/ n 2))) (make_a_pile (- n 2)))]\n    [else (cons (+ n (floor (/ n 2))) (make_a_pile\
    \ (- n 2)))]))\n", "  (if (= n 0)\n      '()\n      (cons (if (even? n) (+ n 1)\
    \ (- n 1))\n            (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (let ((next (if (even? n) (+ n 2) (+ n 1))))\n        (cons (- next n)\
    \ (make_a_pile next)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor\
    \ (/ n 2))\n               (if (even? n)\n                   (floor (/ n 2))\n\
    \                   (floor (/ n 2)))\n               (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (odd? n) (* 2 (odd? (- n 1)))\
    \ (even? (- n 1))))\n            (make_a_pile (- n 1)))))\n", "  (let ([level\
    \ (make-array n #f (lambda (i) (+ i 1))) ])\n    (loop for i from 0 to (- n 1)\
    \ by 2\n          for j from 0 to (- n 1) by 2\n          for k from 0 to (- n\
    \ 1) by 2\n          for l from 0 to (- n 1) by 2\n          for m from 0 to (-\
    \ n 1) by 2\n          for n from 0 to (- n 1) by 2\n          for o from 0 to\
    \ (- n 1) by 2\n          for p from 0 to (- n 1) by 2\n          for q from 0\
    \ to (- n 1) by 2\n          for r from 0 to (- n 1) by 2\n          for s from\
    \ 0 to (- n 1) by 2\n          for t from 0 to (- n 1) by 2\n          for u from\
    \ 0 to (- n 1) by 2\n          for v from 0 to (- n 1) by 2\n          for w from\
    \ 0 to (- n 1) by 2\n          for x from 0 to (- n 1) by 2\n          for y from\
    \ 0 to (- n 1) by 2\n          for z from 0 to (- n 1) by 2\n          for w from\
    \ 0 to (- n 1) by 2\n          for x from 0 to (- n 1) by 2\n          for y from\
    \ 0 to (- n 1) by 2\n          for z from 0 to (- n 1) by 2\n          for w from\
    \ 0 to (- n 1) by 2\n          for x from 0 to (- n 1) by 2\n          for y from\
    \ 0 to (- n 1) by 2\n          for z from 0 to (- n 1) by 2\n          for w from\
    \ 0 to (- n 1) by 2\n          for x from 0 to (- n 1) by 2\n          for y from\
    \ 0 to (- n 1) by 2\n          for z from 0 to (- n 1) by 2\n          for w from\
    \ 0 to (- n 1) by 2\n          for x from 0 to (- n 1) by 2\n          for y from\
    \ 0 to (- n 1) by 2\n          for z from 0 to (- n 1) by 2\n          for w from\
    \ 0 to (- n 1) by 2\n          for x from 0 to (- n 1) by 2\n          for y from\
    \ 0 to (- n 1) by 2\n          for z from 0 to (- n 1) by 2\n          for w from\
    \ 0 to (- n 1) by 2\n          for x from 0 to (- n 1) by 2\n          for y from\
    \ 0 to (- n 1) by 2\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
