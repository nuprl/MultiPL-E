name: HumanEval_113_odd_count
language: rkt
prompt: "#lang racket\n\n;; Given a list of strings, where each string consists of\
  \ only digits, return a list.\n;; Each element i of the output should be \"the number\
  \ of odd elements in the\n;; string i of the input.\" where all the i's should be\
  \ replaced by the number\n;; of odd digits in the i'th string of the input.\n;;\
  \ >>> (odd_count (list \"1234567\"))\n;; (list \"the number of odd elements 4n the\
  \ str4ng 4 of the 4nput.\")\n;; >>> (odd_count (list \"3\" \"11111111\"))\n;; (list\
  \ \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\")\n(define (odd_count lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_count))\n\
  \    (check-equal? (candidate (list \"1234567\")) (list \"the number of odd elements\
  \ 4n the str4ng 4 of the 4nput.\"))\n    (check-equal? (candidate (list \"3\" \"\
  11111111\")) (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
  \ \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))\n    (check-equal?\
  \ (candidate (list \"271\" \"137\" \"314\")) (list \"the number of odd elements\
  \ 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of\
  \ the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))\n\
  ))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      '()\n      (append (map (lambda (x) (length\
    \ (filter (lambda (y) (odd? y)) x))) lst)\n              (list \"the number of\
    \ odd elements \" (car lst) \" of the \" (car (cdr lst)) \".\"))))\n", "  (if\
    \ (null? lst)\n      '()\n      (append (map (lambda (x) (length (filter odd?\
    \ x))) lst)\n              (odd_count (rest lst)))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (list (length (filter (lambda (x) (odd? (char->integer\
    \ x))) lst))) \n              (odd_count (filter (lambda (x) (odd? (char->integer\
    \ x))) lst)))))\n", "  (cond\n    [(empty? lst) empty]\n    [(digit? (first lst))\
    \ (cons (length (filter (lambda (x) (odd? x)) (map string->list lst))) (odd_count\
    \ (rest lst)))]\n    [else (cons (first lst) (odd_count (rest lst)))]))\n", " \
    \ (if (null? lst)\n      '()\n      (append (map (lambda (str)\n             \
    \       (if (string=? str \"0\")\n                        '()\n              \
    \          (append (map (lambda (digit)\n                                    (if\
    \ (string=? digit \"0\")\n                                        '()\n      \
    \                                  (append (map (lambda (odd_digit)\n        \
    \                                          (if (string=? odd_digit \"0\")\n  \
    \                                                    '()\n                   \
    \                                   (cons odd_digit str))\n                  \
    \                                odd_digit)\n                                \
    \          digit))\n                                    digit))\n            \
    \                  str))\n                    lst)\n              (odd_count (rest\
    \ lst))))))\n", "  (if (null? lst)\n      '()\n      (append (list (length lst)\
    \ (length lst))\n              (map odd? (rest lst)))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (list (length lst))\n              (map (lambda (x)\n\
    \                     (if (string=? (string-length x) 0)\n                   \
    \      '()\n                         (odd? (string-length x))))\n            \
    \       (cdr lst)))))\n", "  (cond\n    [(empty? lst) empty]\n    [(digit? (first\
    \ lst)) (cons (length (filter (lambda (x) (odd? x)) (map string->list lst))) (odd_count\
    \ (rest lst)))]\n    [else (cons (first lst) (odd_count (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [(digit? (first lst)) (cons (length (filter\
    \ (lambda (x) (odd? (char->integer x))) lst)) (odd_count (rest lst))]\n    [else\
    \ (cons (first lst) (odd_count (rest lst))) ]))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (list (length lst))\n              (map (lambda (x) (odd?\
    \ x))\n                  (substring lst 0 (length lst))))))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (list (length (filter (lambda (x) (odd? (char->integer\
    \ x))) lst)))\n              (odd_count (rest lst)))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (map (lambda (x) (length (filter odd? x))) lst)\n  \
    \            (odd_count (rest lst)))))\n", "  (if (null? lst)\n      '()\n   \
    \   (append (list (length lst) (length lst))\n              (map (lambda (x) (length\
    \ (string->list x)))\n                  (filter (lambda (x) (char->integer (car\
    \ x)) '(1 2 3 4 5 6 7 8 9))\n                           (cdr lst))))))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [(number? (first lst)) (cons (first lst)\
    \ (odd_count (rest lst)))]\n    [else (cons (string->number (first lst)) (odd_count\
    \ (rest lst)))]))\n", "  (if (null? lst)\n      '()\n      (append (list (length\
    \ lst))\n              (map (lambda (x)\n                     (if (string=? (string-length\
    \ x) 1)\n                         (string-length x)\n                        \
    \ (string-length (string-append x \"0\")))) lst)))) ;; #lang racket\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(digit? (first lst)) (cons (length (filter (lambda\
    \ (x) (odd? x)) (map string->list (rest lst))))\n                            (odd_count\
    \ (rest lst)))]\n    [else (cons (length (filter (lambda (x) (odd? x)) (map string->list\
    \ (rest lst))))\n                (odd_count (rest lst)))]))\n", "  (if (null?\
    \ lst)\n      '()\n      (append (map (lambda (x) (length (filter odd? x))) lst)\n\
    \              (odd_count (cdr lst)))))\n", "  (if (null? lst)\n      '()\n  \
    \    (append (list (length (filter (lambda (x) (odd? x)) lst)))\n            \
    \  (odd_count (rest lst))))) ;; #lang racket\n", "  (if (null? lst)\n      '()\n\
    \      (append (list (length lst)) (map (lambda (x) (odd? x)) (substring lst 0\
    \ (length lst)))))\n  )\n", "  (if (null? lst)\n      '()\n      (append (list\
    \ (length lst))\n              (map (lambda (x) (length (filter odd? x)))\n  \
    \                 (map string->list lst)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
