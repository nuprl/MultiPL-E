name: HumanEval_136_largest_smallest_integers
language: rkt
prompt: "#lang racket\n\n;; Create a function that returns a tuple (a, b), where 'a'\
  \ is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive\
  \ integers in a list.\n;; If there is no negative or positive integers, return them\
  \ as None.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n\
  ;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
  \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)\n(define (largest_smallest_integers\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n\
  \    (check-equal? (candidate (list 2 4 1 3 5 7)) (list #f 1))\n    (check-equal?\
  \ (candidate (list 2 4 1 3 5 7 0)) (list #f 1))\n    (check-equal? (candidate (list\
  \ 1 3 2 4 5 6 -2)) (list -2 1))\n    (check-equal? (candidate (list 4 5 3 6 2 7\
  \ -7)) (list -7 2))\n    (check-equal? (candidate (list 7 3 8 4 9 2 5 -9)) (list\
  \ -9 2))\n    (check-equal? (candidate (list )) (list #f #f))\n    (check-equal?\
  \ (candidate (list 0)) (list #f #f))\n    (check-equal? (candidate (list -1 -3 -5\
  \ -6)) (list -1 #f))\n    (check-equal? (candidate (list -1 -3 -5 -6 0)) (list -1\
  \ #f))\n    (check-equal? (candidate (list -6 -4 -4 -3 1)) (list -3 1))\n    (check-equal?\
  \ (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer?\
    \ (first lst))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (let ((a (largest_smallest_integers (first\
    \ lst))\n                 (b (largest_smallest_integers (rest lst))))\n      \
    \         (if (< a b)\n                   (cons a b)\n                   (cons\
    \ b a)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first lst)\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(< (first\
    \ lst) (first lst)) (list #f (first lst))] \n        [else (list (first lst) (second\
    \ lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         [(integer?\
    \ (first lst))\n          (cons (first lst)\n                (largest_smallest_integers\
    \ (rest lst)))]\n         [else\n          (let ([a (largest_smallest_integers\
    \ (first lst))])\n            (cond [(empty? a)\n                   (list #f #f)\n\
    \                   (integer? (first a))]\n                  [else\n         \
    \          (let ([b (largest_smallest_integers (first a))])\n                \
    \     (cond [(empty? b)\n                            (list #f #f)\n          \
    \                  (integer? (first b))]\n                             [else\n\
    \                             (cons (first b)\n                              \
    \    (largest_smallest_integers (rest b)))]))]))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (list #f #f)\n     (let ([a (largest_smallest_integers (rest lst))\n\
    \            b (smallest_largest_integers (rest lst))])\n       (cond\n      \
    \   [(< a b)\n          (list a b)\n          (list #f #f)]\n         [else\n\
    \          (list a b)\n          (list #f #f)]\n         [else\n          (list\
    \ #f #f)]))]\n    [else\n     (let ([a (largest_smallest_integers (rest lst))\n\
    \            b (smallest_largest_integers (rest lst))])\n       (cond\n      \
    \   [(< a b)\n          (list a b)\n          (list #f #f)]\n         [else\n\
    \          (list a b)\n          (list #f #f)]\n         [else\n          (list\
    \ #f #f)]))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (car lst) 0)\n         (list (car lst) #f)]\n        [else\n    \
    \     (largest_smallest_integers (cdr lst))]))\n", "  (cond [(empty? lst)\n  \
    \       (list #f #f)\n         ]\n        [(> (first lst) 0)\n         (largest_smallest_integers\
    \ (rest lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]\n        ))\n", "  (cond [(empty? lst)\n         (list\
    \ #f #f)\n         [(integer? (car lst))\n          (cons (car lst)\n        \
    \        (largest_smallest_integers (cdr lst)))]\n         [else\n          (let\
    \ ([a (largest_smallest_integers (car lst))])\n            (cond [(empty? a)\n\
    \                   (list #f #f)\n                   [(integer? (car a))\n   \
    \                 (cons (car a)\n                          (largest_smallest_integers\
    \ (cdr a)))]\n                   [else\n                    (let ([b (largest_smallest_integers\
    \ (cdr lst))])\n                      (cond [(empty? b)\n                    \
    \        (list #f #f)\n                            [(integer? (car b))\n     \
    \                        (cons (car b)\n                                  (largest_smallest_integers\
    \ (cdr b)))]\n                            [else\n                            \
    \ (cons (car lst)\n                                  (largest_smallest_integers\
    \ (cdr lst)))]\n                            ])\n                      ])\n   \
    \               ])\n          ])\n         ])\n  )\n", "  (cond [(null? lst)\n\
    \         (list #f #f)\n         ]\n        [(< (car lst) 0)\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr\
    \ lst))\n         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(< (first lst) 0) (list #f (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(> (first\
    \ lst) 0) (cons (first lst) (largest_smallest_integers (rest lst)))]\n       \
    \ [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(null? lst)\n\
    \         (list #f #f)\n         ]\n        [(< (car lst) 0)\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr\
    \ lst))\n         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(< (first lst) 0) (list #f (first lst))]\n    [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(null? lst) '()]\n        [(or (< 0 (car lst))\
    \ (< 0 (cdr lst)))\n         (cons (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(< (first lst) 0) (list #f #f)]\n    [else (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(number? (first lst)) (list lst 1)]\n    [else (let ([a\
    \ (largest_smallest_integers (rest lst))])\n             (cond\n             \
    \ [(empty? a) (list #f #f)]\n              [(number? (first a)) (list a 1)]\n\
    \              [else (let ([b (smallest_largest_integers (rest a))])\n       \
    \               (cond\n                        [(empty? b) (list #f #f)]\n   \
    \                     [(number? (first b)) (list b 1)]\n                     \
    \   [else (let ([c (smallest_largest_integers (rest b))])\n                  \
    \              (cond\n                                 [(empty? c) (list #f #f)]\n\
    \                                 [(number? (first c)) (list c 1)]\n         \
    \                        [else (let ([d (largest_smallest_integers (rest c))])\n\
    \                                          (cond\n                           \
    \                [(empty? d) (list #f #f)]\n                                 \
    \          [(number? (first d)) (list d 1)]\n                                \
    \           [else (let ([e (smallest_largest_integers (rest d))])\n          \
    \                                          (cond\n                           \
    \                          [(empty? e) (list #f #f)]\n                       \
    \                              [(number? (first e)) (list e 1)]\n            \
    \                                         [else (let ([f (largest_smallest_integers\
    \ (rest e))])\n                                                            (cond\n\
    \                                                             [(empty? f) (list\
    \ #f #f)]\n                                                             [(number?\
    \ (first f)) (list f 1)]\n                                                   \
    \          [else (let ([g (smallest_largest_integers (rest f))])\n           \
    \                                                         (cond\n            \
    \                                                         [(empty? g) (list #f\
    \ #f)]\n                                                                     [(number?\
    \ (first g)) (list g 1)]\n                                                   \
    \                  [else (let ([h (smallest_largest_integers (rest g))])\n   \
    \                                                                          (cond\n\
    \                                                                            \
    \  [(empty? h) (list #f #f)]\n                                               \
    \                               [(number? (first h)) (list h 1)]\n           \
    \                                                                   [else (let\
    \ ([i (largest_smallest_integers (rest h))])\n                               \
    \                                                         (cond\n            \
    \                                                                            \
    \ [(empty? i) (list #f #f)]\n                                                \
    \                                         [(number? (first i)) (list i 1)]\n \
    \                                                                            \
    \            [else (let ([j (smallest_largest_integers (rest i))])\n         \
    \                                                                            \
    \             (cond\n                                                        \
    \                                           [(empty? j) (list #f #f)]\n      \
    \                                                                            \
    \                 [(number? (first j)) (list j 1)]\n                         \
    \                                                                          ",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first lst) 0) (list #f #f)]\n\
    \    [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer? (first\
    \ lst))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (let ([a (largest_smallest_integers (first\
    \ lst))])\n           (let ([b (largest_smallest_integers (rest lst))])\n    \
    \         (cond [(< a b)\n                    (cons a (cons b (first lst)))]\n\
    \                     [(< b a)\n                     (cons (first lst) b)])\n\
    \             )\n           )\n         ]\n        )\n        )\n", "  (cond [(null?\
    \ lst)\n         (list #f #f)\n         ]\n        [(or (number? (car lst))\n\
    \             (null? (cdr lst)))\n         (list car lst)\n         ]\n      \
    \  [else\n         (let ([a (largest_smallest_integers (cdr lst))])\n        \
    \   (let ([b (smallest_largest_integers (car lst))])\n             (cond [(< a\
    \ b)\n                    (cons (cons a b) lst)\n                    ]\n     \
    \                [(< b a)\n                     (cons (cons b a) lst)\n      \
    \               ]\n                     [else\n                     (cons (cons\
    \ a b) lst)\n                     ]))]))\n", "  (cond [(null? lst)\n         (list\
    \ #f #f)\n         ]\n        [(< (car lst) 0)\n         (list (car lst) (car\
    \ lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr lst))\n\
    \         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(>\
    \ (first lst) 0) (list (first lst) #f)]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(null? lst) '()]\n        [(< 0 (car lst)) (cons\
    \ (car lst) (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (let ([a (largest_smallest_integers\
    \ (rest lst))])\n            (cond\n              [(empty? a) (list #f #f)]\n\
    \              [(number? (first a)) (list (first a) (first a))]\n            \
    \  [else (let ([b (smallest_largest_integers (rest a))])\n                   \
    \   (cond\n                        [(empty? b) (list #f #f)]\n               \
    \         [(number? (first b)) (list (first b) (first b))]\n                 \
    \       [else (list a (first b))]\n                      )]))]))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(number? (first lst)) (list lst 1)]\n \
    \   [else (let ([a (largest_smallest_integers (rest lst))]\n               [b\
    \ smallest_integer (first lst)])\n             (if (< a b)\n                 (list\
    \ a b)\n                 (list b a)))]))\n", "  (cond [(null? lst)\n         (list\
    \ #f #f)\n         ]\n        [(< (car lst) 0)\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr\
    \ lst))\n         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(number? (car lst)) (list car lst)]\n    [else (let ([a (largest_smallest_integers\
    \ (cdr lst))])\n            (cond\n              [(empty? a) (list #f #f)]\n \
    \             [(number? (car a)) (list car a)]\n              [else (let ([b (smallest_largest_integers\
    \ (cdr a))])\n                      (cond\n                        [(empty? b)\
    \ (list #f #f)]\n                        [(number? (car b)) (list car b)]\n  \
    \                      [else (let ([c (largest (cdr b) (car a))])\n          \
    \                      (cond\n                                  [(empty? c) (list\
    \ #f #f)]\n                                  [(number? (car c)) (list car c)]\n\
    \                                  [else (let ([d (smallest_largest (cdr c) (car\
    \ a))])\n                                          (cond\n                   \
    \                         [(empty? d) (list #f #f)]\n                        \
    \                    [(number? (car d)) (list car d)]\n                      \
    \                      [else (let ([e (largest (cdr d) (car a))])\n          \
    \                                          (cond\n                           \
    \                           [(empty? e) (list #f #f)]\n                      \
    \                                [(number? (car e)) (list car e)]\n          \
    \                                            [else (let ([f (smallest_largest\
    \ (cdr e) (car a))])\n                                                       \
    \     (cond\n                                                              [(empty?\
    \ f) (list #f #f)]\n                                                         \
    \     [(number? (car f)) (list car f)]\n                                     \
    \                         [else (let ([g (largest (cdr f) (car a))])\n       \
    \                                                             (cond\n        \
    \                                                              [(empty? g) (list\
    \ #f #f)]\n                                                                  \
    \    [(number? (car g)) (list car g)]\n                                      \
    \                                [else (let ([h (smallest_largest (cdr g) (car\
    \ a))])\n                                                                    \
    \      (cond\n                                                               \
    \             [(empty? h) (list #f #f)]\n                                    \
    \                                        [(number? (car h)) (list car h)]\n  \
    \                                                                          [else\
    \ (let ([i (largest (cdr h) (car a))])\n                                     \
    \                                                 (cond\n                    \
    \                                                                    [(empty?\
    \ i) (list #f #f)]\n                                                         \
    \                               [(number? (car i)) (list car i)]\n           \
    \                                                                            \
    \ [else (let ([j", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(integer? (first lst))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (let ([a (largest_smallest_integers (first\
    \ lst))])\n           (let ([b (largest_smallest_integers (rest lst))])\n    \
    \         (cond [(< a b)\n                    (cons a (cons b (first lst)))]\n\
    \                     [(< b a)\n                     (cons (first lst) b)])\n\
    \             )\n           )\n         ]\n        ))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(< (first lst) 0) (list #f (first lst))]\n    [else\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(> (first lst) 0) (list (first lst) #f)]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(null? lst)\
    \ (list #f #f)]\n        [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond [(null? lst) (list #f #f)]\n        [(or (< 0 (car lst)) (< 0 (cdr lst)))\
    \ (list 0 (car lst))]\n        [else (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(null? lst)\n         (list #f #f)\n         ]\n        [(or (< 0 (car\
    \ lst))\n             (< 0 (cdr lst)))\n         (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         (> (first lst) (first lst))\n\
    \         (< (first lst) (first lst))\n         (largest_smallest_integers (rest\
    \ lst))\n         (list (first lst) (first lst))]\n        [(< (first lst) (first\
    \ lst))\n         (list (first lst) (first lst))\n         (largest_smallest_integers\
    \ (rest lst))\n         (list (first lst) (first lst))]\n        [(> (first lst)\
    \ (first lst))\n         (list (first lst) (first lst))\n         (list (first\
    \ lst) (first lst))\n         (largest_smallest_integers (rest lst))\n       \
    \  (list (first lst) (first lst))]\n        [else\n         (list (first lst)\
    \ (first lst))\n         (list (first lst) (first lst))\n         (list (first\
    \ lst) (first lst))\n         (list (first lst) (first lst))\n         (list (first\
    \ lst) (first lst))\n         (list (first lst) (first lst))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(number? (first lst)) (list (first lst)\
    \ (first lst))]\n    [else (let ([a (largest_smallest_integers (rest lst))])\n\
    \            (cond\n              [(empty? a) (list #f #f)]\n              [(number?\
    \ (first a)) (list (first a) (first a))]\n              [else (let ([b (smallest_largest_integers\
    \ (rest a))])\n                      (cond\n                        [(empty? b)\
    \ (list #f #f)]\n                        [(number? (first b)) (list (first b)\
    \ (first b))]\n                        [else (let ([c (smallest_largest_integers\
    \ (rest b))])\n                                (cond\n                       \
    \           [(empty? c) (list #f #f)]\n                                  [(number?\
    \ (first c)) (list (first c) (first c))]\n                                  [else\
    \ (let ([d (largest_smallest_integers (rest c))])\n                          \
    \                (cond\n                                            [(empty? d)\
    \ (list #f #f)]\n                                            [(number? (first\
    \ d)) (list (first d) (first d))]\n                                          \
    \  [else (list a (first b) b (first c) c (first d) d)])])])])])])]))]))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (list car lst)]\n\
    \    [else (let ([a (largest_smallest_integers (cdr lst))])\n              (cond\n\
    \              [(empty? a) (list #f #f)]\n              [(number? (car a)) (list\
    \ car a)]\n              [else (let ([b (smallest_largest_integers (cdr a))])\n\
    \                        (cond\n                        [(empty? b) (list #f #f)]\n\
    \                        [(number? (car b)) (list car b)]\n                  \
    \      [else (let ([c (largest (cdr b) (car a))])\n                          \
    \      (cond\n                                [(empty? c) (list #f #f)]\n    \
    \                            [(number? (car c)) (list car c)]\n              \
    \                  [else (let ([d (smallest_largest (cdr c) (car a))])\n     \
    \                                   (cond\n                                  \
    \      [(empty? d) (list #f #f)]\n                                        [(number?\
    \ (car d)) (list car d)]\n                                        [else (let ([e\
    \ (largest (cdr d) (car a))])\n                                              \
    \  (cond\n                                                [(empty? e) (list #f\
    \ #f)]\n                                                [(number? (car e)) (list\
    \ car e)]\n                                                [else (let ([f (smallest_largest\
    \ (cdr e) (car a))])\n                                                       \
    \ (cond\n                                                        [(empty? f) (list\
    \ #f #f)]\n                                                        [(number? (car\
    \ f)) (list car f)]\n                                                        [else\
    \ (let ([g (smallest_largest (cdr f) (car a))])\n                            \
    \                                    (cond\n                                 \
    \                               [(empty? g) (list #f #f)]\n                  \
    \                                              [(number? (car g)) (list car g)]\n\
    \                                                                [else (let ([h\
    \ (largest (cdr g) (car a))])\n                                              \
    \                          (cond\n                                           \
    \                             [(empty? h) (list #f #f)]\n                    \
    \                                                    [(number? (car h)) (list\
    \ car h)]\n                                                                  \
    \      [else (let ([i (smallest_largest (cdr h) (car a))])\n                 \
    \                                                               (cond\n      \
    \                                                                          [(empty?\
    \ i) (list #f #f)]\n                                                         \
    \                       [(number? (car i)) (list car i)]\n                   \
    \                                                             [else (let ([j (",
  "  (cond [(null? lst)\n         (list #f #f)\n         ]\n        [(< (car lst)\
    \ 0)\n         (list (car lst) #f)]\n        [else\n         (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car\
    \ lst)) (list (car lst) (smallest (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first\
    \ lst) 0) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let\
    \ ([a (first lst)\n             (b (rest lst)])\n       (cond\n         [(< a\
    \ b)\n          (list a b)]\n         [(< b a)\n          (list b a)]\n      \
    \   [else\n          (list #f #f)]))]\n    [(number? (first lst))\n     (let ([a\
    \ (first lst)\n             (b (rest lst)])\n       (cond\n         [(< a b)\n\
    \          (list a b)]\n         [(< b a)\n          (list b a)]\n         [else\n\
    \          (list #f #f)]))]\n    [else\n     (let ([a (first lst)\n          \
    \   (b (rest lst)])\n       (cond\n         [(< a b)\n          (list a b)]\n\
    \         [(< b a)\n          (list b a)]\n         [else\n          (list #f\
    \ #f)]))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (first\
    \ lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(null? lst) (list #f #f)] \n        [(< (car lst)\
    \ 0) (list #f (car lst))] \n        [else (list (max 0 (car lst)) (min 1 (cdr\
    \ lst)))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n  \
    \      [(< (first lst) 0)\n         (list #f (first lst))\n         ]\n      \
    \  [else\n         (largest_smallest_integers (rest lst))\n         ]\n      \
    \  ))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first\
    \ lst)\n             (b (rest lst)])\n       (cond\n         [(< a b)\n      \
    \    (list (cons a b))\n          (list (cons a (- b a)))]\n         [(< b a)\n\
    \          (list (cons a b))\n          (list (cons (- a b) a))]))]\n    [(< (first\
    \ lst) (first lst))\n     (list (cons (first lst) (first lst)))\n     (list (cons\
    \ (first lst) (second lst)))]\n    [(< (first lst) (second lst))\n     (list (cons\
    \ (first lst) (first lst)))\n     (list (cons (first lst) (second lst)))]\n  \
    \  [else\n     (list (cons (first lst) (first lst)))\n     (list (cons (first\
    \ lst) (second lst)))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n  \
    \       ]\n        [(< (car lst) 0)\n         (list (car lst) (car lst))\n   \
    \      ]\n        [else\n         (largest_smallest_integers (cdr lst))\n    \
    \     ]))\n", "  (cond [(empty? lst) (list #f #f)]\n        [(< (first lst) 0)\
    \ (list #f (first lst))]\n        [else (list (first lst) (largest-smallest (rest\
    \ lst)))]))\n", "  (cond [(null? lst) '()]\n        [(< 0 (car lst)) (cons (car\
    \ lst) (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(integer?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (let ([a (largest_smallest_integers\
    \ (rest lst))]\n               [b smallest_integer (first lst)])\n           \
    \ (cond\n              [(< a b) (list a b)]\n              [(< b a) (list b a)]\n\
    \              [else (list a b)]))]))\n", "  (cond\n    [(empty? lst) (list #f\
    \ #f)]\n    [(< (first lst) 0) (list #f (first lst))]\n    [else (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(> (first lst) 0) (list (first lst) #f)]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(integer?\
    \ (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \  [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\
    \ (list #f #f)] \n        [(integer? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond [(empty? lst) (list #f #f)] \n        [(integer? (first lst)) (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(integer?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (let ([a (largest_smallest_integers\
    \ (rest lst))])\n            (cond\n              [(empty? a) (list #f #f)]\n\
    \              [(integer? (first a)) (list (first a) (first a))]\n           \
    \   [else (let ([b (smallest_largest_integers (rest a))])\n                  \
    \    (cond\n                        [(empty? b) (list #f #f)]\n              \
    \          [(integer? (first b)) (list (first b) (first b))]\n               \
    \         [else (cons (first a) (cons (first b) (largest_smallest_integers (rest\
    \ b))))]))]))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) 0) (list #f #f)]\n    [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (car lst) 0)\n         (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n   \
    \ [(> (first lst) 0) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(integer? (first lst))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (let ([a (largest_smallest_integers (first\
    \ lst))])\n           (cond [(< a b)\n                   (cons a\n           \
    \              (largest_smallest_integers (rest lst)))]\n                 [else\n\
    \                   (cons b\n                         (largest_smallest_integers\
    \ (rest lst)))]))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first\
    \ lst) 0) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (list lst #f)]\n    [else (let ([a (largest_smallest_integers (rest\
    \ lst))])\n            (cond\n              [(empty? a) (list #f #f)]\n      \
    \        [(number? (first a)) (list lst #f)]\n              [else (let ([b (smallest_largest_integers\
    \ (rest a))])\n                      (cond\n                        [(empty? b)\
    \ (list #f #f)]\n                        [(number? (first b)) (list lst #f)]\n\
    \                        [else (cons (first a) (cons (first b) (cons (first lst)\
    \ (cons (first a) (cons (first b) (cons (first lst) (cons (first a) (cons (first\
    \ b) (cons (first lst) (cons (first a) (cons (first b) (cons (first lst) (cons\
    \ (first a) (cons (first b) (cons (first lst) (cons (first a) (cons (first b)\
    \ (cons (first lst) (cons (first a) (cons (first b) (cons (first lst) (cons (first\
    \ a) (cons (first b) (cons (first lst) (cons (first a) (cons (first b) (cons (first\
    \ lst) (cons (first a) (cons (first b) (cons (first lst) (cons (first a) (cons\
    \ (first b) (cons (first lst) (cons (first a) (cons (first b) (cons (first lst)\
    \ (cons (first a) (cons (first b) (cons (first lst) (cons (first a) (cons (first\
    \ b) (cons (first lst) (cons (first a) (cons (first b) (cons (first lst) (cons\
    \ (first a) (cons (first b) (cons (first lst) (cons (first a) (cons (first b)\
    \ (cons (first lst) (cons (first a) (cons (first b) (cons (first lst) (cons (first\
    \ a) (cons (first b) (cons (first lst) (cons (first a) (cons (first b) (cons (first\
    \ lst) (cons (first a) (cons (first b) (cons (first lst) (cons (first a) (cons\
    \ (first b) (cons (first lst) (cons (first a) (cons (first b) (cons (first lst)\
    \ (cons (first a) (cons (first b) (cons (first lst) (cons (first a) (cons (first\
    \ b) (cons (first lst) (cons (first a) (", "  (cond\n    [(empty? lst) (list #f\
    \ #f)]\n    [(number? (first lst)) (list (first lst) (first lst))]\n    [else\
    \ (let ([a (largest_smallest_integers (rest lst))])\n            (cond\n     \
    \         [(empty? a) (list #f #f)]\n              [(number? (first a)) (list\
    \ (first a) (first a))]\n              [else (let ([b (smallest_largest_integers\
    \ (rest a))])\n                      (cond\n                        [(empty? b)\
    \ (list #f #f)]\n                        [(number? (first b)) (list (first b)\
    \ (first b))]\n                        [else (list a (first b))]\n           \
    \           ))]\n            ))]\n  ))\n", "  (cond\n    [(empty? lst) (list #f\
    \ #f)]\n    [(number? (first lst)) (list lst #f)]\n    [else (let ([a (largest_smallest_integers\
    \ (rest lst))])\n            (cond\n              [(empty? a) (list #f #f)]\n\
    \              [(number? (first a)) (list a #f)]\n              [else (let ([b\
    \ (smallest_largest_integers (rest a))])\n                      (cond\n      \
    \                  [(empty? b) (list #f #f)]\n                        [(number?\
    \ (first b)) (list a b)]\n                        [else (list a b)]))]))]))\n",
  "  (cond [(null? lst)\n         (list #f #f)\n         ]\n        [(< (car lst)\
    \ 0)\n         (largest_smallest_integers (cdr lst))\n         ]\n        [else\n\
    \         (largest_smallest_integers (cdr lst))\n         ]\n        ))\n", " \
    \ (cond [(null? lst) (list #f #f)] \n        [(number? (car lst)) (cons (car lst)\
    \ (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (car lst) 0)\n         (list (car lst) (car lst))\n         ]\n \
    \       [else\n         (largest_smallest_integers (cdr lst))\n         ]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first lst) 0) (list (first lst)\
    \ (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(empty? lst) (list #f #f)] \n        [(integer? (car lst)) (cons (car lst)\
    \ (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let\
    \ ([a (first lst)\n             (b (rest lst)])\n       (cond\n         [(< a\
    \ b)\n          (list a b)\n          (largest_smallest_integers (rest lst))]\n\
    \         [else\n          (list #f #f)\n          (largest_smallest_integers\
    \ (rest lst))])))]\n    [else\n     (let ([a (first lst)\n             (b (rest\
    \ lst)])\n       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list #f #f)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< 0\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(null? lst) (list #f #f)] \n        [(< (car lst)\
    \ 0) (list #f (car lst))] \n        [else (list (car lst) (largest-smallest-integers\
    \ (cdr lst)))]))\n", "  (cond [(null? lst) (list #f #f)] \n        [(< (car lst)\
    \ 0) (list #f (car lst))] \n        [else (list (max 0 (car lst)) (min 1 (cdr\
    \ lst)))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n         [(integer?\
    \ (car lst))\n          (cons (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \         [else\n          (largest_smallest_integers (cdr lst))]\n         ]))\n",
  "  (cond [(null? lst)\n         (list #f #f)\n         ]\n        [(< (car lst)\
    \ 0)\n         (list (car lst) (cadr lst))\n         ]\n        [else\n      \
    \   (largest_smallest_integers (cdr lst))\n         ]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(< (first lst) 0) (list #f (first lst))]\n    [else\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(empty?\
    \ lst) (list #f #f)] \n        [(negative? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n   \
    \          (b (second lst)])\n       (cond\n         [(< a b)\n          (list\
    \ a b)\n          (largest_smallest_integers (rest lst))]\n         [else\n  \
    \        (list a #f)\n          (largest_smallest_integers (rest lst))])))]\n\
    \    [else\n     (let ([a (first lst)\n             (b (second lst)])\n      \
    \ (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list #f #f)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n     \
    \    [(integer? (car lst))\n          (cons (car lst)\n                (largest_smallest_integers\
    \ (cdr lst)))]\n         [else\n          (let ([a (largest_smallest_integers\
    \ (car lst))]\n                [b (largest_smallest_integers (cdr lst))])\n  \
    \          (cond [(< a b)\n                   (cons a (cons b (list #f #f)))]\n\
    \                  [(< b a)\n                   (cons (car lst) (cons b (list\
    \ #f #f)))]\n                  [else\n                   (cons a (cons b (list\
    \ #f #f)))]))]))\n", "  (cond [(null? lst) '()]\n        [(and (number? (car lst))\
    \ (< 0 (car lst)))\n         (cons (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond [(empty?\
    \ lst)\n         (list #f #f)\n         ]\n        [(< (first lst) 0)\n      \
    \   (largest_smallest_integers (rest lst))\n         ]\n        [else\n      \
    \   (largest_smallest_integers (rest lst))\n         ]\n        ))\n", "  (cond\
    \ [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst) 0)\n\
    \         (largest_smallest_integers (rest lst))\n         ]\n        [else\n\
    \         (largest_smallest_integers (rest lst))\n         ]\n        ))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (list (car\
    \ lst) (smallest (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(empty? lst) (list #f #f)] \n        [(integer? (first lst)) (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(null? lst) '()]\n        [(< (first lst) 0) (cons\
    \ (first lst) '())]\n        [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) 0) (list #f (first lst))]\n    [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) 0) (list #f #f)]\n    [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (car lst) 0)\n         (list (car lst) (car lst))\n         ]\n \
    \       [else\n         (largest_smallest_integers (cdr lst))\n         ]))\n",
  "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n    \
    \         (b (second lst)])\n       (cond\n         [(< a b)\n          (list\
    \ a b)\n          (largest_smallest_integers (rest lst))]\n         [(< b a)\n\
    \          (list b a)\n          (largest_smallest_integers (rest lst))]\n   \
    \      [else\n          (list #f #f)\n          (largest_smallest_integers (rest\
    \ lst))])))]\n    [else\n     (let ([a (first lst)\n             (b (second lst)])\n\
    \       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(< b a)\n          (list b a)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list #f #f)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(> (first lst) 0)\n         (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n\
    \         ]\n        [(integer? (car lst))\n         (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else\n         (let ([a (largest_smallest_integers (car\
    \ lst))])\n           (cond [(< a (car lst))\n                  (cons a\n    \
    \                     (largest_smallest_integers (cdr lst)))]\n              \
    \   [else\n                  (cons a\n                        (largest_smallest_integers\
    \ (cdr lst)))]))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (first lst)) (list lst 1)]\n    [else (let ([a (largest_smallest_integers (rest\
    \ lst))])\n            (cond\n              [(empty? a) (list #f #f)]\n      \
    \        [(number? (first a)) (list lst 1)]\n              [else (let ([b (smallest_largest_integers\
    \ (rest a))])\n                        (cond\n                          [(empty?\
    \ b) (list #f #f)]\n                          [(number? (first b)) (list lst 1)]\n\
    \                          [else (let ([c (smallest_largest_integers (rest b))])\n\
    \                                    (cond\n                                 \
    \     [(empty? c) (list #f #f)]\n                                      [(number?\
    \ (first c)) (list lst 1)]\n                                      [else (let ([d\
    \ (largest_smallest_integers (rest c))])\n                                   \
    \           (cond\n                                                [(empty? d)\
    \ (list #f #f)]\n                                                [(number? (first\
    \ d)) (list lst 1)]\n                                                [else (let\
    \ ([e (smallest_largest_integers (rest d))])\n                               \
    \                         (cond\n                                            \
    \              [(empty? e) (list #f #f)]\n                                   \
    \                       [(number? (first e)) (list lst 1)]\n                 \
    \                                         [else (let ([f (smallest_largest_integers\
    \ (rest e))])\n                                                              \
    \      (cond\n                                                               \
    \       [(empty? f) (list #f #f)]\n                                          \
    \                            [(number? (first f)) (list lst 1)]\n            \
    \                                                          [else (let ([g (largest_smallest_integers\
    \ (rest f))])\n                                                              \
    \            (cond\n                                                         \
    \                   [(empty? g) (list #f #f)]\n                              \
    \                                              [(number? (first g)) (list lst\
    \ 1)]\n                                                                      \
    \      [else (let ([h (smallest_largest_integers (rest g))])\n               \
    \                                                                       (cond\n\
    \                                                                            \
    \            [(empty? h) (list #f #f)]\n                                     \
    \                                                   [(number? (first h)) (list\
    \ lst 1)]\n                                                                  \
    \                      [else (let ([i (smallest_largest_integers (rest h))])\n\
    \                                                                            \
    \                    (cond\n                                                 \
    \                                                 [(empty? i) (list #f #f)]\n\
    \                                                                            \
    \                      [(number? (first i)) (list lst 1)]\n                  \
    \                                                                            \
    \    [else (let ([j (smallest_largest_integers (rest i))])\n                 \
    \                                                                            \
    \             (cond\n                                                        \
    \                                                    [(empty? j) (list #f #f)]\n\
    \                                                                            \
    \                                [(", "  (cond [(empty? lst) (list #f #f)] \n\
    \        [(< 0 (first lst)) (list #f (first lst))] \n        [else (list (max\
    \ (first lst) (first lst)) (min (first lst) (first lst)))]))\n", "  (cond\n  \
    \  [(empty? lst) (list #f #f)]\n    [(> (first lst) 0) (list (first lst) #f)]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\n\
    \         (list #f #f)\n         [(integer? (car lst))\n          (cons (car lst)\n\
    \                (largest_smallest_integers (cdr lst)))]\n         [else\n   \
    \       (let ([a (largest_smallest_integers (car lst))]\n                [b (largest_smallest_integers\
    \ (cdr lst))])\n            (cond [(< a b)\n                   (cons a (cons b\
    \ (list #f #f)))]\n                  [(< b a)\n                   (cons b (cons\
    \ a (list #f #f)))]\n                  [else\n                   (cons a (cons\
    \ b (list #f #f)))])))])\n", "  (cond [(null? lst)\n         (list #f #f)\n  \
    \       ]\n        [(< (car lst) 0)\n         (largest_smallest_integers (cdr\
    \ lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr lst))\n\
    \         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(<\
    \ (first lst) 0) (list #f #f)]\n    [(< (first lst) (- (first lst)))\n     (list\
    \ (first lst) (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(null? lst)\n         (list #f #f)\n         ]\n        [(< (car lst)\
    \ 0)\n         (largest_smallest_integers (cdr lst))\n         ]\n        [else\n\
    \         (largest_smallest_integers (cdr lst))\n         ]\n        ))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (list car lst)]\n\
    \    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (list #f #f)\n     (let ([a (first lst)\n             (b (second\
    \ lst)])\n       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(< b a)\n          (list b a)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]\n    [else\n     (let ([a (first lst)\n             (b (second\
    \ lst)])\n       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(< b a)\n          (list b a)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n      \
    \   ]\n        [(< (car lst) 0)\n         (largest_smallest_integers (cdr lst))\n\
    \         ]\n        [else\n         (largest_smallest_integers (cdr lst))\n \
    \        ]\n        ))\n", "  (cond [(null? lst) (list #f #f)] \n        [(number?\
    \ (car lst)) (cons (car lst) (largest_smallest_integers (cdr lst)))]\n       \
    \ [else (largest_smallest_integers (cdr lst))]))\n", "  (cond [(null? lst) (list\
    \ #f #f)] \n        [(number? (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst)\
    \ 0)\n         (list #f (first lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n  \
    \  [(number? (car lst)) (list (car lst) (smallest (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) 0) (list #f #f)]\n    [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n        \
    \ [(integer? (first lst))\n          (cons (first lst)\n                (largest_smallest_integers\
    \ (rest lst)))]\n         [else\n          (let ([a (largest_smallest_integers\
    \ (first lst))])\n            (cond [(empty? a)\n                   (list #f #f)\n\
    \                   [(integer? (first a))\n                    (cons (first a)\n\
    \                          (largest_smallest_integers (rest a)))]\n          \
    \         [else\n                    (let ([b (largest_smallest_integers (first\
    \ lst))])\n                      (cond [(empty? b)\n                         \
    \   (list #f #f)\n                            [(integer? (first b))\n        \
    \                     (cons (first b)\n                                    (largest_smallest_integers\
    \ (rest b)))]\n                            [else\n                           \
    \  (cons (first lst)\n                                    (largest_smallest_integers\
    \ (rest lst)))])])])])\n</code>\n<|/ a tags=racket,scheme |>\n<| a dscore=1 |>\n\
    <code>", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first\
    \ lst)\n             (b (second lst)])\n       (cond\n         [(< a b)\n    \
    \      (list a b)\n          (let ([c (first lst)\n                   (d (second\
    \ lst)])\n            (cond\n              [(< c d)\n               (list c d)\n\
    \               (let ([e (first lst)\n                       (f (second lst)])\n\
    \                 (cond\n                   [(< e f)\n                    (list\
    \ e f)\n                    (let ([g (first lst)\n                           (h\
    \ (second lst)])\n                       (cond\n                         [(< g\
    \ h)\n                           (list g h)\n                           (let ([i\
    \ (first lst)\n                                   (j (second lst)])\n        \
    \                      (cond\n                                [(< i j)\n     \
    \                            (list i j)\n                                 (let\
    \ ([k (first lst)\n                                         (l (second lst)])\n\
    \                                        (cond\n                             \
    \             [(< k l)\n                                           (list k l)\n\
    \                                           (let ([m (first lst)\n           \
    \                                       (n (second lst)])\n                  \
    \                          (cond\n                                           \
    \   [(< m n)\n                                               (list m n)\n    \
    \                                           (let ([o (first lst)\n           \
    \                                           (p (second lst)])\n              \
    \                                 (cond\n                                    \
    \             [(< o p)\n                                                   (list\
    \ o p)\n                                                   (let ([q (first lst)\n\
    \                                                         (r (second lst)])\n\
    \                                                   (cond\n                  \
    \                                   [(< q r)\n                               \
    \                        (list q r)\n                                        \
    \               (let ([s (first lst)\n                                       \
    \                      (t (second lst)])\n                                   \
    \                    (cond\n                                                 \
    \        [(< s t)\n                                                         (list\
    \ s t)\n                                                         (let ([u (first\
    \ lst)\n                                                              (v (second\
    \ lst)])\n                                                          (cond\n  \
    \                                                          [(< u v)\n        \
    \                                                     (list u v)\n           \
    \                                                  (let ([w (first lst)\n    \
    \                                                   (x (second lst)])\n      \
    \                                                      (cond\n               \
    \                                               [(< w x)\n                   \
    \                                            (list w x)\n                    \
    \                                           (let ([y (first lst)\n           \
    \                                                         (z (second lst)])\n\
    \                                                              (cond\n       \
    \                                                         [(< y z)\n         \
    \                                                        (list y z)\n        \
    \                                                         (let ([a (first lst)\n\
    \                                                                         (b (second\
    \ lst)])\n                                                                  (cond\n\
    \                                                                    [(< a b)\n\
    \                                                                     (list a\
    \ b)\n                                                                     (let\
    \ ([c (first lst)\n                                                          \
    \   (d (second lst)])\n                                                      \
    \            (cond\n                                                         \
    \           [(< c d)\n                                                       \
    \              (list c d)", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(<\
    \ (first lst) 0) (list #f (first lst))]\n    [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(< (first\
    \ lst) (first lst)) (list (first lst) (first lst))]\n        [else (list (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(null? lst)\n\
    \         (list #f #f)\n         [(integer? (car lst))\n          (cons (car lst)\n\
    \                (largest_smallest_integers (cdr lst)))]\n         [else\n   \
    \       (let ([a (largest_smallest_integers (car lst))])\n            (cond [(null?\
    \ a)\n                   (list #f #f)\n                   (integer? (car lst))\n\
    \                   (cons (car lst)\n                         (largest_smallest_integers\
    \ (cdr lst)))]\n                  [else\n                   (let ([b (largest_smallest_integers\
    \ (cdr lst))])\n                     (cond [(null? b)\n                      \
    \      (list #f #f)\n                            (integer? (car lst))\n      \
    \                      (cons (car lst)\n                                  (largest_smallest_integers\
    \ (cdr lst)))]\n                           [else\n                           \
    \ (let ([c (largest_smallest_integers (cdr lst))])\n                         \
    \     (cond [(null? c)\n                                      (list #f #f)\n \
    \                                     (integer? (car lst))\n                 \
    \                     (cons (car lst)\n                                      \
    \       (largest_smallest_integers (cdr lst)))]\n                            \
    \         [else\n                                      (let ([d (largest_smallest_integers\
    \ (cdr lst))])\n                                        (cond [(null? d)\n   \
    \                                             (list #f #f)\n                 \
    \                               (integer? (car lst))\n                       \
    \                         (cons (car lst)\n                                  \
    \                    (largest_smallest_integers (cdr lst)))]\n               \
    \                                [else\n                                     \
    \           (let ([e (largest_smallest_integers (cdr lst))])\n               \
    \                                   (cond [(null? e)\n                       \
    \                                   (list #f #f)\n                           \
    \                               (integer? (car lst))\n                       \
    \                                   (cons (car lst)\n                        \
    \                                        (largest_smallest_integers (cdr lst)))]\n\
    \                                                         [else\n            \
    \                                              (let ([f (largest_smallest_integers\
    \ (cdr lst))])\n                                                            (cond\
    \ [(null? f)\n                                                               \
    \     (list #f #f)\n                                                         \
    \           (integer? (car lst))\n                                           \
    \                         (cons (car lst)\n                                  \
    \                                        (largest_smallest_integers (cdr lst)))]\n\
    \                                                                   [else\n  \
    \                                                                  (let ([g (largest_smallest_integers\
    \ (cdr lst))])\n                                                             \
    \         (cond [(null? g)\n                                                 \
    \                            (list #f #f)", "  (cond\n    [(empty? lst) (list\
    \ #f #f)]\n    [(integer? (car lst)) (list car lst)]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car\
    \ lst)) (list car lst)]\n    [else (let ([a (largest_smallest_integers (cdr lst))])\n\
    \              (cond\n               [(empty? a) (list #f #f)]\n             \
    \  [(number? (car a)) (list car a)]\n               [else (let ([b (smallest_largest_integers\
    \ (cdr a))])\n                        (cond\n                         [(empty?\
    \ b) (list #f #f)]\n                         [(number? (car b)) (list car b)]\n\
    \                         [else (let ([c (largest_integers (cdr b))])\n      \
    \                            (cond\n                                   [(empty?\
    \ c) (list #f #f)]\n                                   [(number? (car c)) (list\
    \ car c)]\n                                   [else (let ([d (smallest_integers\
    \ (cdr c))])\n                                          (cond\n              \
    \                             [(empty? d) (list #f #f)]\n                    \
    \                       [(number? (car d)) (list car d)]\n                   \
    \                        [else (let ([e (largest_integers (cdr d))])\n       \
    \                                             (cond\n                        \
    \                             [(empty? e) (list #f #f)]\n                    \
    \                                 [(number? (car e)) (list car e)]\n         \
    \                                            [else (let ([f (smallest_integers\
    \ (cdr e))])\n                                                            (cond\n\
    \                                                             [(empty? f) (list\
    \ #f #f)]\n                                                             [(number?\
    \ (car f)) (list car f)]\n                                                   \
    \          [else (let ([g (largest_integers (cdr f))])\n                     \
    \                                               (cond\n                      \
    \                                               [(empty? g) (list #f #f)]\n  \
    \                                                                   [(number?\
    \ (car g)) (list car g)]\n                                                   \
    \                  [else (let ([h (smallest_integers (cdr g))])\n            \
    \                                                                  (cond\n   \
    \                                                                            [(empty?\
    \ h) (list #f #f)]\n                                                         \
    \                      [(number? (car h)) (list car h)]\n                    \
    \                                                           [else (let ([i (largest_integers\
    \ (cdr h))])\n                                                               \
    \                       (cond\n                                              \
    \                                         [(empty? i) (list #f #f)]\n        \
    \                                                                            \
    \   [(number? (car i)) (list car i)]\n                                       \
    \                                                [else (let ([j (smallest_integers\
    \ (cdr i))])\n                                                               \
    \                               (cond\n                                      \
    \                          ", "  (cond [(null? lst)\n         (list #f #f)\n \
    \        [(integer? (car lst))\n          (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n         [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n   \
    \          (b (second lst)])\n       (cond\n         [(< a b)\n          (list\
    \ a b)\n          (let ([c (first lst)\n                   (d (second lst)])\n\
    \            (cond\n              [(< c d)\n               (list c d)\n      \
    \         (let ([e (first lst)\n                       (f (second lst)])\n   \
    \              (cond\n                   [(< e f)\n                    (list e\
    \ f)\n                    (let ([g (first lst)\n                           (h\
    \ (second lst)])\n                      (cond\n                        [(< g h)\n\
    \                         (list g h)\n                         (let ([i (first\
    \ lst)\n                                 (j (second lst)])\n                 \
    \          (cond\n                            [(< i j)\n                     \
    \        (list i j)\n                             (let ([k (first lst)\n     \
    \                                (l (second lst)])\n                         \
    \      (cond\n                                [(< k l)\n                     \
    \            (list k l)\n                                 (let ([m (first lst)\n\
    \                                        (n (second lst)])\n                 \
    \                  (cond\n                                    [(< m n)\n     \
    \                                (list m n)\n                                \
    \     (let ([o (first lst)\n                                           (p (second\
    \ lst)])\n                                       (cond\n                     \
    \                   [(< o p)\n                                         (list o\
    \ p)\n                                         (let ([q (first lst)\n        \
    \                                       (r (second lst)])\n                  \
    \                         (cond\n                                            [(<\
    \ q r)\n                                             (list q r)\n            \
    \                                 (let ([s (first lst)\n                     \
    \                                (t (second lst)])\n                         \
    \                      (cond\n                                               \
    \ [(< s t)\n                                                 (list s t)\n    \
    \                                            (let ([u (first lst)\n          \
    \                                            (v (second lst)])\n             \
    \                                     (cond\n                                \
    \                    [(< u v)\n                                              \
    \       (list u v)\n                                                     (let\
    \ ([w (first lst)\n                                                          \
    \ (x (second lst)])\n                                                     (cond\n\
    \                                                      [(< w x)\n            \
    \                                           (list w x)\n                     \
    \                                  (let ([y (first lst)\n                    \
    \                                        (z (second lst)])\n                 \
    \                                      (cond\n                               \
    \                         [(< y z)\n                                         \
    \                (list y z)\n                                                \
    \         (let ([a (first lst)\n                                             \
    \                 (b (second lst)])\n                                        \
    \                 (cond\n                                                    \
    \      [(< a b)\n                                                           (list\
    \ a b)\n                                                           (let ([c (first\
    \ lst)\n                                                                 (d (second\
    \ lst)])\n                                                            (cond\n\
    \                                                              [(< c d)\n    \
    \                                                           (list c d)\n     \
    \                                                         (let ([e (first ", " \
    \ (cond [(null? lst) (list #f #f)] \n        [(< (car lst) 0) (list #f (car lst))]\
    \ \n        [else (list (car lst) (largest-smallest-integers (cdr lst)))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first lst) 0) (list #f (first\
    \ lst))]\n    [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(integer? (first lst)) (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) 0) (list (first lst) #f #f)]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first\
    \ lst) (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) (list #f #f)]\n        [(integer?\
    \ (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \      [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(empty? lst)\n\
    \         (list #f #f)\n         ]\n        [(integer? (first lst))\n        \
    \ (cons (first lst)\n               (largest_smallest_integers (rest lst)))\n\
    \         ]\n        [else\n         (let ([a (largest_smallest_integers (first\
    \ lst))])\n           (cond [(empty? a) (list #f #f)]\n                 [(integer?\
    \ (first a)) (cons (first a) (largest_smallest_integers (rest a)))]\n        \
    \         [else (cons a (largest_smallest_integers (rest a)))]))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (list (car lst) (smallest\
    \ (cdr lst)))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(< (first lst) 0) (list #f (first lst))]\n\
    \    [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n", " \
    \ (cond [(null? lst)\n         (list #f #f)\n         ]\n        [(< (car lst)\
    \ 0)\n         (list (car lst) #f)\n         ]\n        [(< (car lst) (cadr lst))\n\
    \         (list (car lst) (cadr lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]))\n", "  (cond [(null? lst)\n         (list #f #f)\n\
    \         ]\n        [(< (first lst) 0)\n         (list #f (first lst))\n    \
    \     ]\n        [else\n         (largest_smallest_integers (rest lst))\n    \
    \     ]))\n", "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first\
    \ lst)\n             (b (rest lst)])\n       (cond\n         [(< a b)\n      \
    \    (list a b)\n          (largest_smallest_integers (rest lst))]\n         [(>\
    \ a b)\n          (list a b)\n          (largest_smallest_integers (rest lst))]\n\
    \         [else\n          (list a b)\n          (largest_smallest_integers (rest\
    \ lst))])))]\n    [else\n     (let ([a (first lst)\n             (b (rest lst)])\n\
    \       (cond\n         [(< a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [(> a b)\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))]\n         [else\n          (list a b)\n          (largest_smallest_integers\
    \ (rest lst))])))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n     \
    \    ]\n        [(< (first lst) 0)\n         (list #f (first lst))\n         ]\n\
    \        [else\n         (largest_smallest_integers (rest lst))\n         ]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first lst) (first lst)) (list\
    \ (first lst) (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(empty? lst) (list #f #f)] \n        [(< (first lst) 0) (list #f (first\
    \ lst))]\n        [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n    \
    \         (b (second lst)])\n       (cond\n         [(< a b)\n          (list\
    \ a b)\n          (let ([c (first lst)\n                   (d (second lst)])\n\
    \            (cond\n              [(< c d)\n               (list c d)\n      \
    \         (let ([e (first lst)\n                       (f (second lst)])\n   \
    \              (cond\n                   [(< e f)\n                    (list e\
    \ f)\n                    (let ([g (first lst)\n                           (h\
    \ (second lst)])\n                       (cond\n                         [(< g\
    \ h)\n                           (list g h)\n                           (let ([i\
    \ (first lst)\n                                   (j (second lst)])\n        \
    \                      (cond\n                                [(< i j)\n     \
    \                            (list i j)\n                                 (let\
    \ ([k (first lst)\n                                         (l (second lst)])\n\
    \                                        (cond\n                             \
    \             [(< k l)\n                                           (list k l)\n\
    \                                           (let ([m (first lst)\n           \
    \                                       (n (second lst)])\n                  \
    \                          (cond\n                                           \
    \   [(< m n)\n                                               (list m n)\n    \
    \                                           (let ([o (first lst)\n           \
    \                                           (p (second lst)])\n              \
    \                                 (cond\n                                    \
    \             [(< o p)\n                                                   (list\
    \ o p)\n                                                   (let ([q (first lst)\n\
    \                                                         (r (second lst)])\n\
    \                                                   (cond\n                  \
    \                                   [(< q r)\n                               \
    \                        (list q r)\n                                        \
    \               (let ([s (first lst)\n                                       \
    \                      (t (second lst)])\n                                   \
    \                    (cond\n                                                 \
    \       [(< s t)\n                                                         (list\
    \ s t)\n                                                         (let ([u (first\
    \ lst)\n                                                              (v (second\
    \ lst)])\n                                                         (cond\n   \
    \                                                       [(< u v)\n           \
    \                                                (list u v)\n                \
    \                                           (let ([w (first lst)\n           \
    \                                                        (x (second lst)])\n \
    \                                                          (cond\n           \
    \                                                 [(< w x)\n                 \
    \                                            (list w x)\n                    \
    \                                         (let ([y (first lst)\n             \
    \                                         (z (second lst)])\n                \
    \                                            (cond\n                         \
    \                                     [(< y z)\n                             \
    \                                  (list y z)\n                              \
    \                                 (let ([a (first lst)\n                     \
    \                                                (b (second lst)])\n         \
    \                                                     (cond\n                \
    \                                                [(< a b)\n                  \
    \                                               (list a b)\n                 \
    \                                                (let ([c (first lst)\n      \
    \                                                                   (d (second\
    \ lst)])\n                                                                (cond\n\
    \                                                                  [(< c d)\n\
    \                                                                   (list c d)\n\
    \                                                                   (let ([",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(integer? (first lst)) (list (first\
    \ lst) (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n    \
    \         (b (second lst)])\n       (cond\n         [(< a b)\n          (list\
    \ (first lst) b)\n          (list (first lst) a)\n          (list (first lst)\
    \ a)\n          (list (first lst) b)\n          (list (first lst) b)\n       \
    \   (list (first lst) a)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) b)\n          (list (first lst) a)\n  \
    \        (list (first lst) a)\n          (list (first lst) b)\n          (list\
    \ (first lst) b)\n          (list (first lst) a)\n          (list (first lst)\
    \ a)\n          (list (first lst) b)\n          (list (first lst) b)\n       \
    \   (list (first lst) a)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) b)\n          (list (first lst) a)\n  \
    \        (list (first lst) a)\n          (list (first lst) b)\n          (list\
    \ (first lst) b)\n          (list (first lst) a)\n          (list (first lst)\
    \ a)\n          (list (first lst) b)\n          (list (first lst) b)\n       \
    \   (list (first lst) a)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) b)\n          (list (first lst) a)\n  \
    \        (list (first lst) a)\n          (list (first lst) b)\n          (list\
    \ (first lst) b)\n          (list (first lst) a)\n          (list (first lst)\
    \ a)\n          (list (first lst) b)\n          (list (first lst) b)\n       \
    \   (list (first lst) a)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) b)\n          (list (first lst) a)\n  \
    \        (list (first lst) a)\n          (list (first lst) b)\n          (list\
    \ (first lst) b)\n          (list (first lst) a)\n          (list (first lst)\
    \ a)\n          (list (first lst) b)\n          (list (first lst) b)\n       \
    \   (list (first lst) a)\n          (list (first lst) a)\n          (list (first\
    \ lst) b)\n          (list (first lst) b)\n          (list (first lst) a)\n  \
    \        (list (first lst) a)", "  (cond\n    [(empty? lst) (list #f #f)]\n  \
    \  [(integer? (first lst)) (list lst #f)]\n    [else (let ([a (largest_smallest_integers\
    \ (rest lst))])\n              (cond\n                [(empty? a) (list #f #f)]\n\
    \                [else (let ([b (smallest_largest_integers (first a))]\n     \
    \                     (cond\n                            [(empty? b) (list #f\
    \ #f)]\n                            [else (list a (first b))])))]))]))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first lst) 0) (list (first\
    \ lst) 0)]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n           \
    \  (b (second lst)])\n       (cond\n         [(< a b)\n          (list a b)\n\
    \          (let ([c (first lst)\n                   (d (second lst)])\n      \
    \      (cond\n              [(< c d)\n               (list c d)\n            \
    \   (let ([e (first lst)\n                       (f (second lst)])\n         \
    \        (cond\n                   [(< e f)\n                    (list e f)\n\
    \                    (let ([g (first lst)\n                           (h (second\
    \ lst)])\n                      (cond\n                        [(< g h)\n    \
    \                     (list g h)\n                         (let ([i (first lst)\n\
    \                                 (j (second lst)])\n                        \
    \   (cond\n                            [(< i j)\n                            \
    \ (list i j)\n                             (let ([k (first lst)\n            \
    \                         (l (second lst)])\n                               (cond\n\
    \                                [(< k l)\n                                 (list\
    \ k l)\n                                 (let ([m (first lst)\n              \
    \                          (n (second lst)])\n                               \
    \    (cond\n                                    [(< m n)\n                   \
    \                  (list m n)\n                                     (let ([o (first\
    \ lst)\n                                           (p (second lst)])\n       \
    \                                (cond\n                                     \
    \   [(< o p)\n                                         (list o p)\n          \
    \                               (let ([q (first lst)\n                       \
    \                        (r (second lst)])\n                                 \
    \          (cond\n                                            [(< q r)\n     \
    \                                        (list q r)\n                        \
    \                     (let ([s (first lst)\n                                 \
    \                    (t (second lst)])\n                                     \
    \          (cond\n                                                [(< s t)\n \
    \                                                (list s t)\n                \
    \                                (let ([u (first lst)\n                      \
    \                                (v (second lst)])\n                         \
    \                         (cond\n                                            \
    \        [(< u v)\n                                                     (list\
    \ u v)\n                                                     (let ([w (first lst)\n\
    \                                                           (x (second lst)])\n\
    \                                                     (cond\n                \
    \                                      [(< w x)\n                            \
    \                           (list w x)\n                                     \
    \                  (let ([y (first lst)\n                                    \
    \                        (z (second lst)])\n                                 \
    \                      (cond\n                                               \
    \         [(< y z)\n                                                         (list\
    \ y z)\n                                                         (let ([a (first\
    \ lst)\n                                                              (b (second\
    \ lst)])\n                                                         (cond\n   \
    \                                                       [(< a b)\n           \
    \                                                (list a b)\n                \
    \                                           (let ([c (first lst)\n           \
    \                                                        (d (second lst)])\n \
    \                                                        (cond\n             \
    \                                             [(< c d)\n                     \
    \                                      (list c d)\n                          \
    \                                 (let ([e (first ", "  (cond [(empty? lst)\n\
    \         (list #f #f)\n         ]\n        [(< (first lst) 0)\n         (largest_smallest_integers\
    \ (rest lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f\
    \ #f)]\n    [(< (first lst) 0) (list #f (first lst))]\n    [else (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(null? lst)\n\
    \         (list #f #f)\n         ]\n        [(< (car lst) 0)\n         (list #f\
    \ (car lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr\
    \ lst))\n         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(< (first lst) (first lst)) (list (first lst) (first lst))]\n    [else (list\
    \ (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(null?\
    \ lst) (list #f #f)] \n        [(< 0 (car lst)) (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(> (first lst) 0) (list (first\
    \ lst) (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first lst) 0) (list #f (first\
    \ lst))]\n    [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (first lst)) (list lst\
    \ #f)]\n    [else (let ([a (largest_smallest_integers (rest lst))])\n        \
    \      (cond\n               [(empty? a) (list #f #f)]\n               [(number?\
    \ (first a)) (list lst #f)]\n               [else (let ([b (smallest_largest_integers\
    \ (rest a))])\n                        (cond\n                         [(empty?\
    \ b) (list #f #f)]\n                         [(number? (first b)) (list lst #f)]\n\
    \                         [else (list a (first b))])))]))]))\n", "  (cond [(null?\
    \ lst)\n         (list #f #f)\n         ]\n        [(< (first lst) (first lst))\n\
    \         (list (first lst) (first lst))\n         ]\n        [else\n        \
    \ (largest_smallest_integers (rest lst))\n         ]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(number? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\
    \ [(null? lst)\n         (list #f #f)\n         ]\n        [(< (car lst) 0)\n\
    \         (list (car lst) #f)]\n        [else\n         (let ([smallest (car lst)])\n\
    \           (largest_smallest_integers (cdr lst))\n           (list (car lst)\
    \ smallest)\n           )\n         ]\n        ))\n", "  (cond [(empty? lst) (list\
    \ #f #f)] \n        [(> (first lst) 0) (list (first lst) (first lst))] \n    \
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(integer? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(number? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(< (first lst) 0) (list #f (first lst))]\n    [else\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(null?\
    \ lst)\n         (list #f #f)\n         ]\n        [(< (car lst) 0)\n        \
    \ (list #f (car lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]\n        ))\n", "  (cond [(empty? lst)\n         (list\
    \ #f #f)\n         ]\n        [(integer? (car lst))\n         (cons (car lst)\
    \ (largest_smallest_integers (cdr lst)))]\n        [else\n         (let ([a (largest_smallest_integers\
    \ (car lst))\n               b (largest_smallest_integers (cdr lst))]\n      \
    \         )\n           (cond [(< a b)\n                  (cons a (cons b (list\
    \ #f #f)))]\n                 [(< b a)\n                  (cons b (cons a (list\
    \ #f #f)))]\n                 [else\n                  (cons a (cons b (list #f\
    \ #f)))]\n                 )\n         ]\n         )\n         )\n         )\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer? (first\
    \ lst))\n         (cons (first lst) (largest_smallest_integers (rest lst)))\n\
    \         ]\n        [else\n         (let ([a (largest_smallest_integers (first\
    \ lst))])\n           (let ([b (largest_smallest_integers (rest lst))])\n    \
    \         (cond [(< a b)\n                    (cons a (cons b (first lst)))\n\
    \                    ]\n                     [(< b a)\n                    (cons\
    \ (first lst) b)\n                    ]\n                     [else\n        \
    \             (cons a b)\n                     ]))\n         ]))\n", "  (cond\
    \ [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer? (car lst))\n\
    \         (cons (car lst)\n               (largest_smallest_integers (cdr lst)))]\n\
    \        [else\n         (let ([a (largest_smallest_integers (car lst))]\n   \
    \            [b (largest_smallest_integers (cdr lst))])\n           (cond [(<\
    \ a b)\n                   (cons a (cons b (list #f #f)))]\n                 [(<\
    \ b a)\n                   (cons b (cons a (list #f #f)))]\n                 [else\n\
    \                   (cons a (cons b (list #f #f)))]))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(integer? (first lst)) (list first lst)]\n    [else\
    \ (let ([a (largest_smallest_integers (rest lst))])\n            (cond\n     \
    \         [(empty? a) (list #f #f)]\n              [(integer? (first a)) (list\
    \ first a)]\n              [else (let ([b (smallest_largest_integers (rest a))])\n\
    \                      (cond\n                        [(empty? b) (list #f #f)]\n\
    \                        [(integer? (first b)) (list first b)]\n             \
    \           [else (cons (first a) (cons (first b) (cons (first lst) (cons (first\
    \ a) (cons (first b) (cons (first lst) (cons (first a) (cons (first b) (cons (first\
    \ lst) (cons (first a) (cons (first b) (cons (first lst) (cons (first a) (cons\
    \ (first b) (cons (first lst) (cons (first a) (cons (first b) (cons (first lst)\
    \ (cons (first a) (cons (first b) (cons (first lst) (cons (first a) (cons (first\
    \ b) (cons (first lst) (cons (first a) (cons (first b) (cons (first lst) (cons\
    \ (first a) (cons (first b) (cons (first lst) (cons (first a) (cons (first b)\
    \ (cons (first lst) (cons (first a) (cons (first b) (cons (first lst) (cons (first\
    \ a) (cons (first b) (cons (first lst) (cons (first a) (cons (first b) (cons (first\
    \ lst) (cons (first a) (cons (first b) (cons (first lst) (cons (first a) (cons\
    \ (first b) (cons (first lst) (cons (first a) (cons (first b) (cons (first lst)\
    \ (cons (first a) (cons (first b) (cons (first lst) (cons (first a) (cons (first\
    \ b) (cons (first lst) (cons (first a) (cons (first b) (cons (first lst) (cons\
    \ (first a) (cons (first b) (cons (first lst) (cons (first a) (cons (first b)\
    \ (cons (first lst) (cons (first a) (cons (first b) (cons (first lst) (cons (first\
    \ a) (cons (first b) (cons (first lst) (cons (first a) (cons (first b) (cons (first\
    \ lst) (cons (first a) (cons (first b) (con", "  (cond [(null? lst) (list #f #f)]\n\
    \        [(< (car lst) 0) (list #f (car lst))]\n        [else (list (car lst)\
    \ (largest-smallest-integers (cdr lst)))]))\n", "  (cond\n    [(empty? lst) (list\
    \ #f #f)]\n    [(number? (first lst)) (list lst 1)]\n    [else (let ([a (largest_smallest_integers\
    \ (rest lst))])\n               (cond\n                 [(empty? a) (list #f #f)]\n\
    \                 [(number? (first a)) (list lst 1)]\n                 [else (let\
    \ ([b (smallest_largest_integers (rest a))])\n                           (cond\n\
    \                             [(empty? b) (list #f #f)]\n                    \
    \         [(number? (first b)) (list lst 1)]\n                             [else\
    \ (list a (first b) b)]))]))]))\n", "  (cond [(empty? lst) (list #f #f)] \n  \
    \      [(number? (first lst)) (cons (first lst) (largest_smallest_integers (rest\
    \ lst)))]\n        [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(< (first lst) 0) (list #f #f)]\n    [else\
    \ (cons (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst)\n     (list #f #f)\n     (let ([a (first lst)\n           \
    \  (b (second lst)])\n       (cond\n         [(< a b)\n          (list a b)\n\
    \          (let ([c (first lst)\n                   (d (second lst)])\n      \
    \      (cond\n              [(< c d)\n               (list c d)\n            \
    \   (let ([e (first lst)\n                       (f (second lst)])\n         \
    \        (cond\n                   [(< e f)\n                    (list e f)\n\
    \                    (let ([g (first lst)\n                           (h (second\
    \ lst)])\n                      (cond\n                        [(< g h)\n    \
    \                     (list g h)\n                         (let ([i (first lst)\n\
    \                                 (j (second lst)])\n                        \
    \   (cond\n                            [(< i j)\n                            \
    \ (list i j)\n                             (let ([k (first lst)\n            \
    \                         (l (second lst)])\n                               (cond\n\
    \                                [(< k l)\n                                 (list\
    \ k l)\n                                 (let ([m (first lst)\n              \
    \                          (n (second lst)])\n                               \
    \    (cond\n                                    [(< m n)\n                   \
    \                  (list m n)\n                                     (let ([o (first\
    \ lst)\n                                          (p (second lst)])\n        \
    \                               (cond\n                                      \
    \  [(< o p)\n                                         (list o p)\n           \
    \                              (let ([q (first lst)\n                        \
    \                      (r (second lst)])\n                                   \
    \        (cond\n                                            [(< q r)\n       \
    \                                      (list q r)\n                          \
    \                   (let ([s (first lst)\n                                   \
    \                (t (second lst)])\n                                         \
    \     (cond\n                                                [(< s t)\n      \
    \                                           (list s t)\n                     \
    \                           (let ([u (first lst)\n                           \
    \                           (v (second lst)])\n                              \
    \                    (cond\n                                                 \
    \   [(< u v)\n                                                     (list u v)\n\
    \                                                     (let ([w (first lst)\n \
    \                                                         (x (second lst)])\n\
    \                                                     (cond\n                \
    \                                      [(< w x)\n                            \
    \                           (list w x)\n                                     \
    \                  (let ([y (first lst)\n                                    \
    \                        (z (second lst)])\n                                 \
    \                      (cond\n                                               \
    \         [(< y z)\n                                                         (list\
    \ y z)\n                                                         (let ([a (first\
    \ lst)\n                                                              (b (second\
    \ lst)])\n                                                         (cond\n   \
    \                                                       [(< a b)\n           \
    \                                                (list a b)\n                \
    \                                           (let ([c (first lst)\n           \
    \                                                      (d (second lst)])\n   \
    \                                                         (cond\n            \
    \                                                  [(< c d)\n                \
    \                                               (list c d)\n                 \
    \                                              (let ([e (first lst)\n", "  (cond\
    \ [(empty? lst) (list #f #f)] \n        [(negative? (first lst)) (largest_smallest_integers\
    \ (rest lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (list car lst)]\n\
    \    [else (let ([a (largest_smallest_integers (cdr lst))])\n              (cond\n\
    \               [(empty? a) (list #f #f)]\n               [(number? (car a)) (list\
    \ car a)]\n               [else (let ([b (smallest_largest_integers (cdr a))])\n\
    \                        (cond\n                         [(empty? b) (list #f\
    \ #f)]\n                         [(number? (car b)) (list car b)]\n          \
    \               [else (let ([c (largest (cdr b) (car a))])\n                 \
    \                 (cond\n                                   [(empty? c) (list\
    \ #f #f)]\n                                   [(number? (car c)) (list car c)]\n\
    \                                   [else (let ([d (smallest_largest (cdr c) (car\
    \ a))])\n                                          (cond\n                   \
    \                        [(empty? d) (list #f #f)]\n                         \
    \                  [(number? (car d)) (list car d)]\n                        \
    \                   [else (let ([e (largest (cdr d) (car a))])\n             \
    \                                     (cond\n                                \
    \                   [(empty? e) (list #f #f)]\n                              \
    \                     [(number? (car e)) (list car e)]\n                     \
    \                              [else (let ([f (smallest_largest (cdr e) (car a))])\n\
    \                                                          (cond\n           \
    \                                                [(empty? f) (list #f #f)]\n \
    \                                                          [(number? (car f))\
    \ (list car f)]\n                                                           [else\
    \ (let ([g (smallest_largest (cdr f) (car a))])\n                            \
    \                                        (cond\n                             \
    \                                       [(empty? g) (list #f #f)]\n          \
    \                                                          [(number? (car g))\
    \ (list car g)]\n                                                            \
    \        [else (let ([h (largest (cdr g) (car a))])\n                        \
    \                                                    (cond\n                 \
    \                                                            [(empty? h) (list\
    \ #f #f)]\n                                                                  \
    \           [(number? (car h)) (list car h)]\n                               \
    \                                              [else (let ([i (smallest_largest\
    \ (cdr h) (car a))])\n                                                       \
    \                               (cond\n                                      \
    \                                                 [(empty? i) (list #f #f)]\n\
    \                                                                            \
    \           [(number? (car i)) (list car i)]\n                               \
    \                                                        [", "  (cond [(null?\
    \ lst)\n         (list #f #f)\n         [(integer? (car lst))\n          (cons\
    \ (car lst)\n                (largest_smallest_integers (cdr lst)))]\n       \
    \  [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(< (first lst) 0) (list #f (first lst))]\n    [else (list\
    \ (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(empty?\
    \ lst)\n         (list #f #f)\n         (< (first lst) (first lst))\n        \
    \ (largest_smallest_integers (rest lst))\n         (list (first lst) (first lst))]\n\
    \        [(< (first lst) (first lst))\n         (list (first lst) (first lst))\n\
    \         (largest_smallest_integers (rest lst))\n         (list (first lst) (first\
    \ lst))]\n        [else\n         (largest_smallest_integers (rest lst))\n   \
    \      (list (first lst) (first lst))]))\n", "  (cond [(null? lst)\n         (list\
    \ #f #f)\n         ]\n        [(< (car lst) 0)\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr\
    \ lst))\n         ]\n        ))\n", "  (cond [(null? lst) (list #f #f)] \n   \
    \     [(< 0 (car lst)) (cons (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(> (first lst) 0) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(< (first lst) (first lst)) (list (first lst) (first\
    \ lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n \
    \   [(empty? lst) (list #f #f)]\n    [(< (first lst) (first lst)) (list (first\
    \ lst) (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst)\
    \ 0)\n         (list (first lst) #f)\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n  \
    \  [(< (first lst) 0) (list #f (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) 0) (list #f (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n        \
    \ ]\n        [(< (first lst) 0)\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        [else\n         (largest_smallest_integers (rest lst))\n\
    \         ]\n        ))\n", "  (cond [(null? lst)\n         (list #f #f)\n   \
    \      ]\n        [(< (car lst) 0)\n         (list (car lst) (car lst))\n    \
    \     ]\n        [else\n         (largest_smallest_integers (cdr lst))\n     \
    \    ]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n     \
    \   [(integer? (car lst))\n         (cons (car lst)\n              (largest_smallest_integers\
    \ (cdr lst)))]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(< (first lst)\
    \ 0)\n         (largest_smallest_integers (rest lst))\n         ]\n        [else\n\
    \         (largest_smallest_integers (rest lst))\n         ]\n        ))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (cons (car\
    \ lst) (largest_smallest_integers (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (car lst) 0)\n         (list #f (car lst))\n         ]\n        [else\n\
    \         (largest_smallest_integers (cdr lst))\n         ]))\n", "  (cond\n \
    \   [(empty? lst) (list #f #f)]\n    [(< (first lst) 0) (list #f (first lst))]\n\
    \    [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first lst) 0) (list #f (first\
    \ lst))]\n    [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(null? lst) (list #f #f)] \n        [(< (first lst) (first lst)) (list\
    \ (first lst) (first lst))]\n        [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(null? lst) (list #f #f)] \n        [(< (car lst)\
    \ 0) (list #f (car lst))] \n        [(< (car lst) (cadr lst)) (list (car lst)\
    \ (cadr lst))] \n        [else (largest_smallest_integers (cdr lst))]))\n", " \
    \ (cond [(null? lst) (list #f #f)] \n        [(< (car lst) 0) (list #f (car lst))]\
    \ \n        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond [(null?\
    \ lst) (list #f #f)] \n        [(< (first lst) (first lst)) (list (first lst)\
    \ (first lst))]\n        [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond [(empty? lst) (list #f #f)] \n        [(< (first lst) (first lst)) (list\
    \ (first lst) (first lst))]\n        [else (largest_smallest_integers (rest lst))]))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number? (car lst)) (list car lst)]\n\
    \    [else (let ([a (largest_smallest_integers (cdr lst))])\n              (cond\n\
    \               [(empty? a) (list #f #f)]\n               [(number? (car a)) (list\
    \ car a)]\n               [else (let ([b (largest_smallest_integers (cdr a))])\n\
    \                        (cond\n                         [(empty? b) (list #f\
    \ #f)]\n                         [(number? (car b)) (list car b)]\n          \
    \               [else (let ([c (largest_smallest_integers (cdr b))])\n       \
    \                           (cond\n                                   [(empty?\
    \ c) (list #f #f)]\n                                   [(number? (car c)) (list\
    \ car c)]\n                                   [else (let ([d (largest_smallest_integers\
    \ (cdr c))])\n                                          (cond\n              \
    \                             [(empty? d) (list #f #f)]\n                    \
    \                       [(number? (car d)) (list car d)]\n                   \
    \                        [else (let ([e (largest_smallest_integers (cdr d))])\n\
    \                                                    (cond\n                 \
    \                                    [(empty? e) (list #f #f)]\n             \
    \                                        [(number? (car e)) (list car e)]\n  \
    \                                                   [else (let ([f (largest_smallest_integers\
    \ (cdr e))])\n                                                            (cond\n\
    \                                                             [(empty? f) (list\
    \ #f #f)]\n                                                             [(number?\
    \ (car f)) (list car f)]\n                                                   \
    \          [else (let ([g (largest_smallest_integers (cdr f))])\n            \
    \                                                        (cond\n             \
    \                                                        [(empty? g) (list #f\
    \ #f)]\n                                                                     [(number?\
    \ (car g)) (list car g)]\n                                                   \
    \                  [else (let ([h (largest_smallest_integers (cdr g))])\n    \
    \                                                                        (cond\n\
    \                                                                            \
    \ [(empty? h) (list #f #f)]\n                                                \
    \                             [(number? (car h)) (list car h)]\n             \
    \                                                                [else (let ([i\
    \ (largest_smallest_integers (cdr h))])\n                                    \
    \                                                  (cond\n                   \
    \                                                                    [(empty?\
    \ i) (list #f #f)]\n                                                         \
    \                              [(number? (car i)) (list car i)]\n            \
    \                                                                           [else\
    \ (let ([j (largest_smallest_", "  (cond [(null? lst)\n         (list #f #f)\n\
    \         [(< (car lst) 0)\n          (list #f (car lst))\n          (< (cdr lst)\
    \ 0)\n          (list #f (cdr lst))]\n         [else\n          (largest_smallest_integers\
    \ (cdr lst))]\n         ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n   \
    \ [(< (first lst) 0) (list (first lst) #f)]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         ]\n\
    \        [(integer? (first lst))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (let ([a (largest_smallest_integers (first\
    \ lst))])\n           (cond [(< a b)\n                  (cons a (largest_smallest_integers\
    \ (rest lst)))]\n                 [else\n                  (cons b (largest_smallest_integers\
    \ (rest lst)))]))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(integer?\
    \ (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \      [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(null? lst)\n\
    \         (list #f #f)\n         ]\n        [(< (car lst) 0)\n         (list (car\
    \ lst) #f)]\n        [else\n         (largest_smallest_integers (cdr lst))]))\n",
  "  (cond [(null? lst) (list #f #f)] \n        [(number? (car lst)) (cons (car lst)\
    \ (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) 0) (list #f (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(number?\
    \ (car lst)) (list (car lst) (smallest (cdr lst)))]\n    [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first\
    \ lst) 0) (list #f (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n         ]\n\
    \        [(and (number? (car lst))\n               (< 0 (car lst)))\n        \
    \ (cons (car lst) (largest_smallest_integers (cdr lst)))]\n        [else\n   \
    \      (largest_smallest_integers (cdr lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
