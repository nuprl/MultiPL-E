name: HumanEval_136_largest_smallest_integers
language: rkt
prompt: "#lang racket\n\n;; Create a function that returns a tuple (a, b), where 'a'\
  \ is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive\
  \ integers in a list.\n;; If there is no negative or positive integers, return them\
  \ as None.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n\
  ;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
  \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)\n(define (largest_smallest_integers\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n\
  \    (check-equal? (candidate (list 2 4 1 3 5 7)) (list #f 1))\n    (check-equal?\
  \ (candidate (list 2 4 1 3 5 7 0)) (list #f 1))\n    (check-equal? (candidate (list\
  \ 1 3 2 4 5 6 -2)) (list -2 1))\n    (check-equal? (candidate (list 4 5 3 6 2 7\
  \ -7)) (list -7 2))\n    (check-equal? (candidate (list 7 3 8 4 9 2 5 -9)) (list\
  \ -9 2))\n    (check-equal? (candidate (list )) (list #f #f))\n    (check-equal?\
  \ (candidate (list 0)) (list #f #f))\n    (check-equal? (candidate (list -1 -3 -5\
  \ -6)) (list -1 #f))\n    (check-equal? (candidate (list -1 -3 -5 -6 0)) (list -1\
  \ #f))\n    (check-equal? (candidate (list -6 -4 -4 -3 1)) (list -3 1))\n    (check-equal?\
  \ (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer?\
    \ (first lst))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (let ((a (largest_smallest_integers (first\
    \ lst))\n                 (b (largest_smallest_integers (rest lst))))\n      \
    \         (if (< a b)\n                   (cons a b)\n                   (cons\
    \ b a)))]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first lst)\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(< (first\
    \ lst) (first lst)) (list #f (first lst))] \n        [else (list (first lst) (second\
    \ lst))]))\n", "  (cond [(empty? lst)\n         (list #f #f)\n         [(integer?\
    \ (first lst))\n          (cons (first lst)\n                (largest_smallest_integers\
    \ (rest lst)))]\n         [else\n          (let ([a (largest_smallest_integers\
    \ (first lst))])\n            (cond [(empty? a)\n                   (list #f #f)\n\
    \                   (integer? (first a))]\n                  [else\n         \
    \          (let ([b (largest_smallest_integers (first a))])\n                \
    \     (cond [(empty? b)\n                            (list #f #f)\n          \
    \                  (integer? (first b))]\n                             [else\n\
    \                             (cons (first b)\n                              \
    \    (largest_smallest_integers (rest b)))]))]))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (list #f #f)\n     (let ([a (largest_smallest_integers (rest lst))\n\
    \            b (smallest_largest_integers (rest lst))])\n       (cond\n      \
    \   [(< a b)\n          (list a b)\n          (list #f #f)]\n         [else\n\
    \          (list a b)\n          (list #f #f)]\n         [else\n          (list\
    \ #f #f)]))]\n    [else\n     (let ([a (largest_smallest_integers (rest lst))\n\
    \            b (smallest_largest_integers (rest lst))])\n       (cond\n      \
    \   [(< a b)\n          (list a b)\n          (list #f #f)]\n         [else\n\
    \          (list a b)\n          (list #f #f)]\n         [else\n          (list\
    \ #f #f)]))]))\n", "  (cond [(null? lst)\n         (list #f #f)\n         ]\n\
    \        [(< (car lst) 0)\n         (list (car lst) #f)]\n        [else\n    \
    \     (largest_smallest_integers (cdr lst))]))\n", "  (cond [(empty? lst)\n  \
    \       (list #f #f)\n         ]\n        [(> (first lst) 0)\n         (largest_smallest_integers\
    \ (rest lst))\n         ]\n        [else\n         (largest_smallest_integers\
    \ (rest lst))\n         ]\n        ))\n", "  (cond [(empty? lst)\n         (list\
    \ #f #f)\n         [(integer? (car lst))\n          (cons (car lst)\n        \
    \        (largest_smallest_integers (cdr lst)))]\n         [else\n          (let\
    \ ([a (largest_smallest_integers (car lst))])\n            (cond [(empty? a)\n\
    \                   (list #f #f)\n                   [(integer? (car a))\n   \
    \                 (cons (car a)\n                          (largest_smallest_integers\
    \ (cdr a)))]\n                   [else\n                    (let ([b (largest_smallest_integers\
    \ (cdr lst))])\n                      (cond [(empty? b)\n                    \
    \        (list #f #f)\n                            [(integer? (car b))\n     \
    \                        (cons (car b)\n                                  (largest_smallest_integers\
    \ (cdr b)))]\n                            [else\n                            \
    \ (cons (car lst)\n                                  (largest_smallest_integers\
    \ (cdr lst)))]\n                            ])\n                      ])\n   \
    \               ])\n          ])\n         ])\n  )\n", "  (cond [(null? lst)\n\
    \         (list #f #f)\n         ]\n        [(< (car lst) 0)\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr\
    \ lst))\n         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(< (first lst) 0) (list #f (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst) (list #f #f)] \n        [(> (first\
    \ lst) 0) (cons (first lst) (largest_smallest_integers (rest lst)))]\n       \
    \ [else (largest_smallest_integers (rest lst))]))\n", "  (cond [(null? lst)\n\
    \         (list #f #f)\n         ]\n        [(< (car lst) 0)\n         (largest_smallest_integers\
    \ (cdr lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr\
    \ lst))\n         ]\n        ))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(< (first lst) 0) (list #f (first lst))]\n    [else (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(null? lst) '()]\n        [(or (< 0 (car lst))\
    \ (< 0 (cdr lst)))\n         (cons (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(< (first lst) 0) (list #f #f)]\n    [else (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(number? (first lst)) (list lst 1)]\n    [else (let ([a\
    \ (largest_smallest_integers (rest lst))])\n             (cond\n             \
    \ [(empty? a) (list #f #f)]\n              [(number? (first a)) (list a 1)]\n\
    \              [else (let ([b (smallest_largest_integers (rest a))])\n       \
    \               (cond\n                        [(empty? b) (list #f #f)]\n   \
    \                     [(number? (first b)) (list b 1)]\n                     \
    \   [else (let ([c (smallest_largest_integers (rest b))])\n                  \
    \              (cond\n                                 [(empty? c) (list #f #f)]\n\
    \                                 [(number? (first c)) (list c 1)]\n         \
    \                        [else (let ([d (largest_smallest_integers (rest c))])\n\
    \                                          (cond\n                           \
    \                [(empty? d) (list #f #f)]\n                                 \
    \          [(number? (first d)) (list d 1)]\n                                \
    \           [else (let ([e (smallest_largest_integers (rest d))])\n          \
    \                                          (cond\n                           \
    \                          [(empty? e) (list #f #f)]\n                       \
    \                              [(number? (first e)) (list e 1)]\n            \
    \                                         [else (let ([f (largest_smallest_integers\
    \ (rest e))])\n                                                            (cond\n\
    \                                                             [(empty? f) (list\
    \ #f #f)]\n                                                             [(number?\
    \ (first f)) (list f 1)]\n                                                   \
    \          [else (let ([g (smallest_largest_integers (rest f))])\n           \
    \                                                         (cond\n            \
    \                                                         [(empty? g) (list #f\
    \ #f)]\n                                                                     [(number?\
    \ (first g)) (list g 1)]\n                                                   \
    \                  [else (let ([h (smallest_largest_integers (rest g))])\n   \
    \                                                                          (cond\n\
    \                                                                            \
    \  [(empty? h) (list #f #f)]\n                                               \
    \                               [(number? (first h)) (list h 1)]\n           \
    \                                                                   [else (let\
    \ ([i (largest_smallest_integers (rest h))])\n                               \
    \                                                         (cond\n            \
    \                                                                            \
    \ [(empty? i) (list #f #f)]\n                                                \
    \                                         [(number? (first i)) (list i 1)]\n \
    \                                                                            \
    \            [else (let ([j (smallest_largest_integers (rest i))])\n         \
    \                                                                            \
    \             (cond\n                                                        \
    \                                           [(empty? j) (list #f #f)]\n      \
    \                                                                            \
    \                 [(number? (first j)) (list j 1)]\n                         \
    \                                                                          ",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(< (first lst) 0) (list #f #f)]\n\
    \    [else (cons (first lst) (largest_smallest_integers (rest lst)))]))\n", " \
    \ (cond [(empty? lst)\n         (list #f #f)\n         ]\n        [(integer? (first\
    \ lst))\n         (cons (first lst)\n               (largest_smallest_integers\
    \ (rest lst)))]\n        [else\n         (let ([a (largest_smallest_integers (first\
    \ lst))])\n           (let ([b (largest_smallest_integers (rest lst))])\n    \
    \         (cond [(< a b)\n                    (cons a (cons b (first lst)))]\n\
    \                     [(< b a)\n                     (cons (first lst) b)])\n\
    \             )\n           )\n         ]\n        )\n        )\n", "  (cond [(null?\
    \ lst)\n         (list #f #f)\n         ]\n        [(or (number? (car lst))\n\
    \             (null? (cdr lst)))\n         (list car lst)\n         ]\n      \
    \  [else\n         (let ([a (largest_smallest_integers (cdr lst))])\n        \
    \   (let ([b (smallest_largest_integers (car lst))])\n             (cond [(< a\
    \ b)\n                    (cons (cons a b) lst)\n                    ]\n     \
    \                [(< b a)\n                     (cons (cons b a) lst)\n      \
    \               ]\n                     [else\n                     (cons (cons\
    \ a b) lst)\n                     ]))]))\n", "  (cond [(null? lst)\n         (list\
    \ #f #f)\n         ]\n        [(< (car lst) 0)\n         (list (car lst) (car\
    \ lst))\n         ]\n        [else\n         (largest_smallest_integers (cdr lst))\n\
    \         ]\n        ))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
