language: rkt
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null?\
    \ lst)\n      0\n      (+ (* (expt (- lst (car lst)) 2) (expt (car lst) 2))\n\
    \         (double_the_difference (cdr lst)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null?\
    \ lst)\n      0\n      (+ (* (expt (first lst) 2) (expt (first lst) 2))\n    \
    \     (double_the_difference (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate\
    \ (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal?\
    \ (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0\
    \ -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n  \
    \  (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate\
    \ (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (car lst)) (double_the_difference (cdr lst)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (car lst)) (double_the_difference (cdr lst)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746977
