name: HumanEval_61_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"(\" and \")\".\n;; return True\
  \ if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing\
  \ \"(\")\n;; #f\n;; >>> (correct_bracketing \"()\")\n;; #t\n;; >>> (correct_bracketing\
  \ \"(()())\")\n;; #t\n;; >>> (correct_bracketing \")(()\")\n;; #f\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"()\") #t)\n    (check-equal? (candidate \"(()())\"\
  ) #t)\n    (check-equal? (candidate \"()()(()())()\") #t)\n    (check-equal? (candidate\
  \ \"()()((()()())())(()()(()))\") #t)\n    (check-equal? (candidate \"((()())))\"\
  ) #f)\n    (check-equal? (candidate \")(()\") #f)\n    (check-equal? (candidate\
  \ \"(\") #f)\n    (check-equal? (candidate \"((((\") #f)\n    (check-equal? (candidate\
  \ \")\") #f)\n    (check-equal? (candidate \"(()\") #f)\n    (check-equal? (candidate\
  \ \"()()(()())())(()\") #f)\n    (check-equal? (candidate \"()()(()())()))()\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets)\
    \ \"(\") (correct_bracketing (substring brackets 1 1)))]\n    [else (correct_bracketing\
    \ (substring brackets 1 1))]))\n", "  (let loop ((i 0))\n    (cond\n      [(empty?\
    \ brackets) #t]\n      [(equal? (char-code (car brackets)) 45) (loop (+ i 1))]\n\
    \      [(equal? (char-code (car brackets)) 47) (loop (+ i 1))]\n      [else (loop\
    \ (+ i 1))])))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets)\
    \ '(') (correct_bracketing (substring brackets 1 1)))]\n    [else (correct_bracketing\
    \ (substring brackets 1 1))]))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal?\
    \ (first brackets) (first brackets)) (correct_bracketing (substring brackets 1\
    \ length))]\n    [else (correct_bracketing (substring brackets 1 length))]\n \
    \ ))\n", "  (let ((opening-brackets '())\n        (closing-brackets '()))\n  \
    \  (if (string=? brackets \"\")\n        #f\n        (let ((char (string=? brackets\
    \ \"\")))\n          (cond\n            ((char=? (char-code char) 91) #t)\n  \
    \          ((char=? (char-code char) 92) #t)\n            ((char=? (char-code\
    \ char) 47) #t)\n            (else (set! opening-brackets (cons char opening-brackets))\n\
    \                  (set! closing-brackets (cons char closing-brackets))\n    \
    \              (correct_bracketing (rest brackets)))))))\n", "  (cond\n    [(empty?\
    \ brackets) #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing (substring\
    \ brackets 1 1)))]\n    [else (correct_bracketing (substring brackets 1 1))]))\n",
  "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing\
    \ (substring brackets 1 )))]\n    [(equal? (first brackets) \")\") (correct_bracketing\
    \ (substring brackets 2 )))]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (cond [(empty? brackets) #f]\n        [(equal? (first brackets) \"(\") (correct_bracketing\
    \ (sub1 brackets))]\n        [(equal? (first brackets) \")\") (correct_bracketing\
    \ (sub1 brackets))]\n        [else #f]))\n", "  (cond\n    [(empty? brackets)\
    \ #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing (substring brackets\
    \ 1 end)))]\n    [else (correct_bracketing (substring brackets 1 end))]))\n",
  "  (let ((stack '())\n        (open (string->list brackets)))\n    (loop for i from\
    \ 0 to (length open)\n          while (not (member i stack))\n          collect\
    \ (cons (car open) stack)\n          while (equal? (cdr open) (car stack))\n \
    \         collect (cons (car stack) (cdr open))\n          while (equal? (cdr\
    \ stack) (car open))\n          collect (cons (car stack) (cdr stack))\n     \
    \     while (equal? (cdr stack) (car stack))\n          collect (cons (car stack)\
    \ (cdr stack))\n          while (equal? (cdr stack) (car open))\n          collect\
    \ (cons (car stack) (cdr stack))\n          while (equal? (cdr stack) (car stack))\n\
    \          collect (cons (car stack) (cdr stack))\n          while (equal? (cdr\
    \ stack) (car open))\n          collect (cons (car stack) (cdr stack))\n     \
    \     while (equal? (cdr stack) (car stack))\n          collect (cons (car stack)\
    \ (cdr stack))\n          while (equal? (cdr stack) (car open))\n          collect\
    \ (cons (car stack) (cdr stack))\n          while (equal? (cdr stack) (car stack))\n\
    \          collect (cons (car stack) (cdr stack))\n          while (equal? (cdr\
    \ stack) (car open))\n          collect (cons (car stack) (cdr stack))\n     \
    \     while (equal? (cdr stack) (car stack))\n          collect (cons (car stack)\
    \ (cdr stack))\n          while (equal? (cdr stack) (car open))\n          collect\
    \ (cons (car stack) (cdr stack))\n          while (equal? (cdr stack) (car stack))\n\
    \          collect (cons (car stack) (cdr stack))\n          while (equal? (cdr\
    \ stack) (car open))\n          collect (cons (car stack) (cdr stack))\n     \
    \     while (equal? (cdr stack) (car stack))\n          collect (cons (car stack)\
    \ (cdr stack))\n          while (equal? (cdr stack) (car open))\n          collect\
    \ (cons (car stack) (cdr stack))\n          while (equal? (cdr stack) (car stack))\n\
    \          collect (", "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first\
    \ brackets) \"(\") (correct_bracketing (substring brackets 1 1)))]\n    [else\
    \ (correct_bracketing (substring brackets 1 1))]))\n", "  (let ((opening-brackets\
    \ '())\n        (closing-brackets '()))\n    (cond\n      [(empty? brackets)\n\
    \       (equal? (length opening-brackets) (length closing-brackets))]\n      [(equal?\
    \ (first brackets) '(#\\))\n       (equal? (rest brackets) '(#\\))\n       (equal?\
    \ (first opening-brackets) '(#\\))\n       (equal? (rest closing-brackets) '(#\\\
    ))\n       (equal? (first closing-brackets) '(#\\))\n       (equal? (rest opening-brackets)\
    \ '(#\\))\n       (equal? (first opening-brackets) '(#\\))\n       (equal? (rest\
    \ opening-brackets) '(#\\))\n       (equal? (first closing-brackets) '(#\\))\n\
    \       (equal? (rest closing-brackets) '(#\\))\n       (equal? (first closing-brackets)\
    \ '(#\\))\n       (equal? (rest closing-brackets) '(#\\))\n       (equal? (first\
    \ closing-brackets) '(#\\))\n       (equal? (rest closing-brackets) '(#\\))\n\
    \       (equal? (first closing-brackets) '(#\\))\n       (equal? (rest closing-brackets)\
    \ '(#\\))\n       (equal? (first closing-brackets) '(#\\))\n       (equal? (rest\
    \ closing-brackets) '(#\\))\n       (equal? (first closing-brackets) '(#\\))\n\
    \       (equal? (rest closing-brackets) '(#\\))\n       (equal? (first closing-brackets)\
    \ '(#\\))\n       (equal? (rest closing-brackets) '(#\\))\n       (equal? (first\
    \ closing-brackets) '(#\\))\n       (equal? (rest closing-brackets) '(#\\))\n\
    \       (equal? (first closing-brackets) '(#\\))\n       (equal? (rest closing-brackets)\
    \ '(#\\))\n       (equal? (first closing-brackets) '(#\\))\n       (equal? (rest\
    \ closing-brackets) '(#\\))\n       (equal? (first closing-brackets) '(#\\))\n\
    \       (equal? (rest closing-brackets) '(#\\))\n       (equal? (first closing-brackets)\
    \ '(#\\))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal? (first brackets)\
    \ \"(\") (correct_bracketing (substring brackets 1 )))]\n    [else (correct_bracketing\
    \ (substring brackets 1 ))]))\n", "  (cond\n    [(empty? brackets) #f]\n    [(equal?\
    \ (first brackets) \"(\") (correct_bracketing (substring brackets 1 1)))]\n  \
    \  [else (correct_bracketing (substring brackets 1 1))]))\n", "  (cond\n    [(empty?\
    \ brackets) #f]\n    [(equal? (first brackets) '(') (correct_bracketing (substring\
    \ brackets 1 1)))]\n    [else (correct_bracketing (substring brackets 1 1))]))\n",
  "  (cond [(empty? brackets) #f]\n        [(equal? (first brackets) (first brackets))\
    \ (correct_bracketing (substring brackets 1 -1))]\n        [else (correct_bracketing\
    \ (substring brackets 1 -1))]))\n", "  (cond\n    [(empty? brackets) #f]\n   \
    \ [(equal? (first brackets) \"(\") (correct_bracketing (substring brackets 1 1)))]\n\
    \    [else (correct_bracketing (substring brackets 1 1))]))\n", "  (cond\n   \
    \ [(empty? brackets) #t]\n    [(equal? (first brackets) '(') (correct_bracketing\
    \ (substring brackets 1 1)))]\n    [else #f]))\n", "  (cond\n    [(empty? brackets)\
    \ #f]\n    [(equal? (first brackets) \"(\") (correct_bracketing (substring brackets\
    \ 1 1)))]\n    [else (correct_bracketing (substring brackets 1 1))]))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) '(') (correct_bracketing\
    \ (substring brackets 1 1)))]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
