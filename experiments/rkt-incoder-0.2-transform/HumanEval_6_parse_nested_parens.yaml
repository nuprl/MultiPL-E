name: HumanEval_6_parse_nested_parens
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n;; For each of the group,\
  \ output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n;; >>> (parse_nested_parens \"\
  (()()) ((())) () ((())()())\")\n;; (list 2 3 1 3)\n(define (parse_nested_parens\
  \ paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3))\n\
  \    (check-equal? (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4))\n   \
  \ (check-equal? (candidate \"(()(())((())))\") (list 4))\n))\n\n(test-humaneval)"
completions: ["  (let ((levels (make-list 0 0))\n        (groups (make-list 0 0)))\n\
    \    (loop\n       for i from 0 to (length paren_string)\n       for j from 0\
    \ to (length paren_string)\n       when (and (char=? (char-code paren_string)\
    \ i)\n                (char=? (char-code paren_string) j))\n       do (set! levels\
    \ (cons i levels))\n       (set! groups (cons j groups))\n       (set! levels\
    \ (cons (+ i j) levels))\n       (set! groups (cons (+ j i) groups))\n       finally\
    \ (return (max levels))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (cond\n      [(empty?\
    \ paren_string) result]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string)\
    \ (cons result '())))]\n      [(equal? (car paren_string) '(#\\Space) (loop (cdr\
    \ paren_string) (cons result '())))]\n      [(equal? (car paren_string) '(#\\\
    Newline) (loop (cdr paren_string) (cons result '())))]\n      [(equal? (car paren_string)\
    \ '(#\\Tab) (loop (cdr paren_string) (cons result '())))]\n      [(equal? (car\
    \ paren_string) '(#\\Newline) (loop (cdr paren_string) (cons result '())))]\n\
    \      [(equal? (car paren_string) '(#\\Space) (loop (cdr paren_string) (cons\
    \ result '())))]\n      [(equal? (car paren_string) '(#\\Newline) (loop (cdr paren_string)\
    \ (cons result '())))]\n      [(equal? (car paren_string) '(#\\Tab) (loop (cdr\
    \ paren_string) (cons result '())))]\n      [(equal? (car paren_string) '(#\\\
    Space) (loop (cdr paren_string) (cons result '())))]\n      [(equal? (car paren_string)\
    \ '(#\\Newline) (loop (cdr paren_string) (cons result '())))]\n      [(equal?\
    \ (car paren_string) '(#\\Tab) (loop (cdr paren_string) (cons result '())))]\n\
    \      [(equal? (car paren_string) '(#\\Space) (loop (cdr paren_string) (cons\
    \ result '())))]\n      [(equal? (car paren_string) '(#\\Newline) (loop (cdr paren_string)\
    \ (cons result '())))]\n      [(equal? (car paren_string) '(#\\Tab) (loop (cdr\
    \ paren_string) (cons result '())))]\n      [(equal? (car paren_string) '(#\\\
    Space) (loop (cdr paren_string) (cons result '())))]\n      [(equal? (car paren_string)\
    \ '(#\\Newline) (loop (cdr paren_string) (cons result '())))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string) (+ paren_count\
    \ 1))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string) (- paren_count\
    \ 1))]\n      [else (loop (cdr paren_string) (+ paren_count 1))])))\n", "  (let\
    \ ((paren_stack (make-list 0))\n        (paren_level (make-list 0))\n        (paren_string\
    \ (make-string paren_string)))\n    (loop\n       for i from 0 to (length paren_string)\n\
    \       when (char= paren_string #\\( )\n       do (set! paren_stack (cons i paren_stack))\n\
    \       when (char= paren_string #\\) )\n       do (set! paren_stack (cdr paren_stack))\n\
    \       when (null? paren_stack)\n       do (set! paren_level i)\n       when\
    \ (null? (cdr paren_stack))\n       do (set! paren_level (cdr paren_level))\n\
    \       when (> (length paren_stack) paren_level)\n       do (set! paren_level\
    \ 0)\n       when (> (length paren_level) 0)\n       do (set! paren_level 0)\n\
    \       when (char= paren_string #\\( )\n       do (set! paren_stack (cons 0 paren_stack))\n\
    \       when (char= paren_string #\\) )\n       do (set! paren_stack (cdr paren_stack))\n\
    \       when (null? paren_stack)\n       do (set! paren_level 0)\n       when\
    \ (null? (cdr paren_stack))\n       do (set! paren_level (cdr paren_level))\n\
    \       when (> (length paren_stack) paren_level)\n       do (set! paren_level\
    \ 0)\n       when (> (length paren_level) 0)\n       do (set! paren_level 0)\n\
    \       when (char= paren_string #\\( )\n       do (set! paren_stack (cons 0 paren_stack))\n\
    \       when (char= paren_string #\\) )\n       do (set! paren_stack (cdr paren_stack))\n\
    \       when (null? paren_stack)\n       do (set! paren_level 0)\n       when\
    \ (null? (cdr paren_stack))\n       do (set! paren_level (cdr paren_level))\n\
    \       when (> (length paren_stack) paren_level)\n       do (set! paren_level\
    \ 0)\n       when (> (length paren_level) 0)\n       do (set! paren_level 0)\n\
    \       when (char= paren_string #\\( )\n       do (set! ", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list->string levels)]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(", "  (let loop ((paren_string paren_string)\n          \
    \   (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char=?\
    \ (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n      [(char=?\
    \ (car paren_string) ')') (loop (cdr paren_string) (sub1 levels))]\n      [else\
    \ (loop (cdr paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ level))]\n      [(char=? (car paren_string) ')') (loop (cdr paren_string) (sub1\
    \ level))]\n      [else (loop (cdr paren_string) (add1 level))]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) ')')\
    \ (loop (rest paren_string) (sub1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline) (loop (rest paren_string) (add1 levels))]\n    \
    \  [(equal? (first paren_string) '(#\\Tab) (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline) (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\Tab)\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline) (loop (rest paren_string) (add1 levels))]\n    \
    \  [(equal? (first paren_string) '(#\\Tab) (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(#\\Newline) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Tab) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline)\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Tab) (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(equal? (first\
    \ paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n\
    \       ]\n      [(equal? (car paren_string) '())\n       (loop (cdr paren_string)\
    \ (+ level 1))\n       ]\n      [(equal? (car paren_string) '(()))\n       (loop\
    \ (cdr paren_string) (+ level 2))\n       ]\n      [else\n       (loop (cdr paren_string)\
    \ (+ level 1))\n       ]\n      )\n    )\n  )\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr\
    \ paren_string) (+ 1 levels))]\n      [(equal? (car paren_string) ')')\n     \
    \  (loop (cdr paren_string) (- 1 levels))]\n      [else\n       (loop (cdr paren_string)\
    \ (+ 1 levels))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n \
    \     [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list level)]\n      [(equal? (car paren_string) '(')\n\
    \       (loop (cdr paren_string) (+ level 1))]\n      [(equal? (car paren_string)\
    \ ')')\n       (loop (cdr paren_string) level)]\n      [else\n       (loop (cdr\
    \ paren_string) (+ level 1))]\n    )\n  )\n)\n", "  (let ((levels ()))\n    (loop\n\
    \       for i from 0 to (length paren_string)\n       for ch = substring paren_string\
    \ i i\n       for ch = substring paren_string (i + 1) (length paren_string)\n\
    \       for ch = substring paren_string (i + 2) (length paren_string)\n      \
    \ for ch = substring paren_string (i + 3) (length paren_string)\n       for ch\
    \ = substring paren_string (i + 4) (length paren_string)\n       for ch = substring\
    \ paren_string (i + 5) (length paren_string)\n       for ch = substring paren_string\
    \ (i + 6) (length paren_string)\n       for ch = substring paren_string (i + 7)\
    \ (length paren_string)\n       for ch = substring paren_string (i + 8) (length\
    \ paren_string)\n       for ch = substring paren_string (i + 9) (length paren_string)\n\
    \       for ch = substring paren_string (i + 10) (length paren_string)\n     \
    \  for ch = substring paren_string (i + 11) (length paren_string)\n       for\
    \ ch = substring paren_string (i + 12) (length paren_string)\n       for ch =\
    \ substring paren_string (i + 13) (length paren_string)\n       for ch = substring\
    \ paren_string (i + 14) (length paren_string)\n       for ch = substring paren_string\
    \ (i + 15) (length paren_string)\n       for ch = substring paren_string (i +\
    \ 16) (length paren_string)\n       for ch = substring paren_string (i + 17) (length\
    \ paren_string)\n       for ch = substring paren_string (i + 18) (length paren_string)\n\
    \       for ch = substring paren_string (i + 19) (length paren_string)\n     \
    \  for ch = substring paren_string (i + 20) (length paren_string)\n       for\
    \ ch = substring paren_string (i + 21) (length paren_string)\n       for ch =\
    \ substring paren_string (i + 22) (length paren_string)\n       for ch = substring\
    \ paren_string (i + 23) (length paren_string)\n       for ch = substring paren_string\
    \ (i + 24) (length paren_string)\n       for ch = substring paren_string (i +\
    \ 25) (length paren_string)\n       for ch = substring paren_string (i + 26) (length\
    \ paren_string)\n       for ch = substring paren_string (i + 27) (length paren_string)\n\
    \       for ch = substring paren_string (i + 28) (length paren_string)\n     \
    \  for ch = ", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (list paren_count)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [else\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      )))\n",
  "  (let ((paren_stack (make-list 0))\n        (paren_level (make-list 0))\n    \
    \    (paren_string (make-string paren_string)))\n    (define (loop (i paren_stack)\n\
    \             (if (null? i)\n                 (if (null? (cdr paren_stack))\n\
    \                     (reverse paren_level)\n                     (loop (cdr paren_stack)\n\
    \                          (cons (car paren_stack) paren_level)))\n          \
    \       (loop (cdr i)\n                      (cons (car i) (cdr i))))\n      (loop\
    \ (string-split paren_string\n                      #\\( #\\)\n              \
    \        #\\))\n      paren_stack)\n    (loop (string-split paren_string\n   \
    \                 #\\( #\\)\n                    #\\)\n                    paren_stack)))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [(equal? (car paren_string) ')')\
    \ (loop (cdr paren_string) (- 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
