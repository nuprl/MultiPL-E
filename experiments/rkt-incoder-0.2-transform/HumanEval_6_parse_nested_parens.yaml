name: HumanEval_6_parse_nested_parens
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n;; For each of the group,\
  \ output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n;; >>> (parse_nested_parens \"\
  (()()) ((())) () ((())()())\")\n;; (list 2 3 1 3)\n(define (parse_nested_parens\
  \ paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3))\n\
  \    (check-equal? (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4))\n   \
  \ (check-equal? (candidate \"(()(())((())))\") (list 4))\n))\n\n(test-humaneval)"
completions: ["  (let ((levels (make-list 0 0))\n        (groups (make-list 0 0)))\n\
    \    (loop\n       for i from 0 to (length paren_string)\n       for j from 0\
    \ to (length paren_string)\n       when (and (char=? (char-code paren_string)\
    \ i)\n                (char=? (char-code paren_string) j))\n       do (set! levels\
    \ (cons i levels))\n       (set! groups (cons j groups))\n       (set! levels\
    \ (cons (+ i j) levels))\n       (set! groups (cons (+ j i) groups))\n       finally\
    \ (return (max levels))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (cond\n      [(empty?\
    \ paren_string) result]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string)\
    \ (cons result '())))]\n      [(equal? (car paren_string) '(#\\Space) (loop (cdr\
    \ paren_string) (cons result '())))]\n      [(equal? (car paren_string) '(#\\\
    Newline) (loop (cdr paren_string) (cons result '())))]\n      [(equal? (car paren_string)\
    \ '(#\\Tab) (loop (cdr paren_string) (cons result '())))]\n      [(equal? (car\
    \ paren_string) '(#\\Newline) (loop (cdr paren_string) (cons result '())))]\n\
    \      [(equal? (car paren_string) '(#\\Space) (loop (cdr paren_string) (cons\
    \ result '())))]\n      [(equal? (car paren_string) '(#\\Newline) (loop (cdr paren_string)\
    \ (cons result '())))]\n      [(equal? (car paren_string) '(#\\Tab) (loop (cdr\
    \ paren_string) (cons result '())))]\n      [(equal? (car paren_string) '(#\\\
    Space) (loop (cdr paren_string) (cons result '())))]\n      [(equal? (car paren_string)\
    \ '(#\\Newline) (loop (cdr paren_string) (cons result '())))]\n      [(equal?\
    \ (car paren_string) '(#\\Tab) (loop (cdr paren_string) (cons result '())))]\n\
    \      [(equal? (car paren_string) '(#\\Space) (loop (cdr paren_string) (cons\
    \ result '())))]\n      [(equal? (car paren_string) '(#\\Newline) (loop (cdr paren_string)\
    \ (cons result '())))]\n      [(equal? (car paren_string) '(#\\Tab) (loop (cdr\
    \ paren_string) (cons result '())))]\n      [(equal? (car paren_string) '(#\\\
    Space) (loop (cdr paren_string) (cons result '())))]\n      [(equal? (car paren_string)\
    \ '(#\\Newline) (loop (cdr paren_string) (cons result '())))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string) (+ paren_count\
    \ 1))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string) (- paren_count\
    \ 1))]\n      [else (loop (cdr paren_string) (+ paren_count 1))])))\n", "  (let\
    \ ((paren_stack (make-list 0))\n        (paren_level (make-list 0))\n        (paren_string\
    \ (make-string paren_string)))\n    (loop\n       for i from 0 to (length paren_string)\n\
    \       when (char= paren_string #\\( )\n       do (set! paren_stack (cons i paren_stack))\n\
    \       when (char= paren_string #\\) )\n       do (set! paren_stack (cdr paren_stack))\n\
    \       when (null? paren_stack)\n       do (set! paren_level i)\n       when\
    \ (null? (cdr paren_stack))\n       do (set! paren_level (cdr paren_level))\n\
    \       when (> (length paren_stack) paren_level)\n       do (set! paren_level\
    \ 0)\n       when (> (length paren_level) 0)\n       do (set! paren_level 0)\n\
    \       when (char= paren_string #\\( )\n       do (set! paren_stack (cons 0 paren_stack))\n\
    \       when (char= paren_string #\\) )\n       do (set! paren_stack (cdr paren_stack))\n\
    \       when (null? paren_stack)\n       do (set! paren_level 0)\n       when\
    \ (null? (cdr paren_stack))\n       do (set! paren_level (cdr paren_level))\n\
    \       when (> (length paren_stack) paren_level)\n       do (set! paren_level\
    \ 0)\n       when (> (length paren_level) 0)\n       do (set! paren_level 0)\n\
    \       when (char= paren_string #\\( )\n       do (set! paren_stack (cons 0 paren_stack))\n\
    \       when (char= paren_string #\\) )\n       do (set! paren_stack (cdr paren_stack))\n\
    \       when (null? paren_stack)\n       do (set! paren_level 0)\n       when\
    \ (null? (cdr paren_stack))\n       do (set! paren_level (cdr paren_level))\n\
    \       when (> (length paren_stack) paren_level)\n       do (set! paren_level\
    \ 0)\n       when (> (length paren_level) 0)\n       do (set! paren_level 0)\n\
    \       when (char= paren_string #\\( )\n       do (set! ", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list->string levels)]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(", "  (let loop ((paren_string paren_string)\n          \
    \   (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char=?\
    \ (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n      [(char=?\
    \ (car paren_string) ')') (loop (cdr paren_string) (sub1 levels))]\n      [else\
    \ (loop (cdr paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ level))]\n      [(char=? (car paren_string) ')') (loop (cdr paren_string) (sub1\
    \ level))]\n      [else (loop (cdr paren_string) (add1 level))]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) ')')\
    \ (loop (rest paren_string) (sub1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline) (loop (rest paren_string) (add1 levels))]\n    \
    \  [(equal? (first paren_string) '(#\\Tab) (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Newline) (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline) (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\Tab)\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline) (loop (rest paren_string) (add1 levels))]\n    \
    \  [(equal? (first paren_string) '(#\\Tab) (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(#\\Newline) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Tab) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline)\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Tab) (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(equal? (first\
    \ paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n\
    \       ]\n      [(equal? (car paren_string) '())\n       (loop (cdr paren_string)\
    \ (+ level 1))\n       ]\n      [(equal? (car paren_string) '(()))\n       (loop\
    \ (cdr paren_string) (+ level 2))\n       ]\n      [else\n       (loop (cdr paren_string)\
    \ (+ level 1))\n       ]\n      )\n    )\n  )\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr\
    \ paren_string) (+ 1 levels))]\n      [(equal? (car paren_string) ')')\n     \
    \  (loop (cdr paren_string) (- 1 levels))]\n      [else\n       (loop (cdr paren_string)\
    \ (+ 1 levels))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n \
    \     [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list level)]\n      [(equal? (car paren_string) '(')\n\
    \       (loop (cdr paren_string) (+ level 1))]\n      [(equal? (car paren_string)\
    \ ')')\n       (loop (cdr paren_string) level)]\n      [else\n       (loop (cdr\
    \ paren_string) (+ level 1))]\n    )\n  )\n)\n", "  (let ((levels ()))\n    (loop\n\
    \       for i from 0 to (length paren_string)\n       for ch = substring paren_string\
    \ i i\n       for ch = substring paren_string (i + 1) (length paren_string)\n\
    \       for ch = substring paren_string (i + 2) (length paren_string)\n      \
    \ for ch = substring paren_string (i + 3) (length paren_string)\n       for ch\
    \ = substring paren_string (i + 4) (length paren_string)\n       for ch = substring\
    \ paren_string (i + 5) (length paren_string)\n       for ch = substring paren_string\
    \ (i + 6) (length paren_string)\n       for ch = substring paren_string (i + 7)\
    \ (length paren_string)\n       for ch = substring paren_string (i + 8) (length\
    \ paren_string)\n       for ch = substring paren_string (i + 9) (length paren_string)\n\
    \       for ch = substring paren_string (i + 10) (length paren_string)\n     \
    \  for ch = substring paren_string (i + 11) (length paren_string)\n       for\
    \ ch = substring paren_string (i + 12) (length paren_string)\n       for ch =\
    \ substring paren_string (i + 13) (length paren_string)\n       for ch = substring\
    \ paren_string (i + 14) (length paren_string)\n       for ch = substring paren_string\
    \ (i + 15) (length paren_string)\n       for ch = substring paren_string (i +\
    \ 16) (length paren_string)\n       for ch = substring paren_string (i + 17) (length\
    \ paren_string)\n       for ch = substring paren_string (i + 18) (length paren_string)\n\
    \       for ch = substring paren_string (i + 19) (length paren_string)\n     \
    \  for ch = substring paren_string (i + 20) (length paren_string)\n       for\
    \ ch = substring paren_string (i + 21) (length paren_string)\n       for ch =\
    \ substring paren_string (i + 22) (length paren_string)\n       for ch = substring\
    \ paren_string (i + 23) (length paren_string)\n       for ch = substring paren_string\
    \ (i + 24) (length paren_string)\n       for ch = substring paren_string (i +\
    \ 25) (length paren_string)\n       for ch = substring paren_string (i + 26) (length\
    \ paren_string)\n       for ch = substring paren_string (i + 27) (length paren_string)\n\
    \       for ch = substring paren_string (i + 28) (length paren_string)\n     \
    \  for ch = ", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (list paren_count)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [else\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      )))\n",
  "  (let ((paren_stack (make-list 0))\n        (paren_level (make-list 0))\n    \
    \    (paren_string (make-string paren_string)))\n    (define (loop (i paren_stack)\n\
    \             (if (null? i)\n                 (if (null? (cdr paren_stack))\n\
    \                     (reverse paren_level)\n                     (loop (cdr paren_stack)\n\
    \                          (cons (car paren_stack) paren_level)))\n          \
    \       (loop (cdr i)\n                      (cons (car i) (cdr i))))\n      (loop\
    \ (string-split paren_string\n                      #\\( #\\)\n              \
    \        #\\))\n      paren_stack)\n    (loop (string-split paren_string\n   \
    \                 #\\( #\\)\n                    #\\)\n                    paren_stack)))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [(equal? (car paren_string) ')')\
    \ (loop (cdr paren_string) (- 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let ((levels ()))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse levels)]\n      [(equal? (car paren_string) '())\n\
    \       (reverse levels)]\n      [(equal? (car paren_string) '(()))\n       (let\
    \ ((level (+ 1 (length (cdr paren_string)))))\n         (cond [(equal? (car paren_string)\
    \ '(()))\n                (set! levels (cons level levels))]\n               [(equal?\
    \ (car paren_string) '((()))\n                (set! levels (cons level levels))]\n\
    \               [(equal? (car paren_string) '((())))\n                (set! levels\
    \ (cons level levels))]\n               [(equal? (car paren_string) '((()())))\n\
    \                (set! levels (cons level levels))]\n               [(equal? (car\
    \ paren_string) '((()()())))\n                (set! levels (cons level levels))]\n\
    \               [(equal? (car paren_string) '((()()()())))\n                (set!\
    \ levels (cons level levels))]\n               [(equal? (car paren_string) '((()()()()())))\n\
    \                (set! levels (cons level levels))]\n               [(equal? (car\
    \ paren_string) '((()()()()()())))\n                (set! levels (cons level levels))]\n\
    \               [(equal? (car paren_string) '((()()()()()())))\n             \
    \   (set! levels (cons level levels))]\n               [(equal? (car paren_string)\
    \ '((()()()()()()())))\n                (set! levels (cons level levels))]\n \
    \              [(equal? (car paren_string) '((()()()()()()()())))\n          \
    \      (set! levels (cons level levels))]\n               [(equal? (car paren_string)\
    \ '((()()()()()()()()())))\n                (set! levels (cons level levels))]\n\
    \               [(equal? (car paren_string) '((()()()()()()()()())))\n       \
    \         (set! levels (cons level levels))]\n               [(equal? (car paren_string)\
    \ '((()()()()()()()()()())))\n                (set! levels (cons level levels))]\n\
    \               [(equal? (car paren_string) '((()()()()()()()()()()", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(char? (car paren_string)) (cons\
    \ (car paren_string) (loop (cdr paren_string) (+ 1 paren_count)))]\n      [else\
    \ (loop (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space)\n\
    \       (loop (rest paren_string)\n             (add1 levels))]\n      [else\n\
    \       (loop (rest paren_string)\n             (add1 levels))]\n      )))\n",
  "  (let loop ((paren_string paren_string)\n             (max_level 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 max_level))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline) (loop (rest paren_string) (add1 max_level))]\n \
    \     [else (loop (rest paren_string) (add1 max_level))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list level)]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (add1 level))]\n      [else\n       (loop (rest\
    \ paren_string) (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (car paren_string) '(') (loop (cdr paren_string) (+ 1 paren_count))]\n\
    \      [(equal? (car paren_string) ')') (loop (cdr paren_string) (- 1 paren_count))]\n\
    \      [else (loop (cdr paren_string) paren_count)]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (+\
    \ level 1)))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string)\
    \ (+ level 1)))]\n      [else (loop (rest paren_string) (+ level 1))])))\n", " \
    \ (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list)\n       ]\n      [(char=? (first\
    \ paren_string) '( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond [(empty? paren_string) empty]\n    \
    \      [(char=? (first paren_string) '(') (incf paren_count)]\n          [(char=?\
    \ (first paren_string) ')') (decf paren_count)]\n          [else (loop (rest paren_string)\
    \ (add1 paren_count))]))\n  (loop (reverse paren_string) 0))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string) empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 levels))]\n      [else (loop (rest paren_string) (add1 levels))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [(equal? (car paren_string) ')')\
    \ (loop (cdr paren_string) (- 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (- 1 paren_count))]\n\
    \      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))\n  (if (= paren_count 0)\n      (error\
    \ \"No matching parentheses\"))\n  (if (= paren_count 1)\n      (first paren_string)\n\
    \      (loop (rest paren_string) 0)))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n",
  "  (let ((levels ()))\n    (loop\n       for i from 0 to (length paren_string)\n\
    \       for c from 0 to (length paren_string)\n       when (char=? (char-ref paren_string\
    \ i) (char-ref paren_string c))\n       collect (+ 1 (length levels))\n     finally\
    \ (return (cons levels (length levels)))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 level))]\n\
    \      [(char=? (car paren_string) ')') (loop (cdr paren_string) (sub1 level))]\n\
    \      [else (loop (cdr paren_string) (add1 level))]))))\n", "  (let loop ((parens\
    \ (string->list paren_string))\n             (level (length parens))\n       \
    \      (result '()))\n    (cond [(empty? parens) result]\n          [(equal? (car\
    \ parens) '()) result]\n          [(equal? (car parens) '(())) result]\n     \
    \     [else (loop (cdr parens)\n                      (- level 1)\n          \
    \            (cons (- level 1) result))])))\n", "  (let ((levels ()))\n    (let\
    \ loop ((paren_string paren_string)\n               (level (length paren_string))\n\
    \               (levels (cons level levels)))\n      (if (empty? paren_string)\n\
    \          levels\n          (loop (rest paren_string)\n                (- level\
    \ (length paren_string))\n                (cons (- level 1) levels))))))\n", " \
    \ (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list)\n       ]\n      [(equal? (first\
    \ paren_string) '(())) ; empty group\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      [else\n       (loop (rest paren_string) (add1 level))\n     \
    \  (loop (first paren_string) (add1 level))\n       ]\n      )\n    )\n  )\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (list paren_count)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string)\n             (+ paren_count 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n \
    \            (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n \
    \      (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n \
    \            (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n \
    \      (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     ", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string) level]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let ((levels (make-list\
    \ 0 0))\n        (level (make-list 0 0)))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse levels)]\n      [(equal? (car paren_string) '())\n       (reverse\
    \ levels)]\n      [(equal? (car paren_string) '(()))\n       (let ((level (cdr\
    \ level)))\n         (set! levels (append levels (list level)))\n         (set!\
    \ level (cdr level)))\n       (reverse levels)]\n      [(equal? (car paren_string)\
    \ '((()))\n       (let ((level (cdr level)))\n         (set! levels (append levels\
    \ (list level)))\n         (set! level (cdr level)))\n       (reverse levels)]\n\
    \      [(equal? (car paren_string) '((()()))\n       (let ((level (cdr level)))\n\
    \         (set! levels (append levels (list level)))\n         (set! level (cdr\
    \ level)))\n       (reverse levels)]\n      [(equal? (car paren_string) '((()()()))\n\
    \       (let ((level (cdr level)))\n         (set! levels (append levels (list\
    \ level)))\n         (set! level (cdr level)))\n       (reverse levels)]\n   \
    \   [(equal? (car paren_string) '((()()()()))\n       (let ((level (cdr level)))\n\
    \         (set! levels (append levels (list level)))\n         (set! level (cdr\
    \ level)))\n       (reverse levels)]\n      [(equal? (car paren_string) '((()()()()()))\n\
    \       (let ((level (cdr level)))\n         (set! levels (append levels (list\
    \ level)))\n         (set! level (cdr level)))\n       (reverse levels)]\n   \
    \   [(equal? (car paren_string) '((()()()()()()))\n       (let ((level (cdr level)))\n\
    \         (set! levels (append levels (list level)))\n         (set! level (cdr\
    \ level)))\n       (reverse levels)]\n      [(equal? (car paren_string) '((()()()()()()()))\n\
    \       (let ((level (cdr level)))\n         (set! levels (append levels (list\
    \ level)))\n         (set! level (cdr level)))\n       (reverse levels)]\n   \
    \   [(equal? (car paren_string) '((()()()()()()()()))\n       (let ((level (cdr\
    \ level)))\n         (set! levels (append levels (list ", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [else (loop (rest paren_string) (add1 paren_count))]))))\n",
  "  (let ((result '()))\n    (loop for i from 0 to (length paren_string)\n      \
    \    for char from 0 to (length paren_string)\n          when (char=? paren_string[i\
    \ char])\n          collect (if (char=? (substring paren_string i char) '()')\n\
    \                      (+ 1 (parse_nested_parens (substring paren_string i char)))\n\
    \                      (+ 1 (parse_nested_parens (substring paren_string i char))))\n\
    \          into result\n          finally (return result)))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (max_level 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ max_level))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string)\
    \ (sub1 max_level))]\n      [else (loop (cdr paren_string) (max max_level (car\
    \ paren_string)))])))\n", "  (let loop ((paren_string paren_string)\n        \
    \     (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char?\
    \ (car paren_string)) (loop (cdr paren_string) (add1 levels))]\n      [else (loop\
    \ (cdr paren_string) (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list->string levels)]\n      [(equal? (first paren_string)\
    \ '(())) ; level 1\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '((())) ; level 2\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '((())()) ; level 3\n     \
    \  (loop (rest paren_string) (+ 1 levels))]\n      [else\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n  \
    \           (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (- 1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (+ 1 paren_count))]))))\n", "  (let ((levels ()))\n    (loop for\
    \ i from 0 to (length paren_string)\n          for char from 0 to (length paren_string)\n\
    \          when (char= paren_string char i)\n          collect (if (char= paren_string\
    \ char i)\n                      (+ 1 (length paren_string))\n               \
    \       (+ 1 (levels))))\n    (if (= (length paren_string) 0)\n        (list 0)\n\
    \        (append (list levels)\n                (parse_nested_parens (substring\
    \ paren_string 0 i))))))\n", "  (let loop ((paren_string paren_string)\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n  \
    \    [(equal? (car paren_string) '()) empty]\n      [(equal? (car paren_string)\
    \ '(())) (incf paren_count)]\n      [(equal? (car paren_string) '((())) (incf\
    \ paren_count)]\n      [else (loop (cdr paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [else (loop (rest paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (max_level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list max_level)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 max_level))]\n  \
    \    [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ max_level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 max_level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 max_level))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 max_level))]\n  \
    \    [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ max_level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 max_level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 max_level))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 max_level))]\n  \
    \    [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ max_level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 max_level))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 max_level))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 max_level))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 max_level))]\n  \
    \    [(equal", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list->string levels)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) ')')\n       (loop (rest paren_string)\
    \ (- 1 levels))]\n      [else\n       (loop (rest paren_string) (+ 1 levels))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      ", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string)\n             (+ 1 levels))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (+ 1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond ((null? paren_string)\n\
    \           (list paren_count))\n          ((char= (first paren_string) '(')\n\
    \           (loop (rest paren_string)\n                 (add1 paren_count)))\n\
    \          ((char= (first paren_string) ')')\n           (loop (rest paren_string)\n\
    \                 (sub1 paren_count)))\n          (else\n           (loop (rest\
    \ paren_string)\n                 (add1 paren_count))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list->string paren_count)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string) (sub1 paren_count))]\n      [else\n       (loop (rest paren_string)\
    \ (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (car paren_string) '()) empty]\n      [(equal? (car paren_string)\
    \ '(())) (incf paren_count)]\n      [(equal? (car paren_string) '((())) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()) (incf paren_count)]\n\
    \      [(equal? (car paren_string) '((())()()) (incf paren_count)]\n      [(equal?\
    \ (car paren_string) '((())()()()) (incf paren_count)]\n      [(equal? (car paren_string)\
    \ '((())()()()()) (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()) (incf\
    \ paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()()()()()())\
    \ (incf paren_count)]\n      [(equal? (car paren_string) '((())()()()()()()()()()()()()()()())\
    \ (incf paren_count)]\n", "  (let loop ((paren_string paren_string)\n        \
    \     (max_level 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (car paren_string) '()) max_level]\n      [(equal? (car paren_string) '(()))\
    \ loop (cdr paren_string) (+ max_level 1)]\n      [(equal? (car paren_string)\
    \ '((())) loop (cdr paren_string) (+ max_level 2)]\n      [(equal? (car paren_string)\
    \ '((())()())) loop (cdr paren_string) (+ max_level 3)]\n      [else (loop (cdr\
    \ paren_string) max_level)])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (add1 levels))]\n      [(equal? (first paren_string) ')')\n    \
    \   (loop (rest paren_string)\n             (sub1 levels))]\n      [else\n   \
    \    (loop (rest paren_string)\n             (add1 levels))]\n      )))\n", " \
    \ (let loop ((paren_string paren_string)\n             (max_level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list max_level)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (add1 max_level))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 max_level))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list levels)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) ')')\n       (loop (rest paren_string) (sub1 levels))]\n     \
    \ [else\n       (loop (rest paren_string) (add1 levels))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [else (loop (rest paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list levels)]\n      [(char=? (first paren_string)\
    \ '(\n              (loop (rest paren_string) (add1 levels)))]\n      [(char=?\
    \ (first paren_string) '(\n              (loop (rest paren_string) (add1 levels)))]\n\
    \      [(char=? (first paren_string) '(\n              (loop (rest paren_string)\
    \ (add1 levels)))]\n      [(char=? (first paren_string) '(\n              (loop\
    \ (rest paren_string) (add1 levels)))]\n      [(char=? (first paren_string) '(\n\
    \              (loop (rest paren_string) (add1 levels)))]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string) (add1 levels)))]\n\
    \      [(char=? (first paren_string) '(\n              (loop (rest paren_string)\
    \ (add1 levels)))]\n      [(char=? (first paren_string) '(\n              (loop\
    \ (rest paren_string) (add1 levels)))]\n      [(char=? (first paren_string) '(\n\
    \              (loop (rest paren_string) (add1 levels)))]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string) (add1 levels)))]\n\
    \      [(char=? (first paren_string) '(\n              (loop (rest paren_string)\
    \ (add1 levels)))]\n      [(char=? (first paren_string) '(\n              (loop\
    \ (rest paren_string) (add1 levels)))]\n      [(char=? (first paren_string) '(\n\
    \              (loop (rest paren_string) (add1 levels)))]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string) (add1 levels)))]\n\
    \      [(char=? (first paren_string) '(\n              (loop (rest paren_string)\
    \ (add1 levels)))]\n      [(char=? (first paren_string) '(\n              (loop\
    \ (rest paren_string) (add1 levels)))]\n      [(char=? (first paren_string) '(\n\
    \              (loop (rest paren_string) (add1 levels)))]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string) (add1 levels)))]\n\
    \      [(char=? (first paren_string) '(", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline) (loop (rest paren_string) (add1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(char? (car paren_string)) (cons (car paren_string) (loop (cdr paren_string)\
    \ (+ 1 paren_count)))]\n      [else (loop (cdr paren_string) (+ 1 paren_count))]))\n\
    \  (loop '() 0))\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list paren_count)]\n \
    \     [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string) (- paren_count 1))]\n      [else\n       (loop (rest paren_string)\
    \ (+ paren_count 1))])))\n", "  (let loop ((paren_string paren_string)\n     \
    \        (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string)\n       (list level)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))]\n      [else\n       (loop\
    \ (rest paren_string) (add1 level))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (+ 1 levels))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- 1 levels))]\n      [else\n       (loop (cdr paren_string) (+ 1 levels))])))\n",
  "  (let loop ((parens (string->list paren_string))\n             (level (length\
    \ parens)))\n    (cond ((null? parens) (list 0))\n          ((= level 0) (cons\
    \ (car parens) (loop (cdr parens) (- level 1))))\n          ((= level 1) (cons\
    \ (car parens) (loop (cdr parens) (- level 1))))\n          (else (loop (cdr parens)\
    \ (- level 1))))))\n", "  (let loop ((paren_string paren_string)\n           \
    \  (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let ((levels\
    \ ()))\n    (loop\n       for i from 0 to (length paren_string)\n       for char\
    \ from 0 to (length paren_string)\n       when (char=paren_string[i] and (i=0\
    \ or char=paren_string[i-1]))\n       do (push (cons i levels) levels)\n     \
    \  finally (return levels))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(equal? (first paren_string) '( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let ((result '()))\n    (loop for c in\
    \ paren_string\n          for i = 0 to (length c)\n          collect (if (char=?\
    \ c (char c i))\n                     (+ 1 (parse_nested_parens (substring c i\
    \ 1)))\n                     (+ 1 (parse_nested_parens (substring c i))))\n  \
    \        into result\n          finally (return result)))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\\
    Space)\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline)\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Tab)\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline)\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\\
    Tab)\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Space)\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Newline)\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Tab)\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\\
    Space)\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline)\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Tab)\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space)\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\\
    Newline)\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Tab)\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline)\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (- 1 paren_count))]\n      [else (loop (rest\
    \ paren_string) paren_count)]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n\
    \       ]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(equal? (first paren_string) ')')\n       (loop\
    \ (rest paren_string) (sub1 level))\n       ]\n      [else\n       (loop (rest\
    \ paren_string) (add1 level))\n       ]\n      )\n    )\n  )\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) empty]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      ", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (car paren_string) '()) empty]\n      [(equal? (car paren_string)\
    \ '(())) (incf paren_count)]\n      [(equal? (car paren_string) '((())) (incf\
    \ paren_count)]\n      [else (loop (cdr paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (max_level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list max_level)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (add1 (first\
    \ paren_string)))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string)\n             (add1 (first paren_string)))]\n      [else\n   \
    \    (loop (rest paren_string)\n             (add1 (first paren_string)))]\n \
    \     [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 (first paren_string)))]\n\
    \      [", "  (let ((levels 0))\n    (loop for (i 0) below paren_string.length\n\
    \          collect (if (char=? (char-code (substring paren_string i i)) '(')\n\
    \                      (add1 levels)\n                      levels))))\n", " \
    \ (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list levels)]\n      [(equal? (car paren_string)\
    \ '())\n       (loop (cdr paren_string) (add1 levels))]\n      [(equal? (car paren_string)\
    \ '(()))\n       (loop (cdr paren_string) (add1 levels))]\n      [(equal? (car\
    \ paren_string) '((()))\n       (loop (cdr paren_string) (add1 levels))]\n   \
    \   [(equal? (car paren_string) '((()()))\n       (loop (cdr paren_string) (add1\
    \ levels))]\n      [(equal? (car paren_string) '((()()()))\n       (loop (cdr\
    \ paren_string) (add1 levels))]\n      [(equal? (car paren_string) '((()()()()))\n\
    \       (loop (cdr paren_string) (add1 levels))]\n      [(equal? (car paren_string)\
    \ '((()()()()()))\n       (loop (cdr paren_string) (add1 levels))]\n      [(equal?\
    \ (car paren_string) '((()()()()()()))\n       (loop (cdr paren_string) (add1\
    \ levels))]\n      [(equal? (car paren_string) '((()()()()()()()))\n       (loop\
    \ (cdr paren_string) (add1 levels))]\n      [(equal? (car paren_string) '((()()()()()()()))\n\
    \       (loop (cdr paren_string) (add1 levels))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()()))\n       (loop (cdr paren_string) (add1 levels))]\n   \
    \   [(equal? (car paren_string) '((()()()()()()()()()))\n       (loop (cdr paren_string)\
    \ (add1 levels))]\n      [(equal? (car paren_string) '((()()()()()()()()()))\n\
    \       (loop (cdr paren_string) (add1 levels))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()()()))\n       (loop (cdr paren_string) (add1 levels))]\n \
    \     [(equal? (car paren_string) '((()()()()()()()()()()))\n       (loop (cdr\
    \ paren_string) (add1 levels))]\n      [(equal? (car paren_string", "  (let ((paren_stack\
    \ (make-list 0))\n        (paren_level (make-list 0))\n        (paren_count (make-list\
    \ 0))\n        (paren_string (make-string paren_string)))\n    (loop\n       for\
    \ i from 0 to (length paren_string)\n       for char from (char-index paren_string\
    \ i)\n       for paren_char from (char-index paren_string i)\n       for paren_count\
    \ from 0 to (length paren_stack)\n       for paren_level from 0 to (length paren_level)\n\
    \       for paren_char from (char-index paren_string i)\n       until (char= paren_char\
    \ #\\)\n       do (set! paren_stack (cons paren_char paren_stack))\n       (set!\
    \ paren_level (cons paren_level paren_stack))\n       (set! paren_count (cons\
    \ paren_count paren_stack))\n       (set! paren_string (substring paren_string\
    \ 0 i)))\n    (cond\n      [(empty? paren_string) empty]\n      [(char= paren_char\
    \ #\\) empty]\n      [(char= paren_char #\\) empty]\n      [else (cons (length\
    \ paren_stack) (parse_nested_parens (substring paren_string 0 i)))])))\n", " \
    \ (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n\
    \       ]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(equal? (first paren_string) '(#\\))\n     \
    \  (loop (rest paren_string) (sub1 level))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string) (sub1 level))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(equal? (first paren_string) '(#\\))\n     \
    \  (loop (rest paren_string) (sub1 level))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string) (sub1 level))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(equal? (first paren_string) '(#\\))\n     \
    \  (loop (rest paren_string) (sub1 level))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string) (sub1 level))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(equal? (first paren_string) '(#\\))\n     \
    \  (loop (rest paren_string) (sub1 level))\n       ]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string) (sub1 level))\n\
    \       ]\n      [(equal? (first paren_string) '(#\\))\n       (loop (", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (list levels)]\n      [(equal? (first paren_string)\
    \ '(())) ; found an opening parenthesis\n       (loop (rest paren_string)\n  \
    \           (+ 1 levels))]\n      [else\n       (loop (rest paren_string)\n  \
    \           (+ 1 levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '()) empty]\n\
    \      [(equal? (car paren_string) '(())) (incf paren_count)]\n      [else (loop\
    \ (cdr paren_string) (add1 paren_count))]))\n  (loop (reverse paren_string) 0))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 levels))]\n      [else (loop (rest paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (list paren_count)]\n\
    \      [(equal? (first paren_string) '(())) ; '(()) has two levels of nesting\n\
    \       (loop (rest paren_string) (+ 1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      ", "  (let loop ((paren_string paren_string)\n             (max_level 0))\n\
    \    (cond\n      [(empty? paren_string) empty]\n      [(equal? (car paren_string)\
    \ '(') (loop (cdr paren_string) (add1 max_level))]\n      [(equal? (car paren_string)\
    \ ')') (loop (cdr paren_string) (sub1 max_level))]\n      [else (loop (cdr paren_string)\
    \ (max (add1 max_level) (sub1 max_level)))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (max_level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list max_level)]\n      [(equal? (car paren_string) '(')\n       (loop\
    \ (cdr paren_string) (+ max_level 1))]\n      [(equal? (car paren_string) ')')\n\
    \       (loop (cdr paren_string) (- max_level 1))]\n      [else\n       (loop\
    \ (cdr paren_string) (+ max_level 1))]\n    )\n  )\n)\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list)\n       ]\n      [(equal? (car paren_string) '())\n       (loop\
    \ (cdr paren_string) (+ level 1))\n       ]\n      [else\n       (loop (cdr paren_string)\
    \ (+ level 1))\n       (loop (cdr paren_string) (+ level 1))\n       ]\n     \
    \ )\n    )\n  )\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n       ]\n    \
    \  [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))\n       ]\n      [else\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      )\n      )\n    )\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) empty]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ level 1)))]",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [(equal? (car paren_string) ')')\
    \ (loop (cdr paren_string) (- 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (- 1 paren_count))]\n\
    \      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string) levels]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n     \
    \ [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(char=? (car paren_string) '(') (loop", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))\n  (if (= paren_count\
    \ 0)\n      (list 0)\n      (loop (rest paren_string) 0)))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char? (car paren_string)) (loop (cdr paren_string) (cons (car\
    \ paren_string) result))]\n      [else (loop (cdr paren_string) (cons (loop (car\
    \ paren_string) (cons (car paren_string) result)) result))])))\n", "  (let loop\
    \ ((parens (string->list paren_string)))\n    (cond\n      [(empty? parens) (list\
    \ 0)]\n      [(equal? (car parens) '()) (loop (cdr parens))]\n      [(equal? (car\
    \ parens) '(())) (loop (cdr parens))]\n      [(equal? (car parens) '((())) (loop\
    \ (cdr parens))]\n      [(equal? (car parens) '((())()) (loop (cdr parens))]\n\
    \      [(equal? (car parens) '((())()()) (loop (cdr parens))]\n      [(equal?\
    \ (car parens) '((())()()()) (loop (cdr parens))]\n      [(equal? (car parens)\
    \ '((())()()()()) (loop (cdr parens))]\n      [(equal? (car parens) '((())()()()()())\
    \ (loop (cdr parens))]\n      [(equal? (car parens) '((())()()()()()()) (loop\
    \ (cdr parens))]\n      [(equal? (car parens) '((())()()()()()()()) (loop (cdr\
    \ parens))]\n      [(equal? (car parens) '((())()()()()()()()()) (loop (cdr parens))]\n\
    \      [(equal? (car parens) '((())()()()()()()()()) (loop (cdr parens))]\n  \
    \    [(equal? (car parens) '((())()()()()()()()()) (loop (cdr parens))]\n    \
    \  [(equal? (car parens) '((())()()()()()()()()()) (loop (cdr parens))]\n    \
    \  [(equal? (car parens) '((())()()()()()()()()()()) (loop (cdr parens))]\n  \
    \    [(equal? (car parens) '((())()()()()()()()()()()) (loop (cdr parens))]\n\
    \      [(equal? (car parens) '((())()()()()()()()()()()) (loop (cdr parens))]\n\
    \      [(equal? (car parens) '((())()()()()()()()()()()) (loop (cdr parens))]\n\
    \      [(equal? (car parens) '((())()()()()()()()()()()()) (loop", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list levels)]\n      [(equal? (car paren_string) '())\n\
    \       (loop (cdr paren_string) (+ levels 1))]\n      [(equal? (car paren_string)\
    \ '(())\n       (loop (cdr paren_string) (+ levels 2))]\n      [(equal? (car paren_string)\
    \ '((()))\n       (loop (cdr paren_string) (+ levels 3))]\n      [(equal? (car\
    \ paren_string) '((()()))\n       (loop (cdr paren_string) (+ levels 4))]\n  \
    \    [(equal? (car paren_string) '((()()()))\n       (loop (cdr paren_string)\
    \ (+ levels 5))]\n      [(equal? (car paren_string) '((()()()()))\n       (loop\
    \ (cdr paren_string) (+ levels 6))]\n      [(equal? (car paren_string) '((()()()()()))\n\
    \       (loop (cdr paren_string) (+ levels 7))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()))\n       (loop (cdr paren_string) (+ levels 8))]\n      [(equal?\
    \ (car paren_string) '((()()()()()()()))\n       (loop (cdr paren_string) (+ levels\
    \ 9))]\n      [(equal? (car paren_string) '((()()()()()()()))\n       (loop (cdr\
    \ paren_string) (+ levels 10))]\n      [(equal? (car paren_string) '((()()()()()()()()))\n\
    \       (loop (cdr paren_string) (+ levels 11))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()()()))\n       (loop (cdr paren_string) (+ levels 12))]\n \
    \     [(equal? (car paren_string) '((()()()()()()()()()))\n       (loop (cdr paren_string)\
    \ (+ levels 13))]\n      [(equal? (car paren_string) '((()()()()()()()()()))\n\
    \       (loop (cdr paren_string) (+ levels 14))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()()()()))\n       (loop (cdr paren_string) (+ levels 15))]\n\
    \      [(equal? (car paren_string", "  (let loop ((paren_string paren_string)\n\
    \             (max_level 0))\n    (cond\n      [(empty? paren_string)\n      \
    \ (list max_level)]\n      [(equal? (car paren_string) '())\n       (loop (cdr\
    \ paren_string) (+ max_level 1))]\n      [(equal? (car paren_string) '(())\n \
    \      (loop (cdr paren_string) (+ max_level 2))]\n      [(equal? (car paren_string)\
    \ '(()())\n       (loop (cdr paren_string) (+ max_level 3))]\n      [else\n  \
    \     (loop (cdr paren_string) (+ max_level 1))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(char? (car paren_string))\n       (loop (cdr paren_string)\n\
    \             (+ 1 paren_count))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (+ 1 paren_count))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `(parse_nested_parens \"(()()) ((())) () ((())()())\")` returns\
    \ `'(2 3 1 3)` instead of `'(2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\
    \ 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1\
    \ 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\
    \ 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\
    \ 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1\
    \ 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\
    \ 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\
    \ 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1\
    \ 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\
    \ 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2\
    \ 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 ", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (if (null? paren_string)\n        result\n  \
    \      (loop (rest paren_string)\n              (cons (max 0 (parse-parens paren_string))\
    \ result)))))\n", "  (let ((levels ()))\n    (let loop ((paren_string paren_string)\n\
    \               (level (length paren_string))\n               (levels (cons level\
    \ levels)))\n      (if (empty? paren_string)\n          levels\n          (loop\
    \ (rest paren_string)\n                (- level (length paren_string))\n     \
    \           (cons (- level 1) levels))))))\n", "  (let ((levels ()))\n    (loop\
    \ for i from 0 to (length paren_string)\n          for char from 0 to (length\
    \ paren_string)\n          for nesting from 0 to (length paren_string)\n     \
    \     for paren from 0 to (length paren_string)\n          for paren_char from\
    \ 0 to (length paren_string)\n          for paren_nesting from 0 to (length paren_string)\n\
    \          for paren_paren from 0 to (length paren_string)\n          for paren_paren_char\
    \ from 0 to (length paren_string)\n          for paren_paren_nesting from 0 to\
    \ (length paren_string)\n          for paren_paren_paren from 0 to (length paren_string)\n\
    \          for paren_paren_paren_char from 0 to (length paren_string)\n      \
    \    for paren_paren_paren_nesting from 0 to (length paren_string)\n         \
    \ for paren_paren_paren_paren from 0 to (length paren_string)\n          for paren_paren_paren_paren_char\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_nesting\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_char\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_nesting\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_paren\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_paren_char\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_paren_nesting\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_paren_paren\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_paren_paren_char\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_paren_paren_nesting\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_paren_paren_paren\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_paren_paren_char\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren_paren_paren_nesting\
    \ from 0 to (length paren_string)\n          for paren_paren_paren_paren_paren",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list)\n       ]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n\
    \      [else\n       (loop (rest paren_string) (add1 level))\n       ]\n     \
    \ )\n      )\n    )\n", "  (let loop ((paren_string paren_string)\n          \
    \   (level 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n     \
    \  ]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(equal? (first paren_string) '(#\\Space)\n \
    \      (loop (rest paren_string) (add1 level))\n       ]\n      [else\n      \
    \ (loop (rest paren_string) (add1 level))\n       ]\n      )\n     )\n   )\n \
    \ )\n", "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (list paren_count)]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string)\n             (- paren_count 1))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n    )))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 level))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest\
    \ paren_string) (add1 level))]\n      [(equal? (first paren_string) '(#\\Newline)\
    \ (loop (rest paren_string) (add1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (result '()))\n    (if (empty? paren_string)\n        result\n        (loop\
    \ (rest paren_string)\n              (cons (length (first paren_string)) result)))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (add1 paren_count))]\n      [(equal? (car paren_string) ')')\
    \ (loop (cdr paren_string) (sub1 paren_count))]\n      [(equal? (car paren_string)\
    \ '(#\\Space) (loop (cdr paren_string) (add1 paren_count))]\n      [(equal? (car\
    \ paren_string) #\\Space) (loop (cdr paren_string) (sub1 paren_count))]\n    \
    \  [else (loop (cdr paren_string) (add1 paren_count))]))\n  (if (equal? paren_count\
    \ 0)\n      (list 0)\n      (loop (cdr paren_string) 0)))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (car paren_string) '(())) ; The first group\
    \ is (()) so increment the level\n       (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(equal? (car paren_string) '((())) ; The second group is ((())) so decrement\
    \ the level\n       (loop (cdr paren_string) (- 1 levels))]\n      [else (loop\
    \ (cdr paren_string) levels)])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (list->string paren_count)]\n      [(equal? (car paren_string) '(')\n    \
    \   (loop (cdr paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (car paren_string) ')')\n       (loop (cdr paren_string)\n             (- paren_count\
    \ 1))]\n      [else\n       (loop (cdr paren_string)\n             (+ paren_count\
    \ 1))]\n    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n        \
    \     (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) levels]\n      [(char=? (car paren_string) '(') (loop\
    \ (cdr paren_string) (add1 levels))]\n      [(char=? (car paren_string) ')') (loop\
    \ (cdr paren_string) (sub1 levels))]\n      [else (loop (cdr paren_string) (add1\
    \ levels))])))\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (- 1 paren_count))]\n      [else (loop (rest\
    \ paren_string) paren_count)]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (car paren_string) '(') (loop (cdr paren_string) (+ 1 paren_count))]\n\
    \      [(equal? (car paren_string) ')') (loop (cdr paren_string) (- 1 paren_count))]\n\
    \      [else (loop (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list levels)]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string)\n             (+ 1 levels))]\n      [else\n\
    \       (loop (rest paren_string)\n             (+ 1 levels))]\n      )))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list levels)]\n      [(equal? (car paren_string)\
    \ '())\n       (loop (cdr paren_string) (+ levels 1))]\n      [(equal? (car paren_string)\
    \ '(())\n       (loop (cdr paren_string) (+ levels 2))]\n      [(equal? (car paren_string)\
    \ '((()))\n       (loop (cdr paren_string) (+ levels 3))]\n      [(equal? (car\
    \ paren_string) '((()()))\n       (loop (cdr paren_string) (+ levels 4))]\n  \
    \    [(equal? (car paren_string) '((()()()))\n       (loop (cdr paren_string)\
    \ (+ levels 5))]\n      [(equal? (car paren_string) '((()()()()))\n       (loop\
    \ (cdr paren_string) (+ levels 6))]\n      [(equal? (car paren_string) '((()()()()()))\n\
    \       (loop (cdr paren_string) (+ levels 7))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()))\n       (loop (cdr paren_string) (+ levels 8))]\n      [(equal?\
    \ (car paren_string) '((()()()()()()()))\n       (loop (cdr paren_string) (+ levels\
    \ 9))]\n      [(equal? (car paren_string) '((()()()()()()()))\n       (loop (cdr\
    \ paren_string) (+ levels 10))]\n      [(equal? (car paren_string) '((()()()()()()()()))\n\
    \       (loop (cdr paren_string) (+ levels 11))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()()()))\n       (loop (cdr paren_string) (+ levels 12))]\n \
    \     [(equal? (car paren_string) '((()()()()()()()()()))\n       (loop (cdr paren_string)\
    \ (+ levels 13))]\n      [(equal? (car paren_string) '((()()()()()()()()()))\n\
    \       (loop (cdr paren_string) (+ levels 14))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()()()()))\n       (loop (cdr paren_string) (+ levels 15))]\n\
    \      [(equal? (car paren_string", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 paren_count))]\n\
    \      [(char=? (car paren_string) ')') (loop (cdr paren_string) (sub1 paren_count))]\n\
    \      [else (loop (cdr paren_string) (add1 paren_count))]))\n  (if (= paren_count\
    \ 0) empty\n      (loop (cdr paren_string) 0)))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list paren_count)]\n      [(equal? (first paren_string) '(')\n      \
    \ (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) ')')\n       (loop (rest paren_string)\n             (-\
    \ paren_count 1))]\n      [else\n       (loop (rest paren_string)\n          \
    \   (+ paren_count 1))])))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (result '()))\n    (if (string-empty? paren_string)\n        result\n\
    \        (loop (substring paren_string 0 (string-length paren_string))\n     \
    \         (cons (string-length paren_string)\n                    (loop (substring\
    \ paren_string 1 (string-length paren_string))\n                          result))))))\n",
  "  (let loop ((paren_string paren_string)\n             (max_level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list max_level)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ max_level\
    \ (parse_nested_parens (rest paren_string))))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (+ max_level (parse_nested_parens (rest paren_string))))]\n\
    \      )))\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      ", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) '(#\\Space) (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(#\\Newline) (loop (rest paren_string) (add1 paren_count))]\n      [else (loop\
    \ (rest paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [else (loop (rest paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list paren_count)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n \
    \            (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n \
    \      (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n \
    \            (+ paren_count 1))]\n      [(equal? (first paren_string) '(')\n \
    \      (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ paren_count 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n \
    \            (+ paren_count 1))]\n      ", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string)\n        \
    \                                  (+ paren_count 1)))]\n      [(equal? (first\
    \ paren_string) ')') (loop (rest paren_string)\n                             \
    \             (- paren_count 1)))]\n      [else (loop (rest paren_string) (+ paren_count\
    \ 1))])))\n", "  (let ((levels (make-list 0 0))\n        (level (make-list 0 0)))\n\
    \    (loop for i from 0 to (length paren_string)\n          with index = 0\n \
    \         with paren_char = char-code (substring paren_string i 1)\n         \
    \ with paren_char = char-code (substring paren_string i 1)\n          with paren_char\
    \ = char-code (substring paren_string i 1)\n          with paren_char = char-code\
    \ (substring paren_string i 1)\n          with paren_char = char-code (substring\
    \ paren_string i 1)\n          with paren_char = char-code (substring paren_string\
    \ i 1)\n          with paren_char = char-code (substring paren_string i 1)\n \
    \         with paren_char = char-code (substring paren_string i 1)\n         \
    \ with paren_char = char-code (substring paren_string i 1)\n          with paren_char\
    \ = char-code (substring paren_string i 1)\n          with paren_char = char-code\
    \ (substring paren_string i 1)\n          with paren_char = char-code (substring\
    \ paren_string i 1)\n          with paren_char = char-code (substring paren_string\
    \ i 1)\n          with paren_char = char-code (substring paren_string i 1)\n \
    \         with paren_char = char-code (substring paren_string i 1)\n         \
    \ with paren_char = char-code (substring paren_string i 1)\n          with paren_char\
    \ = char-code (substring paren_string i 1)\n          with paren_char = char-code\
    \ (substring paren_string i 1)\n          with paren_char = char-code (substring\
    \ paren_string i 1)\n          with paren_char = char-code (substring paren_string\
    \ i 1)\n          with paren_char = char-code (substring paren_string i 1)\n \
    \         with paren_char = char-code (substring paren_string i 1)\n         \
    \ with paren_char = char-code (substring paren_string i 1)\n          with paren_char\
    \ = char-code (substring paren_string i 1)\n          with paren_char = char-code\
    \ (substring paren_string i 1)\n          with paren_char = char-code (substring\
    \ paren_string i 1)\n          with paren_char = char-code (substring paren_string\
    \ i 1)\n          with paren_char = char-code (substring paren_string i 1)\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list levels)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) ')')\n       (loop (rest paren_string) (- 1 levels))]\n      [else\n\
    \       (loop (rest paren_string) (+ 1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count", "  (let loop ((paren_string paren_string)\n            \
    \ (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n \
    \     [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      ", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (- 1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) ')')\n     \
    \  (loop (rest paren_string)\n             (- 1 levels))]\n      [else\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse (list levels))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(char= (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [else\n       (loop (rest paren_string) (add1 levels))]\n      )))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) levels]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [else (loop (rest paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n  \
    \    [(equal? (first paren_string) ')') (loop (rest paren_string) (- 1 paren_count))]\n\
    \      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string) level]\n      [(char? (car paren_string)) (loop (cdr paren_string)\
    \ (+ level 1))]\n      [else (loop (cdr paren_string) (+ level 1))]))))\n", " \
    \ (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list levels)]\n      [(equal? (car paren_string)\
    \ '(')\n       (loop (cdr paren_string) (+ 1 levels))]\n      [(equal? (car paren_string)\
    \ ')')\n       (loop (cdr paren_string) (- 1 levels))]\n      [else\n       (loop\
    \ (cdr paren_string) (+ 1 levels))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space)\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [else\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n \
    \            (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ (list levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(char=? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(char=? (first paren_string", "  (let loop ((paren_string paren_string)\n \
    \            (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n  \
    \    [(char= (char (first paren_string)) '(') (loop (rest paren_string) (add1\
    \ levels))]\n      [(char= (char (first paren_string)) ')') (loop (rest paren_string)\
    \ (sub1 levels))]\n      [else (loop (rest paren_string) (add1 levels))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(char? (car paren_string)) (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [else\n       (loop (cdr paren_string)\
    \ (+ 1 paren_count)\n             (cons (char? (car paren_string)) (loop (cdr\
    \ paren_string) (+ 1 paren_count))))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\n\
    I added a version that uses `match` instead of `cond`\n<|/ c |>\n<| c |>\nThank\
    \ you so much! I really appreciate it!\n<|/ c |>\n<| a tags=racket,scheme |>\n\
    Here's a solution that uses match instead of cond:\n<code>", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list paren_count)]\n      [(equal? (first paren_string) '(')\n      \
    \ (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\Space)\n       (loop (rest paren_string)\n       \
    \      (+ paren_count 1))]\n      [(equal? (first paren_string) '(#\\Newline)\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\Tab)\n       (loop (rest paren_string)\n         \
    \    (+ paren_count 1))]\n      [(equal? (first paren_string) '(#\\Newline)\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\Space)\n       (loop (rest paren_string)\n       \
    \      (+ paren_count 1))]\n      [(equal? (first paren_string) '(#\\Newline)\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\Tab)\n       (loop (rest paren_string)\n         \
    \    (+ paren_count 1))]\n      [(equal? (first paren_string) '(#\\Newline)\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\Space)\n       (loop (rest paren_string)\n       \
    \      (+ paren_count 1))]\n      [(equal? (first paren_string) '(#\\Newline)\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\Tab)\n       (loop (rest paren_string)\n         \
    \    (+ paren_count 1))]\n      [(equal? (first paren_string) '(#\\Newline)\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\Space)\n       (loop (rest paren_string)\n       \
    \      (+ paren_count 1))]\n      [(equal? (first paren_string) '(#\\Newline)\n\
    \       (loop (rest paren_string)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\Tab)\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(equal? (car paren_string) '(') (loop (cdr paren_string) (add1 levels))]\n\
    \      [(equal? (car paren_string) ')') (loop (cdr paren_string) (sub1 levels))]\n\
    \      [else (loop (cdr paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list paren_count)]\n      [(equal? (car paren_string) '(')\n       (loop\
    \ (cdr paren_string)\n             (+ 1 paren_count))]\n      [else\n       (loop\
    \ (cdr paren_string)\n             (+ 1 paren_count))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string) (+ 1\
    \ paren_count))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string)\
    \ paren_count)]\n      [else (loop (cdr paren_string) (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (max_level 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(equal? (car paren_string) '()) max_level]\n\
    \      [(equal? (car paren_string) '(())) loop (cdr paren_string) (+ max_level\
    \ 1)]\n      [(equal? (car paren_string) '((())) loop (cdr paren_string) (+ max_level\
    \ 2)]\n      [(equal? (car paren_string) '(((())) loop (cdr paren_string) (+ max_level\
    \ 3)]\n      [(equal? (car paren_string) '((((())) loop (cdr paren_string) (+\
    \ max_level 4)]\n      [(equal? (car paren_string) '((((((()))) loop (cdr paren_string)\
    \ (+ max_level 5)]\n      [(equal? (car paren_string) '(((((((()))) loop (cdr\
    \ paren_string) (+ max_level 6)]\n      [(equal? (car paren_string) '(((((((()))))\
    \ loop (cdr paren_string) (+ max_level 7)]\n      [(equal? (car paren_string)\
    \ '(((((((())))()) loop (cdr paren_string) (+ max_level 8)]\n      [(equal? (car\
    \ paren_string) '(((((((())))()()) loop (cdr paren_string) (+ max_level 9)]\n\
    \      [(equal? (car paren_string) '(((((((())))()())()) loop (cdr paren_string)\
    \ (+ max_level 10)]\n      [(equal? (car paren_string) '(((((((())))()())())())\
    \ loop (cdr paren_string) (+ max_level 11)]\n      [(equal? (car paren_string)\
    \ '(((((((())))()())())())()) loop (cdr paren_string) (+ max_level 12)]\n    \
    \  [(equal? (car paren_string) '(((((((())))()())())())()) loop (cdr paren_string)\
    \ (+ max_level 13)]\n      [(equal? (car paren_string) '(((((((())))()())())())())\
    \ loop (cdr paren_string) (+ max_level 14)]\n      [(equal? (car paren_string)\
    \ '(((((((())))()())())())()) loop (cdr paren_string) (+ max_level 15)]\n    \
    \  [(equal? (car paren_string) '(((((((())))()())())())()) loop (cdr paren_string)\
    \ (+ max_", "  (let loop ((paren_string paren_string)\n             (levels 0))\n\
    \    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1\
    \ level))]\n      [(char=? (car paren_string) ')') (loop (cdr paren_string) (sub1\
    \ level))]\n      [else (loop (cdr paren_string) (add1 level))]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string)\n       (list)\n       ]\n      [(char=? (first paren_string)\
    \ '( () ))\n       (loop (rest paren_string) (add1 level))\n       ]\n      [else\n\
    \       (loop (rest paren_string) (add1 level))\n       ]\n      )\n    )\n  )\n",
  "  (let loop ((paren_string paren_string)\n             (max_level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list max_level)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (add1 max_level))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 max_level))])))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list levels)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char= (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(char=? (first paren_string) '(') (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      ", "  (let ((level (0))\n        (groups (string-split\
    \ paren_string)))\n    (loop for group in groups\n          for level = (if (string-match\
    \ \"\\\\(\" group)\n                           (+ 1 (string-match \"\\\\)\" group))\n\
    \                         0)\n          while level > 0\n          collect level)))\n",
  "  (let ((result '()))\n    (loop\n       for i from 0 to (length paren_string)\n\
    \       for char from 0 to (length paren_string)\n       when (char=paren_string[i]\
    \ and (i+1 < (length paren_string)))\n       do (set! result (append result (parse_deepest_level_of_nesting\
    \ paren_string)))\n       finally (return result))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list levels)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\\
    Space)\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline)\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Tab)\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline)\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\\
    Tab)\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Space)\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Newline)\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Tab)\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\\
    Space)\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Newline)\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Tab)\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space)\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\\
    Newline)\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Tab)\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Space)\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline)\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren", "  (let loop\
    \ ((parens (string->list paren_string))\n             (level (length parens)))\n\
    \    (cond\n      [(empty? parens) (list 0)]\n      [(equal? (car parens) '())\
    \ (loop (cdr parens) (+ level 1))]\n      [(equal? (car parens) '(())) (loop (cdr\
    \ parens) (+ level 2))]\n      [(equal? (car parens) '((())) (loop (cdr parens)\
    \ (+ level 3))]\n      [else (loop (cdr parens) level)])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [else (loop (rest paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char= (first paren_string) '( ()\
    \ )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '( () )) (", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (- 1 paren_count))]\n\
    \      [else (loop (rest paren_string) paren_count)]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (car paren_string) '()) levels]\n      [(equal? (car\
    \ paren_string) '(())) loop (cdr paren_string) (add1 levels)]\n      [(equal?\
    \ (car paren_string) '((())) loop (cdr paren_string) (add1 levels)]\n      [(equal?\
    \ (car paren_string) '((())()())) loop (cdr paren_string) (add1 levels)]\n   \
    \   [(equal? (car paren_string) '((()())) loop (cdr paren_string) (add1 levels)]\n\
    \      [(equal? (car paren_string) '((()())()) loop (cdr paren_string) (add1 levels)]\n\
    \      [(equal? (car paren_string) '((()())()()) loop (cdr paren_string) (add1\
    \ levels)]\n      [(equal? (car paren_string) '((()())()()()) loop (cdr paren_string)\
    \ (add1 levels)]\n      [(equal? (car paren_string) '((()())()()()()) loop (cdr\
    \ paren_string) (add1 levels)]\n      [(equal? (car paren_string) '((()())()()()()())\
    \ loop (cdr paren_string) (add1 levels)]\n      [(equal? (car paren_string) '((()())()()()()()())\
    \ loop (cdr paren_string) (add1 levels)]\n      [(equal? (car paren_string) '((()())()()()()()()()())\
    \ loop (cdr paren_string) (add1 levels)]\n      [(equal? (car paren_string) '((()())()()()()()()()()()())\
    \ loop (cdr paren_string) (add1 levels)]\n      [(equal? (car paren_string) '((()())()()()()()()()()()()())\
    \ loop (cdr paren_string) (add1 levels)]\n      [(equal? (car paren_string) '((()())()()()()()()()()()()()())\
    \ loop (cdr paren_string) (add1 levels)]\n      [(equal? (car paren_string) '((()())()()()()()()()()()()()()()())\
    \ loop (cdr paren_string) (add1 levels)]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (sub1 paren_count))]\n      [else (loop (rest paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (max_level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (list max_level)]\n      [(equal? (first paren_string) '(())) ; found\
    \ an opening parenthesis\n       (loop (rest paren_string)\n             (+ max_level\
    \ 1))]\n      [(equal? (first paren_string) '((())) ; found a closing parenthesis\n\
    \       (loop (rest paren_string)\n             (- max_level 1))]\n      [else\n\
    \       (loop (rest paren_string)\n             (+ max_level (parse_nested_parens\
    \ (rest paren_string))))])))\n", "  (let ((paren_stack (make-list 0))\n      \
    \  (paren_level (make-list 0))\n        (paren_count (make-list 0))\n        (paren_string\
    \ paren_string))\n    (loop\n       for i from 0 to (length paren_string)\n  \
    \     for char from (char-index paren_string i)\n       when (char-equal char\
    \ #\\())\n       do (begin\n            (set! paren_stack (append paren_stack\
    \ (list char))\n                    (set! paren_level (append paren_level 0))\n\
    \                    (set! paren_count (append paren_count 1)))\n            (set!\
    \ paren_string (substring paren_string 0 (char-index paren_string i)))\n     \
    \       (set! paren_string (substring paren_string (char-index paren_string i)\
    \ 1))\n            (set! paren_string (substring paren_string 1 (char-index paren_string\
    \ i))))\n       for char from (char-index paren_string i)\n       when (char-equal\
    \ char #\\))\n       do (begin\n            (set! paren_stack (append paren_stack\
    \ (list char))\n                    (set! paren_level (append paren_level 0))\n\
    \                    (set! paren_count (append paren_count 1)))\n            (set!\
    \ paren_string (substring paren_string 0 (char-index paren_string i)))\n     \
    \       (set! paren_string (substring paren_string (char-index paren_string i)\
    \ 1))\n            (set! paren_string (substring paren_string 1 (char-index paren_string\
    \ i))))\n       for char from (char-index paren_string i)\n       when (char-equal\
    \ char #\\))\n       do (begin\n            (set! paren_stack (append paren_stack\
    \ (list char))\n                    (set! paren_level (append paren_level 0))\n\
    \                    (set! paren_count (append paren_count 1)))\n            (set!\
    \ paren_string (substring paren_string 0 (char-index paren_string i)))\n     \
    \       (set! paren_string (substring paren_string (char-index paren_string i)\
    \ 1))\n            (set! paren_string (substring paren_string 1 (char-index paren_string\
    \ i))))\n       for char from (char-index paren_string i)\n       when (char-equal\
    \ char #\\))\n       do (begin\n            (set! paren_stack (append paren_stack\
    \ (list char))\n                    (set! paren_level (append paren_level 0))\n\
    \                    (set! paren_count (append ", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (add1 ", "  (let loop ((parens (string->list paren_string))\n             (levels\
    \ 0))\n    (cond\n      [(empty? parens) (list levels)]\n      [(equal? (car parens)\
    \ '(') (loop (cdr parens) (add1 levels))]\n      [(equal? (car parens) ')') (loop\
    \ (cdr parens) levels)]\n      [else (loop (cdr parens) (add1 levels))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(char= (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      ", "  (let ((levels\
    \ ()))\n    (loop\n       for i from 0 to (length paren_string)\n       for c\
    \ from 0 to (length paren_string)\n       when (char=? (char-ref paren_string\
    \ i) (char-ref paren_string c))\n       collect (+ 1 (length levels))\n     collect\
    \ (+ 1 (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1\
    \ (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1 (length\
    \ levels))\n     collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n\
    \     collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n    \
    \ collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n     collect\
    \ (+ 1 (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1\
    \ (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1 (length\
    \ levels))\n     collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n\
    \     collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n    \
    \ collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n     collect\
    \ (+ 1 (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1\
    \ (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1 (length\
    \ levels))\n     collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n\
    \     collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n    \
    \ collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n     collect\
    \ (+ 1 (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1\
    \ (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1 (length\
    \ levels))\n     collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n\
    \     collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n    \
    \ collect (+ 1 (length levels))\n     collect (+ 1 (length levels))\n     collect\
    \ (+ 1 (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1\
    \ (length levels))\n     collect (+ 1 (length levels))\n     collect (+ 1 (length\
    \ levels))\n     collect (+ 1 (length levels))", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [else (loop (rest paren_string) (add1 levels))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline) (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\Newline)\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Space) (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(#\\Space) (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(#\\Space) (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space) (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(#\\Space)\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(#\\Space) (loop", "  (let loop ((parens (string->list paren_string))\n   \
    \          (level (length parens))\n             (result '()))\n    (if (null?\
    \ parens)\n        result\n        (loop (cdr parens)\n              (- level\
    \ 1)\n              (cons (max level 0)\n                    (loop (cdr parens)\n\
    \                          level\n                          (cons (car parens)\n\
    \                                result)))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (- 1 paren_count))]\n      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n",
  "  (let ((result (list 0)))\n    (loop\n       for i from 0\n       for char from\
    \ (length paren_string)\n       until (char=? char #\\Space)\n       do (set!\
    \ result (max result (add1 (length result))))\n       do (set! result (max result\
    \ (add1 (length result))))\n       do (set! result (max result (add1 (length result))))\n\
    \       do (set! result (max result (add1 (length result))))\n       do (set!\
    \ result (max result (add1 (length result))))\n       do (set! result (max result\
    \ (add1 (length result))))\n       do (set! result (max result (add1 (length result))))\n\
    \       do (set! result (max result (add1 (length result))))\n       do (set!\
    \ result (max result (add1 (length result))))\n       do (set! result (max result\
    \ (add1 (length result))))\n       do (set! result (max result (add1 (length result))))\n\
    \       do (set! result (max result (add1 (length result))))\n       do (set!\
    \ result (max result (add1 (length result))))\n       do (set! result (max result\
    \ (add1 (length result))))\n       do (set! result (max result (add1 (length result))))\n\
    \       do (set! result (max result (add1 (length result))))\n       do (set!\
    \ result (max result (add1 (length result))))\n       do (set! result (max result\
    \ (add1 (length result))))\n       do (set! result (max result (add1 (length result))))\n\
    \       do (set! result (max result (add1 (length result))))\n       do (set!\
    \ result (max result (add1 (length result))))\n       do (set! result (max result\
    \ (add1 (length result))))\n       do (set! result (max result (add1 (length result))))\n\
    \       do (set! result (max result (add1 (length result))))\n       do (set!\
    \ result (max result (add1 (length result))))\n       do (set! result (max result\
    \ (add1 (length result))))\n       do (set! result (max result (add1 (length result))))\n\
    \       do (set! result (max result (add1 (length result))))\n       do (set!\
    \ result (max result (add1 (length result))))\n       do (set! result (max ",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list paren_count)]\n      [(equal? (first\
    \ paren_string) '( () ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) empty]\n      [(char= paren_string '(') (cons levels\
    \ empty)]\n      [(char= paren_string ')') (cons (car levels) empty)]\n      [(char=\
    \ paren_string '(') (loop (cdr paren_string) (add1 levels))]\n      [(char= paren_string\
    \ ')') (loop (cdr paren_string) (sub1 levels))]\n      [else (loop (cdr paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string) empty]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n \
    \     [(equal? (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n\
    \      [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (list levels)]\n      [(equal? (car paren_string) '( ()\
    \ ))\n       (loop (cdr paren_string) (+ 1 levels))]\n      [else\n       (loop\
    \ (cdr paren_string) (+ 1 levels))])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
