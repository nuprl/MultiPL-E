name: HumanEval_153_Strongest_Extension
language: rkt
prompt: "#lang racket\n\n;; You will be given the name of a class (a string) and a\
  \ list of extensions.\n;; The extensions are to be used to load additional classes\
  \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
  \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
  \ number of lowercase letters \n;; in the extension's name, the strength is given\
  \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
  \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there are\
  \ two or more extensions with the same strength, you should\n;; choose the one that\
  \ comes first in the list.\n;; For example, if you are given \"Slices\" as the class\
  \ and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then\
  \ you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest\
  \ extension \n;; (its strength is -1).\n;; Example:\n;; >>> (Strongest_Extension\
  \ \"my_class\" (list \"AA\" \"Be\" \"CC\"))\n;; \"my_class.AA\"\n(define (Strongest_Extension\
  \ class_name extensions)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
  \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
  \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
  \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
  \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
  \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\"\
  \ (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate\
  \ \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal?\
  \ (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"\
  -_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
  \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
  \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
  \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
completions: ["  (let ((cap (length class_name)) (sm  (length class_name))) (set!\
    \ cap (- cap sm))\n  (let ((strength (/ (- cap sm) cap)))\n    (cond\n      [(empty?\
    \ extensions) (list class_name)]\n      [(equal? strength (first extensions))]\n\
    \      [else (cons (first extensions) (Strongest_Extension (rest extensions) class_name))])))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) \n     (Strongest_Extension class_name (drop 1 extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension \n                  \
    \              (append (first extensions) \".\" \n                           \
    \             (Strongest_Extension class_name \n                             \
    \                         (drop 1 extensions)))))]))\n", "  (cond\n    [(empty?\
    \ extensions) (list class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (list class_name)]\n    [else (append (Strongest_Extension (first extensions)\
    \ (rest extensions))\n                  (list (first extensions))))]\n  )\n)\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ class_name) (Strongest_Extension (first extensions) (rest extensions))]\n  \
    \  [else (Strongest_Extension (first extensions) (append (rest extensions) (list\
    \ (first extensions))))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension (rest extensions)\
    \ extensions)]\n    [else (cons (first extensions) (Strongest_Extension (rest\
    \ extensions) extensions))]))\n", "  (let ((strength (/ (length extensions) (length\
    \ class_name)))\n        (extension (first extensions)))\n    (cond\n      [(<\
    \ strength 0)\n       (cons class_name extension)]\n      [(< strength 1)\n  \
    \     (cons class_name extension (Strongest_Extension class_name (drop 1 extensions)))]\n\
    \      [(< strength 2)\n       (cons class_name extension (Strongest_Extension\
    \ class_name (drop 2 extensions)))]\n      [(< strength 3)\n       (cons class_name\
    \ extension (Strongest_Extension class_name (drop 3 extensions)))]\n      [(<\
    \ strength 4)\n       (cons class_name extension (Strongest_Extension class_name\
    \ (drop 4 extensions)))]\n      [(< strength 5)\n       (cons class_name extension\
    \ (Strongest_Extension class_name (drop 5 extensions)))]\n      [(< strength 6)\n\
    \       (cons class_name extension (Strongest_Extension class_name (drop 6 extensions)))]\n\
    \      [(< strength 7)\n       (cons class_name extension (Strongest_Extension\
    \ class_name (drop 7 extensions)))]\n      [(< strength 8)\n       (cons class_name\
    \ extension (Strongest_Extension class_name (drop 8 extensions)))]\n      [(<\
    \ strength 9)\n       (cons class_name extension (Strongest_Extension class_name\
    \ (drop 9 extensions)))]\n      [else\n       (cons class_name extension (Strongest_Extension\
    \ class_name (drop strength extensions)))])))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) class_name) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (Strongest_Extension (first\
    \ extensions) (append (rest extensions) (list (first extensions))))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (define (strength ext)\n    (string-length (substring ext 0 1) (substring ext\
    \ 1 1)))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n",
  "  (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (", "  (define (strength ext)\n    (string-length \n     (string-map\
    \ \n      (lambda (c)\n        (if (char-upper-case? c)\n            (- \n   \
    \          (string-length ext)\n             (string-length \n              (filter\
    \ (lambda (c)\n                        (char-lower-case? c))\n               \
    \       ext))\n            0))\n      ext)))\n  (let ((strengths (map strength\
    \ extensions)))\n    (sort strengths \n         (lambda (a b) \n           (if\
    \ (< a b)\n               (- a)\n               (- b))))\n    (string-append class_name\
    \ \n                  (first extensions)\n                  (second extensions))))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (rest extensions))\n                  (list class_name)\n\
    \                  (Strongest_Extension (first extensions) (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (define (strength ext)\n    (string-length \n     (string-map \n      (lambda\
    \ (c)\n        (if (char-upper-case c)\n            (- \n             (char-lower-case\
    \ c) \n             (string-length ext))\n            0))\n      ext))\n  (define\
    \ (best_extension exts)\n    (if (null? exts)\n        '()\n        (let ((ext\
    \ (first exts)))\n          (if (> (strength ext) 0)\n              (cons ext\
    \ (best_extension (rest exts)))\n              (best_extension (rest exts))))))\n\
    \  (let ((ext (best_extension extensions)))\n    (string-append class_name \"\
    .\" ext)))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal?\
    \ (first extensions) class_name) (Strongest_Extension (first extensions) (rest\
    \ extensions))]\n    [else (Strongest_Extension (first extensions) (append (rest\
    \ extensions) (list (first extensions))))]))\n", "  (let ((strength (/ (length\
    \ class_name) \n                    (length extensions))))\n    (cond\n      [(<\
    \ strength 0) \"\"]\n      [(< strength 1) (substring class_name 0 1)]\n     \
    \ [else (substring class_name 0 \n                    (min (floor (- strength\
    \ 1) (length extensions))))]))\n  )\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (let ((cap (length class_name)) (sm  (length class_name)))\
    \ (set! cap 0 (set! sm 0))\n    (for ([i (in-range (length extensions))])\n  \
    \    (if (string=? (substring class_name 0 i) extensions[i])\n          (set!\
    \ cap (+ cap (length extensions[i]))) (set! sm (+ sm (length extensions[i])))\n\
    \      )\n      (if (< cap sm) (substring class_name 0 cap) (substring class_name\
    \ 0 sm))\n    )\n  )\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (cons class_name (Strongest_Extension\
    \ class_name (rest extensions)))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength :key (lambda\
    \ (extension) (length extension))))\n  (define (best_extension extensions)\n \
    \   (sort extensions strength :key (lambda (extension) (length extension) :reverse\
    \ t)))\n  (define (best_extension extensions)\n    (sort extensions strength :key\
    \ (lambda (extension) (length extension) :reverse t)))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength :key (lambda (extension) (length\
    \ extension) :reverse t)))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength :key (lambda (extension) (length extension) :reverse t)))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength :key (lambda (extension)\
    \ (length extension) :reverse t)))\n  (define (best_extension extensions)\n  \
    \  (sort extensions strength :key (lambda (extension) (length extension) :reverse\
    \ t)))\n  (define (best_extension extensions)\n    (sort extensions strength :key\
    \ (lambda (extension) (length extension) :reverse t)))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength :key (lambda (extension) (length\
    \ extension) :reverse t)))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength :key (lambda (extension) (length extension) :reverse t)))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength :key (lambda (extension)\
    \ (length extension) :reverse t)))\n  (define (best_extension extensions)\n  \
    \  (sort extensions strength :key (lambda (extension) (length extension) :reverse\
    \ t)))\n  (define (best_extension extensions)\n    (sort extensions strength :key\
    \ (lambda (extension) (length extension) :reverse t)))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength :key (lambda (extension) (length\
    \ extension) :reverse t)))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength :key (lambda (extension) (length extension) :reverse t)))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength :key (lambda (extension)\
    \ (length extension) :reverse t)))\n  (define (best_extension extensions)\n  \
    \  (sort extensions strength :key (lambda (extension) (length extension) :reverse\
    \ t)))\n  (define (best_extension extensions)\n    (sort ", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (let ((strength (/ (length class_name)\
    \ \n                    (length extensions))))\n    (cond\n      [(< strength\
    \ 0) (error \"Class name too short\")\n       (error \"Class name too long\")\n\
    \       (error \"Class name contains no uppercase letters\")\n       (error \"\
    Class name contains no lowercase letters\")]\n      [(< strength 1) (error \"\
    Class name contains no uppercase letters\")\n       (error \"Class name contains\
    \ no lowercase letters\")\n       (error \"Class name too short\")\n       (error\
    \ \"Class name too long\")]\n      [else (cons (string-append class_name \".\"\
    \ (first extensions))\n                 (Strongest_Extension (rest class_name)\
    \ (rest extensions)))])))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension class_name (tail\
    \ extensions))]\n    [else (cons (first extensions) (Strongest_Extension class_name\
    \ (tail extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension class_name (tail\
    \ extensions))]\n    [else (cons (first extensions) (Strongest_Extension class_name\
    \ (tail extensions)))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension ", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension (rest\
    \ extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (list\
    \ class_name)]\n    [else (cons (first extensions) (Strongest_Extension (rest\
    \ extensions) (drop 1 extensions)))]))\n", "  (let ((cap (length class_name)))\n\
    \    (let ((sm (length extensions)))\n      (if (= cap sm)\n          (let ((strength\
    \ (- (cap sm) sm)))\n            (cons class_name extensions))\n          (let\
    \ ((strength (- (cap sm) sm)))\n            (cons (substring class_name 0 cap)\
    \ (cons extensions (substring class_name cap sm)))))))\n", "  (define (strength\
    \ extension)\n    (string-length (substring extension 0 (string-length extension)))\n\
    \  )\n  (define (best_extension extensions)\n    (sort extensions strength)\n\
    \    (first extensions)\n  )\n  (let ((extension (best_extension extensions)))\n\
    \    (string-append class_name \".\" (substring extension 0 (string-length extension)))))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension (rest extensions) extensions)]\n    [else\
    \ (cons (first extensions) (Strongest_Extension (rest extensions) extensions))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) extensions))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (rest extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (Strongest_Extension (first class_name)\
    \ (append (rest extensions) (list (first extensions))))]))\n", "  (let ((cap (length\
    \ class_name)) (sm  (length class_name))\n        (strength (- (car class_name)\
    \ (car extensions))))\n    (cond\n      [(= 0 cap) (error \"Class name cannot\
    \ be empty\")\n       (= 0 sm) (error \"Class name cannot be empty\")\n      \
    \ (= 0 strength) (error \"Class name cannot be empty\")\n       (else (cond [(<\
    \ strength 0) (error \"Class name cannot be empty\")\n                     (else\
    \ (cond [(< strength (/ cap sm)) (error \"Class name cannot be empty\")\n    \
    \                             (else (cond [(< strength (/ cap sm)) (error \"Class\
    \ name cannot be empty\")\n                                           (else (cond\
    \ [(< strength (/ cap sm)) (error \"Class name cannot be empty\")\n          \
    \                                         (else (cond [(< strength (/ cap sm))\
    \ (error \"Class name cannot be empty\")\n                                   \
    \                        (else (cond [(< strength (/ cap sm)) (error \"Class name\
    \ cannot be empty\")\n                                                       \
    \            (else (cond [(< strength (/ cap sm)) (error \"Class name cannot be\
    \ empty\")\n                                                                 \
    \          (else (cond [(< strength (/ cap sm)) (error \"Class name cannot be\
    \ empty\")\n                                                                 \
    \                  (else (cond [(< strength (/ cap sm)) (error \"Class name cannot\
    \ be empty\")\n                                                              \
    \                             (else (cond [(< strength (/ cap sm)) (error \"Class\
    \ name cannot be empty\")\n                                                  \
    \                                                 (else (cond [(< strength (/\
    \ cap sm)) (error \"Class name cannot be empty\")\n                          \
    \                                                                            \
    \     (else (cond [(< strength (/ cap sm)) (error \"Class name cannot be empty\"\
    )\n                                                                          \
    \                                         (else (cond [(< strength (/ cap sm))\
    \ (error \"Class name cannot be empty\")\n                                   \
    \                                                                            \
    \            (else (cond [(< strength (/ cap sm)) (error \"Class name cannot be\
    \ empty\")\n                                                                 \
    \                                                                  (else (cond\
    \ [(< strength (/ cap sm)) (error \"Class name cannot be empty\")\n          \
    \                                                                            \
    \                                                (else (cond [(< strength (/ cap\
    \ sm)) (error \"Class name cannot be empty\")\n                              \
    \                                                                            \
    \                                     (else (cond [(< strength (/ cap sm)) (error\
    \ \"Class name cannot be empty\")\n                                          \
    \                                                                            \
    \                                 (else (cond [(< strength (/ cap sm)) (error\
    \ \"Class name cannot be empty\")\n                                          \
    \                      ", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (first extensions)\
    \ (rest extensions))]\n    [else (Strongest_Extension (first class_name) (append\
    \ (rest extensions) (list (first extensions))))]))\n", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (let ((cap (length class_name)) (sm\
    \  (length class_name))) (set! cap (- cap sm))\n  (let ((strongest (car extensions)))\
    \ (set! strongest (- strongest cap))\n  (if (> (- strongest sm) 0) (Strongest_Extension\
    \ class_name extensions))\n  (cons class_name extensions))\n", "  (cond\n    [(empty?\
    \ extensions) (list class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (list class_name)]\n    [else (append (Strongest_Extension (first extensions)\
    \ (rest extensions))\n                  (list class_name)\n                  (first\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (error \"No extensions given.\")]\n    [(equal?\
    \ (first extensions) (first extensions)) (cons class_name extensions)]\n    [else\
    \ (let ([cap (length (first extensions))\n               sm  (length (first extensions))])\n\
    \           (cond\n             [(< cap sm) (error \"The extension's name contains\
    \ more uppercase letters than lowercase letters.\")]\n             [(< sm cap)\
    \ (error \"The extension's name contains more lowercase letters than uppercase\
    \ letters.\")]\n             [(< cap sm) (cons (first extensions) extensions)]\n\
    \             [(< sm cap) (cons (first extensions) extensions)]\n            \
    \ [else (error \"The extension's name contains more uppercase letters than lowercase\
    \ letters.\")]))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (list class_name)]\n    [else\
    \ (append (Strongest_Extension (first extensions) (drop (length extensions) extensions))\n\
    \                  (list class_name))]))\n", "  (define (strength extension)\n\
    \    (string-length extension))\n  (define (strength-comparator x y)\n    (if\
    \ (string=? x y)\n        0\n        (if (string=? (substring x 0 1) (substring\
    \ y 0 1))\n            -1\n            1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            1\n            -1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            1\n            -1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            1\n            -1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            1\n            -1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            1\n            -1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            1\n            -1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            1\n            -1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            1\n            -1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            1\n            -1)))\n  (define (strength-comparator-reverse\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x ",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension (first extensions) (rest extensions))]\n \
    \   [else (cons (first extensions) (Strongest_Extension (first extensions) (rest\
    \ extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first extensions)) (Strongest_Extension class_name (rest extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (rest extensions))\n                  (list (first extensions))))]\n\
    \  )\n)\n", "  (define (strength extension)\n    (string-length extension))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength compare))\n\
    \  (let ((extension (best_extension extensions)))\n    (string-append class_name\
    \ \".\" extension)))\n", "  (cond\n    [(empty? extensions) (error \"No extensions\
    \ given\")]\n    [(equal? (first extensions) (first extensions)) (first extensions)]\n\
    \    [else (let ([cap (length (first extensions))\n                sm  (length\
    \ (first extensions))])\n           (cond\n             [(< cap sm) (error \"\
    No extensions found\")]\n             [(< cap sm) (error \"No extensions found\"\
    )]\n             [(< cap sm) (error \"No extensions found\")]\n             [(<\
    \ cap sm) (error \"No extensions found\")]\n             [(< cap sm) (error \"\
    No extensions found\")]\n             [(< cap sm) (error \"No extensions found\"\
    )]\n             [(< cap sm) (error \"No extensions found\")]\n             [(<\
    \ cap sm) (error \"No extensions found\")]\n             [(< cap sm) (error \"\
    No extensions found\")]\n             [(< cap sm) (error \"No extensions found\"\
    )]\n             [(< cap sm) (error \"No extensions found\")]\n             [(<\
    \ cap sm) (error \"No extensions found\")]\n             [(< cap sm) (error \"\
    No extensions found\")]\n             [(< cap sm) (error \"No extensions found\"\
    )]\n             [(< cap sm) (error \"No extensions found\")]\n             [(<\
    \ cap sm) (error \"No extensions found\")]\n             [(< cap sm) (error \"\
    No extensions found\")]\n             [(< cap sm) (error \"No extensions found\"\
    )]\n             [(< cap sm) (error \"No extensions found\")]\n             [(<\
    \ cap sm) (error \"No extensions found\")]\n             [(< cap sm) (error \"\
    No extensions found\")]\n             [(< cap sm) (error \"No extensions found\"\
    )]\n             [(< cap sm) (error \"No extensions found\")]\n             [(<\
    \ cap sm) (error \"No extensions found\")]\n             [(< cap sm) (error \"\
    No extensions found\")]\n             [(< cap sm) (error \"No extensions found\"\
    )]\n             [(< cap sm) (error \"No extensions found\")]\n             [(<\
    \ cap sm) (error \"No extensions found\")]\n             [(< cap sm) (error \"\
    No extensions found\")]\n             [(< cap sm) (error \"No extensions found\"\
    )]\n             [(", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) class_name) (Strongest_Extension (first extensions)\
    \ (rest extensions))]\n    [else (Strongest_Extension (first extensions) (append\
    \ (rest extensions) (list (first extensions))))]))\n", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (define (strength ext)\n    (string-length\
    \ \n     (string-map \n      (lambda (c) (if (char-upper-case? c) (- c 'a) c))\
    \ \n      (substring ext 0 (string-length ext))))\n  (define (best_extension extensions)\n\
    \    (sort extensions \n         (lambda (ext ext-strength)\n           (if (>\
    \ ext-strength 0) ext-strength \n               (if (> ext-strength -1) \n   \
    \                (if (> ext-strength 1) \n                       (if (> ext-strength\
    \ 2) \n                           (if (> ext-strength 3) \n                  \
    \             (if (> ext-strength 4) \n                                   (if\
    \ (> ext-strength 5) \n                                       (if (> ext-strength\
    \ 6) \n                                           (if (> ext-strength 7) \n  \
    \                                             (if (> ext-strength 8) \n      \
    \                                             (if (> ext-strength 9) \n      \
    \                                                 (if (> ext-strength 10) \n \
    \                                                          (if (> ext-strength\
    \ 11) \n                                                               (if (>\
    \ ext-strength 12) \n                                                        \
    \           (if (> ext-strength 13) \n                                       \
    \                                  (if (> ext-strength 14) \n                \
    \                                                             (if (> ext-strength\
    \ 15) \n                                                                     \
    \            (if (> ext-strength 16) \n                                      \
    \                                               (if (> ext-strength 17) \n   \
    \                                                                            \
    \          (if (> ext-strength 18) \n                                        \
    \                                                     (if (> ext-strength 19)\
    \ \n                                                                         \
    \                        (if (> ext-strength 20) \n                          \
    \                                                                           (if\
    \ (> ext-strength 21) \n                                                     \
    \                                                    (if (> ext-strength 22) \n\
    \                                                                            \
    \                                 (if (> ext-strength 23) \n                 \
    \                                                                            \
    \                    (if (> ext-strength 24) \n                              \
    \                                                                            \
    \           (if (> ext-strength 25) \n                                       \
    \                                                                            \
    \      (if (> ext-strength 26) \n                                            \
    \                                                                            \
    \     (if (> ext-strength 27) \n                                             \
    \                                                                            \
    \        (if (> ext-strength 28) \n                                          \
    \                                                                            \
    \               (if (> ext-strength 29) \n                                   \
    \                                                                            \
    \                          (if (> ext-strength 30) \n                        \
    \                                                                            \
    \                                         (if (> ext-strength 31) \n         \
    \                                                                            \
    \                                                            (if (> ext-strength\
    \ 32) \n                                                                     \
    \                                                                            \
    \    (if (> ext-strength 33) \n                                              \
    \                                                                            \
    \                               (if (> ext-strength 34) \n                   \
    \                                                                            \
    \                                                              (if (> ext-strength\
    \ 35) \n                                                                     \
    \                                                                            \
    \                (if (> ext-strength 36) \n                                  \
    \                                                                            \
    \                                                       (if (> ext-", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (Strongest_Extension class_name\
    \ (drop 1 extensions))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (cons (first extensions)\
    \ (Strongest_Extension class_name (rest extensions)))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (rest extensions)))]))\n", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ class_name) (Strongest_Extension (first extensions) (rest extensions))]\n  \
    \  [else (Strongest_Extension (first extensions) (append (rest extensions) (list\
    \ (first extensions))))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (list class_name)]\n    [else\
    \ (append (Strongest_Extension (first extensions) (drop 1 extensions))\n     \
    \              (list class_name)\n                   (Strongest_Extension (first\
    \ extensions) extensions))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first class_name)) (Strongest_Extension (first\
    \ class_name) (drop 1 extensions))]\n    [else (Strongest_Extension (first class_name)\
    \ (cons (first extensions) extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (tail extensions))]\n    [else (Strongest_Extension class_name (append\
    \ (list extensions) (Strongest_Extension class_name (tail extensions))))]\n  )\n\
    )\n", "  (let ([cap (length class_name)\n        sm  (length class_name)])\n \
    \   (for ([i (in-range cap)])\n      (for ([j (in-range sm)])\n        (if (char-upper?\
    \ (substring class_name i j))\n            (set! cap (- cap 1))\n            (set!\
    \ sm (- sm 1))))\n      (if (> cap sm)\n          (set! cap (- cap 1))\n     \
    \     (set! sm (- sm 1))))\n    (string-append class_name \".\" (substring extensions\
    \ cap sm))))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first extensions)) (Strongest_Extension class_name (rest extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (rest extensions))\n                  (list class_name)\n\
    \                  (first extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (cons\
    \ class_name (Strongest_Extension class_name (rest extensions)))]\n    [else (cons\
    \ (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension (rest extensions) extensions)]\n    [else (cons (first\
    \ extensions) (Strongest_Extension (rest extensions) extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (drop 1 extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n", " \
    \ (let ((cap (length class_name)) (sm  (length class_name))) (set! cap (- cap\
    \ sm))\n  (let ((strength (/ cap sm))) (set! strength (- strength 1))\n  (let\
    \ ((extension (first extensions))) (set! extension (- extension 1))\n  (cond\n\
    \    ((= strength 0) (cons class_name extension))\n    ((= strength 1) (cons class_name\
    \ extension))\n    ((= strength 2) (cons class_name extension))\n    ((= strength\
    \ 3) (cons class_name extension))\n    ((= strength 4) \n     (cond\n       ((<\
    \ extension (- extension 1))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 2))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 3))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 4))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 5))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 6))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 7))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 8))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 9))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 10))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 11))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 12))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 13))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 14))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 15))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 16))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 17))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 18))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 19))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 20))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 21))\n        (cons class_name extension))\n       ((<\
    \ extension (- extension 22))\n        (cons class_name extension))\n       (",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first class_name)) (Strongest_Extension (first class_name) (tail extensions))]\n\
    \    [else (Strongest_Extension (first class_name) (append (list (first extensions))\
    \ (tail extensions)))]))\n", "  (cond\n    [(empty? extensions) (error \"No extensions\
    \ given.\")]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (Strongest_Extension class_name\
    \ (drop 1 extensions))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (cons class_name (Strongest_Extension\
    \ class_name (rest extensions)))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength\
    \ compare))\n  (define (best_extension-name best_extension)\n    (substring class_name\
    \ 0 (string-length best_extension)))\n  (define (best_extension-extension best_extension)\n\
    \    (substring best_extension 0 (string-length best_extension)))\n  (define (best_extension-strength\
    \ best_extension)\n    (substring best_extension 1 (string-length best_extension)))\n\
    \  (define (best_extension-extension best_extension)\n    (substring best_extension\
    \ 1 (string-length best_extension)))\n  (define (best_extension-strength best_extension)\n\
    \    (substring best_extension 1 (string-length best_extension)))\n  (define (best_extension-extension\
    \ best_extension)\n    (substring best_extension 1 (string-length best_extension)))\n\
    \  (define (best_extension-strength best_extension)\n    (substring best_extension\
    \ 1 (string-length best_extension)))\n  (define (best_extension-extension best_extension)\n\
    \    (substring best_extension 1 (string-length best_extension)))\n  (define (best_extension-strength\
    \ best_extension)\n    (substring best_extension 1 (string-length best_extension)))\n\
    \  (define (best_extension-extension best_extension)\n    (substring best_extension\
    \ 1 (string-length best_extension)))\n  (define (best_extension-strength best_extension)\n\
    \    (substring best_extension 1 (string-length best_extension)))\n  (define (best_extension-extension\
    \ best_extension)\n    (substring best_extension 1 (string-length best_extension)))\n\
    \  (define (best_extension-strength best_extension)\n    (substring best_extension\
    \ 1 (string-length best_extension)))\n  (define (best_extension-extension best_extension)\n\
    \    (substring best_extension 1 (string-length best_extension)))\n  (define (best_extension-strength\
    \ best_extension)\n    (substring best_extension 1 (string-length best_extension)))\n\
    \  (define (best_extension-extension best_extension)\n    (substring best_extension\
    \ 1 (string-length best_extension)))\n  (define (best_extension-strength best_extension)\n\
    \    (substring best_extension 1 (string-length best_extension)))\n  (define (best_extension-extension\
    \ best_extension)\n    (substring best_extension 1 (string-length best_extension)))\n\
    \  (define (best_extension-strength best_extension)\n    (substring best_extension\
    \ 1 (string-length best_extension)))\n  (define (best_extension-extension best_extension)\n\
    \    (substring best_extension 1 (string-length best_extension)))\n  (define (best_extension-strength\
    \ best_extension)\n", "  (let ([cap (length class_name)]\n        [sm (length\
    \ class_name)])\n    (if (= cap sm)\n        (let ([i (min (- cap sm) 0)])\n \
    \         (cons class_name \n                (append (substring class_name 0 i)\n\
    \                        (map #(substring class_name i #) extensions))))\n   \
    \     (let ([i (min (- sm cap) 0)])\n          (cons class_name \n           \
    \     (append (substring class_name 0 i)\n                        (map #(substring\
    \ class_name i #) extensions)))))))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name)\n                  (Strongest_Extension (first\
    \ extensions) (rest extensions)))]))\n", "  (let ((strength (length extensions)))\n\
    \    (if (= strength 0)\n        '\n        (let ((extension (car extensions)))\n\
    \          (if (string=? (string-length extension) 0)\n              (if (string=?\
    \ (string-length extension) 0)\n                  (if (string=? (string-length\
    \ extension) 0)\n                      (if (string=? (string-length extension)\
    \ 0)\n                          (if (string=? (string-length extension) 0)\n \
    \                             (if (string=? (string-length extension) 0)\n   \
    \                               (if (string=? (string-length extension) 0)\n \
    \                                     (if (string=? (string-length extension)\
    \ 0)\n                                          (if (string=? (string-length extension)\
    \ 0)\n                                              (if (string=? (string-length\
    \ extension) 0)\n                                                  (if (string=?\
    \ (string-length extension) 0)\n                                             \
    \         (if (string=? (string-length extension) 0)\n                       \
    \                                   (if (string=? (string-length extension) 0)\n\
    \                                                              (if (string=? (string-length\
    \ extension) 0)\n                                                            \
    \      (if (string=? (string-length extension) 0)\n                          \
    \                                            (if (string=? (string-length extension)\
    \ 0)\n                                                                       \
    \   (if (string=? (string-length extension) 0)\n                             \
    \                                                 (if (string=? (string-length\
    \ extension) 0)\n                                                            \
    \                      (if (string=? (string-length extension) 0)\n          \
    \                                                                            (if\
    \ (string=? (string-length extension) 0)\n                                   \
    \                                                       (if (string=? (string-length\
    \ extension) 0)\n                                                            \
    \                                  (if (string=? (string-length extension) 0)\n\
    \                                                                            \
    \                      (if (string=? (string-length extension) 0)\n          \
    \                                                                            \
    \                (if (string=? (string-length extension) 0)\n                \
    \                                                                            \
    \              (if (string=? (string-length extension) 0)\n                  \
    \                                                                            \
    \                (if (string=? (string-length extension) 0)\n                \
    \                                                                            \
    \                      (if (string=? (string-length extension) 0)\n          \
    \                                                                            \
    \                                (if (string=? (string-length extension) 0)\n\
    \                                                                            \
    \                                              (if (string=? (string-length extension)\
    \ 0)\n                                                                       \
    \                                                       (if (string=? (string-length\
    \ extension) 0)\n                                                            \
    \                                                                      (if (string=?\
    \ (string-length extension) 0)\n                                             \
    \                                                                            \
    \             (if (string=? (string-length extension) 0)\n                   \
    \                                                                            \
    \                                           (if (string=? (string-length extension)\
    \ 0)\n                                                                       \
    \                                                                       (if (string=?\
    \ (string-length extension) 0)\n                                             \
    \                                                                            \
    \                         (if (string=? (string-length extension) 0)\n       \
    \                                                                            \
    \                                                                   (if (string=?\
    \ (string-length extension) 0)\n                                             \
    \                                                                            \
    \                                 (if (string=? (string-length extension) 0)\n\
    \                                                                            \
    \                                                                            \
    \      (if (string=? (string-length extension) 0)\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ (format nil \"~a\" class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension (rest extensions) (rest extensions))]\n    [else (Strongest_Extension\
    \ (first extensions) (append (rest extensions) (list (first extensions))))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (Strongest_Extension class_name (drop 1 extensions))]))\n", "  (let ((cap (length\
    \ class_name)))\n    (let ((sm (length extensions)))\n      (let ((strength (/\
    \ (- cap sm) cap)))\n        (cond\n          [(< strength 0) \"\"]\n        \
    \  [(< strength 1) (cons class_name extensions)]\n          [else (cons (substring\
    \ class_name 0 cap) (Strongest_Extension (substring class_name cap) (append extensions\
    \ (substring class_name sm cap)))) ])))))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (let ((cap (length class_name)))\n\
    \    (let ((sm (length extensions)))\n      (let ((strength (/ (- cap sm) cap)))\n\
    \        (cond\n          [(> strength 0) (error \"Bad extensions list\")]\n \
    \         [(< strength 1) (error \"Bad extensions list\")]\n          [else (cons\
    \ (substring class_name 0 cap) (substring class_name cap (+ sm 1)))]\n       \
    \   ))))))\n", "  (cond\n    [(empty? extensions) (error \"No extensions given.\"\
    )]\n    [(equal? (first extensions) (first extensions)) (first extensions)]\n\
    \    [else (Strongest_Extension (first extensions) (rest extensions))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (tail extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (tail extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (format nil \"~a.\" class_name)]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension \n             \
    \                                       (substring (second class_name) 0 \n  \
    \                                                            (length (first class_name)))\n\
    \                                                    (substring extensions 1 \n\
    \                                                              (length (first\
    \ extensions))))]\n    [else (Strongest_Extension (substring (second class_name)\
    \ 0 \n                                          (length (first class_name))) \n\
    \                             (substring extensions 1 \n                     \
    \                     (length (first extensions))))]))\n", "  (define (strength\
    \ extension)\n    (string-length extension))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension-name best_extension)\n\
    \    (string-ref best_extension 0))\n  (define (best_extension-strength best_extension)\n\
    \    (string-length best_extension))\n  (define (best_extension-class best_extension)\n\
    \    (string-ref best_extension 1))\n  (define (best_extension-extensions best_extension)\n\
    \    (string-ref best_extension 2))\n  (define (best_extension-extension-name\
    \ best_extension)\n    (string-ref best_extension 3))\n  (define (best_extension-extension-strength\
    \ best_extension)\n    (string-length best_extension))\n  (define (best_extension-extension-class\
    \ best_extension)\n    (string-ref best_extension 4))\n  (define (best_extension-extension-extensions\
    \ best_extension)\n    (string-ref best_extension 5))\n  (define (best_extension-extension-extension-name\
    \ best_extension)\n    (string-ref best_extension 6))\n  (define (best_extension-extension-extension-strength\
    \ best_extension)\n    (string-length best_extension))\n  (define (best_extension-extension-extension-class\
    \ best_extension)\n    (string-ref best_extension 7))\n  (define (best_extension-extension-extension-extensions\
    \ best_extension)\n    (string-ref best_extension 8))\n  (define (best_extension-extension-extension-extension-name\
    \ best_extension)\n    (string-ref best_extension 9))\n  (define (best_extension-extension-extension-extension-strength\
    \ best_extension)\n    (string-length best_extension))\n  (define (best_extension-extension-extension-extension-class\
    \ best_extension)\n    (string-ref best_extension 10))\n  (define (best_extension-extension-extension-extension-extensions\
    \ best_extension)\n    (string-ref best_extension 11))\n  (define (best_extension-extension-extension-extension-extension-name\
    \ best_extension)\n    (string-ref best_extension 12))\n  (define (best_extension-extension-extension-extension-extension-strength\
    \ best_extension)\n    (string-length best_extension))\n  (define (best_extension-extension-extension-extension-extension-class\
    \ best_extension)\n    (string-ref best_extension 13))\n  (define (best_extension-extension-extension-extension-extension-extensions\
    \ best_extension)\n    (string-ref best_extension 14))\n  (define (best_extension-extension-extension-extension-extension-extension-name\
    \ best_extension)\n    (string-ref best_extension 15))\n", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (cons class_name\
    \ (Strongest_Extension class_name (rest extensions)))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (rest extensions)))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (tail extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (tail extensions)))]))\n", "  (define\
    \ (strength ext)\n    (string-length (string-replace ext #\\A \"\" #\\Z)))\n \
    \ (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n", " \
    \ (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (rest extensions))\n                  (list class_name)\n\
    \                  (Strongest_Extension (first extensions) (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) \n     (Strongest_Extension class_name (drop 1 extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (rest extensions))\n                  (list class_name)\n\
    \                  (first extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (cons (first\
    \ extensions) (Strongest_Extension class_name (rest extensions)))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (rest extensions)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) class_name) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (Strongest_Extension (first\
    \ extensions) (append (rest extensions) (list (first extensions))))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (Strongest_Extension class_name (drop 1 extensions))]))\n", "  (cond\n    [(empty?\
    \ extensions) (list class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension (rest extensions) (rest extensions))]\n    [else (cons\
    \ (first extensions) (Strongest_Extension (rest extensions) (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (drop 1 extensions))\n                  (list class_name)\n\
    \                  (Strongest_Extension (first extensions) (drop 1 extensions)))]))\n",
  "  (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions)\
    \ (first class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n\
    \    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ class_name (rest extensions))\n                  (list (first extensions))))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) \n     (Strongest_Extension class_name (drop 1 extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (", "  (let ((cap (length class_name)))\n    (let ((sm (length class_name)))\
    \ (set! sm 0)\n      (for ([i extensions]) (set! sm (+ sm (length i)))\n     \
    \   (for ([j extensions]) (set! cap (+ cap (length j)))\n          (if (< cap\
    \ sm) (return (cons class_name extensions))\n            (return (cons (substring\
    \ class_name 0 cap) (substring class_name cap sm)))))\n      (error \"No extensions\
    \ found\"))))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first extensions)) (Strongest_Extension class_name (tail extensions))]\n\
    \    [else (Strongest_Extension class_name (append (list extensions) (Strongest_Extension\
    \ class_name (tail extensions))))]\n  ))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (list\
    \ class_name)]\n    [else (cons (first extensions) (Strongest_Extension (rest\
    \ extensions) (drop 1 extensions)))]))\n", "  (define (strength extension)\n \
    \   (string-length (substring extension 0 (string-length extension)))\n  )\n \
    \ (define (best_extension extensions)\n    (sort extensions strength)\n    (first\
    \ extensions)\n  )\n  (let ((extension (best_extension extensions)))\n    (string-append\
    \ class_name \".\" (substring extension 0 (string-length extension)))\n  )\n)\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (tail extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (tail extensions)))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ \n     (Strongest_Extension (first extensions) (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension (first extensions) (rest extensions)))]))\n",
  "  (let ((cap (length class_name)))\n    (let ((sm (length extensions)))\n     \
    \ (if (= cap sm)\n          (let ((strength (/ (- cap sm) cap)))\n           \
    \ (cons class_name extensions))\n          (let ((strength (/ (- sm cap) sm)))\n\
    \            (cons (substring class_name 0 cap) (cons extensions \n          \
    \                                        (substring class_name cap sm))))))))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) \n     (Strongest_Extension (first extensions) (rest extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension (first extensions) (rest\
    \ extensions)))]))\n", "  (let ((cap (length class_name))\n        (sm  (length\
    \ class_name))\n        (strongest))\n    (for ([i extensions]\n          [str\
    \ (string-append (substring class_name 0 cap) (substring class_name cap (+ cap\
    \ (length class_name))))])\n      (if (< (length str) sm)\n          (set! strongest\
    \ str)\n          (set! sm (length str)))))\n  (strongest))\n", "  (cond\n   \
    \ [(empty? extensions) (list class_name)]\n    [(equal? (first extensions) (first\
    \ extensions)) (cons (first extensions) (Strongest_Extension class_name (rest\
    \ extensions)))]\n    [else (cons (first extensions) (Strongest_Extension class_name\
    \ (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (error \"No extensions\
    \ given.\")]\n    [(equal? (first extensions) (first extensions)) (second extensions)]\n\
    \    [else (Strongest_Extension (first extensions) (append (rest extensions) (list\
    \ class_name))]))\n)\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension class_name (rest\
    \ extensions))]\n    [else (cons (first extensions) (Strongest_Extension class_name\
    \ (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension class_name (drop\
    \ 1 extensions))]\n    [else (Strongest_Extension class_name (append (first extensions)\
    \ (Strongest_Extension class_name (drop 1 extensions))))]))\n", "  (cond\n   \
    \ [(empty? extensions) (list class_name)]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension (first extensions) (rest extensions))]\n \
    \   [else (cons (first extensions) (Strongest_Extension (first extensions) (rest\
    \ extensions)))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) class_name) (Strongest_Extension (first extensions)\
    \ (rest extensions))]\n    [else (Strongest_Extension (first extensions) (append\
    \ (rest extensions) (list (first extensions))))]))\n", "  (define (strength extension)\n\
    \    (string-length extension))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength compare))\n  (define (best_extension ", "  (cond\n    [(empty?\
    \ extensions) (list class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (list class_name)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (", "  (define (strength extension)\n\
    \    (string-length extension))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (",
  "  (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (", "  (define (strength extension)\n    (string-length extension))\n\
    \  (define (best_extension extensions)\n    (let ((best (first extensions)))\n\
    \      (if (null? extensions)\n          best\n          (if (> (strength extension)\
    \ \n                (strength best))\n              best\n              (best_extension\
    \ extensions)))))\n  (best_extension extensions))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (rest extensions) extensions)]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (rest extensions) extensions))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name))]))\n", "  (let ([cap (length class_name)]\n\
    \        [sm (length class_name)])\n    (let ([strength (- cap sm)])\n      (let\
    \ ([extension (first extensions)])\n        (cond\n          [(empty? extensions)\
    \ (error \"No extensions given\")]\n          [(equal? extension (first extensions))\
    \ (error \"Extension name is the same as the class name\")]\n          [else (set!\
    \ extension (first extensions))]\n          [(< strength (/ strength (- cap sm)))\
    \ (set! strength (/ strength (- cap sm))]\n          [(> strength (/ strength\
    \ (- cap sm))) (set! strength (/ strength (- cap sm))]\n          [(> strength\
    \ (/ strength (- cap sm))) (error \"No extensions found\")]\n          [(< strength\
    \ (/ strength (- cap sm))) (error \"No extensions found\")]\n          [else (set!\
    \ extension (first extensions))]\n          [(< strength (/ strength (- cap sm)))\
    \ (error \"No extensions found\")]\n          [else (set! extension (first extensions))]\n\
    \          [(< strength (/ strength (- cap sm))) (error \"No extensions found\"\
    )]\n          [else (set! extension (first extensions))]\n          [(< strength\
    \ (/ strength (- cap sm))) (error \"No extensions found\")]\n          [else (set!\
    \ extension (first extensions))]\n          [(< strength (/ strength (- cap sm)))\
    \ (error \"No extensions found\")]\n          [else (set! extension (first extensions))]\n\
    \          [(< strength (/ strength (- cap sm))) (error \"No extensions found\"\
    )]\n          [else (set! extension (first extensions))]\n          [(< strength\
    \ (/ strength (- cap sm))) (error \"No extensions found\")]\n          [else (set!\
    \ extension (first extensions))]\n          [(< strength (/ strength (- cap sm)))\
    \ (error \"No extensions found\")]\n          [else (set! extension (first extensions))]\n\
    \          [(< strength (/ strength (- cap sm))) (error \"No extensions found\"\
    )]\n          [else (set! extension (first extensions))]\n          [(< strength\
    \ (/ strength (- cap sm))) (error \"No extensions found\")]\n          [else (set!\
    \ extension (first ", "  (let ([cap (length class_name)]\n        [sm (length\
    \ extensions)])\n    (cond\n      [(= cap sm) (cons class_name extensions)]\n\
    \      [(< cap sm) (cons (substring class_name 0 cap) (extensions))]\n      [(>\
    \ cap sm) (cons (substring class_name cap (- sm)) (extensions))]\n      [(= cap\
    \ sm) (cons (substring class_name 0 cap) (extensions))]\n      [(< cap sm) (cons\
    \ (substring class_name cap (- sm)) (extensions))]\n      [(> cap sm) (cons (substring\
    \ class_name 0 cap) (extensions))]\n      [(= cap sm) (cons (substring class_name\
    \ 0 cap) (extensions))]\n      [(< cap sm) (cons (substring class_name cap (-\
    \ sm)) (extensions))]\n      [(> cap sm) (cons (substring class_name 0 cap) (extensions))]\n\
    \      [(= cap sm) (cons (substring class_name 0 cap) (extensions))]\n      [(<\
    \ cap sm) (cons (substring class_name cap (- sm)) (extensions))]\n      [(> cap\
    \ sm) (cons (substring class_name 0 cap) (extensions))]\n      [(= cap sm) (cons\
    \ (substring class_name 0 cap) (extensions))]\n      [(< cap sm) (cons (substring\
    \ class_name cap (- sm)) (extensions))]\n      [(> cap sm) (cons (substring class_name\
    \ 0 cap) (extensions))]\n      [(= cap sm) (cons (substring class_name 0 cap)\
    \ (extensions))]\n      [(< cap sm) (cons (substring class_name cap (- sm)) (extensions))]\n\
    \      [(> cap sm) (cons (substring class_name 0 cap) (extensions))]\n      [(=\
    \ cap sm) (cons (substring class_name 0 cap) (extensions))]\n      [(< cap sm)\
    \ (cons (substring class_name cap (- sm)) (extensions))]\n      [(> cap sm) (cons\
    \ (substring class_name 0 cap) (extensions))]\n      [(= cap sm) (cons (substring\
    \ class_name 0 cap) (extensions))]\n      [(< cap sm) (cons (substring class_name\
    \ cap (- sm)) (extensions))]\n      [(> cap sm) (cons (substring class_name 0\
    \ cap", "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first\
    \ extensions) class_name) (Strongest_Extension (first extensions) (rest extensions))]\n\
    \    [else (Strongest_Extension (first extensions) extensions)]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (drop 1 extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n", " \
    \ (define (strength ext)\n    (string-length (string->symbol (string-append (substring\
    \ ext 0 1) ext))))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength string<))", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (cons class_name (Strongest_Extension\
    \ class_name (rest extensions)))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (define (strength extension)\n  \
    \  (string-length (substring extension 0 (string-length extension)))\n  )\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength)\n    (first extensions)\n\
    \  )\n  (let ((extension (best_extension extensions)))\n    (string-append class_name\
    \ \".\" (substring extension 0 (string-length extension))))\n)\n", "  (define\
    \ (strength ext)\n    (string-length \n     (string-map \n      (lambda (c)\n\
    \        (if (char-upper-case? c)\n            (- \n             (char-code c)\
    \ \n             (char-code (first ext))\n            )\n            (- \n   \
    \          (char-code c) \n             (char-code (first ext))\n            )\n\
    \          )\n      ) \n      ext\n     )\n    )\n  )\n  (define (best_extension\
    \ extensions)\n    (sort extensions \n         (lambda (ext1 ext2)\n         \
    \  (if (> strength ext1 ext2)\n               ext1\n               ext2\n    \
    \        )\n         )\n        )\n  )\n  (if (null? extensions)\n      (error\
    \ \"No extensions found\")\n      (cons \n       (string-append class_name \"\
    .\" (first best_extension))\n       (Strongest_Extension (first best_extension)\
    \ (rest best_extensions))\n      )\n    )\n)\n", "  (let ((strength (length extensions)))\n\
    \    (if (= strength 0)\n        '\n        (let ((extension (car extensions)))\n\
    \          (if (string=? (string-length extension) 0)\n              (if (string=?\
    \ (string-length class_name) 0)\n                  (if (string=? (string-length\
    \ extension) 0)\n                      (if (string=? (string-length class_name)\
    \ 0)\n                          '\n                          (if (string=? (string-length\
    \ extension) 0)\n                              (if (string=? (string-length class_name)\
    \ 0)\n                                  '\n                                  '\n\
    \                                  '\n                                  '\n  \
    \                                '\n                                  '\n    \
    \                              '\n                                  '\n      \
    \                            '\n                                  '\n        \
    \                          '\n                                  '\n          \
    \                        '\n                                  '\n            \
    \                      '\n                                  '\n              \
    \                    '\n                                  '\n                \
    \                  '\n                                  '\n                  \
    \                '\n                                  '\n                    \
    \              '\n                                  '\n                      \
    \            '\n                                  '\n                        \
    \          '\n                                  '\n                          \
    \        '\n                                  '\n                            \
    \      '\n                                  '\n                              \
    \    '\n                                  '\n                                \
    \  '\n                                  '\n                                  '\n\
    \                                  '\n                                  '\n  \
    \                                '\n                                  '\n    \
    \                              '\n                                  '\n      \
    \                            '\n                                  '\n        \
    \                          '\n                                  '\n          \
    \                        '\n                                  '\n            \
    \                      '\n                                  '\n              \
    \                    '\n                                  '\n                \
    \                  '\n                                  '\n                  \
    \                '\n                                  '\n                    \
    \              '\n                                  '\n                      \
    \            '\n                                  '\n                        \
    \          '\n                                  '\n                          \
    \        '\n                                  '\n                            \
    \      '\n                                  '\n                              \
    \    '\n                                  '\n                                \
    \  '\n                                  '\n                                  '\n\
    \                                  '\n                                  '\n  \
    \                                '\n                                  '\n    \
    \                              '\n                                  '\n      \
    \                            '\n                                  '\n        \
    \                          '\n                                  '\n          \
    \                        '\n                                  '\n            \
    \                      '\n                                  '\n              \
    \                    '\n                                  '\n                \
    \                  '\n                                  '\n                  \
    \                '\n                                  '\n                    \
    \              '\n                                  '\n                      \
    \            '\n                                  '\n                        \
    \          '\n                                  '\n                          \
    \        '\n                                  '\n                            \
    \      '\n                                  '\n                              \
    \    '\n                                  '\n                                \
    \  '\n                                  '\n                                  '\n\
    \                                  '\n                                  '\n  \
    \                                '\n                                  '\n    \
    \                              '\n                                  '\n      \
    \                            '\n                                  '\n        \
    \                          '\n                                  '\n          \
    \                        '\n                                  '\n            \
    \                      '\n                                  '\n              \
    \                    '\n                                  '\n                \
    \                  '\n                                  '\n                  \
    \                '\n                                  '\n                    \
    \              '\n                                  '\n                      \
    \            '\n                                  '\n                        \
    \          '\n                                  '\n                          \
    \        '\n                                  '\n                            \
    \      '\n                                  '\n                              \
    \    '\n                                  '\n                                \
    \  '\n                                  '\n                                  '\n\
    \                                  '\n                                  '\n  \
    \                                '\n                                  '\n    \
    \                              '\n                                  '\n      \
    \                            '\n                                  '\n        \
    \                          '\n                                  '\n          \
    \                        '\n                                  '\n            \
    \                      '\n                                  '\n              \
    \                    '\n                                  '\n                \
    \                  '\n                                  '\n                  \
    \                '\n                                  '\n                    \
    \              '\n                                  '\n                      \
    \            '\n                                  '\n                        \
    \          '\n                                  '\n                          \
    \        '\n                                  '\n                            \
    \      '\n                                  '\n                              \
    \    '\n                                  '\n                                \
    \  '\n                                  '\n                                  '\n\
    \                                  '\n                                  '\n  \
    \                                '\n                                  '\n    \
    \                              '\n                                  '\n      \
    \                            '\n                                  '\n        \
    \                          '\n                                  '\n          \
    \                        '\n                                  '\n            \
    \                      '\n                                  '\n              \
    \                    '\n                                  '\n                \
    \                  '\n                                  '\n                  \
    \                '\n                                  '\n                    \
    \              '\n                                  '\n                      \
    \            '\n                                  '\n                        \
    \          '\n                                  '\n                          \
    \        '\n                                  '\n", "  (cond\n    [(empty? extensions)\
    \ (error \"No extensions given\")]\n    [(equal? (first extensions) (first extensions))\
    \ (first extensions)]\n    [else (Strongest_Extension (first extensions) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first extensions)) (rest extensions)]\n    [else (cons (first extensions)\
    \ (Strongest_Extension class_name (rest extensions)))]))\n", "  (define (strength\
    \ extension)\n    (string-length extension))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (", "  (define (strength extension)\n    (string-length (substring extension\
    \ 0 (string-length extension)))\n  )\n  (define (best_extension extensions)\n\
    \    (sort extensions strength)\n    (first extensions)\n  )\n  (let ((extension\
    \ (best_extension extensions)))\n    (string-append class_name \".\" (substring\
    \ extension 0 (string-length extension)))\n  )\n)\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (define (strength extension)\n\
    \    (string-length extension))\n  (define (best_extension extensions)\n    (let\
    \ ((best (first extensions))\n          (best_strength (strength best)))\n   \
    \   (if (null? extensions)\n          best\n          (if (< (strength extension)\
    \ best_strength)\n              (best_extension extensions)\n              (best_extension\
    \ extensions)))))\n  (best_extension extensions))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (list\
    \ class_name)]\n    [else (append (Strongest_Extension (first extensions) (drop\
    \ 1 extensions))\n                  (list class_name)\n                  (Strongest_Extension\
    \ (first extensions) extensions))]))\n", "  (let ([cap (length class_name)]\n\
    \        [sm (length class_name)])\n    (let loop ([i 0])\n      (if (< i cap)\n\
    \          (let ([ext (first extensions)])\n            (if (> (- cap sm) ext)\n\
    \                (list class_name ext)\n                (loop (+ i 1))))\n   \
    \       (list class_name extensions)))))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (define (strength ext)\n  \
    \  (string-length \n     (string-map \n      (lambda (c)\n        (if (char-upper-case?\
    \ c)\n            (- \n             (string-length ext) \n             (string-length\
    \ \n              (filter (lambda (c2) (char-lower-case? c2)) \n             \
    \          (string-map char-upper-case? ext))))\n            0))\n      ext))\n\
    \  (define (best_extension exts)\n    (sort exts \n         (lambda (ext1 ext2)\n\
    \           (if (> strength ext1 ext2)\n               ext1\n               ext2)))\n\
    \  (if (null? extensions)\n      class_name\n      (best_extension (append extensions\
    \ (list class_name)))))\n", "  (cond\n    [(empty? extensions) (format nil \"\
    ~a\" class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (rest extensions) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ extensions) (append (list (first extensions)) (rest extensions)))]))\n", " \
    \ (define (strength ext)\n    (string-length \n     (string-map \n      (lambda\
    \ (c)\n        (if (char-upper-case? c)\n            (- \n             (string-length\
    \ ext)\n             (string-length \n              (substring ext 0 (string-length\
    \ ext)))))\n          0))\n      ext))\n  (define (best_extension exts)\n    (sort\
    \ exts \n         (lambda (ext)\n           (if (> strength ext)\n           \
    \    ext\n               (- ext\n                   (strength ext)))))\n  (define\
    \ (best_extension exts)\n    (sort exts \n         (lambda (ext)\n           (if\
    \ (> strength ext)\n               ext\n               (- ext\n              \
    \     (strength ext)))))\n  (define (best_extension exts)\n    (sort exts \n \
    \        (lambda (ext)\n           (if (> strength ext)\n               ext\n\
    \               (- ext\n                   (strength ext)))))\n  (define (best_extension\
    \ exts)\n    (sort exts \n         (lambda (ext)\n           (if (> strength ext)\n\
    \               ext\n               (- ext\n                   (strength ext)))))\n\
    \  (define (best_extension exts)\n    (sort exts \n         (lambda (ext)\n  \
    \         (if (> strength ext)\n               ext\n               (- ext\n  \
    \                 (strength ext)))))\n  (define (best_extension exts)\n    (sort\
    \ exts \n         (lambda (ext)\n           (if (> strength ext)\n           \
    \    ext\n               (- ext\n                   (strength ext)))))\n  (define\
    \ (best_extension exts)\n    (sort exts \n         (lambda (ext)\n           (if\
    \ (> strength ext)\n               ext\n               (- ext\n              \
    \     (strength ext)))))\n  (define (best_extension exts)\n    (sort exts \n \
    \        (lambda (ext)\n           (if (> strength ext)\n               ext\n\
    \               (- ext\n                   (strength ext)))))\n  (define (best_extension\
    \ exts)\n    (sort exts \n         (lambda (ext)\n           (if (> strength ext)\n\
    \               ext\n               (- ext\n                   (strength ext)))))\n\
    \  (define (best_extension exts)\n    (sort exts \n         (lambda (ext)\n  \
    \         (if (> strength ext)\n               ext\n               (- ext\n  \
    \                 (strength ext)))))\n  (define (best_extension exts)\n    (sort\
    \ exts \n         (lambda (ext)\n           (", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\
    \"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (error\
    \ \"No extensions given.\")]\n    [(equal? (first extensions) (first extensions))\
    \ (first extensions)]\n    [else (Strongest_Extension (first extensions) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (list class_name)]\n    [else\
    \ (append (Strongest_Extension (first extensions) (rest extensions))\n       \
    \           (list (first extensions))))]\n  )\n)\n", "  (define (strength extension)\n\
    \    (string-length extension))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength)\n    (first extensions))\n  (format #t \"~a~a\" class_name\
    \ best_extension))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (cons class_name (Strongest_Extension\
    \ class_name (rest extensions)))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (define (strength ext)\n    (string-length\
    \ \n     (string-map \n      (lambda (c)\n        (if (char-upper-case? c)\n \
    \           (substring ext 0 (char-index (c) ext))\n            (c))) \n     \
    \ ext))\n  (define (best_extension extensions)\n    (sort extensions \n      \
    \   (lambda (ext ext2)\n           (if (> strength ext2 strength)\n          \
    \     ext2\n               ext))))\n  (let ((best_extension (best_extension extensions)))\n\
    \    (string-append class_name \".\" (string best_extension))))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (rest extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (rest extensions)))]))\n", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (cons (first extensions) (Strongest_Extension class_name\
    \ (rest extensions)))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (let ((cap (length class_name)) (sm\
    \  (length class_name))) (let ((strength (- cap sm)))\n    (cond\n      [(empty?\
    \ extensions) (list class_name)]\n      [(equal? strength (length extensions))\
    \ (list class_name)]\n      [else (let ((extension (first extensions))) (list\
    \ class_name extension)]))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength)\n\
    \    (first extensions))\n  (define (best_extension extensions)\n    (if (null?\
    \ extensions)\n        '()\n        (if (= (strength (first extensions)) 0)\n\
    \            (best_extension (rest extensions))\n            (best_extension (rest\
    \ extensions)))))\n  (define (best_extension extensions)\n    (if (null? extensions)\n\
    \        '()\n        (if (= (strength (first extensions)) 0)\n            (best_extension\
    \ (rest extensions))\n            (best_extension (rest extensions)))))\n  (define\
    \ (best_extension extensions)\n    (if (null? extensions)\n        '()\n     \
    \   (if (= (strength (first extensions)) 0)\n            (best_extension (rest\
    \ extensions))\n            (best_extension (rest extensions)))))\n  (define (best_extension\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (if (= (strength\
    \ (first extensions)) 0)\n            (best_extension (rest extensions))\n   \
    \         (best_extension (rest extensions)))))\n  (define (best_extension extensions)\n\
    \    (if (null? extensions)\n        '()\n        (if (= (strength (first extensions))\
    \ 0)\n            (best_extension (rest extensions))\n            (best_extension\
    \ (rest extensions)))))\n  (define (best_extension extensions)\n    (if (null?\
    \ extensions)\n        '()\n        (if (= (strength (first extensions)) 0)\n\
    \            (best_extension (rest extensions))\n            (best_extension (rest\
    \ extensions)))))\n  (define (best_extension extensions)\n    (if (null? extensions)\n\
    \        '()\n        (if (= (strength (first extensions)) 0)\n            (best_extension\
    \ (rest extensions))\n            (best_extension (rest extensions)))))\n  (define\
    \ (best_extension extensions)\n    (if (null? extensions)\n        '()\n     \
    \   (if (= (strength (first extensions)) 0)\n            (best_extension (rest\
    \ extensions))\n            (best_extension (rest extensions)))))\n  (define (best_extension\
    \ extensions)\n    (if (null? extensions)\n        '()\n        (if (= (strength\
    \ (first extensions)) 0)\n            (best_extension (rest extensions))\n   \
    \         (best_extension (rest extensions)))))\n  (define (best_extension extensions)\n\
    \    (if (null? extensions)\n        '()\n        (if (= (strength (first extensions))\
    \ 0)\n            (best_extension (rest extensions))\n            (best_extension\
    \ (rest extensions)))))\n  (define (best_extension extensions)\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (drop 1 extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n", " \
    \ (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (Strongest_Extension (rest extensions) (rest extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension (rest extensions) (rest\
    \ extensions)))]))\n", "  (define (strength extension)\n    (string-length extension))\n\
    \  (define (strength-comparator x y)\n    (if (string=? x y)\n        0\n    \
    \    (if (string=? (substring x 0 1) (substring y 0 1))\n            -1\n    \
    \        1)))\n  (define (strength-comparator-descending x y)\n    (if (string=?\
    \ x y)\n        0\n        (if (string=? (substring x 0 1) (substring y 0 1))\n\
    \            1\n            -1)))\n  (define (strength-comparator-descending-1\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            -1\n            1)))\n  (define (strength-comparator-descending-1\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            -1\n            1)))\n  (define (strength-comparator-descending-1\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            -1\n            1)))\n  (define (strength-comparator-descending-1\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            -1\n            1)))\n  (define (strength-comparator-descending-1\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            -1\n            1)))\n  (define (strength-comparator-descending-1\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            -1\n            1)))\n  (define (strength-comparator-descending-1\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            -1\n            1)))\n  (define (strength-comparator-descending-1\
    \ x y)\n    (if (string=? x y)\n        0\n        (if (string=? (substring x\
    \ 0 1) (substring y 0 1))\n            -1\n            1)))\n  (define (strength-comparator-descending-1\
    \ x y)\n    (if (string=? x y)\n", "  (cond\n    [(empty? extensions) (error \"\
    No extensions given\")]\n    [(equal? (first extensions) (first extensions)) (first\
    \ extensions)]\n    [else (Strongest_Extension (first extensions) (rest extensions))]))\n",
  "  (define (strength ext)\n    (string-length \n     (string-map \n      (lambda\
    \ (c)\n        (if (char-upper-case? c)\n            (substring ext 0 (char-index\
    \ (c) ext)))\n          ext))\n      ext))\n  (define (strength-sort ext)\n  \
    \  (cond ((> strength ext) ext)\n          ((char-lower-case? ext) \n        \
    \   (strength-sort (substring ext 0 (char-index (car ext) ext))))\n          (else\
    \ (strength-sort (substring ext 0 (char-index (car ext) ext)))))\n  (define (strength-sort-keys\
    \ ext)\n    (sort (map strength-sort extensions) \n          (lambda (x y) (<\
    \ (strength x) strength y))))\n  (define (strength-sort-values ext)\n    (sort\
    \ (map strength extensions) \n          (lambda (x y) (< (strength x) strength\
    \ y))))\n  (define (strength-sort-keys ext)\n    (sort (map strength extensions)\
    \ \n          (lambda (x y) (< (strength x) strength y))))\n  (define (strength-sort-values\
    \ ext)\n    (sort (map strength extensions) \n          (lambda (x y) (< (strength\
    \ x) strength y))))\n  (define (strength-sort-keys ext)\n    (sort (map strength\
    \ extensions) \n          (lambda (x y) (< (strength x) strength y))))\n  (define\
    \ (strength-sort-values ext)\n    (sort (map strength extensions) \n         \
    \ (lambda (x y) (< (strength x) strength y))))\n  (define (strength-sort-keys\
    \ ext)\n    (sort (map strength extensions) \n          (lambda (x y) (< (strength\
    \ x) strength y))))\n  (define (strength-sort-values ext)\n    (sort (map strength\
    \ extensions) \n          (lambda (x y) (< (strength x) strength y))))\n  (define\
    \ (strength-sort-keys ext)\n    (sort (map strength extensions) \n          (lambda\
    \ (x y) (< (strength x) strength y))))\n  (define (strength-sort-values ext)\n\
    \    (sort (map strength extensions) \n          (lambda (x y) (< (strength x)\
    \ strength y))))\n  (define (strength-sort-keys ext)\n    (sort (map strength\
    \ extensions) \n          (lambda ", "  (cond\n    [(empty? extensions) \"\"]\n\
    \    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ (error \"No extensions given\")]\n    [(equal? (first extensions) (first extensions))\
    \ (first extensions)]\n    [else (Strongest_Extension (first extensions) (rest\
    \ extensions))]))\n", "  (define (strength extension)\n    (string-length extension))\n\
    \  (define (strength-extension extension strength)\n    (if (string=? extension\
    \ (string-append class_name extension))\n        strength\n        (strength-extension\
    \ (string-append extension \".\" extension) strength)))\n  (define (strength-extensions\
    \ extensions strength)\n    (if (null? extensions)\n        \"\"\n        (let\
    \ ((extension (car extensions))\n              (strength (strength extension)))\n\
    \          (if (> strength 0)\n              (let ((strength-extension (strength-extension\
    \ extension strength)))\n                (string-append class_name strength-extension))\n\
    \              (strength-extensions (cdr extensions) strength))))\n  (strength-extensions\
    \ extensions 0))\n", "  (define (strength extension)\n    (string-length extension))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (", "  (let ((cap (length class_name))\
    \ (sm  (length class_name))) (\n    (define (strength ext)\n      (if (string=?\
    \ (string-ref ext 0) \"S\") (- cap (length ext)) (- sm (length ext))))\n    (define\
    \ (best_extension exts)\n      (if (null? exts) (error \"No extensions found\"\
    ) (\n        (let ((strength (strength exts))) (\n          (if (> strength 0)\
    \ (exts (cdr exts))\n            (error \"Multiple extensions with same strength\"\
    )))))\n    (best_extension (sort extensions strength)))))\n", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (error\
    \ \"No extensions given\")]\n    [(equal? (first extensions) (first extensions))\
    \ (Strongest_Extension class_name (drop 1 extensions))]\n    [else (cons (first\
    \ extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n", " \
    \ (cond\n    [(empty? extensions) (error \"No extensions given\")]\n    [(equal?\
    \ (first extensions) (first extensions)) (second extensions)]\n    [else (Strongest_Extension\
    \ (first extensions) (append (rest extensions) (list class_name)))))\n", "  (cond\n\
    \    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first class_name)) (Strongest_Extension (first class_name) (rest extensions))]\n\
    \    [else (cons (first class_name) (Strongest_Extension (first class_name) (rest\
    \ extensions)))]))\n", "  (let ((cap (length class_name)) (sm  (length class_name)))\
    \ (set! cap 0 (set! sm 0))\n    (for ((i extensions))\n      (set! cap (+ cap\
    \ (length i)))\n      (set! sm (+ sm (length i)))\n      (if (> (- cap sm) 0)\n\
    \          (set! cap (- cap sm))\n          (set! sm 0))\n      (set! cap (- cap\
    \ sm))\n      (set! sm 0))\n    (if (> cap sm)\n        (set! cap sm)\n      \
    \  (set! sm 0))\n    (string-append class_name \".\" (substring extensions 0 cap)\
    \ (substring extensions cap sm))))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) class_name) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (Strongest_Extension (first\
    \ extensions) extensions)]))\n", "  (cond\n    [(empty? extensions) \"\"]\n  \
    \  [(equal? (first extensions) (first extensions)) (Strongest_Extension class_name\
    \ (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (list class_name)]\n\
    \    [else (append (Strongest_Extension (first extensions) (rest extensions))\n\
    \                  (list class_name)\n                  (Strongest_Extension (first\
    \ extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions) \"\
    \"]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ class_name (drop 1 extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (drop 1 extensions)))]))\n", "  (cond\n    [(empty? extensions) (list\
    \ class_name)]\n    [(equal? (first extensions) (first extensions)) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) (first extensions)) (list\
    \ class_name)]\n    [else (append (Strongest_Extension (first extensions) (rest\
    \ extensions))\n                  (list (first extensions))))]\n  )\n)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
