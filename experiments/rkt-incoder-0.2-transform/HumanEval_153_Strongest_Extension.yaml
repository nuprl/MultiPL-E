name: HumanEval_153_Strongest_Extension
language: rkt
prompt: "#lang racket\n\n;; You will be given the name of a class (a string) and a\
  \ list of extensions.\n;; The extensions are to be used to load additional classes\
  \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
  \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
  \ number of lowercase letters \n;; in the extension's name, the strength is given\
  \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
  \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there are\
  \ two or more extensions with the same strength, you should\n;; choose the one that\
  \ comes first in the list.\n;; For example, if you are given \"Slices\" as the class\
  \ and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then\
  \ you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest\
  \ extension \n;; (its strength is -1).\n;; Example:\n;; >>> (Strongest_Extension\
  \ \"my_class\" (list \"AA\" \"Be\" \"CC\"))\n;; \"my_class.AA\"\n(define (Strongest_Extension\
  \ class_name extensions)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
  \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
  \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
  \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
  \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
  \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\"\
  \ (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate\
  \ \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal?\
  \ (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"\
  -_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
  \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
  \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
  \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
completions: ["  (let ((cap (length class_name)) (sm  (length class_name))) (set!\
    \ cap (- cap sm))\n  (let ((strength (/ (- cap sm) cap)))\n    (cond\n      [(empty?\
    \ extensions) (list class_name)]\n      [(equal? strength (first extensions))]\n\
    \      [else (cons (first extensions) (Strongest_Extension (rest extensions) class_name))])))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) \n     (Strongest_Extension class_name (drop 1 extensions))]\n\
    \    [else (cons (first extensions) (Strongest_Extension \n                  \
    \              (append (first extensions) \".\" \n                           \
    \             (Strongest_Extension class_name \n                             \
    \                         (drop 1 extensions)))))]))\n", "  (cond\n    [(empty?\
    \ extensions) (list class_name)]\n    [(equal? (first extensions) (first extensions))\
    \ (list class_name)]\n    [else (append (Strongest_Extension (first extensions)\
    \ (rest extensions))\n                  (list (first extensions))))]\n  )\n)\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ class_name) (Strongest_Extension (first extensions) (rest extensions))]\n  \
    \  [else (Strongest_Extension (first extensions) (append (rest extensions) (list\
    \ (first extensions))))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first extensions)) (Strongest_Extension (rest extensions)\
    \ extensions)]\n    [else (cons (first extensions) (Strongest_Extension (rest\
    \ extensions) extensions))]))\n", "  (let ((strength (/ (length extensions) (length\
    \ class_name)))\n        (extension (first extensions)))\n    (cond\n      [(<\
    \ strength 0)\n       (cons class_name extension)]\n      [(< strength 1)\n  \
    \     (cons class_name extension (Strongest_Extension class_name (drop 1 extensions)))]\n\
    \      [(< strength 2)\n       (cons class_name extension (Strongest_Extension\
    \ class_name (drop 2 extensions)))]\n      [(< strength 3)\n       (cons class_name\
    \ extension (Strongest_Extension class_name (drop 3 extensions)))]\n      [(<\
    \ strength 4)\n       (cons class_name extension (Strongest_Extension class_name\
    \ (drop 4 extensions)))]\n      [(< strength 5)\n       (cons class_name extension\
    \ (Strongest_Extension class_name (drop 5 extensions)))]\n      [(< strength 6)\n\
    \       (cons class_name extension (Strongest_Extension class_name (drop 6 extensions)))]\n\
    \      [(< strength 7)\n       (cons class_name extension (Strongest_Extension\
    \ class_name (drop 7 extensions)))]\n      [(< strength 8)\n       (cons class_name\
    \ extension (Strongest_Extension class_name (drop 8 extensions)))]\n      [(<\
    \ strength 9)\n       (cons class_name extension (Strongest_Extension class_name\
    \ (drop 9 extensions)))]\n      [else\n       (cons class_name extension (Strongest_Extension\
    \ class_name (drop strength extensions)))])))\n", "  (cond\n    [(empty? extensions)\
    \ (list class_name)]\n    [(equal? (first extensions) class_name) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (Strongest_Extension (first\
    \ extensions) (append (rest extensions) (list (first extensions))))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (drop 1 extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (drop 1 extensions)))]))\n",
  "  (define (strength ext)\n    (string-length (substring ext 0 1) (substring ext\
    \ 1 1)))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n",
  "  (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (", "  (define (strength ext)\n    (string-length \n     (string-map\
    \ \n      (lambda (c)\n        (if (char-upper-case? c)\n            (- \n   \
    \          (string-length ext)\n             (string-length \n              (filter\
    \ (lambda (c)\n                        (char-lower-case? c))\n               \
    \       ext))\n            0))\n      ext)))\n  (let ((strengths (map strength\
    \ extensions)))\n    (sort strengths \n         (lambda (a b) \n           (if\
    \ (< a b)\n               (- a)\n               (- b))))\n    (string-append class_name\
    \ \n                  (first extensions)\n                  (second extensions))))\n",
  "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal? (first extensions)\
    \ (first extensions)) (list class_name)]\n    [else (append (Strongest_Extension\
    \ (first extensions) (rest extensions))\n                  (list class_name)\n\
    \                  (Strongest_Extension (first extensions) (rest extensions)))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ extensions)) (Strongest_Extension class_name (rest extensions))]\n    [else\
    \ (cons (first extensions) (Strongest_Extension class_name (rest extensions)))]))\n",
  "  (define (strength ext)\n    (string-length \n     (string-map \n      (lambda\
    \ (c)\n        (if (char-upper-case c)\n            (- \n             (char-lower-case\
    \ c) \n             (string-length ext))\n            0))\n      ext))\n  (define\
    \ (best_extension exts)\n    (if (null? exts)\n        '()\n        (let ((ext\
    \ (first exts)))\n          (if (> (strength ext) 0)\n              (cons ext\
    \ (best_extension (rest exts)))\n              (best_extension (rest exts))))))\n\
    \  (let ((ext (best_extension extensions)))\n    (string-append class_name \"\
    .\" ext)))\n", "  (cond\n    [(empty? extensions) (list class_name)]\n    [(equal?\
    \ (first extensions) class_name) (Strongest_Extension (first extensions) (rest\
    \ extensions))]\n    [else (Strongest_Extension (first extensions) (append (rest\
    \ extensions) (list (first extensions))))]))\n", "  (let ((strength (/ (length\
    \ class_name) \n                    (length extensions))))\n    (cond\n      [(<\
    \ strength 0) \"\"]\n      [(< strength 1) (substring class_name 0 1)]\n     \
    \ [else (substring class_name 0 \n                    (min (floor (- strength\
    \ 1) (length extensions))))]))\n  )\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (let ((cap (length class_name)) (sm  (length class_name)))\
    \ (set! cap 0 (set! sm 0))\n    (for ([i (in-range (length extensions))])\n  \
    \    (if (string=? (substring class_name 0 i) extensions[i])\n          (set!\
    \ cap (+ cap (length extensions[i]))) (set! sm (+ sm (length extensions[i])))\n\
    \      )\n      (if (< cap sm) (substring class_name 0 cap) (substring class_name\
    \ 0 sm))\n    )\n  )\n", "  (cond\n    [(empty? extensions) (list class_name)]\n\
    \    [(equal? (first extensions) (first extensions)) (cons class_name (Strongest_Extension\
    \ class_name (rest extensions)))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ class_name (rest extensions)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
