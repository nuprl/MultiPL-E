name: HumanEval_160_do_algebra
language: rkt
prompt: "#lang racket\n\n;; Given two lists operator, and operand. The first list\
  \ has basic algebra operations, and \n;; the second list is a list of integers.\
  \ Use the two given lists to build the algebric \n;; expression and return the evaluation\
  \ of this expression.\n;; The basic algebra operations:\n;; Addition ( + ) \n;;\
  \ Subtraction ( - ) \n;; Multiplication ( * ) \n;; Floor division ( // ) \n;; Exponentiation\
  \ ( ** ) \n;; Example:\n;; operator['+', '*', '-']\n;; array = [2, 3, 4, 5]\n;;\
  \ result = 2 + 3 * 4 - 5\n;; => result = 9\n;; Note:\n;; The length of operator\
  \ list is equal to the length of operand list minus one.\n;; Operand is a list of\
  \ of non-negative integers.\n;; Operator list has at least one operator, and operand\
  \ list has at least two operands.\n(define (do_algebra operator operand)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n\
  \    (check-equal? (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37)\n  \
  \  (check-equal? (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9)\n    (check-equal?\
  \ (candidate (list \"//\" \"*\") (list 7 3 4)) 8)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? operand) (error \"Operand list is empty.\")]\n\
    \    [(empty? operator) (error \"Operator list is empty.\")]\n    [(null? (rest\
    \ operator)) (error \"Operator list is empty.\")]\n    [else (cond\n         \
    \ [(equal? (first operator) '+) (+ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n          [(equal? (first operator) '-) (- (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n          [(equal? (first operator)\
    \ '*') (* (first operand) (do_algebra (rest operator) (rest operand)))]\n    \
    \      [(equal? (first operator) '//') (floor (/ (first operand) (do_algebra (rest\
    \ operator) (rest operand))))]\n          [(equal? (first operator) '**') (exp\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n          [else\
    \ (error \"Unknown operator.\")])]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [else (+ (do_algebra (first operator) (first\
    \ operand))\n            (do_algebra (first operator) (second operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (do_algebra (rest operator) (sub1 operand))]\n    [(equal?\
    \ (first operator) '+) (do_algebra (rest operator) (sub1 operand))]\n    [(equal?\
    \ (first operator) '*) (do_algebra (rest operator) (sub1 operand))]\n    [(equal?\
    \ (first operator) '//) (do_algebra (rest operator) (sub1 operand))]\n    [else\
    \ (do_algebra (rest operator) (cons (first operand) (do_algebra (rest operator)\
    \ (sub1 operand))))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? operator) 0]\n    [(equal? (first operator) '+) (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first operator)\
    \ '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '*') (* (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '//') (floor (/ (first operand) (do_algebra (rest\
    \ operator) (rest operand))))]\n    [(equal? (first operator) '**') (exp (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [else (error \"\
    Unknown operator\")]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (do_algebra (rest operand) (first operand))]\n    [else (+\
    \ (do_algebra (rest operand) (first operand)) (do_algebra (rest operand) (first\
    \ operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) (error '(error \"Invalid operand\"\
    ))]\n    [else (cons (+ (first operand) (do_algebra (rest operator) (rest operand)))\n\
    \               (do_algebra (first operator) operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(empty? (rest operand)) (+ (first operand) (do_algebra (first\
    \ operand) (rest operand)))]\n    [else (+ (first operand) (do_algebra (first\
    \ operand) (rest operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [else (cons (+ (first\
    \ operand) (do_algebra (rest operator) (first operand)))\n                (do_algebra\
    \ (first operator) (second operand)))]))\n", "  (cond\n    [(empty? operand) (error\
    \ \"Invalid operand\")]\n    [(empty? operator) (error \"Invalid operator\")]\n\
    \    [(null? (rest operator)) (error \"Invalid operator\")]\n    [(null? (rest\
    \ operand)) (error \"Invalid operand\")]\n    [else (cons (+ (first operand) (do_algebra\
    \ (rest operator) (rest operand)))\n              (do_algebra (rest operator)\
    \ (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest\
    \ operand)) (+ (first operand) (do_algebra (first operand) (rest operand)))]\n\
    \    [else (+ (first operand) (do_algebra (first operand) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty? operand)\
    \ operand]\n    [(equal? (first operator) (first operand)) (do_algebra (rest operator)\
    \ (rest operand))]\n    [else (+ (do_algebra (first operator) (first operand))\
    \ (do_algebra (rest operator) (rest operand)))]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [(equal? (first operator) '+)\
    \ (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '*') (* (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '//') (floor (/ (first operand)\
    \ (do_algebra (rest operator) (rest operand))))]\n    [(equal? (first operator)\
    \ '**') (exp (first operand) (do_algebra (rest operator) (rest operand)))]\n \
    \   [else (error \"Unknown operator\")]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [(equal? (first operator) '-)\
    \ (- operand)]\n    [(equal? (first operator) '*) (* (first operand) (second operand))]\n\
    \    [(equal? (first operator) '//) (/ operand operand)]\n    [(equal? (first\
    \ operator) '**) (pow (first operand) (second operand))]\n    [else (+ (do_algebra\
    \ (rest operator) (first operand)) (do_algebra (first operator) (first operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first\
    \ operand) (do_algebra (rest operand) (rest operand)))]\n    [else (do_algebra\
    \ (rest operand) (rest operand))]))\n", "  (cond\n    [(empty? operand) 0]\n \
    \   [(equal? (car operand) operator) (do_algebra (cdr operand) (cons (car operand)\
    \ (do_algebra (cdr operand) (cdr operand))))]\n    [else (do_algebra (cdr operand)\
    \ (cons (car operand) (do_algebra (cdr operand) (cdr operand))))]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty? operand)\
    \ operand]\n    [(equal? (first operator) '-) (sub1 (first operand))]\n    [(equal?\
    \ (first operator) '*) (* (first operand) (second operand))]\n    [(equal? (first\
    \ operator) '//) (floor (/ (first operand) (second operand)))]\n    [(equal? (first\
    \ operator) '**) (pow (first operand) (second operand))]\n    [else (+ (do_algebra\
    \ (rest operator) (first operand)) (do_algebra (first operator) (second operand)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (- operand)]\n    [(equal? (first operator) '+) (+ operand)]\n\
    \    [(equal? (first operator) '*) (* operand)]\n    [(equal? (first operator)\
    \ '//) (/ operand operand)]\n    [(equal? (first operator) '**) (* operand operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (+ (do_algebra (first operator) (first operand))\n            (do_algebra (first\
    \ operator) (second operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n   \
    \ [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond [(null? operand)\
    \ 0]\n        [(null? (cdr operand)) (+ (car operand) (car operand))]\n      \
    \  [else (+ (car operand) (do_algebra (car operator) (cdr operand)))]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (+ (first operand)\
    \ (do_algebra operator (rest operand)))]\n    [else (+ (do_algebra operator (first\
    \ operand)) (do_algebra operator (rest operand)))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(empty? (rest operand)) (+ (first operand) (do_algebra (first\
    \ operand) (first operand)))]\n    [else (+ (first operand) (do_algebra (first\
    \ operand) (rest operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty?\
    \ (rest operand)) (+ (first operand) (do_algebra operator (rest operand)))]\n\
    \    [else (+ (first operand) (do_algebra operator (rest operand)))]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) (error \"Invalid operand\"\
    )]\n    [(empty? operator) (error \"Invalid operator\")]\n    [(null? (first operand))\
    \ (error \"Invalid operand\")]\n    [(null? (first operator)) (error \"Invalid\
    \ operator\")]\n    [else (+ (first operator) (do_algebra (rest operator) (first\
    \ operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (first operand) (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) (rest operand))]))\n", " \
    \ (cond [(null? operand) 0]\n        [(null? (cdr operand)) (+ (car operand) (car\
    \ operand))]\n        [else (+ (do_algebra (car operand) (cdr operand)) (do_algebra\
    \ (car operator) (cdr operator)))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first operator)\
    \ '-) (sub1 (first operand))]\n    [(equal? (first operator) '*) (* (first operand)\
    \ (first operand))]\n    [(equal? (first operator) '//) (floor (first operand))]\n\
    \    [(equal? (first operator) '**) (pow (first operand) (first operand))]\n \
    \   [else (+ (do_algebra (rest operator) (first operand))\n             (do_algebra\
    \ (first operator) (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first operator)\
    \ '-) (sub1 (first operand))]\n    [(equal? (first operator) '*) (* (first operand)\
    \ (second operand))]\n    [(equal? (first operator) '//) (floor operand)]\n  \
    \  [(equal? (first operator) '**) (exp (first operand) (second operand))]\n  \
    \  [else (do_algebra (rest operator) (first operand))]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first operator)\
    \ (first operand)) (do_algebra (rest operator) (rest operand))]\n    [else (+\
    \ (do_algebra (first operator) (first operand)) (do_algebra (rest operator) (rest\
    \ operand)))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty? operand)\
    \ operand]\n    [(equal? (first operator) '-) (do_algebra (rest operator) (- operand))]\n\
    \    [(equal? (first operator) '*) (* (first operand) (first operand))]\n    [(equal?\
    \ (first operator) '//) (floor (/ (first operand) (first operand)))]\n    [(equal?\
    \ (first operator) '**) (pow (first operand) (first operand))]\n    [else (+ (do_algebra\
    \ (rest operator) (first operand)) (do_algebra (first operator) (first operand)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (+ (do_algebra (first operator) (first operand))\n            (do_algebra (first\
    \ operator) (second operand)))]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [else (cons (+ (car operand) (do_algebra\
    \ (cdr operator) (cdr operand)))\n              (do_algebra (cdr operator) operand))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra\
    \ (rest operand) (first operand))]\n    [else (+ (do_algebra (rest operand) (first\
    \ operand)) (do_algebra (rest operand) (first operand)))]))\n", "  (cond\n   \
    \ [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n    [else\
    \ (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n", "  (cond\
    \ [(null? operand) 0]\n        [(null? (cdr operand)) (+ (car operand) (car operand))]\n\
    \        [else (+ (do_algebra (car operand) (cdr operand)) (do_algebra (car operator)\
    \ (cdr operator)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (first operand) (do_algebra (rest operand) (rest operand)))]\n\
    \    [else (do_algebra (rest operand) operand)]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (do_algebra (rest operand) (rest\
    \ operand))]\n    [else (+ (do_algebra (first operand) (first operand)) (do_algebra\
    \ (first operand) (rest operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(empty? operator) 0]\n    [(equal? (first operator) '+) (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first operator)\
    \ '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '*') (* (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '//') (/ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '**') (exp (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [else (error \"Unknown operator\"\
    )]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator)\
    \ (do_algebra (rest operand) (rest operand))]\n    [else (+ (do_algebra (first\
    \ operand) (first operand)) (do_algebra (first operand) (rest operand)))]))\n",
  "  (cond [(null? operand) 0]\n        [(null? (cdr operand)) (+ (car operand) (do_algebra\
    \ (car operator) (cdr operand)))]\n        [else (+ (do_algebra (car operator)\
    \ (cdr operand)) (do_algebra (car operator) (cdr operand)))]))\n", "  (cond\n\
    \    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (- operand)]\n    [(equal? (first operator) '*) (* (first\
    \ operand) (second operand))]\n    [(equal? (first operator) '//) (/ operand 2)]\n\
    \    [(equal? (first operator) '**) (pow (first operand) (second operand))]\n\
    \    [else (+ (do_algebra (rest operator) (first operand)) (do_algebra (first\
    \ operator) (second operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n   \
    \ [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) (error \"Operand list is empty.\")]\n    [(empty?\
    \ operator) (error \"Operator list is empty.\")]\n    [else (cons (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))\n              (do_algebra (first\
    \ operator) (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (first operand) (do_algebra\
    \ (rest operand) (rest operand)))]\n    [else (do_algebra (rest operand) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (first operand) (do_algebra (rest operand)\
    \ (rest operand)))]\n    [else (do_algebra (rest operand) operand)]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first operand)\
    \ (do_algebra (rest operand) (rest operand)))]\n    [else (do_algebra (rest operand)\
    \ (rest operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? operator)\
    \ 0]\n    [(equal? (car operator) '+) (+ (car operand) (do_algebra (cdr operator)\
    \ (cdr operand)))]\n    [(equal? (car operator) '-) (- (car operand) (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '*') (* 2 (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '//') (/ 2 (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '**') (* 2 (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [else (error \"Unknown operator\")]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [(equal? (first\
    \ operator) '+) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '-) (- (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '*') (* (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '//') (/ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first\
    \ operator) '**') (exp (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (error \"Invalid operator\")]))\n", "  (cond\n    [(empty? operand)\
    \ (error \"Operand list is empty\")]\n    [(empty? (rest operand)) (error \"Operator\
    \ list is empty\")]\n    [else (cond\n            [(equal? (first operand) operator)\
    \ (+ (first operand) (second operand))]\n            [else (error \"Operator not\
    \ recognized\")]\n          )]\n  )\n)\n", "  (cond [(null? operand) 0]\n    \
    \    [(null? (cdr operand)) (+ (car operand) (do_algebra (car operator) (cdr operand)))]\n\
    \        [else (+ (do_algebra (car operator) (cdr operand)) (do_algebra (car operator)\
    \ (cdr operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n\
    \    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (- operand)]\n    [(equal? (first operator) '*) (* (first\
    \ operand) (second operand))]\n    [(equal? (first operator) '//) (/ operand 2)]\n\
    \    [(equal? (first operator) '**) (pow (first operand) (second operand))]\n\
    \    [else (+ operand \n            (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond [(null? operand) 0]\n        [(null? (cdr operand)) (+ 0 (do_algebra (car\
    \ operator) operand))]\n        [else (+ 0 (do_algebra (car operator) (cdr operand)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (sub1 (do_algebra (rest operator) operand))]\n    [(equal?\
    \ (first operator) '*) (* (do_algebra (rest operator) operand))]\n    [(equal?\
    \ (first operator) '//) (floor \n                                (do_algebra (rest\
    \ operator) operand))]\n    [(equal? (first operator) '**) (do_algebra (rest operator)\
    \ operand)]\n    [else (+ (do_algebra (rest operator) operand) (do_algebra (first\
    \ operator) (rest operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first operator)\
    \ '-) (do_algebra (rest operator) (- operand))]\n    [(equal? (first operator)\
    \ '+) (do_algebra (rest operator) (+ operand))]\n    [(equal? (first operator)\
    \ '*) (do_algebra (rest operator) (* operand))]\n    [(equal? (first operator)\
    \ '//) (do_algebra (rest operator) (// operand))]\n    [(equal? (first operator)\
    \ '**) (do_algebra (rest operator) (** operand))]\n    [else (error \"Unknown\
    \ operator\" operator)]\n  )\n)\n", "  (cond\n    [(empty? operand) 0]\n    [(empty?\
    \ operator) 0]\n    [(equal? (first operator) '+) (+ (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '-) (- (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first\
    \ operator) '*') (* (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '//') (floor (/ (first operand) (do_algebra (rest\
    \ operator) (rest operand))))]\n    [(equal? (first operator) '**') (exp (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [else (error \"\
    Invalid operator\")]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? operator)\
    \ 0]\n    [(equal? (first operator) '+) (+ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '-) (- (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '*') (* (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first\
    \ operator) '//') (/ 1 (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '**') (* 1 (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (error \"Invalid operator\")]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (car operand) operator) (+ (car operand)\
    \ (do_algebra (cdr operand) operand))]\n    [else (do_algebra (cdr operand) (cons\
    \ (car operand) (do_algebra operator operand)))]))\n", "  (cond [(null? operand)\
    \ 0]\n        [(null? (cdr operand)) (+ (car operand) (do_algebra (car operator)\
    \ (cdr operand)))]\n        [else (+ (do_algebra (car operator) (cdr operand))\
    \ (do_algebra (car operator) (cdr operand)))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) (error \"Operand list must\
    \ not be empty\")]\n    [(empty? (rest operand)) (error \"Operand list must not\
    \ be empty\")]\n    [else (cons (+ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))\n              (do_algebra (first operator) operand))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [(equal? (first\
    \ operator) '+) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '-) (- (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '*') (* (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '//') (/ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first\
    \ operator) '**') (exp (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (error \"Invalid operator\")]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [else (+ (do_algebra (first operator)\
    \ (first operand))\n            (do_algebra (first operator) (second operand)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (- operand)]\n    [(equal? (first operator) '+) (+ operand)]\n\
    \    [(equal? (first operator) '*) (* operand)]\n    [(equal? (first operator)\
    \ '//) (// operand)]\n    [(equal? (first operator) '**) (** operand)]\n    [else\
    \ (error \"Invalid operator\")]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [(equal? (first operator) '-) (do_algebra\
    \ (rest operator) (- operand))]\n    [(equal? (first operator) '+) (do_algebra\
    \ (rest operator) (+ operand))]\n    [(equal? (first operator) '*) (do_algebra\
    \ (rest operator) (* operand))]\n    [(equal? (first operator) '//) (do_algebra\
    \ (rest operator) (/ operand))]\n    [else (do_algebra (rest operator) (** operand\
    \ operand))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty? operand)\
    \ operand]\n    [(equal? (car operator) '+) (+ operand\n                     \
    \           (do_algebra (cdr operator) (cdr operand)))]\n    [(equal? (car operator)\
    \ '-) (- operand\n                                (do_algebra (cdr operator) (cdr\
    \ operand)))]\n    [(equal? (car operator) '*') (* operand\n                 \
    \               (do_algebra (cdr operator) (cdr operand)))]\n    [(equal? (car\
    \ operator) '//') (/ operand\n                                (do_algebra (cdr\
    \ operator) (cdr operand)))]\n    [(equal? (car operator) '**') (* operand\n \
    \                               (do_algebra (cdr operator) (cdr operand)))]\n\
    \    [else (error \"Unknown operator\")]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand))\n                                         (do_algebra (first operand)\
    \ operand))]\n    [else (do_algebra (first operand) operand)]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first operand)\
    \ (do_algebra (rest operand) (rest operand)))]\n    [else (do_algebra (rest operand)\
    \ (rest operand))]))\n", "  (cond [(null? operand) 0]\n        [(null? (cdr operand))\
    \ (+ (car operand) (do_algebra (car operator) (cdr operand)))]\n        [else\
    \ (+ (do_algebra (car operator) (cdr operand)) (do_algebra (car operator) (cdr\
    \ operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (first operand) (do_algebra (rest operand) (rest operand)))]\n\
    \    [else (do_algebra (rest operand) (rest operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra\
    \ (rest operand) (first operand))]\n    [else (do_algebra (rest operator) (first\
    \ operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand) (error\
    \ \"Invalid operand\")]\n    [(empty? operator) (error \"Invalid operator\")]\n\
    \    [else (cons (+ (first operand) (do_algebra (rest operator) (rest operand)))\n\
    \               (do_algebra (first operator) operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) (rest operand))]))\n",
  "  (cond\n    [(empty? operand) (error 'empty-operand)] \n    [(empty? operator)\
    \ (error 'empty-operator)] \n    [else (cons (+ (first operand) (do_algebra (rest\
    \ operator) (rest operand)))\n              (do_algebra (first operator) operand))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty? operand)\
    \ operand]\n    [(equal? (first operator) (first operand)) (do_algebra (rest operator)\
    \ (rest operand))]\n    [else (+ (do_algebra (first operator) (first operand))\
    \ (do_algebra (rest operator) (rest operand)))]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [else (+ (do_algebra (first operator)\
    \ (first operand))\n             (do_algebra (first operator) (second operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (car operand)\
    \ operator) (+ (car operand) (do_algebra (cdr operand) operand))]\n    [else (do_algebra\
    \ (cdr operand) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (first operand) (do_algebra (rest operand) (rest\
    \ operand)))]\n    [else (do_algebra (rest operand) (rest operand))]))\n", " \
    \ (cond [(null? operand) 0]\n        [(null? (cdr operand)) (+ 0 (do_algebra (car\
    \ operator) (car operand)))]\n        [else (+ 0 (do_algebra (car operator) (car\
    \ operand))\n                   (do_algebra (cdr operator) (cdr operand))))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [(equal? (first\
    \ operator) '-) (- 0 (first operand))]\n    [(equal? (first operator) '+) (+ (first\
    \ operand) (first operand))]\n    [(equal? (first operator) '*') (* 0 (first operand))]\n\
    \    [(equal? (first operator) '//') (/ 0 (first operand))]\n    [else (/ 0 (+\
    \ (first operand) (do_algebra (rest operator) (rest operand))))]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) (error \"Invalid operand\")] \n    [(empty? operator)\
    \ (error \"Invalid operator\")] \n    [else (cons (+ (car operand) (car operator))\
    \ (do_algebra (cdr operator) (cdr operand)))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? (rest operand)) (first operand)]\n    [else (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? operator)\
    \ 0]\n    [else (+ (do_algebra (first operator) (rest operand)) (do_algebra (first\
    \ operand) (rest operator)))]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [(equal? (first operator) '-) (do_algebra\
    \ (rest operator) (- operand 1))]\n    [(equal? (first operator) '+) (do_algebra\
    \ (rest operator) (+ operand 1))]\n    [(equal? (first operator) '*) (do_algebra\
    \ (rest operator) (* operand 1))]\n    [(equal? (first operator) '//) (do_algebra\
    \ (rest operator) (// operand 1))]\n    [(equal? (first operator) '**) (do_algebra\
    \ (rest operator) (** operand 1))]\n    [else (do_algebra (rest operator) (* operand\
    \ (first operator)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand))\n        \
    \                              (do_algebra (first operand) operand))]\n    [else\
    \ (do_algebra (first operand) operand)]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? (rest operand)) (+ (first operand) (do_algebra operator (rest\
    \ operand)))]\n    [else (+ (first operand) (do_algebra operator (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [(equal? (first\
    \ operator) '+) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '-) (- (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '*') (* 1 (do_algebra (rest\
    \ operator) (rest operand)))]\n    [(equal? (first operator) '//') (/ 1 (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '**') (* 1\
    \ (do_algebra (rest operator) (rest operand)))]\n    [else (error \"Unknown operator\"\
    )]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator)\
    \ (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra (rest\
    \ operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest\
    \ operand)) (+ (first operand) (do_algebra operator (rest operand)))]\n    [else\
    \ (+ (first operand) (do_algebra operator (rest operand)))]))\n", "  (cond\n \
    \   [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else (cons\
    \ (+ (first operand) (do_algebra (rest operator) (rest operand)))\n          \
    \      (do_algebra (first operator) operand))]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [(equal? (first operator) '-)\
    \ (do_algebra (rest operator) (first operand))]\n    [(equal? (first operator)\
    \ '*) (* (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '//) (floor ((* operand operand) (do_algebra (rest operator)\
    \ (rest operand))))]\n    [(equal? (first operator) '**) (do_algebra (rest operator)\
    \ (do_algebra (rest operator) (first operand)))]\n    [else (+ (do_algebra (rest\
    \ operator) (first operand)) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) (error \"operand list is empty\")]\n    [(empty?\
    \ operator) (error \"operator list is empty\")]\n    [else (cons (first operator)\
    \ (do_algebra (rest operator) (first operand)))]))\n", "  (cond\n    [(empty?\
    \ operand) (error \"Invalid operand\")] \n    [(empty? (rest operand)) (error\
    \ \"Invalid operator\")] \n    [(equal? (first operand) (first operator)) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (error \"Invalid operator\")]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (cons (+ (first operand) (do_algebra (rest operator) (first operand)))\n   \
    \            (do_algebra (rest operator) (rest operand)))]))\n", "  (cond\n  \
    \  [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first\
    \ operator) '-) (sub (first operand) (first operand))]\n    [(equal? (first operator)\
    \ '+) (+ (first operand) (first operand))]\n    [(equal? (first operator) '*')\
    \ (* operand)]\n    [(equal? (first operator) '//') (floor operand)]\n    [(equal?\
    \ (first operator) '**') (* operand operand)]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [(equal? (first operator) (first\
    \ operand)) (do_algebra (rest operator) (rest operand))]\n    [else (+ (do_algebra\
    \ (first operator) (first operand)) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (do_algebra (rest operand) (first operand))]\n\
    \    [else (+ (do_algebra (rest operand) (first operand)) (do_algebra (rest operand)\
    \ (first operand)))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty?\
    \ operand) operand]\n    [(equal? (first operator) '-) (- operand)]\n    [(equal?\
    \ (first operator) '*) (* (first operand) (second operand))]\n    [(equal? (first\
    \ operator) '//) (floor (/ (first operand) (second operand)))]\n    [(equal? (first\
    \ operator) '**) (pow (first operand) (second operand))]\n    [else (+ operand\n\
    \             (do_algebra (rest operator) (rest operand)))]))\n", "  (cond\n \
    \   [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) (error \"operand list is empty\")]\n    [(empty?\
    \ operator) (error \"operator list is empty\")]\n    [(equal? (first operator)\
    \ '+) (+ \n                                (do_algebra (rest operator) (rest operand))\n\
    \                                (first operand))]\n    [(equal? (first operator)\
    \ '-) (- \n                                (do_algebra (rest operator) (rest operand))\n\
    \                                (first operand))]\n    [(equal? (first operator)\
    \ '*') (*\n                                (do_algebra (rest operator) (rest operand))\n\
    \                                (first operand))]\n    [(equal? (first operator)\
    \ '//') (/ \n                                (do_algebra (rest operator) (rest\
    \ operand))\n                                (first operand))]\n    [(equal? (first\
    \ operator) '**') (* \n                                (do_algebra (rest operator)\
    \ (rest operand))\n                                (first operand))]\n    [else\
    \ (error \"unknown operator\")]))\n", "  (cond\n    [(empty? operand) 0]\n   \
    \ [(equal? (car operand) operator) (+ (car operand) (do_algebra (cdr operand)\
    \ operand))]\n    [else (do_algebra (cdr operand) operand)]))\n", "  (cond\n \
    \   [(empty? operand) 0]\n    [(empty? operator) 0]\n    [(equal? (first operator)\
    \ '+) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '*') (* (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '//') (floor (/ (first operand)\
    \ (do_algebra (rest operator) (rest operand))))]\n    [(equal? (first operator)\
    \ '**') (exp (first operand) (do_algebra (rest operator) (rest operand)))]\n \
    \   [else (error \"Unknown operator\")]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (do_algebra (rest operand) (first\
    \ operand))]\n    [else (do_algebra (rest operand) (first operand))]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty? operand)\
    \ (error '(operator operand \"operand\"))]\n    [else (cons (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))\n                (do_algebra (first\
    \ operator) operand))]))\n", "  (cond\n    [(empty? operator) (error \"Operator\
    \ list is empty.\")]\n    [(empty? operand) (error \"Operand list is empty.\"\
    )]\n    [(null? (rest operator)) (error \"Operator list is empty.\")]\n    [(null?\
    \ (rest operand)) (error \"Operand list is empty.\")]\n    [else (cons (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))\n              (do_algebra\
    \ (rest operator) (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (first operand) (do_algebra (rest operand)\
    \ (rest operand)))]\n    [else (do_algebra (rest operand) (rest operand))]))\n",
  "  (cond [(null? operand) 0]\n        [(null? (cdr operand)) (+ (car operand) (car\
    \ operand))]\n        [else (+ (do_algebra (car operand) (cdr operand)) (do_algebra\
    \ (car operator) (cdr operator)))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand))\n\
    \                                      (do_algebra (first operand) operand))]\n\
    \    [else (do_algebra (first operand) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [(equal? (car\
    \ operator) '+) (+ (car operand) (do_algebra (cdr operator) (cdr operand)))]\n\
    \    [(equal? (car operator) '-) (- (car operand) (do_algebra (cdr operator) (cdr\
    \ operand)))]\n    [(equal? (car operator) '*') (* 2 (do_algebra (cdr operator)\
    \ (cdr operand)))]\n    [(equal? (car operator) '//') (/ 2 (do_algebra (cdr operator)\
    \ (cdr operand)))]\n    [(equal? (car operator) '**') (* 2 (do_algebra (cdr operator)\
    \ (cdr operand)))]\n    [else (error \"Invalid operator\")]))\n", "  (cond\n \
    \   [(empty? operand) 0]\n    [(empty? operator) 0]\n    [else (+ (do_algebra\
    \ (first operator) operand) (do_algebra (rest operator) operand))]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first operator)\
    \ '-) (do_algebra (rest operator) (- operand))]\n    [(equal? (first operator)\
    \ '+) (do_algebra (rest operator) (+ operand))]\n    [(equal? (first operator)\
    \ '*) (do_algebra (rest operator) (* operand))]\n    [(equal? (first operator)\
    \ '//) (do_algebra (rest operator) (/ operand))]\n    [else (do_algebra (rest\
    \ operator) (* operand (first operator)))]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) (error 'do_algebra \"operand list is empty\"\
    )]\n    [else (cons (+ (car operand) (do_algebra (cdr operator) (cdr operand)))\n\
    \               (do_algebra (cdr operator) operand))]\n  ))\n", "  (cond\n   \
    \ [(empty? operand) 0]\n    [(empty? operator) 0]\n    [(equal? (first operator)\
    \ '+) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '*') (* (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '//') (/ (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '**') (exp\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n    [else (error\
    \ \"Invalid operator\")]))\n", "  (cond [(null? operand) 0]\n        [(null? (cdr\
    \ operand)) (+ (car operand) (do_algebra (car operator) (cdr operand)))]\n   \
    \     [else (+ (do_algebra (car operator) (cdr operand)) (do_algebra (car operator)\
    \ (cdr operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (+ (do_algebra (first operator) (first operand))\n             (do_algebra (first\
    \ operator) (second operand)))]))\n", "  (cond\n    [(empty? operator) (error\
    \ '(operator operand empty))\n     (cond\n       [(empty? operand) (error '(operator\
    \ operand empty))\n        (cond\n         [(equal? (first operator) '+) (+ operand)\n\
    \          (cond\n            [(empty? operand) (error '(operator operand empty))\n\
    \             (cond\n              [(equal? (first operand) '+) (+ operand)\n\
    \               (cond\n                 [(equal? (first operand) '*) (* operand)\n\
    \                   (cond\n                     [(equal? (first operand) '//)\
    \ (/ operand)\n                      (cond\n                         [(equal?\
    \ (first operand) '**) (* operand)\n                          (error '(operator\
    \ operand empty))\n                          (error '(operator operand empty))\n\
    \                          (error '(operator operand empty))\n               \
    \           (error '(operator operand empty))\n                          (error\
    \ '(operator operand empty))\n                          (error '(operator operand\
    \ empty))\n                          (error '(operator operand empty))\n     \
    \                     (error '(operator operand empty))\n                    \
    \      (error '(operator operand empty))\n                          (error '(operator\
    \ operand empty))\n                          (error '(operator operand empty))\n\
    \                          (error '(operator operand empty))\n               \
    \           (error '(operator operand empty))\n                          (error\
    \ '(operator operand empty))\n                          (error '(operator operand\
    \ empty))\n                          (error '(operator operand empty))\n     \
    \                     (error '(operator operand empty))\n                    \
    \      (error '(operator operand empty))\n                          (error '(operator\
    \ operand empty))\n                          (error '(operator operand empty))\n\
    \                          (error '(operator operand empty))\n               \
    \           (error '(operator operand empty))\n                          (error\
    \ '(operator operand empty))\n                          (error '(operator operand\
    \ empty))\n                          (error '(operator operand empty))\n     \
    \                     (error '(operator operand empty))\n                    \
    \      (error '(operator operand empty))\n                          (error '(operator\
    \ operand empty))\n                          (error '(operator operand empty))\n\
    \                          (error '(operator operand empty))\n               \
    \           (error '(operator operand empty))\n                          (error\
    \ '(operator operand empty))\n                          (error '(operator operand\
    \ empty))\n                          (error '(operator operand empty))\n     \
    \                     (error '(operator operand empty))\n                    \
    \      (error '(operator operand empty))\n                          (error '(operator\
    \ operand empty))\n                          (error '(", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(empty? (rest operand)) (first operand)]\n    [else (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]))\n", "  (cond [(null?\
    \ operand) 0]\n        [(null? (cdr operand)) (+ (car operand) (car operand))]\n\
    \        [else (+ (do_algebra (car operator) (cdr operand)) (do_algebra (car operator)\
    \ (cdr operand)))]))\n", "  (cond\n    [(empty? operand) (error \"operand list\
    \ is empty\")]\n    [(empty? operator) (error \"operator list is empty\")]\n \
    \   [else (cons (+ (first operand) (do_algebra (rest operator) (rest operand)))\n\
    \              (do_algebra (rest operator) operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (do_algebra (rest operand)\
    \ (first operand))]\n    [else (do_algebra (rest operand) (first operand))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) (error \"Operand list cannot\
    \ be empty\")]\n    [(empty? operator) (error \"Operator list cannot be empty\"\
    )]\n    [(equal? (first operator) '+) (+ \n                                (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '-) (- \n \
    \                               (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '*') (* \n                                (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '//') (/ \n\
    \                                (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '**') (* \n                                (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (error \"Unknown operator\")]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [else (+ (do_algebra\
    \ (first operator) (first operand))\n             (do_algebra (first operator)\
    \ (second operand)))]))\n", "  (cond\n    [(empty? operand) (error \"Operand list\
    \ must have at least one operand.\")]\n    [(empty? operator) (error \"Operator\
    \ list must have at least one operator.\")]\n    [else (cons (first operator)\
    \ (do_algebra (rest operator) (first operand)))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(empty? (rest operand)) (first operand)]\n    [else (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) (error \"Operand list is empty\")]\n    [(empty?\
    \ operator) (error \"Operator list is empty\")]\n    [(null? (first operator))\
    \ (error \"Operator list is empty\")]\n    [(null? (first operand)) (error \"\
    Operand list is empty\")]\n    [else (cons (+ (first operand) (first operator)\
    \ (do_algebra (rest operator) (rest operand)))\n               (do_algebra (rest\
    \ operator) (rest operand)))]))\n", "  (cond [(null? operand) 0]\n        [(null?\
    \ (cdr operand)) (+ (car operand) (do_algebra (car operator) (cdr operand)))]\n\
    \        [else (+ (do_algebra (car operator) (cdr operand)) (do_algebra (car operator)\
    \ (cdr operand)))]))\n", "  (cond\n    [(empty? operand) (error \"Invalid operand\"\
    )]\n    [(empty? operator) (error \"Invalid operator\")]\n    [else (cons (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))\n              (do_algebra\
    \ (first operator) operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty?\
    \ (rest operand)) (first operand)]\n    [else (+ (first operand) (do_algebra (rest\
    \ operator) (rest operand)))]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [(equal? (first operator) '-) (do_algebra\
    \ (rest operator) (first operand))]\n    [(equal? (first operator) '*) (* (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first\
    \ operator) '//) (floor ((* operand operand) (do_algebra (rest operator) (rest\
    \ operand))))]\n    [(equal? (first operator) '**) (do_algebra (rest operator)\
    \ (do_algebra (rest operator) (first operand)))]\n    [else (+ (do_algebra (rest\
    \ operator) (first operand)) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (car operand) operator) (+ (car\
    \ operand) (do_algebra (cdr operand) operand))]\n    [else (do_algebra (cdr operand)\
    \ operand)]))\n", "  (cond\n    [(empty? operand) (error \"operand list is empty\"\
    )]\n    [(empty? operator) (error \"operator list is empty\")]\n    [(equal? (first\
    \ operator) '+) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '-) (- (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '*') (* (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '//') (floor\
    \ (/ (first operand) (do_algebra (rest operator) (rest operand))))]\n    [(equal?\
    \ (first operator) '**') (exp (first operand) (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (error \"unknown operator\")]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) (rest operand))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) (error \"Operand list is empty.\")]\n    [(empty?\
    \ operator) (error \"Operator list is empty.\")]\n    [else (let ([op1 (car operator)]\n\
    \               [op2 (car operand)])\n           (cond\n             [(equal?\
    \ op1 op2) (+ op1 op2)]\n             [(equal? op1 '+) (+ op1 op2)]\n        \
    \     [(equal? op1 '-) (- op1 op2)]\n             [(equal? op1 '*) (* op1 op2)]\n\
    \             [(equal? op1 '//) (// op1 op2)]\n             [(equal? op1 '**)\
    \ (** op1 op2)]))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty?\
    \ operand) operand]\n    [(equal? (car operator) '+) (+ (car operand) (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '-) (- (car operand)\
    \ (do_algebra (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '*')\
    \ (* 2 (do_algebra (cdr operator) (cdr operand)))]\n    [(equal? (car operator)\
    \ '//') (/ 2 (do_algebra (cdr operator) (cdr operand)))]\n    [(equal? (car operator)\
    \ '**') (* 2 (do_algebra (cdr operator) (cdr operand)))]\n    [else (error \"\
    Unknown operator\")]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [(equal? (first operator) '-)\
    \ (sub1 (do_algebra (rest operator) operand))]\n    [(equal? (first operator)\
    \ '+) (+ (do_algebra (rest operator) operand))]\n    [(equal? (first operator)\
    \ '*') (* do_algebra (rest operator) operand)]\n    [(equal? (first operator)\
    \ '//') (/ do_algebra (rest operator) operand)]\n    [(equal? (first operator)\
    \ '**') (* do_algebra (rest operator) operand)]\n    [else (error \"Unknown operator\"\
    \ operator)]\n  )\n)\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand))\n        \
    \                              (do_algebra (first operand) operand))]\n    [else\
    \ (do_algebra (first operand) operand)]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) (rest operand))]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (car operand) operator) (do_algebra\
    \ (cdr operand) (+ 1 operand))]\n    [else (do_algebra (cdr operand) (* operand\
    \ (car operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (car\
    \ operand) operator) (+ (car operand) (do_algebra (cdr operand) operand))]\n \
    \   [else (do_algebra (cdr operand) operand)]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) (error \"operand list is empty\"\
    )]\n    [(empty? operator) (error \"operator list is empty\")]\n    [else (cons\
    \ (+ (first operand) (do_algebra (rest operator) (rest operand)))\n          \
    \    (do_algebra (rest operator) (first operand)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
