name: HumanEval_160_do_algebra
language: rkt
prompt: "#lang racket\n\n;; Given two lists operator, and operand. The first list\
  \ has basic algebra operations, and \n;; the second list is a list of integers.\
  \ Use the two given lists to build the algebric \n;; expression and return the evaluation\
  \ of this expression.\n;; The basic algebra operations:\n;; Addition ( + ) \n;;\
  \ Subtraction ( - ) \n;; Multiplication ( * ) \n;; Floor division ( // ) \n;; Exponentiation\
  \ ( ** ) \n;; Example:\n;; operator['+', '*', '-']\n;; array = [2, 3, 4, 5]\n;;\
  \ result = 2 + 3 * 4 - 5\n;; => result = 9\n;; Note:\n;; The length of operator\
  \ list is equal to the length of operand list minus one.\n;; Operand is a list of\
  \ of non-negative integers.\n;; Operator list has at least one operator, and operand\
  \ list has at least two operands.\n(define (do_algebra operator operand)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n\
  \    (check-equal? (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37)\n  \
  \  (check-equal? (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9)\n    (check-equal?\
  \ (candidate (list \"//\" \"*\") (list 7 3 4)) 8)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? operand) (error \"Operand list is empty.\")]\n\
    \    [(empty? operator) (error \"Operator list is empty.\")]\n    [(null? (rest\
    \ operator)) (error \"Operator list is empty.\")]\n    [else (cond\n         \
    \ [(equal? (first operator) '+) (+ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n          [(equal? (first operator) '-) (- (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n          [(equal? (first operator)\
    \ '*') (* (first operand) (do_algebra (rest operator) (rest operand)))]\n    \
    \      [(equal? (first operator) '//') (floor (/ (first operand) (do_algebra (rest\
    \ operator) (rest operand))))]\n          [(equal? (first operator) '**') (exp\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n          [else\
    \ (error \"Unknown operator.\")])]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [else (+ (do_algebra (first operator) (first\
    \ operand))\n            (do_algebra (first operator) (second operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (do_algebra (rest operator) (sub1 operand))]\n    [(equal?\
    \ (first operator) '+) (do_algebra (rest operator) (sub1 operand))]\n    [(equal?\
    \ (first operator) '*) (do_algebra (rest operator) (sub1 operand))]\n    [(equal?\
    \ (first operator) '//) (do_algebra (rest operator) (sub1 operand))]\n    [else\
    \ (do_algebra (rest operator) (cons (first operand) (do_algebra (rest operator)\
    \ (sub1 operand))))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? operator) 0]\n    [(equal? (first operator) '+) (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first operator)\
    \ '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '*') (* (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '//') (floor (/ (first operand) (do_algebra (rest\
    \ operator) (rest operand))))]\n    [(equal? (first operator) '**') (exp (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [else (error \"\
    Unknown operator\")]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (do_algebra (rest operand) (first operand))]\n    [else (+\
    \ (do_algebra (rest operand) (first operand)) (do_algebra (rest operand) (first\
    \ operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) (error '(error \"Invalid operand\"\
    ))]\n    [else (cons (+ (first operand) (do_algebra (rest operator) (rest operand)))\n\
    \               (do_algebra (first operator) operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(empty? (rest operand)) (+ (first operand) (do_algebra (first\
    \ operand) (rest operand)))]\n    [else (+ (first operand) (do_algebra (first\
    \ operand) (rest operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [else (cons (+ (first\
    \ operand) (do_algebra (rest operator) (first operand)))\n                (do_algebra\
    \ (first operator) (second operand)))]))\n", "  (cond\n    [(empty? operand) (error\
    \ \"Invalid operand\")]\n    [(empty? operator) (error \"Invalid operator\")]\n\
    \    [(null? (rest operator)) (error \"Invalid operator\")]\n    [(null? (rest\
    \ operand)) (error \"Invalid operand\")]\n    [else (cons (+ (first operand) (do_algebra\
    \ (rest operator) (rest operand)))\n              (do_algebra (rest operator)\
    \ (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest\
    \ operand)) (+ (first operand) (do_algebra (first operand) (rest operand)))]\n\
    \    [else (+ (first operand) (do_algebra (first operand) (rest operand)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
