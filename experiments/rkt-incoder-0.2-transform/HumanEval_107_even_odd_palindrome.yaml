name: HumanEval_107_even_odd_palindrome
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, return a tuple that has the\
  \ number of even and odd\n;; integer palindromes that fall within the range(1, n),\
  \ inclusive.\n;; Example 1:\n;; >>> (even_odd_palindrome 3)\n;; (list 1 2)\n;; Explanation:\n\
  ;; Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
  ;; Example 2:\n;; >>> (even_odd_palindrome 12)\n;; (list 4 6)\n;; Explanation:\n\
  ;; Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
  \ and 6 of them are odd.\n;; Note:\n;; 1. 1 <= n <= 10^3\n;; 2. returned tuple has\
  \ the number of even and odd integer palindromes respectively.\n(define (even_odd_palindrome\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_palindrome))\n\
  \    (check-equal? (candidate 123) (list 8 13))\n    (check-equal? (candidate 12)\
  \ (list 4 6))\n    (check-equal? (candidate 3) (list 1 2))\n    (check-equal? (candidate\
  \ 63) (list 6 8))\n    (check-equal? (candidate 25) (list 5 6))\n    (check-equal?\
  \ (candidate 19) (list 4 6))\n    (check-equal? (candidate 9) (list 4 5))\n    (check-equal?\
  \ (candidate 1) (list 0 1))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< n 1) '()]\n    [(= n 1) '()]\n    [(= (mod n 2) 0)\
    \ (cons n (even_odd_palindrome (/ n 2)))]\n    [else (cons (- n 1) (even_odd_palindrome\
    \ (/ n 2)))]))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(even? (remainder n\
    \ 2)) (cons (+ n 1) (even_odd_palindrome (remainder n 2)))]\n    [(odd? (remainder\
    \ n 2)) (cons (+ n 1) (even_odd_palindrome (remainder n 2)))]\n    [else (even_odd_palindrome\
    \ (remainder n 2))]))\n", "  (cond\n    [(< n 1) (error \"n should be positive\"\
    )]\n    [(= n 0) (list 0)]\n    [else (let ([even (even_odd_palindrome-helper\
    \ 1 n)]\n               [odd (even_odd_palindrome-helper 2 n)])\n           (append\
    \ even (list 1)))]))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(odd? n) (list\
    \ n)]\n    [else (even_palindrome n (- n 1))]))\n", "  (cond\n    [(= n 1) (list\
    \ 1)]\n    [(even? (modulo n 2)) (list 1)]\n    [(odd? (modulo n 2)) (list 2)]\n\
    \    [else (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n\
    \ 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1))\
    \ (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1)) (cons\
    \ (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome\
    \ (- n 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n\
    \ 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1))\
    \ (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1)) (cons\
    \ (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome\
    \ (- n 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n\
    \ 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1))\
    \ (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1)) (cons\
    \ (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome\
    \ (- n 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n\
    \ 1)) (cons (even_odd_palindrome (- n 1)) (cons (even_odd_palindrome (- n 1))\
    \ (cons (even_odd_palin", "  (cond\n    [(< n 1) '()]\n    [(= n 1) '()]\n   \
    \ [else (cons (- n (even-palindrome n)) (odd-palindrome n))]\n  ))\n", "  (cond\n\
    \    [(= n 1) '()]\n    [(odd? n) (cons (- n 1) (even_odd_palindrome (- n 1)))]\n\
    \    [(even? n) (cons (- n 1) (even_odd_palindrome (- n 1)))]\n    [else (even_odd_palindrome\
    \ (- n 1))]))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(even? (- n 1))\n   \
    \  (cons (- n 1) (even_odd_palindrome (- n 1)))]\n    [(odd? (- n 1))\n     (cons\
    \ (- n 1) (even_odd_palindrome (- n 1)))]\n    [else (even_odd_palindrome (- n\
    \ 1))]))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(even? (remainder n 2)) (cons\
    \ (- n 2) (even_odd_palindrome (- n 2)))]\n    [(odd? (remainder n 2)) (cons (-\
    \ n 2) (even_odd_palindrome (- n 2)))]\n    [else (even_odd_palindrome (- n 1))]))\n",
  "  (cond\n    [(< n 1) '()]\n    [(= n 1) '()]\n    [(= (mod n 2) 0) (list n)]\n\
    \    [else (cons (- n 1) (even_odd_palindrome (- n 1)))]))\n", "  (cond\n    [(=\
    \ n 1) '()]\n    [(even? (- n 1))\n     (cons (- n 1) (even_odd_palindrome (-\
    \ n 1)))]\n    [(odd? (- n 1))\n     (cons (- n 1) (even_odd_palindrome (- n 1)))]\n\
    \    [else (even_odd_palindrome (- n 1))]))\n", "  (cond\n    [(= n 1) '()]\n\
    \    [(even? (- n 1)) '(1 2)]\n    [(odd? (- n 1)) '(2 1)]\n    [else (even_odd_palindrome\
    \ (- n 1))]))\n", "  (let loop ((n n) (even 0) odd 0)\n    (if (< n 0)\n     \
    \   (list even odd)\n        (loop (- n 1) (+ even 1) (+ odd 1)))))\n", "  (cond\n\
    \    [(= n 1) (list 1)]\n    [(even? (- n 1)) (cons (- n 1) (even_odd_palindrome\
    \ (- n 1)))]\n    [(odd? (- n 1)) (cons (- n 1) (even_odd_palindrome (- n 1)))]\n\
    \    [else (cons (- n 1) (even_odd_palindrome (- n 1)))]))\n", "  (cond\n    [(<\
    \ n 1) '()]\n    [(= n 1) '()]\n    [(= (mod n 2) 0) (cons n '())]\n    [else\
    \ (cons (- n 1) (even_odd_palindrome (- n 1)))]))\n", "  (cond\n    [(= n 1) '()]\n\
    \    [(even? n) (cons (- n 1) (even_odd_palindrome (- n 1)))]\n    [(odd? n) (cons\
    \ (- n 1) (even_odd_palindrome (- n 1)))]\n    [else (even_odd_palindrome (- n\
    \ 1))]))\n", "  (let loop ((n n) (even 0) (odd 0))\n    (cond ((= n 0) (list even\
    \ odd))\n          ((even? (mod n 2)) (loop (/ n 2) (+ even 1) (+ odd 1)))\n \
    \         (odd? (mod n 2)) (loop (/ n 2) (+ even 1) (+ odd 1)))\n          (else\
    \ (loop (/ n 2) 0 0)))))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list\
    \ 2)]\n    [(= n 3) (list 3)]\n    [else (cons (- n 1)\n                (even_odd_palindrome\
    \ (- n 1)))]))\n", "  (cond\n    [(< n 1) (list 0 1)]\n    [(even? (remainder\
    \ n 2)) (list 1 (+ 1 even?))]\n    [else (list 1 (+ 1 odd?))]))\n", "  (cond\n\
    \    [(= n 1) '()]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4)\
    \ '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(=\
    \ n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2\
    \ 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2\
    \ 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [else\
    \ (even_odd_palindrome(- n 1))\n      (cons (- n 1)\n            (even_odd_palindrome(-\
    \ n 2)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
