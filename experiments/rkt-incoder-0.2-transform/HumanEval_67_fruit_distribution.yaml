name: HumanEval_67_fruit_distribution
language: rkt
prompt: "#lang racket\n\n;; In this task, you will be given a string that represents\
  \ a number of apples and oranges \n;; that are distributed in a basket of fruit\
  \ this basket contains \n;; apples, oranges, and mango fruits. Given the string\
  \ that represents the total number of \n;; the oranges and apples and an integer\
  \ that represent the total number of the fruits \n;; in the basket return the number\
  \ of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution\
  \ \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and\
  \ 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n\
  ;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19\n(define\
  \ (fruit_distribution s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fruit_distribution))\n\
  \    (check-equal? (candidate \"5 apples and 6 oranges\" 19) 8)\n    (check-equal?\
  \ (candidate \"5 apples and 6 oranges\" 21) 10)\n    (check-equal? (candidate \"\
  0 apples and 1 oranges\" 3) 2)\n    (check-equal? (candidate \"1 apples and 0 oranges\"\
  \ 3) 2)\n    (check-equal? (candidate \"2 apples and 3 oranges\" 100) 95)\n    (check-equal?\
  \ (candidate \"2 apples and 3 oranges\" 5) 0)\n    (check-equal? (candidate \"1\
  \ apples and 100 oranges\" 120) 19)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n \
    \    (+ (fruit_distribution (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\"\
    )\n     (+ (fruit_distribution (rest s) n) (* n 2))]\n    [(equal? (first s) \"\
    mango\")\n     (+ (fruit_distribution (rest s) n) (* n 1))]\n    [else (error\
    \ \"unknown fruit\")]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first\
    \ s) \"apples\")\n     (+ (fruit_distribution (rest s) n) (* n 2))]\n    [(equal?\
    \ (first s) \"oranges\")\n     (+ (fruit_distribution (rest s) n) (* n 1))]\n\
    \    [else\n     (fruit_distribution (rest s) n)]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution (rest\
    \ s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"unknown fruit\")]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [else (+ (fruit_distribution (rest s) n) (* n 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"unknown fruit\")]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"unknown fruit\")]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"unknown fruit\")]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"unknown fruit\")]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [else\n     (+ (fruit_distribution (rest s) n) (*\
    \ n 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) \"apples\"\
    )\n     (+ (fruit_distribution (rest s) n) (* n 2))]\n    [(equal? (first s) \"\
    oranges\")\n     (+ (fruit_distribution (rest s) n) (* n 1))]\n    [(equal? (first\
    \ s) \"mango\")\n     (+ (fruit_distribution (rest s) n) (* n 3))]\n    [else\
    \ (+ (fruit_distribution (rest s) n) (* n 0))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution (rest s)\
    \ n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"invalid input\")]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (+ (fruit_distribution (rest s) n) (* n 0))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"unknown fruit\")]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else 0]))\n", "  (cond\n    [(empty? s) 0]\n   \
    \ [(equal? (first s) \"apples\")\n     (+ (fruit_distribution (rest s) n) (* n\
    \ 2))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution (rest\
    \ s) n) (* n 1))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [else (+ (fruit_distribution (rest s) n) (* n 0))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"invalid input\")]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"unknown fruit\")]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apples\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 3))]\n    [(equal? (first s) \"oranges\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 2))]\n    [(equal? (first s) \"mango\")\n     (+ (fruit_distribution\
    \ (rest s) n) (* n 1))]\n    [else (error \"Invalid input\")]))\n", "  (let loop\
    \ ((i 0) (sum 0) (count 0))\n    (cond ((= i n) (+ count sum))\n          ((=\
    \ (length s) 0) (loop (+ i 1) sum count))\n          ((= (length s) 1) (loop (+\
    \ i 1) (+ (first s) (first s)) (+ count 1)))\n          ((= (length s) 2) (loop\
    \ (+ i 1) (+ (first s) (first s)) (+ count (+ count 1)))\n          ((= (length\
    \ s) 3) (loop (+ i 1) (+ (first s) (first s)) (+ count (+ count (+ count 1)))))\n\
    \          ((= (length s) 4) (loop (+ i 1) (+ (first s) (first s)) (+ count (+\
    \ count (+ count (+ count 1))))))\n          ((= (length s) 5) (loop (+ i 1) (+\
    \ (first s) (first s)) (+ count (+ count (+ count (+ count (+ count 1))))))))\n\
    \  count))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) \"apples\"\
    )\n     (+ (fruit_distribution (rest s) n) (* n 3))]\n    [(equal? (first s) \"\
    oranges\")\n     (+ (fruit_distribution (rest s) n) (* n 2))]\n    [(equal? (first\
    \ s) \"mango\")\n     (+ (fruit_distribution (rest s) n) (* n 1))]\n    [else\
    \ (error \"unknown fruit\")]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
