name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n;; >>> (rolling_max\
  \ (list 1 2 3 2 3 4 2))\n;; (list 1 2 3 3 3 4 4)\n(define (rolling_max numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            (cons\
    \ max roll)\n            (if (> max roll)\n                (cons max roll)\n \
    \               (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n   \
    \   '()\n      (let ((max (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (null? tail)\n            (list max)\n            (let ((max (max\
    \ max tail)))\n              (if (null? tail)\n                  (list max)\n\
    \                  (let ((max (max max tail)))\n                    (if (null?\
    \ tail)\n                        (list max)\n                        (let ((max\
    \ (max max tail)))\n                          (if (null? tail)\n             \
    \                 (list max)\n                              (let ((max (max max\
    \ tail)))\n                                (if (null? tail)\n                \
    \                    (list max)\n                                    (let ((max\
    \ (max max tail)))\n                                      (if (null? tail)\n \
    \                                         (list max)\n                       \
    \                   (let ((max (max max tail)))\n                            \
    \                (if (null? tail)\n                                          \
    \      (list max)\n                                                (let ((max\
    \ (max max tail)))\n                                                  (if (null?\
    \ tail)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max tail)))\n\
    \                                                        (if (null? tail)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max tail)))\n\
    \                                                              (if (null? tail)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max tail)))\n                                                         \
    \           (if (null? tail)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max tail)))\n              \
    \                                                            (if (null? tail)\n\
    \                                                                            \
    \  (list max)\n                                                              \
    \                (let ((max (max max tail)))\n                               \
    \                                                 (if (null? tail)\n         \
    \                                                                           (list\
    \ max)\n                                                                     \
    \               (let ((max (max max tail)))\n                                \
    \                                                      (if (null? tail)\n    \
    \                                                                            \
    \          (list max)\n                                                      \
    \                                    (let ((max (max max tail)))\n           \
    \                                                                            \
    \     (if (null? tail)\n                                                     \
    \                                           (list max)\n                     \
    \                                                                           (let\
    \ ((max (max max tail)))\n                                                   \
    \                                               (if (null? tail)\n           \
    \                                                                            \
    \               (list max)\n                                                 \
    \                                                     (let ((max (max max tail)))\n\
    \                                                                            \
    \                            (if (null? tail)\n                              \
    \                                                                            \
    \  (list max)\n                                                              \
    \                                              (let ((max (max max tail)))\n \
    \                                                                            \
    \                                 (if (null? tail)\n                         \
    \                                                                            \
    \             (list max)\n                                                   \
    \                                                               (let ((max (max\
    \ max tail)))\n                                                              \
    \                                                      (if (null? tail)\n    \
    \                                                                            \
    \                                        (list max)\n                        \
    \                                                                            \
    \                    (let ((max (max max tail)))\n                           \
    \                                                                            \
    \                   (if (null? tail)\n                                       \
    \                         ", "  (let loop ((numbers numbers)\n             (max\
    \ 0))\n    (if (null? numbers)\n        (list max)\n        (let ((n (car numbers))\n\
    \              (m (cadr numbers)))\n          (if (> n max)\n              (loop\
    \ (cdr numbers) max)\n              (loop (cdr numbers) (max n (max m max))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far (car numbers))\n    \
    \        (max-so-far-index (cdr numbers)))\n        (if (= max-so-far max-so-far-index)\n\
    \            (cons max-so-far numbers)\n            (cons (rolling_max (cdr numbers))\
    \ (cons max-so-far numbers))))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (let ((max-so-far numbers))\n        (if (null? (cdr numbers))\n           \
    \ (cons max-so-far numbers)\n            (let ((next (rolling_max (cdr numbers))))\n\
    \              (if (> (car max-so-far) (car next))\n                  (cons max-so-far\
    \ next)\n                  (cons (car max-so-far) next)))))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThanks for your answer. I'm still trying to understand how it works.\
    \ I understand that `(rolling_max (list 1 2 3 2 3 4 2))` should return `(list\
    \ 1 2 3 3 3 4 4)` but I don't understand how it works. Could you please explain\
    \ it a little bit more?\n<|/ c |>\n<| c |>\nThe first thing we do is `if (null?\
    \ numbers)` which returns `#f` if the list is empty. `max-so-far` is `numbers`,\
    \ so `(rolling_max (cdr numbers))` will return the rest of the list `(cdr numbers)`\
    \ which is `'(2 3 2 3 4 2)`. `next` is `(rolling_max (cdr numbers))` which returns\
    \ `(list 2 3 2 3 4 2)`. `if (> (car max-so-far) (car next))` will check if `max-so-far`\
    \ is greater than `next` which is `#t`. `max-so-far` is `max-so-far` so `(cons\
    \ max-so-far next)` will add `max-so-far` and `next` together and `max-so-far`\
    \ will be `(list 1 2 3 3 3 4 4)`. `next` is `(rolling_max (cdr numbers))` which\
    \ returns `(list 3 2 3 4 2)`. `if (> (car max-so-far) (car next))` will check\
    \ if `max-so-far` is greater than `next` which is `#f`. `max-so-far` is `max-so-far`\
    \ so `(cons max-so-far next)` will add `max-so-far` and `next` together and `max-so-far`\
    \ will be `(list 1 2 3 3 3 4 4)`. `next` is `(rolling_max (cdr numbers))` which\
    \ returns `(list 3 2 3 4 2)`. `if (> (car max-so-far) (car next))` will check\
    \ if `max-so-far` is greater than `next` which is `#t", "  (let loop ((numbers\
    \ numbers)\n             (max 0))\n    (if (null? numbers)\n        (list max)\n\
    \        (let ((n (car numbers))\n              (m (max n (car numbers))))\n \
    \         (loop (cdr numbers)\n                (m)))))\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=racket,scheme |>\n<code>", "  (cond [(empty? numbers) empty]\n\
    \        [(> (first numbers) (first rest)) (rolling_max (rest numbers))]\n   \
    \     [else (cons (first numbers) (rolling_max (rest numbers))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null?\
    \ (cdr numbers))\n            (list max)\n            (append (list (max max))\n\
    \                    (rolling_max (cdr numbers)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max roll)\n            (let ((max\
    \ (car roll))\n                  (roll (cdr roll)))\n              (if (> (car\
    \ roll) max)\n                  (cons max roll)\n                  (rolling_max\
    \ (cons max (cdr roll))))))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (tail (cdr numbers)))\n        (if (null?\
    \ tail)\n            (list max)\n            (let ((max (max max tail)))\n   \
    \           (if (null? tail)\n                  (list max)\n                 \
    \ (let ((max (max max tail)))\n                    (if (null? tail)\n        \
    \                (list max)\n                        (let ((max (max max tail)))\n\
    \                          (if (null? tail)\n                              (list\
    \ max)\n                              (let ((max (max max tail)))\n          \
    \                      (if (null? tail)\n                                    (list\
    \ max)\n                                    (let ((max (max max tail)))\n    \
    \                                  (if (null? tail)\n                        \
    \                  (list max)\n                                          (let\
    \ ((max (max max tail)))\n                                            (if (null?\
    \ tail)\n                                                (list max)\n        \
    \                                        (let ((max (max max tail)))\n       \
    \                                           (if (null? tail)\n               \
    \                                       (list max)\n                         \
    \                             (let ((max (max max tail)))\n                  \
    \                                      (if (null? tail)\n                    \
    \                                        (list max)\n                        \
    \                                    (let ((max (max max tail)))\n           \
    \                                                   (if (null? tail)\n       \
    \                                                           (list max)\n     \
    \                                                             (let ((max (max\
    \ max tail)))\n                                                              \
    \      (if (null? tail)\n                                                    \
    \                    (list max)\n                                            \
    \                            (let ((max (max max tail)))\n                   \
    \                                       (if (null? tail)\n                   \
    \                                           (list max)\n                     \
    \                                         (let ((max (max max tail)))\n      \
    \                                                          (if (null? tail)\n\
    \                                                                    (list max)\n\
    \                                                                    (let ((max\
    \ (max max tail)))\n                                                         \
    \             (if (null? tail)\n                                             \
    \                             (list max)\n                                   \
    \                                       (let ((max (max max tail)))\n        \
    \                                                                    (if (null?\
    \ tail)\n                                                                    \
    \            (list max)\n                                                    \
    \                            (let ((max (max max tail)))\n                   \
    \                                                               (if (null? tail)\n\
    \                                                                            \
    \          (list max)\n                                                      \
    \                                (let ((max (max max tail)))\n               \
    \                                                                         (if\
    \ (null? tail)\n                                                             \
    \                               (list max)\n                                 \
    \                                                           (let ((max (max max\
    \ tail)))\n                                                                  \
    \                            (if (null? tail)\n                              \
    \                                                                    (list max)\n\
    \                                                                            \
    \                      (let ((max (max max tail)))\n                         \
    \                                                                           (if\
    \ (null? tail)\n                                                             \
    \                                           (list max)\n                     \
    \                                                                            \
    \       (let ((max (max max tail)))\n                                        \
    \                                                                  (if (null?\
    \ tail)\n                                                                    \
    \                                          (list max)\n                      \
    \                                          ", "  (cond [(empty? numbers) '()]\n\
    \        [(> (first numbers) (first numbers)) (rolling_max (rest numbers))]\n\
    \        [else (cons (first numbers) (rolling_max (rest numbers)))]))\n", "  (let\
    \ loop ((numbers numbers)\n             (result '()))\n    (cond ((null? numbers)\
    \ result)\n          ((null? (rest numbers)) result)\n          ((< (car numbers)\
    \ (max result))\n           (loop (rest numbers)\n                 (cons (car\
    \ numbers) result)))\n          (else (loop (rest numbers)\n                 \
    \      (cons (car numbers) result))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling (list max)))\n        (if\
    \ (null? (cdr numbers))\n            (cons max rolling)\n            (let ((next\
    \ (rolling_max (cdr numbers))))\n              (if (> (car next) max)\n      \
    \            (cons max rolling)\n                  (cons (car next) rolling)))))\n\
    \  )\n)\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (rolling_max (cdr numbers))\n            (rolling_max_list (cons\
    \ max rolling_max_list))))))\n", "  (let loop ((numbers numbers)\n           \
    \  (max #f)\n             (max-list '()))\n    (cond\n      [(empty? numbers)\
    \ (list max)]\n      [(>= (first numbers) max) (loop (rest numbers) max max-list)]\n\
    \      [else (loop (rest numbers) (first numbers) (cons max max-list))]))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (if (> (first numbers)\
    \ max)\n                  (first numbers)\n                  max)))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (roll\
    \ (cdr numbers)))\n        (if (null? roll)\n            (list max)\n        \
    \    (let ((max (max max roll)))\n              (if (null? roll)\n           \
    \       (list max)\n                  (let ((roll (cdr roll)))\n             \
    \       (if (null? roll)\n                        (list max)\n               \
    \         (let ((max (max max roll)))))))))))\n", "  (if (null? numbers)\n   \
    \   '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max roll)\n            (let ((max\
    \ (car roll))\n                  (roll (cdr roll)))\n              (if (> max\
    \ roll)\n                  (cons max roll)\n                  (rolling_max roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (tail (cdr numbers)))\n        (if (null? tail)\n            (list max)\n  \
    \          (let ((max (max max tail)))\n              (if (null? tail)\n     \
    \             (list max)\n                  (let ((max (max max tail)))\n    \
    \                (if (null? tail)\n                        (list max)\n      \
    \                  (let ((max (max max tail)))\n                          (if\
    \ (null? tail)\n                              (list max)\n                   \
    \           (let ((max (max max tail)))\n                                (if (null?\
    \ tail)\n                                    (list max)\n                    \
    \                (let ((max (max max tail)))\n                               \
    \       (if (null? tail)\n                                          (list max)\n\
    \                                          (let ((max (max max tail)))\n     \
    \                                       (if (null? tail)\n                   \
    \                             (list max)\n                                   \
    \             (let ((max (max max tail)))\n                                  \
    \                (if (null? tail)\n                                          \
    \            (list max)\n                                                    \
    \  (let ((max (max max tail)))\n                                             \
    \           (if (null? tail)\n                                               \
    \             (list max)\n                                                   \
    \         (let ((max (max max tail)))\n                                      \
    \                        (if (null? tail)\n                                  \
    \                                (list max)\n                                \
    \                                  (let ((max (max max tail)))\n             \
    \                                                       (if (null? tail)\n   \
    \                                                                     (list max)\n\
    \                                                                        (let\
    \ ((max (max max tail)))\n                                                   \
    \                       (if (null? tail)\n                                   \
    \                                           (list max)\n                     \
    \                                                         (let ((max (max max\
    \ tail)))\n                                                                  \
    \              (if (null? tail)\n                                            \
    \                                        (list max)\n                        \
    \                                                            (let ((max (max max\
    \ tail)))\n                                                                  \
    \                    (if (null? tail)\n                                      \
    \                                                    (list max)\n            \
    \                                                                            \
    \  (let ((max (max max tail)))\n                                             \
    \                                               (if (null? tail)\n           \
    \                                                                            \
    \         (list max)\n                                                       \
    \                                         (let ((max (max max tail)))\n      \
    \                                                                            \
    \                (if (null? tail)\n                                          \
    \                                                            (list max)\n    \
    \                                                                            \
    \                      (let ((max (max max tail)))\n                         \
    \                                                                            \
    \   (if (null? tail)\n                                                       \
    \                                                     (list max)\n           \
    \                                                                            \
    \                     (let ((max (max max tail)))\n                          \
    \                                                                            \
    \        (if (null? tail)\n                                                  \
    \                                                                (list max)\n\
    \                                                                            \
    \                                      (let ((max (max max tail)))\n         \
    \                                                                            \
    \                               (if (null? tail)\n                           \
    \                                                                            \
    \                 (list max)\n                                               \
    \                                                                         (let\
    \ ((max (max max tail)))\n                                                   \
    \                                                                       (if (null?\
    \ tail)\n                                                                ", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (if (> (first numbers)\
    \ max)\n                  (first numbers)\n                  max))))))\n", " \
    \ (let loop ((numbers numbers)\n             (max-list '()))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((max-element (car numbers))\n     \
    \         (max-list (cons max-element max-list)))\n          (loop (cdr numbers)\n\
    \                (cons max-element max-list))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (> (car tail) max)\n            (cons max tail)\n            (rolling_max\
    \ (cons (car tail) tail)))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (list max)\n            (let ((max (max max roll)))\n   \
    \           (if (null? roll)\n                  (list max)\n                 \
    \ (let ((max (max max roll)))\n                    (if (null? roll)\n        \
    \                (list max)\n                        (let ((max (max max roll)))\n\
    \                          (if (null? roll)\n                              (list\
    \ max)\n                              (let ((max (max max roll)))\n          \
    \                      (if (null? roll)\n                                    (list\
    \ max)\n                                    (let ((max (max max roll)))\n    \
    \                                  (if (null? roll)\n                        \
    \                  (list max)\n                                          (let\
    \ ((max (max max roll)))\n                                            (if (null?\
    \ roll)\n                                                (list max)\n        \
    \                                        (let ((max (max max roll)))\n       \
    \                                           (if (null? roll)\n               \
    \                                       (list max)\n                         \
    \                             (let ((max (max max roll)))\n                  \
    \                                      (if (null? roll)\n                    \
    \                                        (list max)\n                        \
    \                                    (let ((max (max max roll)))\n           \
    \                                                   (if (null? roll)\n       \
    \                                                           (list max)\n     \
    \                                                             (let ((max (max\
    \ max roll)))\n                                                              \
    \      (if (null? roll)\n                                                    \
    \                    (list max)\n                                            \
    \                            (let ((max (max max roll)))\n          (list max
  "  (cond [(empty? numbers) numbers]\n        [(> (first numbers) (first max-roll))\
    \ (cons (first numbers) max-roll)]\n        [else (rolling_max (rest numbers))]))\n",
  "  (let loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far-so-far\
    \ (list #f)))\n    (if (null? numbers)\n        (reverse max-so-far-so-far)\n\
    \        (let ((n (car numbers))\n              (max-so-far max-so-far)\n    \
    \          (max-so-far-so-far (cons n (append max-so-far-so-far (list n))))\n\
    \              (next-numbers (cdr numbers)))\n          (loop (next-numbers)\n\
    \                (if (> (car max-so-far-so-far) n)\n                    (cons\
    \ (car max-so-far-so-far) max-so-far-so-far)\n                    max-so-far-so-far)\n\
    \                max-so-far-so-far))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (list max)\n            (let ((max (max max roll)))\n\
    \              (cons max rolling_max (cdr roll)))))))\n", "  (let loop ((numbers\
    \ numbers)\n             (max-so-far #f)\n             (max-so-far #f)\n     \
    \        (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (list max)\n            (let\
    \ ((max (max max roll)))\n              (if (null? roll)\n                  (list\
    \ max)\n                  (let ((max (max max roll)))\n                    (if\
    \ (null? roll)\n                        (list max)\n                        (let\
    \ ((max (max max roll)))\n                          (if (null? roll)\n       \
    \                       (list max)\n                              (let ((max (max\
    \ max roll)))\n                                (if (null? roll)\n            \
    \                        (list max)\n                                    (let\
    \ ((max (max max roll)))\n                                      (if (null? roll)\n\
    \                                          (list max)\n                      \
    \                    (let ((max (max max roll)))\n                           \
    \                 (if (null? roll)\n                                         \
    \       (list max)\n                                                (let ((max\
    \ (max max roll)))\n                                                  (if (null?\
    \ roll)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max roll)))\n\
    \                                                        (if (null? roll)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max roll)))\n\
    \                                                              (if (null? roll)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max roll)))\n                                                         \
    \           (if (null? roll)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max roll)))\n          (list\
    \ max
  "  (let loop ((numbers numbers)\n             (max '()))\n    (cond\n      [(empty?\
    \ numbers) (list max)]\n      [(> (first numbers) max) (loop (rest numbers) (first\
    \ numbers))]\n      [else (loop (rest numbers) (max max (first numbers)))]\n \
    \     )))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (rolling_max (cdr numbers))\n            (rolling_max_list (cons\
    \ max rolling_max_list)))\n        (if (null? rolling_max_list)\n            max\n\
    \            (cons (car rolling_max_list)\n                  rolling_max_list)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (tail (cdr numbers)))\n        (if (> (car tail) max)\n            (cons max\
    \ tail)\n            (rolling_max (cons (car tail) numbers))))))\n", "  (let loop\
    \ ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far-index\
    \ 0))\n    (if (null? numbers)\n        (list max-so-far)\n        (let ((number\
    \ (car numbers))\n              (max-so-far-index (+ max-so-far-index 1)))\n \
    \         (if (> number max-so-far)\n              (loop (cdr numbers)\n     \
    \               (cons number max-so-far)\n                    max-so-far-index)\n\
    \              (loop (cdr numbers)\n                    (cons number max-so-far)\n\
    \                    max-so-far-index)))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (max-list (cdr numbers)))\n    \
    \    (if (null? max-list)\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr max-list))))\n              (if (> (car max-list) max)\n              \
    \    (list max)\n                  (cons (car max-list) next)))))\n  )\n", " \
    \ (let loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far-so-far\
    \ (car numbers))\n             (max-so-far-so-far-so-far #f)\n             (max-so-far-so-far-so-far-so-far\
    \ #f)\n             (max-so-far-so-far-so-far-so-far-so-far #f)\n            \
    \ (max-so-far-so-far-so-far-so-far-so-far-so-far #f))\n    (if (null? numbers)\n\
    \        (list max-so-far)\n        (let ((next (car numbers)))\n          (if\
    \ (> max-so-far next)\n              (loop (cdr numbers)\n                   \
    \ next\n                    (if (> max-so-far-so-far next)\n                 \
    \       (max max-so-far max-so-far-so-far)\n                        (max max-so-far\
    \ max-so-far-so-far-so-far)\n                        (max max-so-far max-so-far-so-far-so-far-so-far)\n\
    \                        (max max-so-far max-so-far-so-far-so-far-so-far-so-far)\n\
    \                        (max max-so-far max-so-far-so-far-so-far-so-far-so-far-so-far)\n\
    \                        (max max-so-far max-so-far-so-far-so-far-so-far-so-far-so-far-so-far))\n\
    \                    (if (> max-so-far-so-far-so-far next)\n                 \
    \       (max max-so-far max-so-far-so-far-so-far)\n                        (max\
    \ max-so-far max-so-far-so-far-so-far-so-far)\n                        (max max-so-far\
    \ max-so-far-so-far-so-far-so-far-so-far)\n                        (max max-so-far\
    \ max-so-far-so-far-so-far-so-far-so-far-so-far)\n                        (max\
    \ max-so-far max-so-far-so-far-so-far-so-far-so-far-so-far-so-far))\n        \
    \            (if (> max-so-far-so-far-so-far-so", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (cond ((null? numbers) max)\n          ((> (car\
    \ numbers) max) (loop (cdr numbers) (car numbers)))\n          (else (loop (cdr\
    \ numbers) max)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_found\
    \ (list)))\n        (if (null? rolling_max)\n            (cons max rolling_max_found)\n\
    \            (let ((max_found (list)))\n              (if (> (car rolling_max)\
    \ max)\n                  (set! max_found (cons max max_found))\n            \
    \      (set! rolling_max_found (cons max rolling_max_found))\n               \
    \   (set! rolling_max (cdr rolling_max))\n                  (set! rolling_max_found\
    \ (cons max rolling_max_found))\n                  (set! rolling_max (cdr rolling_max))\n\
    \                  (set! rolling_max_found (cons max rolling_max_found))\n   \
    \               (set! rolling_max (cdr rolling_max))\n                  (set!\
    \ rolling_max_found (cons max rolling_max_found))\n                  (set! rolling_max\
    \ (cdr rolling_max))\n                  (set! rolling_max_found (cons max rolling_max_found))\n\
    \                  (set! rolling_max (cdr rolling_max))\n                  (set!\
    \ rolling_max_found (cons max rolling_max_found))\n                  (set! rolling_max\
    \ (cdr rolling_max))\n                  (set! rolling_max_found (cons max rolling_max_found))\n\
    \                  (set! rolling_max (cdr rolling_max))\n                  (set!\
    \ rolling_max_found (cons max rolling_max_found))\n                  (set! rolling_max\
    \ (cdr rolling_max))\n                  (set! rolling_max_found (cons max rolling_max_found))\n\
    \                  (set! rolling_max (cdr rolling_max))\n                  (set!\
    \ rolling_max_found (cons max rolling_max_found))\n                  (set! rolling_max\
    \ (cdr rolling_max))\n                  (set! rolling_max_found (cons max rolling_max_found))\n\
    \                  (set! rolling_max (cdr rolling_max))\n                  (set!\
    \ rolling_max_found (cons max rolling_max_found))\n                  (set! rolling_max\
    \ (cdr rolling_max))\n                  (set! rolling_max_found (cons max rolling_max_found))\n\
    \                  (set! rolling_", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (list max)\n            (let ((max (max max roll)))\n   \
    \           (if (null? roll)\n                  (list max)\n                 \
    \ (let ((max (max max roll)))\n                    (if (null? roll)\n        \
    \                (list max)\n                        (let ((max (max max roll)))))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (if (> (first numbers)\
    \ max)\n                  (first numbers)\n                  max))))))\n", " \
    \ (let loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (list max)\n            (let ((max (car numbers)))\n\
    \              (if (> (car numbers) max)\n                  (list max)\n     \
    \             (list max (cdr numbers))))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-list '()))\n    (if (null? numbers)\n        (reverse max-list)\n\
    \        (let ((max (car numbers))\n              (next (cadr numbers)))\n   \
    \       (if (> max max)\n              (loop (cdr numbers) (cons max max-list))\n\
    \              (loop (cdr numbers) max-list)))))\n", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (cond ((null? numbers) max)\n          ((null? (cdr\
    \ numbers)) (cons max numbers))\n          (else (loop (cdr numbers)\n       \
    \               (cond (< (car numbers) max)\n                            (cons\
    \ (car numbers) max)\n                            (else (loop (cdr numbers)\n\
    \                                      max))))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers)))\n        (if (> (car numbers) max)\n\
    \            (cons max numbers)\n            (rolling_max (cdr numbers))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (max-list (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n\
    \            (if (> (car max-list) max)\n                (list max)\n        \
    \        (if (> (car max-list) max)\n                    (list max)\n        \
    \            (if (> (car max-list) max)\n                        (list max)\n\
    \                        (if (> (car max-list) max)\n                        \
    \    (list max)\n                            (if (> (car max-list) max)\n    \
    \                            (list max)\n                                (if (>\
    \ (car max-list) max)\n                                    (list max)\n      \
    \                              (if (> (car max-list) max)\n                  \
    \                      (list max)\n                                        (if\
    \ (> (car max-list) max)\n                                            (list max)\n\
    \                                            (if (> (car max-list) max)\n    \
    \                                            (list max)\n                    \
    \                            (if (> (car max-list) max)\n                    \
    \                                (list max)\n                                \
    \                    (if (> (car max-list) max)\n                            \
    \                            (list max)\n                                    \
    \                    (if (> (car max-list) max)\n                            \
    \                                (list max)\n                                \
    \                            (if (> (car max-list) max)\n                    \
    \                                            (list max)\n                    \
    \                                            (if (> (car max-list) max)\n    \
    \                                                                (list max)\n\
    \                                                                    (if (> (car\
    \ max-list) max)\n                                                           \
    \             (list max)\n                                                   \
    \                     (if (> (car max-list) max)\n                           \
    \                                                 (list max)\n               \
    \                                                             (if (> (car max-list)\
    \ max)\n                                                                     \
    \           (list max)\n                                                     \
    \                           (if (> (car max-list) max)\n                     \
    \                                                               (list max)\n \
    \                                                                            \
    \       (if (> (car max-list) max)\n                                         \
    \                                               (list max)\n                 \
    \                                                                       (if (>\
    \ (car max-list) max)\n                                                      \
    \                                      (list max)\n                          \
    \                                                                  (if (> (car\
    \ max-list) max)\n                                                           \
    \                                     (list max)\n                           \
    \                                                                     (if (> (car\
    \ max-list) max)\n                                                           \
    \                                         (list max)\n                       \
    \                                                                            \
    \ (if (> (car max-list) max)\n                                               \
    \                                                         (list max)\n       \
    \                                                                            \
    \                     (if (> (car max-list) max)\n                           \
    \                                                                            \
    \     (list max)\n                                                           \
    \                                                 (if (> (car max-list) max)\n\
    \                                                                            \
    \                                    (list max)\n                            \
    \                                                                            \
    \        (if (> (car max-list) max)\n                                        \
    \                                                                            (list\
    \ max)\n                                                                     \
    \                                               (if (> (car max-list) max)\n \
    \                                                                            \
    \                                           (list max)\n                     \
    \                                                                            \
    \                       (if (> (car max-list) max)\n                         \
    \                                                                            \
    \                       (list max)\n                                         \
    \                                                                            \
    \       (if (> (car max-list) max)", "  (if (null? numbers)\n      '()\n     \
    \ (let ((max-so-far (car numbers))\n            (max-so-far-index (car numbers)))\n\
    \        (if (> (car numbers) max-so-far)\n            (cons max-so-far max-so-far-index)\n\
    \            (rolling_max (cdr numbers))))))\n", "  (if (null? numbers)\n    \
    \  '()\n      (let ((max (car numbers)))\n        (if (> (car numbers) max)\n\
    \            (cons max numbers)\n            (rolling_max (cdr numbers))))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (if (> (first numbers)\
    \ max)\n                  (first numbers)\n                  max))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (if (null? roll)\n                  (cons max roll)\n           \
    \       (let ((max (car roll))\n                        (roll (cdr roll)))\n \
    \                   (if (null? roll)\n                        (cons max roll)\n\
    \                        (let ((max (car roll))\n                            \
    \  (roll (cdr roll)))\n                          (if (null? roll)\n          \
    \                    (cons max roll)\n                              (let ((max\
    \ (car roll))\n                                    (roll (cdr roll)))\n      \
    \                          (if (null? roll)\n                                \
    \    (cons max roll)\n                                    (let ((max (car roll))\n\
    \                                          (roll (cdr roll)))\n              \
    \                        (if (null? roll)\n                                  \
    \        (cons max roll)\n                                          (let ((max\
    \ (car roll))\n                                                (roll (cdr roll)))\n\
    \                                            (if (null? roll)\n              \
    \                                  (cons max roll)\n                         \
    \                       (let ((max (car roll))\n                             \
    \                         (roll (cdr roll)))\n                               \
    \                   (if (null? roll)\n                                       \
    \               (cons max roll)\n                                            \
    \          (let ((max (car roll))\n                                          \
    \                  (roll (cdr roll)))\n                                      \
    \              (if (null? roll)\n                                            \
    \            (cons max roll)\n                                               \
    \         (let ((max (car roll))\n                                           \
    \                   (roll (cdr roll)))\n                                     \
    \                 (if (null? roll)\n                                         \
    \                 (cons max roll)\n                                          \
    \                (let ((max (car roll))\n                                    \
    \                            (roll (cdr roll)))\n                            \
    \                            (if (null? roll)\n                              \
    \                              (cons max roll)\n                             \
    \                               (let ((max (car roll))\n                     \
    \                             (roll (cdr roll)))\n                           \
    \                                 (if (null? roll)\n                         \
    \                                       (cons max roll)\n                    \
    \                                            (let ((max (car roll))\n        \
    \                                                (roll (cdr roll)))\n        \
    \                                                        (if (null? roll)\n  \
    \                                                                  (cons max roll)\n\
    \                                                                    (let ((max\
    \ (car roll))\n                                                              \
    \            (roll (cdr roll)))\n                                            \
    \                        (if (null? roll)\n                                  \
    \                                      (cons max roll)\n                     \
    \                                                   (let ((max (", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling_max\
    \ (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (let loop ((numbers numbers)\n             (max #f)\n             (max-list '()))\n\
    \    (if (null? numbers)\n        (reverse max-list)\n        (let ((n (car numbers))\n\
    \              (m (max n max)))\n          (loop (cdr numbers)\n             \
    \   (max n (car numbers))\n                (cons n (cons m max-list)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (max-list (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n\
    \            (let ((next (rolling_max (cdr max-list))))\n              (if (>\
    \ (car max-list) max)\n                  (cons max max-list)\n               \
    \   (cons next max-list)))))\n  )\n", "  (let loop ((numbers numbers)\n      \
    \       (max #f)\n             (max-list '()))\n    (cond ((null? numbers) max-list)\n\
    \          ((< max number) (loop (rest numbers) (first numbers) (cons max max-list)))\n\
    \          (else (loop (rest numbers) (first numbers) max-list)))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (roll\
    \ (cdr numbers)))\n        (if (null? roll)\n            (cons max rolling_max)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (if (null? roll)\n                  (cons max rolling_max)\n    \
    \              (cons (max max roll)\n                        (rolling_max (cdr\
    \ roll))))))))\n", "  (cond [(empty? numbers) '()]\n        [(> (first numbers)\
    \ (first numbers)) (rolling_max (rest numbers))]\n        [else (cons (first numbers)\
    \ (rolling_max (rest numbers)))]))\n", "  (if (null? numbers)\n      '()\n   \
    \   (let ((max (car numbers))\n            (rolling (rolling_max numbers (cdr\
    \ numbers))))\n        (if (> max rolling)\n            (list max)\n         \
    \   (cons max rolling)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ numbers))\n        (if (null? (rest numbers))\n            (cons max-so-far\
    \ max-so-far)\n            (let ((next (first numbers)))\n              (if (>\
    \ (first max-so-far) next)\n                  (cons max-so-far max-so-far)\n \
    \                 (cons next max-so-far)))))\n</code>\n<|/ a tags=scheme,racket,lisp\
    \ |>\n<| a dscore=0 |>\n<code>", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (let ((max (car roll))\n   \
    \               (roll (cdr roll)))\n              (if (null? roll)\n         \
    \         (cons max roll)\n                  (let ((max (car roll))\n        \
    \                (roll (cdr roll)))\n                    (if (null? roll)\n  \
    \                      (cons max roll)\n                        (let ((max (car\
    \ roll))\n                              (roll (cdr roll)))\n                 \
    \         (if (null? roll)\n                              (cons max roll)\n  \
    \                            (let ((max (car roll))\n                        \
    \            (roll (cdr roll)))\n                                (if (null? roll)\n\
    \                                    (cons max roll)\n                       \
    \             (let ((max (car roll))\n                                       \
    \   (roll (cdr roll)))\n                                      (if (null? roll)\n\
    \                                          (cons max roll)\n                 \
    \                         (let ((max (car roll))\n                           \
    \                     (roll (cdr roll)))\n                                   \
    \         (if (null? roll)\n                                                (cons\
    \ max roll)\n                                                (let ((max (car roll))\n\
    \                                                      (roll (cdr roll)))\n  \
    \                                                (if (null? roll)\n          \
    \                                            (cons max roll)\n               \
    \                                       (let ((max (car roll))\n             \
    \                                               (roll (cdr roll)))\n         \
    \                                           (if (null? roll)\n               \
    \                                         (cons max roll)\n                  \
    \                                      (let ((max (car roll))\n              \
    \                                                (roll (cdr roll)))\n        \
    \                                              (if (null? roll)\n            \
    \                                              (cons max roll)\n             \
    \                                             (let ((max (car roll))\n       \
    \                                                         (roll (cdr roll)))\n\
    \                                                        (if (null? roll)\n  \
    \                                                          (cons max roll)\n \
    \                                                           (let ((max (car roll))\n\
    \                                                  (roll (cdr roll)))\n      \
    \                                                      (if (null? roll)\n    \
    \                                                            (cons max roll)\n\
    \                                                                (let ((max (car\
    \ roll))\n                                                        (roll (cdr roll)))\n\
    \                                                                (if (null? roll)\n\
    \                                                                    (cons max\
    \ roll)\n                                                                    (let\
    \ ((max (car roll))\n                                                        \
    \  (roll (cdr roll)))\n                                                      \
    \          (if (null? roll)\n                                                \
    \                    (cons max roll)\n                                       \
    \                             (let ", "  (if (null? numbers)\n      '()\n    \
    \  (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (list max)\n            (let ((max (max max roll)))\n   \
    \           (cons max rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max roll)\n            (if (> max\
    \ roll)\n                (cons max roll)\n                (rolling_max (cdr roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (if (> max max)\n                  (cons max roll)\n            \
    \      (rolling_max roll)))))\n        ;; This line is never reached\n       \
    \ (rolling_max roll)))\n", "  (let loop ((numbers numbers)\n             (max\
    \ '()))\n    (cond ((null? numbers) max)\n          ((null? (cdr numbers)) (cons\
    \ max numbers))\n          (else (loop (cdr numbers)\n                      (cond\
    \ (< (car numbers) max) max\n                             (else (car numbers))))))))\n",
  "  (let loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far (car numbers))\n    \
    \        (max-so-far-index (cdr numbers)))\n        (if (> max-so-far max-so-far-index)\n\
    \            (cons max-so-far numbers)\n            (rolling_max (cdr numbers))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers))\n        (if\
    \ (null? (cdr numbers))\n            (cons max-so-far max-so-far)\n          \
    \  (let ((max-so-far (car numbers)))\n              (if (> (car numbers) max-so-far)\n\
    \                  (cons max-so-far max-so-far)\n                  (rolling_max\
    \ (cdr numbers)))))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (if (null? numbers)\n        max\n        (loop (rest numbers)\n        \
    \      (if (> (first numbers) max)\n                  (first numbers)\n      \
    \            max))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n\
    \            (cons max roll)\n            (let ((max (car roll))\n           \
    \       (roll (cdr roll)))\n              (if (> (car roll) max)\n           \
    \       (cons max roll)\n                  (cons max roll)))))\n        (rolling_max\
    \ (cdr numbers))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers)))\n        (if (null? (cdr numbers))\n            (list max)\n    \
    \        (let ((next (rolling_max (cdr numbers))))\n              (if (> (car\
    \ next) max)\n                  (list max)\n                  (list max (car next))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (list max)\n  \
    \          (let ((max (max max roll)))\n              (if (null? roll)\n     \
    \             (list max)\n                  (let ((max (max max roll)))\n    \
    \                (if (null? roll)\n                        (list max)\n      \
    \                  (let ((max (max max roll)))\n                          (if\
    \ (null? roll)\n                              (list max)\n                   \
    \           (let ((max (max max roll)))\n                                (if (null?\
    \ roll)\n                                    (list max)\n                    \
    \                (let ((max (max max roll)))\n                               \
    \       (if (null? roll)\n                                          (list max)\n\
    \                                          (let ((max (max max roll)))\n     \
    \                                       (if (null? roll)\n                   \
    \                             (list max)\n                                   \
    \             (let ((max (max max roll)))\n                                  \
    \                (if (null? roll)\n                                          \
    \            (list max)\n                                                    \
    \  (let ((max (max max roll)))\n                                             \
    \           (if (null? roll)\n                                               \
    \             (list max)\n                                                   \
    \         (let ((max (max max roll)))\n                                      \
    \                        (if (null? roll)\n                                  \
    \                                (list max)\n                                \
    \                                  (let ((max (max max roll)))\n             \
    \                                                       (if (null? roll)\n   \
    \                                                                     (list max)\n\
    \                                                                        (let\
    \ ((max (max max roll)))\n                                                   \
    \                       (if (null? roll)\n                                   \
    \                                           (list max)\n                     \
    \                                                         (let ((max (max max\
    \ roll)))\n                                                                  \
    \              (if (null? roll)\n                                            \
    \                                        (list max)\n                        \
    \                                                            (let ((max (max max\
    \ roll)))\n                                                                  \
    \                    (if (null? roll)\n                                      \
    \                                                    (list max)\n            \
    \                                                                            \
    \  (let ((max (max max roll)))\n                                             \
    \                                               (if (null? roll)\n           \
    \                                                                            \
    \         (list max)\n                                                       \
    \                                         (let ((max (max max roll)))\n      \
    \                                                                            \
    \                (if (null? roll)\n                                          \
    \                                                            (list max)\n    \
    \                                                                            \
    \                      (let ((max (max max roll)))\n                         \
    \                                                                            \
    \   (if (null? roll)\n                                                       \
    \                                                     (list max)\n           \
    \                                                                            \
    \                     (let ((max (max max roll)))\n                          \
    \                                                                            \
    \        (if (null? roll)\n                                                  \
    \                                                                (list max)\n\
    \                                                                            \
    \                                      (let ((max (max max roll)))\n         \
    \                                                                            \
    \                               (if (null? roll)\n                           \
    \                                                                            \
    \                 (list max)\n                                               \
    \                                                                         (let\
    \ ((max (max max roll)))\n                                                   \
    \                                                                       (if (null?\
    \ roll)\n                                                                ", " \
    \ (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n         \
    \   (max-so-far-so-far (list numbers)))\n        (if (null? (cdr max-so-far-so-far))\n\
    \            (cons (car max-so-far) max-so-far)\n            (let ((next-max-so-far\
    \ max-so-far-so-far)\n                  (next-max-so-far-so-far max-so-far-so-far))\n\
    \              (if (> (car max-so-far) (car next-max-so-far))\n              \
    \    (cons (car max-so-far) max-so-far)\n                  (let ((next-max-so-far\
    \ max-so-far-so-far)\n                        (next-max-so-far-so-far max-so-far-so-far))\n\
    \                    (if (> (car max-so-far) (car next-max-so-far))\n        \
    \                (cons (car max-so-far) max-so-far)\n                        (let\
    \ ((next-max-so-far max-so-far-so-far)\n                              (next-max-so-far-so-far\
    \ max-so-far-so-far))\n                          (if (> (car max-so-far) (car\
    \ next-max-so-far))\n                              (cons (car max-so-far) max-so-far)\n\
    \                              (let ((next-max-so-far max-so-far-so-far)\n   \
    \                                 (next-max-so-far-so-far max-so-far-so-far))\n\
    \                                (if (> (car max-so-far) (car next-max-so-far))\n\
    \                                    (cons (car max-so-far) max-so-far)\n    \
    \                                (let ((next-max-so-far max-so-far-so-far)\n \
    \                                         (next-max-so-far-so-far max-so-far-so-far))\n\
    \                                      (if (> (car max-so-far) (car next-max-so-far))\n\
    \                                          (cons (car max-so-far) max-so-far)\n\
    \                                          (let ((next-max-so-far max-so-far-so-far)\n\
    \                                                (next-max-so-far-so-far max-so-far-so-far))\n\
    \                                        (if (> (car max-so-", "  (let loop ((numbers\
    \ numbers)\n             (max '()))\n    (cond\n      [(empty? numbers) (list\
    \ max)]\n      [(>= (first numbers) max) (loop (rest numbers) max)]\n      [else\
    \ (loop (rest numbers) (max max (first numbers)))]\n    )))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (tail (cdr\
    \ numbers)))\n        (if (null? tail)\n            (list max)\n            (let\
    \ ((max (max max tail)))\n              (if (null? tail)\n                  (list\
    \ max)\n                  (let ((max (max max tail)))\n                    (if\
    \ (null? tail)\n                        (list max)\n                        (let\
    \ ((max (max max tail)))\n                          (if (null? tail)\n       \
    \                       (list max)\n                              (let ((max (max\
    \ max tail)))\n                                (if (null? tail)\n            \
    \                        (list max)\n                                    (let\
    \ ((max (max max tail)))\n                                      (if (null? tail)\n\
    \                                          (list max)\n                      \
    \                    (let ((max (max max tail)))\n                           \
    \                 (if (null? tail)\n                                         \
    \       (list max)\n                                                (let ((max\
    \ (max max tail)))\n                                                  (if (null?\
    \ tail)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max tail)))\n\
    \                                                        (if (null? tail)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max tail)))\n\
    \                                                              (if (null? tail)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max tail)))\n                                                         \
    \           (if (null? tail)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max tail)))\n              \
    \                                            (if (null? tail)\n              \
    \                                                (list max)\n                \
    \                                              (let ((max (max max tail)))\n \
    \                                                               (if (null? tail)\n\
    \                                                                    (list max)\n\
    \                                                                    (let ((max\
    \ (max max tail)))\n                                                         \
    \             (if (null? tail)\n                                             \
    \                             (list max)\n                                   \
    \                                       (let ((max (max max tail)))\n        \
    \                                                                    (if (null?\
    \ tail)\n                                                                    \
    \            (list max)\n                                                    \
    \                            (let ((max (max max tail)))\n                   \
    \                                                               (if (null? tail)\n\
    \                                                                            \
    \          (list max)\n                                                      \
    \                                (let ((max (max max tail)))\n               \
    \                                                                         (if\
    \ (null? tail)\n                                                             \
    \                               (list max)\n                                 \
    \                                                           (let ((max (max max\
    \ tail)))\n                                                                  \
    \                            (if (null? tail)\n                              \
    \                                                                    (list max)\n\
    \                                                                            \
    \                      (let ((max (max max tail)))\n                         \
    \                                                                           (if\
    \ (null? tail)\n                                                             \
    \                                           (list max)\n                     \
    \                                                                            \
    \       (let ((max (max max tail)))\n                                        \
    \                                                                  (if (null?\
    \ tail)\n                                                                    \
    \                                          (list max)\n                      \
    \                                          ", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (cond ((null? numbers) max)\n          ((> (car\
    \ numbers) max) max)\n          (else (loop (cdr numbers)\n                  \
    \    (cons (car numbers) max)))))\n  max)\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (max-list (cdr numbers)))\n    \
    \    (if (null? max-list)\n            (cons max max-list)\n            (if (>\
    \ max max-list)\n                (cons max max-list)\n                (rolling_max\
    \ (cdr max-list))\n            )\n        )\n      )\n    )\n)\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr\
    \ numbers))\n            (list max)\n            (let ((next-max (car numbers)))\n\
    \              (if (> max next-max)\n                  (list max)\n          \
    \        (list next-max)))))\n        (rolling_max (cdr numbers))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far\
    \ (list numbers)))\n        (if (null? max-so-far)\n            (append max-so-far-so-far\
    \ (list numbers))\n            (let ((max-so-far max-so-far-so-far)\n        \
    \          (max-so-far-so-far (append max-so-far max-so-far-so-far)))\n      \
    \        (if (> (car max-so-far-so-far) (car max-so-far))\n                  (set!\
    \ max-so-far max-so-far-so-far)\n                  (set! max-so-far-so-far (list\
    \ numbers))))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (rolling_max (cdr numbers))\n            (max_found (null?\
    \ rolling_max)))\n        (if (or (null? rolling_max) (> max max_found))\n   \
    \         (cons max rolling_max)\n            (rolling_max))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling_max\
    \ (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (tail (cdr numbers)))\n        (if (null? tail)\n            (list max)\n  \
    \          (let ((max (max max tail)))\n              (if (null? tail)\n     \
    \             (list max)\n                  (let ((max (max max tail)))\n    \
    \                (if (null? tail)\n                        (list max)\n      \
    \                  (let ((max (max max tail)))\n                          (if\
    \ (null? tail)\n                              (list max)\n                   \
    \           (let ((max (max max tail)))\n                                (if (null?\
    \ tail)\n                                    (list max)\n                    \
    \                (let ((max (max max tail)))\n                               \
    \       (if (null? tail)\n                                          (list max)\n\
    \                                          (let ((max (max max tail)))\n     \
    \                                       (if (null? tail)\n                   \
    \                             (list max)\n                                   \
    \             (let ((max (max max tail)))\n                                  \
    \                (if (null? tail)\n                                          \
    \            (list max)\n                                                    \
    \  (let ((max (max max tail)))\n                                             \
    \           (if (null? tail)\n                                               \
    \             (list max)\n                                                   \
    \         (let ((max (max max tail)))\n                                      \
    \                        (if (null? tail)\n                                  \
    \                                (list max)\n                                \
    \                                  (let ((max (max max tail)))\n             \
    \                                                       (if (null? tail)\n   \
    \                                                                     (list max)\n\
    \                                                                        (let\
    \ ((max (max max tail)))\n                                                   \
    \       (if (null? tail)\n                                                   \
    \           (list max)\n                                                     \
    \         (let ((max (max max tail)))\n                                      \
    \                          (if (null? tail)\n                                \
    \                                    (list max)\n                            \
    \                                        (let ((max (max max tail)))\n       \
    \                                                               (if (null? tail)\n\
    \                                                                          (list\
    \ max)\n                                                                     \
    \     (let ((max (max max tail)))\n                                          \
    \                                  (if (null? tail)\n                        \
    \                                                        (list max)\n        \
    \                                                                        (let\
    \ ((max (max max tail)))\n                                                   \
    \                               (if (null? tail)\n                           \
    \                                                           (list max)\n     \
    \                                                                            \
    \     (let ((max (max max tail)))\n                                          \
    \                                              (if (null? tail)\n            \
    \                                                                            \
    \    (list max)\n                                                            \
    \                                (let ((max (max max tail)))\n               \
    \                                                                            \
    \   (if (null? tail)\n                                                       \
    \                                           (list max)\n                     \
    \                                                                            \
    \ (let ((max (max max tail)))\n                                              \
    \                                                      (if (null? tail)\n    \
    \                                                                            \
    \                        (list max)\n                                        \
    \                                                                (let ((max (max\
    \ max tail)))\n                                                              \
    \                                            (if (null? tail)\n              \
    \                                                                            \
    \                    (list max)\n                                            \
    \                    ", "  (let loop ((numbers numbers)\n             (max-list\
    \ '())\n             (max-so-far 0)\n             (max-so-far-so-far 0))\n   \
    \ (cond\n      [(null? numbers) (cons max-list max-so-far max-so-far-so-far)]\n\
    \      [(>= (first numbers) max-so-far) (loop (rest numbers) (cons max-list max-so-far\
    \ max-so-far-so-far) (first numbers))]\n      [else (loop (rest numbers) (cons\
    \ max-list max-so-far max-so-far-so-far) (first numbers))]\n    )\n  )\n)\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (let loop ((numbers numbers)\n             (max-list '()))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((max (car numbers))\n             \
    \ (next (loop (cdr numbers) (cons max max-list))))\n          (if (> (car numbers)\
    \ max)\n              (loop (cdr numbers) max-list)\n              (loop (cdr\
    \ numbers) (cons max max-list)))))))\n", "  (cond [(empty? numbers) empty]\n \
    \       [(> (first numbers) (first max-roll)) (cons (first numbers) max-roll)]\n\
    \        [else (rolling_max (rest numbers))]))\n", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (if (null? numbers)\n        max\n        (loop\
    \ (rest numbers)\n              (cond ((> max first) (cons first max))\n     \
    \               ((< first max) (cons first max))\n                    (else (loop\
    \ (rest numbers)\n                              (cons first max))))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (roll (cdr numbers)))\n        (if (null? roll)\n            (list max)\n \
    \           (let ((max (max max roll)))\n              (cons max rolling_max (cdr\
    \ roll)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (max-list (cdr numbers)))\n        (if (null? max-list)\n       \
    \     (list max)\n            (let ((next (rolling_max (cdr max-list))))\n   \
    \           (cons (max next)\n                    (cons next max-list)))))\n \
    \ )\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n\
    \            (max-so-far-index 0))\n        (if (= max-so-far-index 0)\n     \
    \       (cons max-so-far (rolling_max (cdr max-so-far)))\n            (let ((max-so-far-index\
    \ (+ max-so-far-index 1)))\n              (cons max-so-far (rolling_max (cdr max-so-far)))))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (cond\n      [(null?\
    \ numbers) (list max)]\n      [(> (car numbers) max) (loop (cdr numbers) (car\
    \ numbers))]\n      [else (loop (cdr numbers) max)])))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers)\n            (max-so-far-index 0)\n\
    \            (max-so-far-value numbers))\n        (if (null? (rest numbers))\n\
    \            (cons max-so-far-value max-so-far)\n            (let ((next-number\
    \ (rest numbers)))\n              (if (> (car next-number) max-so-far-value)\n\
    \                  (let ((new-max-so-far max-so-far)\n                       \
    \ (new-max-so-far-index (+ max-so-far-index 1)))\n                    (cons next-number\
    \ new-max-so-far)\n                    (rolling_max (cdr next-number))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (if (> (car roll) max)\n                (cons max roll)\n       \
    \         (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (list max)\n            (let ((max (max max roll)))\n\
    \              (cons (max max) roll)))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-list '())\n             (max-so-far 0))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((number (car numbers))\n          \
    \    (max-so-far (+ max-so-far number)))\n          (loop (cdr numbers)\n    \
    \            (cons (max max-so-far number)\n                      max-list)\n\
    \                max-so-far))))))\n", "  (if (null? numbers)\n      '()\n    \
    \  (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (if (> max roll)\n         \
    \       (cons max roll)\n                (rolling_max (cdr roll)))))\n  )\n  ",
  "  (cond [(empty? numbers) empty]\n        [(> (first numbers) (first rolling_max))\
    \ (cons (first numbers) rolling_max)]\n        [else (cons (first numbers) (rolling_max\
    \ (rest numbers)))]))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_list\
    \ (cons max rolling_max_list))))))\n", "  (if (null? numbers)\n      '()\n   \
    \   (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (cons max roll)\n            (if (> max roll)\n  \
    \              (cons max roll)\n                (rolling_max (cdr roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (reverse max-so-far)))\n        (if (null? (rest numbers))\n\
    \            (cons (car max-so-far-so-far)\n                  max-so-far-so-far)\n\
    \            (let ((next (first numbers))\n                  (max-so-far-so-far\
    \ (cons next max-so-far-so-far)))\n              (if (> (car max-so-far-so-far)\
    \ (car max-so-far))\n                  (rolling_max (rest numbers))\n        \
    \          (rolling_max (cons next max-so-far-so-far)))))\n        (rolling_max\
    \ (rest numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         (cons max roll)\n            (let ((max (car roll))\n              \
    \    (roll (cdr roll)))\n              (if (> (car roll) max)\n              \
    \    (cons max roll)\n                  (rolling_max (cons max roll))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (max-list (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n\
    \            (let ((next (rolling_max (cdr max-list))))\n              (if (>\
    \ (car max-list) max)\n                  (list max next)\n                  (list\
    \ next max)))))) ; #lang racket\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers)))\n        (if (null? (cdr numbers))\n            (list\
    \ max)\n            (let ((next (rolling_max (cdr numbers))))\n              (if\
    \ (> (car next) max)\n                  (list max)\n                  (cons max\
    \ next)))))\n</code>\n<|/ a tags=scheme,racket,lisp |>\n<| c |>\nI like your solution,\
    \ it's very elegant. Thanks for sharing.\n<|/ c |>\n<| a dscore=1 |>\nI like your\
    \ solution, it's very elegant. Thanks for sharing.\nI thought I'd share my solution\
    \ in Racket (a dialect of Scheme that compiles to Racket bytecode), which I find\
    \ more elegant than your solution. \n<code>\n#lang racket\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling (rolling_max\
    \ (cdr numbers))))\n        (if (< max rolling)\n            (cons max rolling)\n\
    \            (cons max rolling)))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (let ((max (car numbers))\n            (tail (cdr numbers)))\n        (if\
    \ (null? tail)\n            (list max)\n            (let ((max (max max (car tail))))\n\
    \              (if (null? tail)\n                  (list max)\n              \
    \    (let ((max (max max (car tail))))\n                    (if (null? tail)\n\
    \                        (list max)\n                        (let ((max (max max\
    \ (car tail))))\n                          (if (null? tail)\n                \
    \              (list max)\n                              (let ((max (max max (car\
    \ tail))))\n                                (if (null? tail)\n               \
    \                     (list max)\n                                    (let ((max\
    \ (max max (car tail))))\n                                      (if (null? tail)\n\
    \                                          (list max)\n                      \
    \                    (let ((max (max max (car tail))))\n                     \
    \                       (if (null? tail)\n                                   \
    \             (list max)\n                                                (let\
    \ ((max (max max (car tail))))\n                                             \
    \     (if (null? tail)\n                                                     \
    \ (list max)\n                                                      (let ((max\
    \ (max max (car tail))))\n                                                   \
    \     (if (null? tail)\n                                                     \
    \       (list max)\n                                                         \
    \   (let ((max (max max (car tail))))\n                                      \
    \                        (if (null? tail)\n                                  \
    \                                (list max)\n                                \
    \                                  (let ((max (max max (car tail))))\n       \
    \                                                             (if (null? tail)\n\
    \                                                                        (list\
    \ max)\n                                                                     \
    \   (let ((max (max max (car tail))))\n                                      \
    \                    (if (null? tail)\n                                      \
    \                        (list max)\n                                        \
    \                      (let ((max (max max (car tail))))\n                   \
    \                                             (if (null? tail)\n             \
    \                                                       (list max)\n         \
    \                                                           (let ((max (max max\
    \ (car tail))))\n                                                            \
    \          (if (null? tail)\n                                                \
    \                          (list max)\n                                      \
    \                                    (let ((max (max max (car tail))))\n     \
    \                                                       (if (null? tail)\n   \
    \                                                             (list max)\n   \
    \                                                             (let ((max (max\
    \ max (car tail))))\n                                                        \
    \          (if (null? tail)\n                                                \
    \                    (list max)\n                                            \
    \                        (let ((max (max max (car tail))))\n                 \
    \                                                     (if (null? tail)\n     \
    \                                                                     (list max)\n\
    \                                                                          (let\
    \ ((max (max max (car tail))))\n                                             \
    \               (if (null? tail)\n                                           \
    \                     (list max)\n                                           \
    \                     (let ((max (max ", "  (let loop ((numbers numbers)\n   \
    \          (max '()))\n    (if (null? numbers)\n        max\n        (loop (rest\
    \ numbers)\n              (cond ((> max number) (cons max numbers))\n        \
    \            ((= max number) (cons max numbers))\n                    (else (loop\
    \ (rest numbers)\n                               (cons max numbers))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next) max)\n                  (list\
    \ max)\n                  (cons (car next) next)))))\n        ))\n", "  (let loop\
    \ ((numbers numbers)\n             (max-list '()))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((max (car numbers))\n             \
    \ (next (loop (cdr numbers) (cons max max-list))))\n          (if (> max max-list)\n\
    \              (loop (cdr numbers) max-list)\n              (loop (cdr numbers)\
    \ (cons max max-list)))))))\n", "  (let loop ((numbers numbers)\n            \
    \ (max 0))\n    (if (null? numbers)\n        (list max)\n        (let ((n (car\
    \ numbers))\n              (m (max n (car numbers))))\n          (loop (cdr numbers)\n\
    \                (if (> m n) m n))))))\n", "  (let loop ((numbers numbers)\n \
    \            (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)", "  (if (null? numbers)\n \
    \     '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max)))\n        (if (null? rolling_max_list)\n\
    \            max\n            (rolling_max_list (cdr rolling_max_list)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (> (car numbers) max)\n            (cons max numbers)\n            (rolling_max\
    \ (cdr numbers))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (tail (cdr numbers)))\n        (if (null? tail)\n   \
    \         (list max)\n            (let ((max (max max (car tail))))\n        \
    \      (if (null? tail)\n                  (list max)\n                  (let\
    \ ((max (max max (car tail))))\n                    (if (null? tail)\n       \
    \                 (list max)\n                        (let ((max (max max (car\
    \ tail))))\n                          (if (null? tail)\n                     \
    \         (list max)\n                              (let ((max (max max (car tail))))\n\
    \                                (if (null? tail)\n                          \
    \          (list max)\n                                    (let ((max (max max\
    \ (car tail))))\n                                      (if (null? tail)\n    \
    \                                      (list max)\n                          \
    \                (let ((max (max max (car tail))))\n                         \
    \                   (if (null? tail)\n                                       \
    \         (list max)\n                                                (let ((max\
    \ (max max (car tail))))\n                                                  (if\
    \ (null? tail)\n                                                      (list max)\n\
    \                                                      (let ((max (max max (car\
    \ tail))))\n                                                        (if (null?\
    \ tail)\n                                                            (list max)\n\
    \                                                            (let ((max (max max\
    \ (car tail))))\n                                                            \
    \  (if (null? tail)\n                                                        \
    \          (list max)\n                                                      \
    \            (let ((max (max max (car tail))))\n                             \
    \                                       (if (null? tail)\n                   \
    \                                                     (list max)\n           \
    \                                                             (let ((max (max\
    \ max (car tail))))\n                                                        \
    \  (if (null? tail)\n                                                        \
    \      (list max)\n                                                          \
    \    (let ((max (max max (car tail))))\n                                     \
    \                           (if (null? tail)\n                               \
    \                                     (list max)\n                           \
    \                                         (let ((max (max max (car tail))))\n\
    \                                                                      (if (null?\
    \ tail)\n                                                                    \
    \      (list max)\n                                                          \
    \                (let ((max (max max (car tail))))\n                         \
    \                                   (if (null? tail)\n                       \
    \                                         (list max)\n                       \
    \                                         (let ((max (max max (car tail))))\n\
    \                                                                  (if (null?\
    \ tail)\n                                                                    \
    \  (list max)\n                                                              \
    \        (let ((max (max max (car tail))))\n                                 \
    \                                       (if (null? tail)\n                   \
    \                                                         (list max)\n       \
    \                                                                     (let ((max\
    \ (max max (car tail))))\n                                                   \
    \                           (if (null? tail)\n                               \
    \                                                   (list max)\n             \
    \                                                                     (let ((max\
    \ (max ", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (max-list (cdr numbers)))\n        (if (null? max-list)\n       \
    \     (cons max max-list)\n            (if (> max max-list)\n                (cons\
    \ max max-list)\n                (rolling_max (cdr max-list))\n              )\n\
    \            )\n        )\n      )\n  )\n", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (if (null? numbers)\n        max\n        (loop\
    \ (rest numbers)\n              (if (> (first numbers) max)\n                \
    \  (first numbers)\n                  max))))))\n", "  (if (null? numbers)\n \
    \     '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max_list))))))\n", "  (let loop\
    \ ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n     \
    \   max\n        (loop (rest numbers)\n              (if (> (first numbers) max)\n\
    \                  (first numbers)\n                  max))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (max-list\
    \ (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n    \
    \        (let ((max (car max-list))\n                  (max-list (cdr max-list)))\n\
    \              (if (null? max-list)\n                  (list max)\n          \
    \        (let ((max (car max-list))\n                        (max-list (cdr max-list)))\n\
    \                    (if (null? max-list)\n                        (list max)\n\
    \                        (let ((max (car max-list))\n                        \
    \      (max-list (cdr max-list)))\n                          (if (null? max-list)\n\
    \                              (list max)\n                              (let\
    \ ((max (car max-list))\n                                    (max-list (cdr max-list)))\n\
    \                                (if (null? max-list)\n                      \
    \              (list max)\n                                    (let ((max (car\
    \ max-list))\n                                          (max-list (cdr max-list)))\n\
    \                                      (if (null? max-list)\n                \
    \                          (list max)\n                                      \
    \    (let ((max (car max-list))\n                                            \
    \    (max-list (cdr max-list)))\n                                            (if\
    \ (null? max-list)\n                                                (list max)\n\
    \                                                (let ((max (car max-list))\n\
    \                                                      (max-list (cdr max-list)))\n\
    \                                              (if (null? max-list)\n        \
    \                                          (list max)\n                      \
    \                            (let ((max (car max-list))\n                    \
    \                                    (max-list (cdr max-list)))\n            \
    \                                        (if (null? max-list)\n              \
    \                                          (list max)\n                      \
    \                                  (let ((max (car max-list))\n              \
    \                                                (max-list (cdr max-list)))\n\
    \                                                      (if (null? max-list)\n\
    \                                                          (list max)\n      \
    \                                                    (let ((max (car max-list))\n\
    \                                                                (max-list (cdr\
    \ max-list)))\n                                                            (if\
    \ (null? max-list)\n                                                         \
    \       (list max)\n                                                         \
    \       (let ((max (car max-list))\n                                         \
    \                           (max-list (cdr max-list)))\n                     \
    \                                         (if (null? max-list)\n             \
    \                                                     (list max)\n           \
    \                                                       (let ((max (car max-list))\n\
    \                                                                        (max-list\
    \ (cdr max-list)))\n                                                         \
    \             (if (null? max-list)\n                                         \
    \                                 (list max)\n                               \
    \                                           (let ((max (car max-list))\n     \
    \                                                               (max-list (cdr\
    \ max-list)))\n                                                              \
    \              (if (null? max-list)\n                                        \
    \                                        (list max)\n                        \
    \                                                        (let ((max (car max-list))\n\
    \                                                                        (max-list\
    \ (cdr max-list)))\n                                                         \
    \                     (if (null? max-list)\n", "  (let loop ((numbers numbers)\n\
    \             (max-list '())\n             (max-so-far 0))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((number (car numbers))\n          \
    \    (max-so-far (+ max-so-far number)))\n          (if (> number max-so-far)\n\
    \              (loop (cdr numbers)\n                    (cons max-so-far max-list)\n\
    \                    max-so-far)\n              (loop (cdr numbers)\n        \
    \            (cons number max-list)\n                    max-so-far))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (tail (cdr numbers)))\n        (if (null? tail)\n            (list max)\n  \
    \          (let ((max (max max tail)))\n              (if (null? tail)\n     \
    \             (list max)\n                  (let ((max (max max tail)))\n    \
    \                (if (null? tail)\n                        (list max)\n      \
    \                  (let ((max (max max tail)))\n                          (if\
    \ (null? tail)\n                              (list max)\n                   \
    \           (let ((max (max max tail)))\n                                (if (null?\
    \ tail)\n                                    (list max)\n                    \
    \                (let ((max (max max tail)))\n                               \
    \       (if (null? tail)\n                                          (list max)\n\
    \                                          (let ((max (max max tail)))\n     \
    \                                       (if (null? tail)\n                   \
    \                             (list max)\n                                   \
    \             (let ((max (max max tail)))\n                                  \
    \                (if (null? tail)\n                                          \
    \            (list max)\n                                                    \
    \  (let ((max (max max tail)))\n                                             \
    \           (if (null? tail)\n                                               \
    \             (list max)\n                                                   \
    \         (let ((max (max max tail)))\n                                      \
    \                        (if (null? tail)\n                                  \
    \                                (list max)\n                                \
    \                                  (let ((max (max max tail)))\n             \
    \                                                       (if (null? tail)\n   \
    \                                                                     (list max)\n\
    \                                                                        (let\
    \ ((max (max max tail)))\n                                                   \
    \                       (if (null? tail)\n                                   \
    \                                           (list max)\n                     \
    \                                                         (let ((max (max max\
    \ tail)))\n                                                                  \
    \              (if (null? tail)\n                                            \
    \                                        (list max)\n                        \
    \                                                            (let ((max (max max\
    \ tail)))\n                                                                  \
    \                    (if (null? tail)\n                                      \
    \                                                    (list max)\n            \
    \                                                                            \
    \  (let ((max (max max tail)))\n                                             \
    \                                               (if (null? tail)\n           \
    \                                                                            \
    \         (list max)\n                                                       \
    \                                         (let ((max (max max tail)))\n      \
    \                                                                            \
    \                (if (null? tail)\n                                          \
    \                                                            (list max)\n    \
    \                                                                            \
    \                      (let ((max (max max tail)))\n                         \
    \                                                                            \
    \   (if (null? tail)\n                                                       \
    \                                                     (list max)\n           \
    \                                                                            \
    \                     (let ((max (max max tail)))\n                          \
    \                                                                            \
    \        (if (null? tail)\n                                                  \
    \                                                                (list max)\n\
    \                                                                            \
    \                                      (let ((max (max max tail)))\n         \
    \                                                                            \
    \                               (if (null? tail)\n                           \
    \                                                                            \
    \                 (list max)\n                                               \
    \                                                                         (let\
    \ ((max (max max tail)))\n                                                   \
    \                                                                       (if (null?\
    \ tail)\n                                                                ", " \
    \ (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n         \
    \   (max-so-far-index 0))\n        (if (= max-so-far-index 0)\n            (cons\
    \ max-so-far max-so-far)\n            (let ((max-so-far max-so-far)\n        \
    \          (max-so-far-index (+ max-so-far-index 1)))\n              (if (= max-so-far-index\
    \ 0)\n                  (cons max-so-far max-so-far)\n                  (let ((max-so-far\
    \ max-so-far)\n                        (max-so-far-index (+ max-so-far-index 1)))\n\
    \                    (if (= max-so-far-index 0)\n                        (cons\
    \ max-so-far max-so-far)\n                        (let ((max-so-far max-so-far)\n\
    \                              (max-so-far-index (+ max-so-far-index 1)))\n  \
    \                        (if (= max-so-far-index 0)\n                        \
    \      (cons max-so-far max-so-far)\n                              (let ((max-so-far\
    \ max-so-far)\n                                    (max-so-far-index (+ max-so-far-index\
    \ 1)))\n                                (if (= max-so-far-index 0)\n         \
    \                           (cons max-so-far max-so-far)\n                   \
    \                 (let ((max-so-far max-so-far)\n                            \
    \              (max-so-far-index (+ max-so-far-index 1)))\n                  \
    \                    (if (= max-so-far-index 0)\n                            \
    \              (cons max-so-far max-so-far)\n                                \
    \          (let ((max-so-far max-so-far)\n                                   \
    \             (max-so-far-index (+ max-so-far-index 1)))\n                   \
    \                         (if (= max-so-far-index 0)\n                       \
    \                         (cons max-so-far max-so-far)\n                     \
    \                           (let ((max-so-far max-so-far)\n                  \
    \                                    (max-so-far-index (+ max-so-far-index 1)))\n\
    \                                                  (if (= max-so-far-index 0)\n\
    \                                                      (cons max-so-far max-so-far)\n\
    \                                                      (let ((max-so-far max-so-far)\n\
    \                                                            (max-so-far-index\
    \ (+ max-so-far-index 1)))\n                                                 \
    \   (if (= max-so-far-index 0)\n                                             \
    \           (cons max-so-far max-so-far)\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n  \
    \          (rolling_max_found (cons max rolling_max_found)))\n        (if (null?\
    \ rolling_max_found)\n            (cons max rolling_max_found)\n            (rolling_max_found\
    \ (cons max rolling_max_found)))))\n", "  (if (null? numbers)\n      '()\n   \
    \   (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (list max)\n            (let ((max (max max roll)))\n\
    \              (if (null? roll)\n                  (list max)\n              \
    \    (let ((max (max max roll)))\n                    (if (null? roll)\n     \
    \                   (list max)\n                        (let ((max (max max roll))))\n\
    \                          (if (null? roll)\n                              (list\
    \ max)\n                              (let ((max (max max roll))))\n         \
    \                       (if (null? roll)\n                                   \
    \ (list max)\n                                    (let ((max (max max roll))))\n\
    \                                      (if (null? roll)\n                    \
    \                      (list max)\n                                          (let\
    \ ((max (max max roll))))\n                                            (if (null?\
    \ roll)\n                                                (list max)\n        \
    \                                        (let ((max (max max roll))))\n      \
    \                                            (if (null? roll)\n              \
    \                                        (list max)\n                        \
    \                              (let ((max (max max roll))))\n                \
    \                                        (if (null? roll)\n                  \
    \                                          (list max)\n                      \
    \                                      (let ((max (max max roll))))\n        \
    \                                                      (if (null? roll)\n    \
    \                                                              (list max)\n  \
    \                                                                (let ((max (max\
    \ max roll))))\n                                                             \
    \       (if (null? roll)\n                                                   \
    \                     (list max)\n                                           \
    \                             (let ((max (max max roll))))\n                 \
    \                                         (if (null? roll)\n                 \
    \                                             (list max)\n                   \
    \                                           (let ((max (max max roll))))\n   \
    \                                                             (if (null? roll)\n\
    \                                                                    (list max)\n\
    \                                                                    (let ((max\
    \ (max max roll))))\n                                                        \
    \              (if (null? roll)\n                                            \
    \                              (list max)\n                                  \
    \                                        (let ((max (max max roll))))\n      \
    \                                                                      (if (null?\
    \ roll)\n                                                                    \
    \            (list max)\n                                                    \
    \                            (let ((max (max max roll))))\n                  \
    \                                                                (if (null? roll)\n\
    \                                                                            \
    \          (list max)\n                                                      \
    \                                (let ((max (max max roll))))\n              \
    \                                                                          (if\
    \ (null? roll)\n                                                             \
    \                               (list max)\n                                 \
    \                                                           (let ((max (max max\
    \ roll))))\n                                                                 \
    \                             (if (null? roll)\n                             \
    \                                                                     (list max)\n\
    \                                                                            \
    \                      (let ((max (max max roll))))\n                        \
    \                                                                            (if\
    \ (null? roll)\n                                                             \
    \                                           (list max)\n                     \
    \                                                                            \
    \       (let ((max (max max roll))))\n                                       \
    \                                                                   (if (null?\
    \ roll)\n                                                                    \
    \                                          (list max)\n                      \
    \                                          ", "  (let loop ((numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)", "  (if (null? numbers)\n \
    \     '()\n      (let ((max-so-far numbers)\n            (max-so-far-prev numbers))\n\
    \        (if (null? max-so-far)\n            (cons max-so-far-prev max-so-far)\n\
    \            (let ((max-so-far-prev (car max-so-far))\n                  (max-so-far\
    \ max-so-far-prev))\n              (if (> (car max-so-far) max-so-far-prev)\n\
    \                  (cons max-so-far-prev max-so-far)\n                  (rolling_max\
    \ (cdr max-so-far))))))))\n", "  (let loop ((numbers numbers)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max-so-far (car numbers))\n            (max-so-far-index (cdr numbers)))\n\
    \        (if (> max-so-far max-so-far-index)\n            (cons max-so-far numbers)\n\
    \            (rolling_max (cdr numbers))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (cond\n      [(empty? numbers) (list max)]\n   \
    \   [(> (first numbers) max) (loop (rest numbers) max)]\n      [else (loop (rest\
    \ numbers) (first numbers))])))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (let ((max (car roll))\n   \
    \               (roll (cdr roll)))\n              (if (> (car roll) max)\n   \
    \               (cons max roll)\n                  (rolling_max (cons (car roll)\
    \ roll))))))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (cond\n      [(null? numbers) (list max)]\n      [(< (first numbers) max)\
    \ (loop (rest numbers) (first numbers))]\n      [else (loop (rest numbers) (max\
    \ numbers))])))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (rolling_max (cdr numbers))\n            (rolling_max_list (cons\
    \ max rolling_max_list))))))\n", "  (let loop ((numbers numbers)\n           \
    \  (max '()))\n    (if (null? numbers)\n        max\n        (loop (rest numbers)\n\
    \              (cond ((> max head) max)\n                    ((< max head) (loop\
    \ (rest numbers) (max head)))\n                    (else (loop (rest numbers)\
    \ max))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers))\n\
    \        (if (null? (cdr numbers))\n            (cons (car numbers) max-so-far)\n\
    \            (let ((next-max (car numbers))\n                  (next-numbers (cdr\
    \ numbers)))\n              (if (> (car numbers) max-so-far)\n               \
    \   (set! max-so-far next-max)\n                  (set! numbers (cons next-max\
    \ next-numbers)))))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (if (null? numbers)\n        max\n        (let ((number (car numbers))\n\
    \              (max (if (> number max)\n                      max\n          \
    \            number)))\n          (loop (cdr numbers)\n                max))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (cond ((null? numbers)\
    \ max)\n          ((null? (cdr numbers)) (car max))\n          (else (loop (cdr\
    \ numbers)\n                      (cons (max (car numbers)) max)))))\n  max)\n",
  "  (let loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far-so-far\
    \ (first numbers))\n             (max-so-far-so-far-so-far #f)\n             (max-so-far-so-far-so-far-so-far\
    \ #f)\n             (max-so-far-so-far-so-far-so-far-so-far #f)\n            \
    \ (max-so-far-so-far-so-far-so-far-so-far-so-far #f))\n    (if (null? numbers)\n\
    \        (list max-so-far)\n        (loop (rest numbers)\n              (if (>\
    \ max-so-far max-so-far-so-far)\n                  max-so-far\n              \
    \    (if (> max-so-far-so-far-so-far max-so-far-so-far-so-far)\n             \
    \         max-so-far-so-far\n                      (if (> max-so-far-so-far-so-far-so-far\
    \ max-so-far-so-far-so-far-so-far)\n                          max-so-far-so-far-so-far\n\
    \                          (if (> max-so-far-so-far-so-far-so-far-so-far max-so-far-so-far-so-far-so-far-so-far)\n\
    \                              max-so-far-so-far-so-far-so-far\n             \
    \                 (if (> max-so-far-so-far-so-far-so-far-so-far-so-far max-so-far-so-far-so-far-so-far-so-far)\n\
    \                                  max-so-far-so-far-so-far-so-far-so-far\n  \
    \                                (if (> max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ max-so-far-so-far-so-far-so-far-so-far-so-far-so-far)\n                    \
    \                  max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\n    \
    \                                  (if (> max-so-far-so-far-so-far-so-far-so-far-so-",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (if (> (first numbers)\
    \ max)\n                  (first numbers)\n                  max))))))\n", " \
    \ (let loop ((numbers numbers)\n             (result '()))\n    (cond ((null?\
    \ numbers) result)\n          ((null? (cdr numbers)) (cons (car numbers) result))\n\
    \          (else (loop (cdr numbers)\n                      (cons (max (car numbers)\
    \ (car result))\n                            result))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far (reverse\
    \ max-so-far)))\n        (if (null? max-so-far)\n            (cons numbers (reverse\
    \ max-so-far-so-far))\n            (let ((next-number (car max-so-far))\n    \
    \              (next-max-so-far (cdr max-so-far)))\n              (if (> (car\
    \ max-so-far) next-number)\n                  (cons next-number (cons next-max-so-far\
    \ (cdr max-so-far-so-far)))\n                  (cons next-max-so-far (cons next-number\
    \ (cdr max-so-far-so-far))))))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (let ((max (car numbers))\n            (rolling (list max)))\n        (if (null?\
    \ (cdr numbers))\n            (cons max rolling)\n            (let ((next (car\
    \ numbers))\n                  (rolling (list next)))\n              (if (> max\
    \ next)\n                  (cons max rolling)\n                  (rolling_max\
    \ (cdr numbers)))))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (if (null? numbers)\n        max\n        (loop (rest numbers)\n        \
    \      (cond ((> max number) (cons max numbers))\n                    ((< max\
    \ number) (loop (rest numbers) number))\n                    (else (loop (rest\
    \ numbers) max))))))\n", "  (let loop ((numbers numbers)\n             (max-so-far\
    \ #f)\n             (max-so-far-so-far (first numbers))\n             (max-so-far-so-far-so-far\
    \ max-so-far))\n    (if (null? numbers)\n        (list max-so-far)\n        (loop\
    \ (rest numbers)\n              (if (> max-so-far max-so-far-so-far)\n       \
    \           max-so-far\n                  max-so-far-so-far)\n              (if\
    \ (> max-so-far-so-far-so-far max-so-far-so-far)\n                  max-so-far-so-far\n\
    \                  max-so-far-so-far-so-far))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (if (null? numbers)\n        max\n        (loop\
    \ (rest numbers)\n              (if (> (first numbers) max)\n                \
    \  (first numbers)\n                  max))))))\n", "  (let loop ((numbers numbers)\n\
    \             (result '()))\n    (if (null? numbers)\n        result\n       \
    \ (loop (rest numbers)\n              (cons (max (first numbers)\n           \
    \              (first result))\n                    result)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (cons max roll)\n        \
    \    (let ((max (car roll))\n                  (roll (cdr roll)))\n          \
    \    (if (> (car roll) max)\n                  (cons max roll)\n             \
    \     (rolling_max (cons (car roll) roll))))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (max-list (cdr numbers)))\n\
    \        (if (null? max-list)\n            (list max)\n            (if (> (car\
    \ max-list) max)\n                (list max)\n                (if (> (car max-list)\
    \ max)\n                    (cons (car max-list) (rolling_max (cdr max-list)))\n\
    \                    (rolling_max (cdr max-list))))))))\n", "  (define (rolling_max-helper\
    \ numbers index max)\n    (cond ((null? numbers) (list max))\n          ((= index\
    \ 0) (cons max numbers))\n          ((< index 0) (rolling_max-helper (rest numbers)\
    \ (- index 1) max))\n          (else (rolling_max-helper (rest numbers) (- index\
    \ 1) (max max))))\n  (rolling_max-helper numbers 0 0))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max_list))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling_max\
    \ (cdr numbers))\n            (rolling_max_found (cons max rolling_max_found)))\n\
    \        (if (null? rolling_max_found)\n            (cons max rolling_max_found)\n\
    \            (rolling_max_found))))\n", "  (let loop ((numbers numbers)\n    \
    \         (max '()))\n    (if (null? numbers)\n        max\n        (loop (rest\
    \ numbers)\n              (if (> (first numbers) max)\n                  (first\
    \ numbers)\n                  max))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n       \
    \     (list max)\n            (let ((next-max (car numbers)))\n              (if\
    \ (> max next-max)\n                  (list max)\n                  (list next-max)))))\n\
    \        (rolling_max (cdr numbers))))\n", "  (let loop ((numbers numbers)\n \
    \            (max '()))\n    (if (null? numbers)\n        max\n        (loop (rest\
    \ numbers)\n              (if (> (first numbers) max)\n                  (first\
    \ numbers)\n                  max)))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (max-list (cdr numbers)))\n    \
    \    (if (null? max-list)\n            (list max)\n            (if (> max max-list)\n\
    \                (list max)\n                (if (null? (cdr max-list))\n    \
    \                (list max)\n                    (rolling_max (cdr max-list))))))))\n",
  "  (let loop ((numbers numbers)\n             (max #f)\n             (max-list #f)\n\
    \             (max-index #f)\n             (max-index 0))\n    (cond\n      [(null?\
    \ numbers) (list max)]\n      [(< max-index #(length numbers)) (list max)]\n \
    \     [else (loop (rest numbers)\n                  (max numbers (car numbers))\n\
    \                  (cons (car numbers) max-list)\n                  (+ max-index\
    \ 1))]))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            (cons\
    \ max roll)\n            (if (> (car roll) max)\n                (cons max roll)\n\
    \                (rolling_max (cdr roll)))))\n      )\n    )\n", "  (let loop\
    \ ((numbers numbers)\n             (max-list '())\n             (max-so-far 0))\n\
    \    (if (null? numbers)\n        (reverse max-list)\n        (let ((number (car\
    \ numbers))\n              (max-so-far (+ max-so-far number)))\n          (loop\
    \ (cdr numbers)\n                (cons (max max-so-far number) max-list)\n   \
    \             max-so-far))))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ ((max (car numbers))\n            (roll (cdr numbers)))\n        (if (null?\
    \ roll)\n            (cons max roll)\n            (let ((max (car roll))\n   \
    \               (roll (cdr roll)))\n              (if (> max roll)\n         \
    \         (cons max roll)\n                  (rolling_max roll)))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (roll\
    \ (cdr numbers)))\n        (if (null? roll)\n            (list max)\n        \
    \    (let ((max (max max roll)))\n              (if (null? roll)\n           \
    \       (list max)\n                  (let ((max (max max roll)))\n          \
    \          (if (null? roll)\n                        (list max)\n            \
    \            (let ((max (max max roll)))\n                          (if (null?\
    \ roll)\n                              (list max)\n                          \
    \    (let ((max (max max roll)))\n                                (if (null? roll)\n\
    \                                    (list max)\n                            \
    \        (let ((max (max max roll)))\n                                      (if\
    \ (null? roll)\n                                          (list max)\n       \
    \                                   (let ((max (max max roll)))\n            \
    \                                (if (null? roll)\n                          \
    \                      (list max)\n                                          \
    \      (let ((max (max max roll)))\n                                         \
    \         (if (null? roll)\n                                                 \
    \     (list max)\n                                                      (let ((max\
    \ (max max roll)))\n                                                        (if\
    \ (null? roll)\n                                                            (list\
    \ max)\n                                                            (let ((max\
    \ (max max roll)))\n                                                         \
    \     (if (null? roll)\n                                                     \
    \             (list max)\n                                                   \
    \               (let ((max (max max roll)))\n                                \
    \                                    (if (null? roll)\n                      \
    \                                                  (list max)\n              \
    \                                                          (let ((max (max max\
    \ roll)))\n                                                          (if (null?\
    \ roll)\n                                                              (list max)\n\
    \                                                              (let ((max (max\
    \ max roll)))\n                                                              \
    \  (if (null? roll)\n                                                        \
    \            (list max)\n                                                    \
    \                (let ((max (max max roll)))\n                               \
    \                                       (if (null? roll)\n                   \
    \                                                       (list max)\n         \
    \                                                                 (let ((max (max\
    \ max roll)))\n                                                            (if\
    \ (null? roll)\n                                                             \
    \   (list max)\n                                                             \
    \   (let ((max (max max roll)))\n                                            \
    \                      (if (null? roll)\n                                    \
    \                                (list max)\n                                \
    \                                    (let ((max (max max roll)))\n           \
    \                                                           (if (null? roll)\n\
    \                                                                          (list\
    \ max)\n                                                                     \
    \     (let ((max (max max roll)))\n                                          \
    \                  (if (null? roll)\n                                        \
    \                        (list max)\n                                        \
    \                        (let ((max (max max roll)))\n                       \
    \                                           (if (null? roll)\n               \
    \                                                     (list max)\n           \
    \                                                         (let ((max (max max\
    \ roll)))\n                                                                  \
    \    (if (null? roll)\n                                                      \
    \                    (list max)\n                                            \
    \                              (let ((max (", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (cond ((null? numbers) max)\n          ((> (car\
    \ numbers) max) max)\n          (else (loop (cdr numbers)\n                  \
    \     (cons (car numbers) max)))))\n  max)\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n  \
    \          (rolling_max_found (list)))\n        (if (null? rolling_max)\n    \
    \        (cons max rolling_max_found)\n            (if (> (car rolling_max) max)\n\
    \                (set! max car rolling_max)\n                (set! rolling_max_found\
    \ (cons max rolling_max_found))\n                (set! rolling_max (cdr rolling_max))\n\
    \                (set! rolling_max_found (cons max rolling_max_found))\n     \
    \           (set! rolling_max (cdr rolling_max))\n                (set! rolling_max_found\
    \ (cons max rolling_max_found))\n                (set! rolling_max (cdr rolling_max))\n\
    \                (set! rolling_max_found (cons max rolling_max_found))\n     \
    \           (set! rolling_max (cdr rolling_max))\n                (set! rolling_max_found\
    \ (cons max rolling_max_found))\n                (set! rolling_max (cdr rolling_max))\n\
    \                (set! rolling_max_found (cons max rolling_max_found))\n     \
    \           (set! rolling_max (cdr rolling_max))\n                (set! rolling_max_found\
    \ (cons max rolling_max_found))\n                (set! rolling_max (cdr rolling_max))\n\
    \                (set! rolling_max_found (cons max rolling_max_found))\n     \
    \           (set! rolling_max (cdr rolling_max))\n                (set! rolling_max_found\
    \ (cons max rolling_max_found))\n                (set! rolling_max (cdr rolling_max))\n\
    \                (set! rolling_max_found (cons max rolling_max_found))\n     \
    \           (set! rolling_max (cdr rolling_max))\n                (set! rolling_max_found\
    \ (cons max rolling_max_found))\n                (set! rolling_max (cdr rolling_max))\n\
    \                (set! rolling_max_found (cons max rolling_max_found))\n     \
    \           (set! rolling_max (cdr rolling_max))\n                (set! rolling_max_found\
    \ (cons max rolling_max_found))\n                (set! rolling_max (cdr rolling_max))\n\
    \                (set! rolling_max_found (cons max rolling_max_found))\n     \
    \           (set! rolling_max (cdr rolling_max))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling (list max)))\n\
    \        (if (null? (cdr numbers))\n            (cons max rolling)\n         \
    \   (let ((next (car numbers))\n                  (rolling (cons next rolling)))\n\
    \              (if (> max next)\n                  (cons max rolling)\n      \
    \            (rolling_max (cdr numbers)))))))\n", "  (let loop ((numbers numbers)\n\
    \             (result '()))\n    (if (null? numbers)\n        result\n       \
    \ (loop (rest numbers)\n              (cons (max result (first numbers))\n   \
    \                 result)))))\n", "  (define (rolling_max-helper numbers current-max\
    \ current-index)\n    (cond\n      [(null? numbers) (list current-max)]\n    \
    \  [(< current-index 0) (rolling_max-helper numbers (current-max numbers) (- current-index\
    \ 1))]\n      [else (rolling_max-helper\n               (cdr numbers)\n      \
    \         (cons (car numbers) current-max)\n               (+ 1 current-index))]))\n\
    \  (rolling_max-helper numbers #f 0))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n  \
    \          (max_found (null? (cdr rolling_max))))\n        (if (max_found)\n \
    \           (cons max rolling_max)\n            (cons max rolling_max))))\n",
  "  (define (rolling_max-helper numbers current-max current-index)\n    (cond ((null?\
    \ numbers) (list current-max))\n          ((= (length numbers) current-index)\
    \ (list current-max))\n          (else (let ((next-number (car numbers))\n   \
    \                    (next-index (+ current-index 1)))\n                    (rolling_max-helper\n\
    \                     (cdr numbers)\n                     (if (> next-number current-max)\n\
    \                         next-number\n                         (cons next-number\
    \ current-max))\n                     next-index))))\n  (rolling_max-helper numbers\
    \ #f 0))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n\
    \            (max-so-far (reverse max-so-far)))\n        (if (null? max-so-far)\n\
    \            (cons numbers (rolling_max (rest numbers)))\n            (let ((current\
    \ (first max-so-far))\n                  (max-so-far (rest max-so-far)))\n   \
    \           (if (> (first max-so-far) current)\n                  (cons current\
    \ max-so-far)\n                  max-so-far))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (null? tail)\n            (list max)\n            (let ((max (max\
    \ max tail)))\n              (if (null? tail)\n                  (list max)\n\
    \                  (let ((max (max max tail)))\n                    (if (null?\
    \ tail)\n                        (list max)\n                        (let ((max\
    \ (max max tail)))\n                          (if (null? tail)\n             \
    \                 (list max)\n                              (let ((max (max max\
    \ tail)))\n                                (if (null? tail)\n                \
    \                    (list max)\n                                    (let ((max\
    \ (max max tail)))\n                                      (if (null? tail)\n \
    \                                         (list max)\n                       \
    \                   (let ((max (max max tail)))\n                            \
    \                (if (null? tail)\n                                          \
    \      (list max)\n                                                (let ((max\
    \ (max max tail)))\n                                                  (if (null?\
    \ tail)\n                                                      (list max)\n  \
    \                                                    (let ((max (max max tail)))\n\
    \                                                        (if (null? tail)\n  \
    \                                                          (list max)\n      \
    \                                                      (let ((max (max max tail)))\n\
    \                                                              (if (null? tail)\n\
    \                                                                  (list max)\n\
    \                                                                  (let ((max\
    \ (max max tail)))\n                                                         \
    \           (if (null? tail)\n                                               \
    \                         (list max)\n                                       \
    \                                 (let ((max (max max tail)))\n              \
    \                                            (if (null? tail)\n              \
    \                                                (list max)\n                \
    \                                              (let ((max (max max tail)))\n \
    \                                                               (if (null? tail)\n\
    \                                                                    (list max)\n\
    \                                                                    (let ((max\
    \ (max max tail)))\n                                                         \
    \             (if (null? tail)\n                                             \
    \                             (list max)\n                                   \
    \                                       (let ((max (max max tail)))\n        \
    \                                                    (if (null? tail)\n      \
    \                                                          (list max)\n      \
    \                                                          (let ((max (max max\
    \ tail)))\n                                                                  (if\
    \ (null? tail)\n                                                             \
    \       (list max)\n                                                         \
    \           (let ((max (max max tail)))\n                                    \
    \                                  (if (null? tail)\n                        \
    \                                                  (list max)\n              \
    \                                                            (let ((max (max max\
    \ tail)))\n                                                            (if (null?\
    \ tail)\n                                                                (list\
    \ max)\n                                                                (let ((max\
    \ (max max tail)))\n                                                         \
    \         (if (null? tail)\n                                                 \
    \                   (list max)\n                                             \
    \                       (let ((max (max max tail)))\n                        \
    \                                              (if (null? tail)\n            \
    \                                                              (list max)\n  \
    \                                                                        (let\
    \ ((max (", "  (let loop ((numbers numbers)\n             (max '()))\n    (if\
    \ (null? numbers)\n        max\n        (loop (rest numbers)\n              (if\
    \ (> (first numbers) max)\n                  (first numbers)\n               \
    \   max))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (rolling_max (cdr numbers))\n            (rolling_max_list (cons\
    \ max rolling_max_list))))))\n", "  (let loop ((numbers numbers)\n           \
    \  (max '()))\n    (if (null? numbers)\n        max\n        (loop (rest numbers)\n\
    \              (cond ((> max number) (cons max number))\n                    (else\
    \ (loop (rest numbers)\n                               (first numbers))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (tail (cdr numbers)))\n        (if (null? tail)\n            (list max)\n  \
    \          (if (> max tail)\n                (list max)\n                (rolling_max\
    \ (cons max tail)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_found\
    \ (list max)))\n        (if (null? rolling_max_found)\n            (cons max rolling_max_found)\n\
    \            (let ((next_max (car rolling_max_found))\n                  (next_rolling_max_found\
    \ (cons next_max rolling_max_found)))\n              (if (> (car rolling_max_found)\
    \ max)\n                  (cons max rolling_max_found)\n                  (cons\
    \ next_max next_rolling_max_found)))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)", "  (if (null? numbers)\n \
    \     '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (list max)\n            (let ((max (max\
    \ max roll)))\n              (cons (car roll) (rolling_max (cdr roll))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (list max)\n  \
    \          (if (> max roll)\n                (list max)\n                (list\
    \ roll)))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n   \
    \ (if (null? numbers)\n        max\n        (loop (rest numbers)\n           \
    \   (cond ((> max number) (cons max numbers))\n                    ((< max number)\
    \ (loop (rest numbers) number))\n                    (else (loop (rest numbers)\
    \ max))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n\
    \        (if (null? (cdr numbers))\n            (list max)\n            (let ((next\
    \ (rolling_max (cdr numbers))))\n              (if (> (car next) max)\n      \
    \            (list max)\n                  (list max (car next))))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (if (> (car roll) max)\n                  (cons max roll)\n     \
    \             (cons max (rolling_max (cdr roll))))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (list max)\n            (let ((max (max\
    \ max roll)))\n              (cons max rolling_max (cdr roll)))))\n  )\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (tail (cdr numbers)))\n        (if (null? tail)\n            (list max)\n \
    \           (let ((max (max max tail)))\n              (if (null? tail)\n    \
    \              (list max)\n                  (let ((max (max max tail)))\n   \
    \                 (if (null? tail)\n                        (list max)\n     \
    \                   (let ((max (max max tail)))\n                          (if\
    \ (null? tail)\n                              (list max)\n                   \
    \           (let ((max (max max tail)))\n                                (if (null?\
    \ tail)\n                                    (list max)\n                    \
    \                (let ((max (max max tail)))\n                               \
    \       (if (null? tail)\n                                          (list max)\n\
    \                                          (let ((max (max max tail)))\n     \
    \                                       (if (null? tail)\n                   \
    \                             (list max)\n                                   \
    \             (let ((max (max max tail)))\n                                  \
    \                (if (null? tail)\n                                          \
    \            (list max)\n                                                    \
    \  (let ((max (max max tail)))\n                                             \
    \           (if (null? tail)\n                                               \
    \             (list max)\n                                                   \
    \         (let ((max (max max tail)))\n                                      \
    \                        (if (null? tail)\n                                  \
    \                                (list max)\n                                \
    \                                  (let ((max (max max tail)))\n             \
    \                                                       (if (null? tail)\n   \
    \                                                                     (list max)\n\
    \                                                                        (let\
    \ ((max (max max tail)))\n                                                   \
    \       (if (null? tail)\n                                                   \
    \           (list max)\n                                                     \
    \         (let ((max (max max tail)))\n                                      \
    \                          (if (null? tail)\n                                \
    \                                    (list max)\n                            \
    \                                        (let ((max (max max tail)))\n       \
    \                                                               (if (null? tail)\n\
    \                                                                          (list\
    \ max)\n                                                                     \
    \     (let ((max (max max tail)))\n                                          \
    \                  (if (null? tail)\n                                        \
    \                        (list max)\n                                        \
    \                        (let ((max (max max tail)))\n                       \
    \                                           (if (null? tail)\n               \
    \                                                     (list max)\n           \
    \                                                         (let ((max (max max\
    \ tail)))\n                                                                  \
    \    (if (null? tail)\n                                                      \
    \                    (list max)\n                                            \
    \                              (let ((max (max max tail)))\n                 \
    \                                           (if (null? tail)\n               \
    \                                                 (list max)\n               \
    \                                                 (let ((max (max max tail)))\n\
    \                                                                  (if (null?\
    \ tail)\n                                                                    (list\
    \ max)\n                                                                    (let\
    \ ((max (max max tail)))\n                                                   \
    \                   (if (null? tail)\n                                       \
    \                                   (list max)\n                             \
    \                                             (let ((max (", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far (length\
    \ numbers)))\n        (if (= max-so-far-so-far 0)\n            (cons max-so-far\
    \ max-so-far-so-far)\n            (let ((max-so-far max-so-far-so-far)\n     \
    \             (max-so-far-so-far (- max-so-far-so-far 1)))\n              (if\
    \ (= max-so-far-so-far 0)\n                  (cons max-so-far max-so-far-so-far)\n\
    \                  (let ((max-so-far max-so-far-so-far)\n                    \
    \    (max-so-far-so-far (- max-so-far-so-far 1)))\n                    (if (=\
    \ max-so-far-so-far 0)\n                        (cons max-so-far max-so-far-so-far)\n\
    \                        (let ((max-so-far max-so-far-so-far)\n              \
    \                (max-so-far-so-far (- max-so-far-so-far 1)))\n              \
    \            (if (= max-so-far-so-far 0)\n                              (cons\
    \ max-so-far max-so-far-so-far)\n                              (let ((max-so-far\
    \ max-so-far-so-far)\n                                    (max-so-far-so-far (-\
    \ max-so-far-so-far 1)))\n                                (if (= max-so-far-so-far\
    \ 0)\n                                    (cons max-so-far max-so-far-so-far)\n\
    \                                    (let ((max-so-far max-so-far-so-far)\n  \
    \                                        (max-so-far-so-far (- max-so-far-so-far\
    \ 1)))\n                                      (if (= max-so-far-so-far 0)\n  \
    \                                        (cons max-so-far max-so-far-so-far)\n\
    \                                          (let ((max-so-far max-so-far-so-far)\n\
    \                                                (max-so-far-so-far (- max-so-far-so-far\
    \ 1)))\n                                            (if (= max-so-far-so-far 0)\n\
    \                                                (cons max-so-far max-so-far-so-far)\n\
    \                                                (let ((max-so-far max-so-far-so-far)\n\
    \                                                      (max-", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max_list))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far\
    \ (rolling_max numbers)))\n        (if (> (first max-so-far) (rest max-so-far-so-far))\n\
    \            (cons (first max-so-far) (max-so-far-so-far))\n            (cons\
    \ (first max-so-far) (max-so-far-so-far)))))) ; <<< #lang racket\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (cons max roll)\n        \
    \    (let ((max (car roll))\n                  (roll (cdr roll)))\n          \
    \    (if (> max max)\n                  (cons max roll)\n                  (rolling_max\
    \ roll)))))\n        ;; This line is never reached\n        (rolling_max roll)))\n",
  "  (let loop ((numbers numbers)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (list max)\n  \
    \          (if (> max roll)\n                (list max)\n                (rolling_max\
    \ (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (rolling_max (cdr numbers))\n            (rolling_max_list\
    \ (cons max rolling_max_list))))))\n", "  (cond [(empty? numbers) empty]\n   \
    \     [(> (first numbers) (first max-roll)) (cons (first numbers) max-roll)]\n\
    \        [else (rolling_max (rest numbers))]))\n", "  (if (null? numbers)\n  \
    \    '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max roll)\n            (let ((max\
    \ (car roll))\n                  (roll (cdr roll)))\n              (cons max roll)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (max-list (cdr numbers)))\n        (if (null? max-list)\n            (list max)\n\
    \            (let ((next-max (car max-list)))\n              (if (> max next-max)\n\
    \                  (list max)\n                  (list max next-max)))))\n  ))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far #f)\n            (max-so-far-so-far\
    \ (first numbers))\n            (max-so-far-so-far-so-far max-so-far))\n     \
    \   (if (< max-so-far max-so-far-so-far)\n            (cons max-so-far max-so-far-so-far)\n\
    \            (rolling_max (rest numbers))))))\n", "  (if (null? numbers)\n   \
    \   '()\n      (let ((max (car numbers))\n            (tail (cdr numbers)))\n\
    \        (if (null? tail)\n            (list max)\n            (if (> (car tail)\
    \ max)\n                (list max)\n                (if (> (car tail) max)\n \
    \                   (rolling_max (cdr tail))\n                    (rolling_max\
    \ (cdr tail))))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (tail (cdr numbers)))\n        (if (null? tail)\n   \
    \         (list max)\n            (let ((max (max max tail)))\n              (if\
    \ (null? tail)\n                  (list max)\n                  (let ((max (max\
    \ max max)))\n                    (if (null? tail)\n                        (list\
    \ max)\n                        (let ((max (max max max)))\n                 \
    \         (if (null? tail)\n                              (list max)\n       \
    \                       (let ((max (max max max)))\n                         \
    \       (if (null? tail)\n                                    (list max)\n   \
    \                                 (let ((max (max max max)))\n               \
    \                       (if (null? tail)\n                                   \
    \       (list max)\n                                          (let ((max (max\
    \ max max)))\n                                            (if (null? tail)\n \
    \                                               (list max)\n                 \
    \                               (let ((max (max max max)))\n                 \
    \                                 (if (null? tail)\n                         \
    \                             (list max)\n                                   \
    \                   (let ((max (max max max)))\n                             \
    \                           (if (null? tail)\n                               \
    \                             (list max)\n                                   \
    \                         (let ((max (max max max)))\n                       \
    \                                       (if (null? tail)\n                   \
    \                                               (list max)\n                 \
    \                                                 (let ((max (max max max)))\n\
    \                                                                    (if (null?\
    \ tail)\n                                                                    \
    \    (list max)\n                                                            \
    \            (let ((max (max max max)))\n                                    \
    \                                      (if (null? tail)\n                    \
    \                                                          (list max)\n      \
    \                                                                        (let\
    \ ((max (max max max)))\n                                                    \
    \                            (if (null? tail)\n                              \
    \                                                      (list max)\n          \
    \                                                                          (let\
    \ ((max (max max max)))\n                                                    \
    \                                  (if (null? tail)\n                        \
    \                                                                  (list max)\n\
    \                                                                            \
    \              (let ((max (max max max)))\n                                  \
    \                                                          (if (null? tail)\n\
    \                                                                            \
    \                    (list max)\n                                            \
    \                                                    (let ((max (max max max)))\n\
    \                                                                            \
    \                      (if (null? tail)\n                                    \
    \                                                                  (list max)\n\
    \                                                                            \
    \                          (let ((max (max max max)))\n                      \
    \                                                                            \
    \      (if (null? tail)\n                                                    \
    \                                                        (list max)\n        \
    \                                                                            \
    \                        (let ((max (max max max)))\n                        \
    \                                                                            \
    \          (if (null? tail)\n                                                \
    \                                                                  (list max)\n\
    \                                                                            \
    \                                      (let ((max (max max max)))\n          \
    \                                                                            \
    \                              (if (null? tail)\n                            \
    \                                                                            \
    \                (list max)\n                                                \
    \                                                                        (let\
    \ ((max (max max max)))\n                                                    \
    \                                                                      (if (null?\
    \ tail)\n                                                                ", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (list max)\n            (let ((next (rolling_max\
    \ (cdr numbers))))\n              (if (> (car next) max)\n                  (list\
    \ max)\n                  (cons (car next) next)))))\n    )\n  )\n", "  (let loop\
    \ ((numbers numbers)\n             (max-list '())\n             (max-so-far 0))\n\
    \    (if (null? numbers)\n        (reverse max-list)\n        (let ((n (car numbers))\n\
    \              (max-so-far (+ max-so-far n)))\n          (loop (cdr numbers)\n\
    \                (cons (max max-so-far n) max-list)\n                max-so-far))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far #f)\n            (max-so-far-so-far\
    \ (car numbers))\n            (max-so-far-so-far-so-far numbers))\n        (if\
    \ (> max-so-far max-so-far-so-far)\n            (cons max-so-far max-so-far-so-far)\n\
    \            (rolling_max (cdr numbers))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
