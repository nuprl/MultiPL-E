name: HumanEval_86_anti_shuffle
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes a string and returns an ordered\
  \ version of it.\n;; Ordered version of string, is a string where all words (separated\
  \ by space)\n;; are replaced by a new word where all the characters arranged in\n\
  ;; ascending order based on ascii value.\n;; Note: You should keep the order of\
  \ words and blank spaces in the sentence.\n;; For example:\n;; >>> (anti_shuffle\
  \ \"Hi\")\n;; \"Hi\"\n;; >>> (anti_shuffle \"hello\")\n;; \"ehllo\"\n;; >>> (anti_shuffle\
  \ \"Hello World!!!\")\n;; \"Hello !!!Wdlor\"\n(define (anti_shuffle s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate anti_shuffle))\n\
  \    (check-equal? (candidate \"Hi\") \"Hi\")\n    (check-equal? (candidate \"hello\"\
  ) \"ehllo\")\n    (check-equal? (candidate \"number\") \"bemnru\")\n    (check-equal?\
  \ (candidate \"abcd\") \"abcd\")\n    (check-equal? (candidate \"Hello World!!!\"\
  ) \"Hello !!!Wdlor\")\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
  \ (candidate \"Hi. My name is Mister Robot. How are you?\") \".Hi My aemn is Meirst\
  \ .Rboot How aer ?ouy\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) s]\n    [(equal? (first s) (last s)) (anti_shuffle\
    \ (anti_shuffle (first s)))]\n    [else (cons (first s) (anti_shuffle (anti_shuffle\
    \ (first s))))]\n  )\n)\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (last s)) (anti_shuffle (rest s))]\n    [else (cons (first s)\n         \
    \       (anti_shuffle (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (last s)) (anti_shuffle (rest s))]\n    [else (cons (first s) (anti_shuffle\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (last\
    \ s)) (anti_shuffle (rest s))]\n    [else (cons (first s) (anti_shuffle (rest\
    \ s)))]))\n", "  (cond [(empty? s) s]\n        [(equal? (first s) (last s)) (anti_shuffle\
    \ (rest s))]\n        [else (cons (first s) (anti_shuffle (rest s)))]))\n", " \
    \ (let loop ((s s)\n             (result '()))\n    (if (empty? s)\n        result\n\
    \        (loop (rest s)\n              (cons (first s)\n                    (loop\
    \ (rest s)\n                          (cons (second s)\n                     \
    \           result)))))))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (last s)) (anti_shuffle (rest s))]\n    [else (cons (first s)\n         \
    \       (anti_shuffle (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (anti_shuffle (rest s))]\n    [else (cons (first s) (anti_shuffle\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (last\
    \ s)) (anti_shuffle (rest s))]\n    [else (cons (first s) (anti_shuffle (rest\
    \ s)))]))\n", "  (cond [(empty? s) s]\n        [(empty? (rest s)) (cons (first\
    \ s) '())]\n        [else (cons (first s)\n                    (anti_shuffle (rest\
    \ s)))]))\n", "  (if (null? s)\n      '()\n      (append (anti_shuffle (substring\
    \ s 0 (string-length s)))\n              (list (char->integer (char->integer (car\
    \ s))))\n              (anti_shuffle (substring s (+ 0 (string-length s)))))))\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (last s)) (anti_shuffle (rest\
    \ s))]\n    [else (cons (first s) (anti_shuffle (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(equal? (first s) (last s)) (anti_shuffle (rest s))]\n\
    \    [else (cons (first s) (anti_shuffle (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(equal? (first s) (last s)) (anti_shuffle (rest s))]\n    [else\
    \ (cons (first s)\n                (anti_shuffle (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (last s)) (anti_shuffle (rest s))]\n\
    \    [else (cons (first s) (anti_shuffle (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(equal? (first s) (last s)) (anti_shuffle (rest s))]\n    [else\
    \ (cons (first s) (anti_shuffle (rest s)))]))\n", "  (cond [(empty? s) s]\n  \
    \      [(equal? (first s) (last s)) (anti_shuffle (rest s))]\n        [else (cons\
    \ (first s)\n                    (anti_shuffle (rest s))))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(equal? (first s) (last s)) (anti_shuffle (rest s))]\n\
    \    [else (cons (first s) (anti_shuffle (rest s)))]))\n", "  (let ((chars (string->list\
    \ (string->string s))))\n    (if (null? chars)\n        '()\n        (append (sort\
    \ chars string<)\n                (anti_shuffle (substring s 0 (- (length s) 1))))))\n",
  "  (let ((chars (string->list (string->string s))))\n    (let loop ((i 0))\n   \
    \   (cond ((null? chars) s)\n            ((char=? (car chars) #\\Space)\n    \
    \         (loop (+ i 1)))\n            ((char=? (car chars) #\\Newline)\n    \
    \         (loop (+ i 1)))\n            ((char=? (car chars) #\\Newline)\n    \
    \         (loop (+ i 1)))\n            ((char=? (car chars) #\\Space)\n      \
    \       (loop (+ i 1)))\n            (else\n             (loop (+ i 1)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
