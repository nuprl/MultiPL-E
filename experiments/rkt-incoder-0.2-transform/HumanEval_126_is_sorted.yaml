name: HumanEval_126_is_sorted
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return whether or not they are\
  \ sorted\n;; in ascending order. If list has more than 1 duplicate of the same\n\
  ;; number, return False. Assume no negative numbers and only integers.\n;; Examples\n\
  ;; >>> (is_sorted (list 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #t\n\
  ;; >>> (is_sorted (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n\
  ;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1\
  \ 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted\
  \ (list 1 2 2 2 3 4))\n;; #f\n(define (is_sorted lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n\
  \    (check-equal? (candidate (list 5)) #t)\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 6)) #t)\n    (check-equal? (candidate (list 1 2 3 4\
  \ 5 6 7)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5 6 7)) #f)\n    (check-equal?\
  \ (candidate (list )) #t)\n    (check-equal? (candidate (list 1)) #t)\n    (check-equal?\
  \ (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 2 2 3 4))\
  \ #f)\n    (check-equal? (candidate (list 1 2 3 3 3 4)) #f)\n    (check-equal? (candidate\
  \ (list 1 2 2 3 3 4)) #t)\n    (check-equal? (candidate (list 1 2 3 4)) #t)\n))\n\
  \n(test-humaneval)"
completions: ["  (cond ((null? lst) #f)\n        ((equal? (first lst) (last lst))\
    \ #t)\n        (else (or (is_sorted (subseq lst 0 -1))\n                   (is_sorted\
    \ (subseq lst 1 (length lst)))))))\n", '  (< (length lst) 1))', "  (cond\n   \
    \ [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first lst)) #t]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first lst) (first\
    \ lst)) #t]\n    [else #f]))\n", "  (if (null? lst)\n      #t\n      (let ((head\
    \ (car lst))\n            (tail (cdr lst)))\n        (if (= head (car tail))\n\
    \            (is_sorted tail)\n            (not (= head (car tail)))))\n     \
    \ ))\n", "  (if (null? lst)\n      #t\n      (let ((head (car lst))\n        \
    \    (tail (cdr lst)))\n        (if (equal? (car tail) head)\n            #t\n\
    \            (if (equal? (car tail) (sort tail))\n                #t\n       \
    \         #f))))\n", "  (< (car lst) (cadr lst)))\n", "  (cond [(null? lst) #t]\n\
    \        [(equal? (first lst) (car lst)) (is_sorted (rest lst))]\n        [else\
    \ #f]))\n", "  (cond [(empty? lst) #t]\n        [(equal? (first lst) (first lst))\
    \ #t]\n        [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(equal? (first\
    \ lst) (rest lst)) #t]\n    [else #f]))\n", "  (< (car lst) (cadr lst)))\n", " \
    \ (cond [(null? lst) #t]\n        [(equal? (first lst) (car (rest lst))) #f]\n\
    \        [else (is_sorted (rest lst))]\n        ))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n", "  (cond\
    \ ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond [(empty? lst) #t]\n        [(equal? (first\
    \ lst) (first lst)) #t]\n        [else (< (first lst) (first lst))]))\n", "  (cond\
    \ ((null? lst) #f)\n        ((equal? (car lst) (cadr lst)) #t)\n        (else\
    \ (is_sorted (cdr lst)))))\n", "  (cond [(null? lst) #t]\n        [(equal? (car\
    \ lst) (cadr lst)) #t]\n        [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(equal? (first lst) (first lst)) #t]\n    [else #f]))\n", "  (cond\n   \
    \ [(empty? lst) #t]\n    [(equal? (first lst) (rest lst)) #t]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
