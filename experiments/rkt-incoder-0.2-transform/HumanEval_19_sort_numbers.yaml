name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
  \ from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n;; \"one three\
  \ five\"\n(define (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  (let ([numbers (split-string (string numbers) #\" \")])\n    (cond\n\
    \      [(empty? numbers) numbers]\n      [(equal? (first numbers) \"zero\") \"\
    zero\"]\n      [(equal? (first numbers) \"one\") \"one\"]\n      [(equal? (first\
    \ numbers) \"two\") \"two\"]\n      [(equal? (first numbers) \"three\") \"three\"\
    ]\n      [(equal? (first numbers) \"four\") \"four\"]\n      [(equal? (first numbers)\
    \ \"five\") \"five\"]\n      [(equal? (first numbers) \"six\") \"six\"]\n    \
    \  [(equal? (first numbers) \"seven\") \"seven\"]\n      [(equal? (first numbers)\
    \ \"eight\") \"eight\"]\n      [(equal? (first numbers) \"nine\") \"nine\"]\n\
    \      [else (cons (first numbers) (sort_numbers (rest numbers)))])))\n", "  (define\
    \ (helper numbers result)\n    (cond\n      [(empty? numbers) result]\n      [(equal?\
    \ (first numbers) 'zero) (helper (rest numbers) (append result (first numbers)))]\n\
    \      [(equal? (first numbers) 'one) (helper (rest numbers) (append result (first\
    \ numbers)))]\n      [(equal? (first numbers) 'two) (helper (rest numbers) (append\
    \ result (first numbers)))]\n      [(equal? (first numbers) 'three) (helper (rest\
    \ numbers) (append result (first numbers)))]\n      [(equal? (first numbers) 'four)\
    \ (helper (rest numbers) (append result (first numbers)))]\n      [(equal? (first\
    \ numbers) 'five) (helper (rest numbers) (append result (first numbers)))]\n \
    \     [(equal? (first numbers) 'six) (helper (rest numbers) (append result (first\
    \ numbers)))]\n      [(equal? (first numbers) 'seven) (helper (rest numbers) (append\
    \ result (first numbers)))]\n      [(equal? (first numbers) 'eight) (helper (rest\
    \ numbers) (append result (first numbers)))]\n      [(equal? (first numbers) 'nine)\
    \ (helper (rest numbers) (append result (first numbers)))]\n      [else (helper\
    \ (rest numbers) (append result (first numbers)))]))\n  (helper numbers \"\"))\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer! I see that my question\
    \ was a bit unclear. I've edited it now to make it clearer. Sorry about that.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  (if (empty? numbers)\n      '()\n    \
    \  (append (sort_numbers (substring numbers 0 -1))\n              (list (substring\
    \ numbers -1))))\n  )\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"\
    one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (if (null? numbers)\n      '()\n  \
    \    (append (sort_numbers (substring numbers 0 (string-length numbers)))\n  \
    \            (cons (substring numbers 1 (string-length numbers))\n           \
    \         (sort_numbers (substring numbers (string-length numbers) (string-length\
    \ numbers))))))\n", "  (let ([numbers-list (split-string numbers)])\n    (sort\
    \ numbers-list <)\n    (join numbers-list \" \")))\n", "  (cond\n    [(empty?\
    \ numbers) \"\"]\n    [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"three\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"four\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"five\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"seven\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (let ([numbers\
    \ (string->list numbers)])\n    (sort numbers (lambda (a b) (< (string->number\
    \ a) (string->number b)))))\n  (list-ref numbers 0))\n", "  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers\n          (lambda (a b)\n            (< (string->number\
    \ a) (string->number b)))))\n  (string->list numbers))\n", "  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers <)))\n", "  (cond\n    [(empty? numbers) \"\"\
    ]\n    [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n   \
    \ [(equal? (first numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"three\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"four\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"five\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"seven\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (let ([number-list\
    \ '()])\n    (for ([i (in-range (length numbers))])\n      (if (number-valid?\
    \ numbers (substring numbers i i))\n          (set! number-list (append number-list\
    \ (list numbers (substring numbers i i))))\n        (set! number-list (append\
    \ number-list (list numbers (substring numbers i i))))))))\n", "  (let ([numbers\
    \ (split-string numbers #\\Space)])\n    (cond\n      [(empty? numbers) numbers]\n\
    \      [else (cons (sort (first numbers)) \n                  (sort_numbers (rest\
    \ numbers))))])))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first\
    \ numbers) \"zero\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"one\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"two\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"three\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"four\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"five\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"six\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"seven\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"eight\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"nine\") (sort_numbers (rest numbers))]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"\
    one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (if (empty? numbers)\n      '()\n      (append (sort_numbers (substring numbers\
    \ 0 -1))\n              (list (substring numbers -1))))))\n", "  (if (empty? numbers)\n\
    \      '()\n      (append (sort_numbers (substring numbers 0 (string-length numbers)))\n\
    \              (list (substring numbers (string-length numbers) 1)))))\n", " \
    \ (if (null? numbers)\n      '()\n      (append (sort_numbers (substring numbers\
    \ 0 (string-length numbers)))\n              (cons (substring numbers (string-length\
    \ numbers) 1)\n                    (sort_numbers (substring numbers (string-length\
    \ numbers) (string-length numbers))))))\n", "  (cond\n    [(empty? numbers) \"\
    \"]\n    [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n \
    \   [(equal? (first numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"three\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"four\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"five\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"seven\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
