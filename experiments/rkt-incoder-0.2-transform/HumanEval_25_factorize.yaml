name: HumanEval_25_factorize
language: rkt
prompt: "#lang racket\n\n;; Return list of prime factors of given integer in the order\
  \ from smallest to largest.\n;; Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n;; Input number\
  \ should be equal to the product of all factors\n;; >>> (factorize 8)\n;; (list\
  \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
  \ 2 5 7)\n(define (factorize n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n\
  \    (check-equal? (candidate 2) (list 2))\n    (check-equal? (candidate 4) (list\
  \ 2 2))\n    (check-equal? (candidate 8) (list 2 2 2))\n    (check-equal? (candidate\
  \ 57) (list 3 19))\n    (check-equal? (candidate 3249) (list 3 3 19 19))\n    (check-equal?\
  \ (candidate 185193) (list 3 3 3 19 19 19))\n    (check-equal? (candidate 20577)\
  \ (list 3 19 19 19))\n    (check-equal? (candidate 18) (list 2 3 3))\n))\n\n(test-humaneval)"
completions: ["  (cond [(= n 1) '()]\n        [(= n 2) '(2 2)]\n        [(= n 3) '(3\
    \ 3)]\n        [(= n 4) '(4 2)]\n        [(= n 5) '(5 3)]\n        [(= n 6) '(6\
    \ 2)]\n        [(= n 7) '(7 3)]\n        [(= n 8) '(8 2)]\n        [(= n 9) '(9\
    \ 3)]\n        [(= n 10) '(10 2)]\n        [(= n 11) '(11 3)]\n        [(= n 12)\
    \ '(12 2)]\n        [(= n 13) '(13 3)]\n        [(= n 14) '(14 2)]\n        [(=\
    \ n 15) '(15 3)]\n        [(= n 16) '(16 2)]\n        [(= n 17) '(17 3)]\n   \
    \     [(= n 18) '(18 2)]\n        [(= n 19) '(19 3)]\n        [(= n 20) '(20 2)]\n\
    \        [(= n 21) '(21 3)]\n        [(= n 22) '(22 2)]\n        [(= n 23) '(23\
    \ 3)]\n        [(= n 24) '(24 2)]\n        [(= n 25) '(25 3)]\n        [(= n 26)\
    \ '(26 2)]\n        [(= n 27) '(27 3)]\n        [(= n 28) '(28 2)]\n        [(=\
    \ n 29) '(29 3)]\n        [(= n 30) '(30 2)]\n        [(= n 31) '(31 3)]\n   \
    \     [(= n 32) '(32 2)]\n        [(= n 33) '(33 3)]\n        [(= n 34) '(34 2)]\n\
    \        [(= n 35) '(35 3)]\n        [(= n 36) '(36 2)]\n        [(= n 37) '(37\
    \ 3)]\n        [(= n 38) '(38 2)]\n        [(= n 39) '(39 3)]\n        [(= n 40)\
    \ '(40 2)]\n        [(= n 41) '(41 3)]\n        [(= n 42) '(42 2)]\n        [(=\
    \ n 43) '(43 3)]\n        [(= n 44) '(44 2)]\n        [(= n 45) '(45 3)]\n   \
    \     [(= n 46) '(46 2)]\n        [(= n 47) '(47 3)]", "  (if (= n 1)\n      (list\
    \ 1)\n      (let ((factors (factorize (sub1 n))))\n        (if (null? factors)\n\
    \            (list n)\n            (append (map (lambda (factor) (* factor n))\
    \ factors)\n                    (list (car factors)))))))\n", "  (cond [(= n 1)\
    \ (list 1)]\n        [(= n 2) (list 2)]\n        [(= n 3) (list 3)]\n        [(=\
    \ n 4) (list 4)]\n        [(= n 5) (list 5)]\n        [(= n 6) (list 6)]\n   \
    \     [(= n 7) (list 7)]\n        [(= n 8) (list 8)]\n        [(= n 9) (list 9)]\n\
    \        [(= n 10) (list 10)]\n        [(= n 11) (list 11)]\n        [(= n 12)\
    \ (list 12)]\n        [(= n 13) (list 13)]\n        [(= n 14) (list 14)]\n   \
    \     [(= n 15) (list 15)]\n        [(= n 16) (list 16)]\n        [(= n 17) (list\
    \ 17)]\n        [(= n 18) (list 18)]\n        [(= n 19) (list 19)]\n        [(=\
    \ n 20) (list 20)]\n        [(= n 21) (list 21)]\n        [(= n 22) (list 22)]\n\
    \        [(= n 23) (list 23)]\n        [(= n 24) (list 24)]\n        [(= n 25)\
    \ (list 25)]\n        [(= n 26) (list 26)]\n        [(= n 27) (list 27)]\n   \
    \     [(= n 28) (list 28)]\n        [(= n 29) (list 29)]\n        [(= n 30) (list\
    \ 30)]\n        [(= n 31) (list 31)]\n        [(= n 32) (list 32)]\n        [(=\
    \ n 33) (list 33)]\n        [(= n 34) (list 34)]\n        [(= n 35) (list 35)]\n\
    \        [(= n 36) (list 36)]\n        [(= n 37) (list 37)]\n        [(= n 38)\
    \ (list 38)]\n        [(= n 39) (list 39)]\n        [(= n 40) (list 40)]\n   \
    \     [(= n 41) (list 41)]\n        [(= n 42) (list 42)]\n        [(= n 43) (list\
    \ 43)]\n        [(= n 44) (list 44)]\n        [(= n 45) (list 45)]\n        [(=\
    \ n 46) (list 46)]\n        [(= n 47) (list 47)]\n        [(= n 48) (list 48)]\n\
    \        [(= n 49) (list 49)]\n        [(= n 50) (list 50)]\n        [(= n 51)\
    \ (list 51)]\n", "  (cond [(= n 1) '()]\n        [(= n 2) '(2 2)]\n        [(=\
    \ n 3) '(3 3)]\n        [(= n 4) '(4 1)]\n        [(= n 5) '(5 2)]\n        [(=\
    \ n 6) '(6 2)]\n        [(= n 7) '(7 3)]\n        [(= n 8) '(8 1)]\n        [(=\
    \ n 9) '(9 2)]\n        [(= n 10) '(10 2)]\n        [(= n 11) '(11 3)]\n     \
    \   [(= n 12) '(12 1)]\n        [(= n 13) '(13 2)]\n        [(= n 14) '(14 2)]\n\
    \        [(= n 15) '(15 3)]\n        [(= n 16) '(16 1)]\n        [(= n 17) '(17\
    \ 2)]\n        [(= n 18) '(18 2)]\n        [(= n 19) '(19 3)]\n        [(= n 20)\
    \ '(20 1)]\n        [(= n 21) '(21 2)]\n        [(= n 22) '(22 2)]\n        [(=\
    \ n 23) '(23 3)]\n        [(= n 24) '(24 1)]\n        [(= n 25) '(25 2)]\n   \
    \     [(= n 26) '(26 2)]\n        [(= n 27) '(27 3)]\n        [(= n 28) '(28 1)]\n\
    \        [(= n 29) '(29 2)]\n        [(= n 30) '(30 2)]\n        [(= n 31) '(31\
    \ 3)]\n        [(= n 32) '(32 1)]\n        [(= n 33) '(33 2)]\n        [(= n 34)\
    \ '(34 2)]\n        [(= n 35) '(35 3)]\n        [(= n 36) '(36 1)]\n        [(=\
    \ n 37) '(37 2)]\n        [(= n 38) '(38 2)]\n        [(= n 39) '(39 3)]\n   \
    \     [(= n 40) '(40 1)]\n        [(= n 41) '(41 2)]\n        [(= n 42) '(42 2)]\n\
    \        [(= n 43) '(43 3)]\n        [(= n 44) '(44 1)]\n        [(= n 45) '(45\
    \ 2)]\n        [(= n 46) '(46 2)]\n        [(= n 47) '(47 3)]", "  (let loop ((n\
    \ n) (factors ()))\n    (cond ((= n 1) factors)\n          ((even? n) (loop (/\
    \ n 2) factors))\n          (else (loop (* n n) (cons (mod n n) (factors n)))))))\n",
  "  (if (= n 1)\n      '()\n      (let ((factors (factorize (- n 1))))\n        (if\
    \ (null? factors)\n            (list n)\n            (cons (car factors) (append\
    \ (cons (car factors) '()) (factorize n)))))))\n", "  (let loop ((n n) (factors\
    \ ()))\n    (cond ((= n 1) factors)\n          ((= n 0) '())\n          ((even?\
    \ n) (loop (/ n 2) (cons (car factors) factors)))\n          (else (loop (quotient\
    \ n 2) (cons (car factors) factors))))))\n", "  (if (= n 1)\n      (list 1)\n\
    \      (let ([factors (factorize (- n 1))])\n        (if (null? factors)\n   \
    \         (list n)\n            (append factors (list (first factors)))))))\n",
  "  (let loop ((n n) (factors ()))\n    (cond ((= n 1) factors)\n          ((even?\
    \ n) (loop (/ n 2) (cons n factors)))\n          (else (loop (quotient n 2) (cons\
    \ (quotient n 2) factors))))))\n", "  (cond [(= n 1) '()]\n        [(= n 2) '(2\
    \ 2)]\n        [(= n 3) '(3 3)]\n        [(= n 4) '(4 2)]\n        [(= n 5) '(5\
    \ 1)]\n        [(= n 6) '(6 2)]\n        [(= n 7) '(7 3)]\n        [(= n 8) '(8\
    \ 2)]\n        [(= n 9) '(9 1)]\n        [(= n 10) '(10 2)]\n        [(= n 11)\
    \ '(11 3)]\n        [(= n 12) '(12 2)]\n        [(= n 13) '(13 3)]\n        [(=\
    \ n 14) '(14 2)]\n        [(= n 15) '(15 3)]\n        [(= n 16) '(16 2)]\n   \
    \     [(= n 17) '(17 3)]\n        [(= n 18) '(18 2)]\n        [(= n 19) '(19 3)]\n\
    \        [(= n 20) '(20 2)]\n        [(= n 21) '(21 3)]\n        [(= n 22) '(22\
    \ 2)]\n        [(= n 23) '(23 3)]\n        [(= n 24) '(24 2)]\n        [(= n 25)\
    \ '(25 3)]\n        [(= n 26) '(26 2)]\n        [(= n 27) '(27 3)]\n        [(=\
    \ n 28) '(28 2)]\n        [(= n 29) '(29 3)]\n        [(= n 30) '(30 2)]\n   \
    \     [(= n 31) '(31 3)]\n        [(= n 32) '(32 2)]\n        [(= n 33) '(33 3)]\n\
    \        [(= n 34) '(34 2)]\n        [(= n 35) '(35 3)]\n        [(= n 36) '(36\
    \ 2)]\n        [(= n 37) '(37 3)]\n        [(= n 38) '(38 2)]\n        [(= n 39)\
    \ '(39 3)]\n        [(= n 40) '(40 2)]\n        [(= n 41) '(41 3)]\n        [(=\
    \ n 42) '(42 2)]\n        [(= n 43) '(43 3)]\n        [(= n 44) '(44 2)]\n   \
    \     [(= n 45) '(45 3)]\n        [(= n 46) '(46 2)]\n        [(= n 47) '(47 3)]",
  "  (define (factorize n acc)\n    (cond\n      [(= n 1) acc]\n      [(zero? (modulo\
    \ n n)) (factorize (/ n n) (cons n acc))]\n      [else (factorize (/ n n) (cons\
    \ (modulo n n) acc))]))\n  (factorize n '()))\n", "  (let loop ((n n) (factors\
    \ ()))\n    (cond ((= n 1) factors)\n          ((even? n) (loop (/ n 2) (cons\
    \ n factors)))\n          (else (loop (quotient n 2) (cons (quotient n 2) factors)))))))\n",
  "  (let loop ((factors nil) (n n))\n    (cond ((= n 1) factors)\n          ((= n\
    \ 2) (cons 2 factors))\n          ((= (mod n 2) 0) (loop (cons 2 factors) (/ n\
    \ 2)))\n          (else (loop (cons (mod n 2) factors) (/ n 2))))))\n", "  (let\
    \ loop ((factors ()) (n n) (i 1))\n    (if (= i 2)\n        (cons n factors)\n\
    \        (loop (cons (modulo (* n i) i) factors) (modulo (* n i) i) (inc i))))))\n",
  "  (let loop ((n n) (factors ()))\n    (cond ((= n 1) (append factors (list n)))\n\
    \          ((even? n) (loop (/ n 2) factors))\n          (else (loop (* n n) (cons\
    \ (quotient n n) (factors (quotient n n))))))))\n", "  (cond [(= n 1) '()]\n \
    \       [(= (mod n 2) 0) (cons 2 (factorize (/ n 2)))]\n        [else (cons (mod\
    \ n 2) (factorize (/ n 2)))]))\n", "  (define (factorize n acc)\n    (cond ((=\
    \ n 1) (cons n acc))\n          ((= n 2) (cons 2 (cons 1 acc)))\n          ((=\
    \ n 3) (cons 3 (cons 2 (cons 1 acc))))\n          ((= n 4) (cons 4 (cons 3 (cons\
    \ 2 (cons 1 acc)))))\n          ((= n 5) (cons 5 (cons 4 (cons 3 (cons 2 (cons\
    \ 1 acc)))))\n          ((= n 6) (cons 6 (cons 5 (cons 4 (cons 3 (cons 2 (cons\
    \ 1 acc)))))) \n          ((= n 7) (cons 7 (cons 6 (cons 5 (cons 4 (cons 3 (cons\
    \ 2 (cons 1 acc)))))) ) \n          ((= n 8) (cons 8 (cons 7 (cons 6 (cons 5 (cons\
    \ 4 (cons 3 (cons 2 (cons 1 acc)))))) ) ) \n          ((= n 9) (cons 9 (cons 8\
    \ (cons 7 (cons 6 (cons 5 (cons 4 (cons 3 (cons 2 (cons 1 acc)))))) ) ) ) \n \
    \         ((= n 10) (cons 10 (cons 9 (cons 8 (cons 7 (cons 6 (cons 5 (cons 4 (cons\
    \ 3 (cons 2 (cons 1 acc)))))) ) ) ) \n          ((= n 11) (cons 11 (cons 10 (cons\
    \ 9 (cons 8 (cons 7 (cons 6 (cons 5 (cons 4 (cons 3 (cons 2 (cons 1 acc))))))\
    \ ) ) ) ) \n          ((= n 12) (cons 12 (cons 11 (cons 10 (cons 9 (cons 8 (cons\
    \ 7 (cons 6 (cons 5 (cons 4 (cons 3 (cons 2 (cons 1 acc)))))) ) ) ) ) ) \n   \
    \       ((= n 13) (cons 13 (cons 12 (cons 11 (cons 10 (cons 9 (cons 8 (cons 7\
    \ (cons 6 (cons 5 (cons 4 (cons 3 (cons 2 (cons 1 acc)))))) ) ) ) ) ) ) \n   \
    \       ((= n 14) (cons 14 (cons 13 (", "  (define (factorize n acc)\n    (cond\n\
    \      [(= n 1) (cons n acc)]\n      [(zero? (modulo n 2)) (factorize (/ n 2)\
    \ (cons n acc))]\n      [else (factorize (quotient n 2) (cons (modulo n 2) acc))]))\n\
    \  (factorize n '()))\n", "  (let loop ((n n) (factors ()))\n    (cond ((= n 1)\
    \ factors)\n          ((zero? (modulo n n)) (loop (quotient n n) (cons n factors)))\n\
    \          (else (loop (quotient n n) (cons (modulo n n) factors))))))\n", " \
    \ (cond [(= n 1) '()]\n        [(= n 2) '(2 2)]\n        [(= n 3) '(3 3)]\n  \
    \      [(= n 4) '(4 2)]\n        [(= n 5) '(5 3)]\n        [(= n 6) '(6 2)]\n\
    \        [(= n 7) '(7 3)]\n        [(= n 8) '(8 2)]\n        [(= n 9) '(9 3)]\n\
    \        [(= n 10) '(10 2)]\n        [(= n 11) '(11 3)]\n        [(= n 12) '(12\
    \ 2)]\n        [(= n 13) '(13 3)]\n        [(= n 14) '(14 2)]\n        [(= n 15)\
    \ '(15 3)]\n        [(= n 16) '(16 2)]\n        [(= n 17) '(17 3)]\n        [(=\
    \ n 18) '(18 2)]\n        [(= n 19) '(19 3)]\n        [(= n 20) '(20 2)]\n   \
    \     [(= n 21) '(21 3)]\n        [(= n 22) '(22 2)]\n        [(= n 23) '(23 3)]\n\
    \        [(= n 24) '(24 2)]\n        [(= n 25) '(25 3)]\n        [(= n 26) '(26\
    \ 2)]\n        [(= n 27) '(27 3)]\n        [(= n 28) '(28 2)]\n        [(= n 29)\
    \ '(29 3)]\n        [(= n 30) '(30 2)]\n        [(= n 31) '(31 3)]\n        [(=\
    \ n 32) '(32 2)]\n        [(= n 33) '(33 3)]\n        [(= n 34) '(34 2)]\n   \
    \     [(= n 35) '(35 3)]\n        [(= n 36) '(36 2)]\n        [(= n 37) '(37 3)]\n\
    \        [(= n 38) '(38 2)]\n        [(= n 39) '(39 3)]\n        [(= n 40) '(40\
    \ 2)]\n        [(= n 41) '(41 3)]\n        [(= n 42) '(42 2)]\n        [(= n 43)\
    \ '(43 3)]\n        [(= n 44) '(44 2)]\n        [(= n 45) '(45 3)]\n        [(=\
    \ n 46) '(46 2)]\n        [(= n 47) '(47 3)]"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
