name: HumanEval_147_get_max_triples
language: rkt
prompt: "#lang racket\n\n;; You are given a positive integer n. You have to create\
  \ an integer array a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
  \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k]) of\
  \ a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
  \ :\n;; >>> (get_max_triples 5)\n;; 1\n;; Explanation: \n;; a = [1, 3, 7, 13, 21]\n\
  ;; The only valid triple is (1, 7, 13).\n(define (get_max_triples n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n\
  \    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal?\
  \ (candidate 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
completions: ["  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n)\
    \ (if (= (+ k n) k) 0 (+ k n))]\n      [else (+ i j k)]))\n  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k)\
    \ (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n) (if (= (+ k n) k) 0 (+ k n))]\n\
    \      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n\
    \      [(< k n) (if (= (+ k n) k) 0 (+ k n))]\n      [else (+ i j k)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n  \
    \    [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n) (if (= (+ k n) k)\
    \ 0 (+ k n))]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k)\
    \ 0 (+ j k))]\n      [(< k n) (if (= (+ k n) k) 0 (+ k n))]\n      [else (+ i\
    \ j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n)\
    \ (if (= (+ k n) k) 0 (+ k n))]\n      [else (+ i j k)]))\n  (define (helper i\
    \ j k)\n    (cond\n      [(< ", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k) (+ i j)\
    \ 0)]\n      [(< k n) (if (= (+ i j) k) (+ i j) 0)]\n      [else (+ 1 (helper\
    \ (+ i 1) (+ j 1) k))]))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n  \
    \  (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i 1)\
    \ (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else (+\
    \ i (+ j (+ k 1)))]))\n  (helper 1 n n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j\
    \ k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (- k 1))) 0)]\n      [(< k i) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j (- k 1))) 0)]\n      [else (+ 1 (helper\
    \ (+ i 1) j (- k 1)))]))\n  (helper 1 1 n))\n", "  (let loop ((i 1)\n        \
    \     (a #(1 3 7 13 21)))\n    (if (< i n)\n        (loop (+ i 1) a)\n       \
    \ (if (= (+ i 1) (+ n 1))\n            (+ 1 (loop (+ i 1) a))\n            (+\
    \ 1 (loop (+ i 1) (cons (+ i 1) a)))))))\n", "  (define (helper a i j k)\n   \
    \ (cond\n      [(< i j) (+ 1 (helper (+ a i) i (+ j 1) k))] \n      [(< j k) (+\
    \ 1 (helper (+ a i) i (+ j k) k))] \n      [(< k n) (+ 1 (helper (+ a i) i (+\
    \ j k) k))]\n      [else 0]))\n  (helper '() 1 2 3))\n", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)\
    \ (helper (+ i 1) k (+ j k)))\n                   (helper (+ i 1) j k))]\n   \
    \   [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1)\
    \ j k)))]\n      [(< k i) (if (= (+ i j) k) (+ 1 (helper (+ i k) j (+ j k)) (helper\
    \ (+ i k) j k)))]\n      [else 0]))\n  (helper 1 1 n))\n", "  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n     \
    \     ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) (+ k i))))\n\
    \  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k) (+ i j) 0)]\n  \
    \    [(< i k) (if (= (+ i j) k) (+ i j) 0)]\n      [else (+ 1 (helper (+ i j)\
    \ (+ j k) (+ k i)))]))\n  (helper 1 2 n))\n", "  (let loop ((i 1) (a #(list 1)))\n\
    \    (if (< i n)\n        (loop (+ i 1) (cons a (list i)))\n        (if (= (modulo\
    \ (+ a i) 3) 0)\n            (+ 1 (loop (+ i 1) a))\n            (loop (+ i 1)\
    \ a))))))\n", "  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n     \
    \     ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n\
    \          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else\
    \ (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j)\
    \ (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n \
    \         (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i\
    \ j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j\
    \ k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n         \
    \ ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n        \
    \  ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n\
    \          ((= i k) (+ i j k))\n", "  (define (helper i j k)\n    (cond\n    \
    \  [(< i j) (if (= (+ i j k) 3) (+ i j k) 0)]\n      [(= i j) (if (= (+ i j k)\
    \ 3) (+ i j k) 0)]\n      [(= i k) (if (= (+ i j k) 3) (+ i j k) 0)]\n      [else\
    \ (helper (+ i j k) i k (+ j k i))]))\n  (helper 1 2 n))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n                  (helper\
    \ (+ i 1) j k)\n                  (helper (+ i 1) k (+ j k)))]\n      [(= i j)\
    \ (if (= (+ i j) k)\n                  (helper (+ i 1) j k)\n                \
    \  (helper (+ i k) (+ j k)))]\n      [(= i k) (if (= (+ i j) k)\n            \
    \      (helper (+ i k) (+ j k) k)\n                  (helper (+ i k) (+ j k) k))]))\n\
    \  (helper 1 n n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j k) 3) 1 0)]\n      [(< j k) (if (= (+ i j k) 3) 1 0)]\n      [(< k\
    \ i) (if (= (+ i j k) 3) 1 0)]\n      [else (if (= (+ i j k) 3) 1 0)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j k) 3) 1 0)]\n      [(<\
    \ j k) (if (= (+ i j k) 3) 1 0)]\n      [(< k i) (if (= (+ i j k) 3) 1 0)]\n \
    \     [else (if (= (+ i j k) 3) 1 0)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j k) 3) 1 0)]\n      [(< j k) (if (= (+ i j k) 3)\
    \ 1 0)]\n      [(< k i) (if (= (+ i j k) 3) 1 0)]\n      [else (if (= (+ i j k)\
    \ 3) 1 0)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j k) 3) 1 0)]\n      [(< j k) (if (= (+ i j k) 3) 1 0)]\n      [(< k i) (if\
    \ (= (+ i j k) 3) 1 0)]\n      [else (if (= (+ i j k) 3) 1 0)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j k) 3) 1 0)]\n      [(< j k)\
    \ (if (= (+ i j k) 3) 1 0)]\n      [(< k i) (if (= (+ i j k) 3) 1 0)]\n      [else\
    \ (if (= (+ i j k) 3) 1 0)]))\n  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j k) 3) 1 0)]\n      [(< j k) (if (= (+ i j k) 3) 1 0)]\n \
    \     [(< k i) (if (= (+ i j k) 3) 1 0)]\n      [else (if (= (+ i j k) 3) 1 0)]))\n\
    \  (define (helper i j k)\n", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ j k) k) (+ j k)\
    \ k)]\n      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]\n      ))\n  (cond\n\
    \    [(< n 1) 0]\n    [else (helper (+ 1 n) (+ 1 n) (+ 1 n))]))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n      [(< j\
    \ k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k\
    \ 1))]\n      [(= (* i i j) (* 3 k)) (+ i (+ j k))]\n      [(= (* j j k) (* 3\
    \ i)) (+ j (+ k i))]\n      [(= (* i j k) (* 3 j)) (+ i (+ k j))]\n      [(= (*\
    \ j i k) (* 3 k)) (+ j (+ i k))]\n      [else 0]))\n  (helper 1 2 n))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n              \
    \    (+ 1 (helper (+ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j\
    \ k))))]\n      [(< j k) (if (= (+ i j) k)\n                  (+ 1 (helper (+\
    \ i k) j k))\n                  (+ 1 (helper (+ i k) k (+ j k))))]\n      [(<\
    \ i k) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n     \
    \             (+ 1 (helper (+ i k) k (+ j k))))]\n      [else 0]))\n  (helper\
    \ 1 2 n))\n", "  (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n   \
    \ (if (< i n)\n        (loop (append a (list i)) (+ i 1))\n        (loop a (+\
    \ i 1)))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+\
    \ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n            \
    \      (if (= (+ i k) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n\
    \                  (if (= (+ k j) i) (+ 1 (helper (+ i 1) j k) (helper (+ i 1)\
    \ k (+ j k)))\n                  (if (= (+ k i) j) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k j) j)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ k i) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ k j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ k j) ", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ 0 (helper (+ i 1) j k))] \n      [(< j k) (+ 0 (helper (+ i\
    \ 1) (+ j 1) k))] \n      [(< k n) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n \
    \     [else (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 2 3))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
