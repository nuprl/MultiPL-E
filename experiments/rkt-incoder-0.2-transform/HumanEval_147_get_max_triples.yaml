name: HumanEval_147_get_max_triples
language: rkt
prompt: "#lang racket\n\n;; You are given a positive integer n. You have to create\
  \ an integer array a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
  \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k]) of\
  \ a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
  \ :\n;; >>> (get_max_triples 5)\n;; 1\n;; Explanation: \n;; a = [1, 3, 7, 13, 21]\n\
  ;; The only valid triple is (1, 7, 13).\n(define (get_max_triples n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n\
  \    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal?\
  \ (candidate 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
completions: ["  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n)\
    \ (if (= (+ k n) k) 0 (+ k n))]\n      [else (+ i j k)]))\n  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k)\
    \ (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n) (if (= (+ k n) k) 0 (+ k n))]\n\
    \      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n\
    \      [(< k n) (if (= (+ k n) k) 0 (+ k n))]\n      [else (+ i j k)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n  \
    \    [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n) (if (= (+ k n) k)\
    \ 0 (+ k n))]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k)\
    \ 0 (+ j k))]\n      [(< k n) (if (= (+ k n) k) 0 (+ k n))]\n      [else (+ i\
    \ j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n)\
    \ (if (= (+ k n) k) 0 (+ k n))]\n      [else (+ i j k)]))\n  (define (helper i\
    \ j k)\n    (cond\n      [(< ", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k) (+ i j)\
    \ 0)]\n      [(< k n) (if (= (+ i j) k) (+ i j) 0)]\n      [else (+ 1 (helper\
    \ (+ i 1) (+ j 1) k))]))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n  \
    \  (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i 1)\
    \ (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else (+\
    \ i (+ j (+ k 1)))]))\n  (helper 1 n n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j\
    \ k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (- k 1))) 0)]\n      [(< k i) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j (- k 1))) 0)]\n      [else (+ 1 (helper\
    \ (+ i 1) j (- k 1)))]))\n  (helper 1 1 n))\n", "  (let loop ((i 1)\n        \
    \     (a #(1 3 7 13 21)))\n    (if (< i n)\n        (loop (+ i 1) a)\n       \
    \ (if (= (+ i 1) (+ n 1))\n            (+ 1 (loop (+ i 1) a))\n            (+\
    \ 1 (loop (+ i 1) (cons (+ i 1) a)))))))\n", "  (define (helper a i j k)\n   \
    \ (cond\n      [(< i j) (+ 1 (helper (+ a i) i (+ j 1) k))] \n      [(< j k) (+\
    \ 1 (helper (+ a i) i (+ j k) k))] \n      [(< k n) (+ 1 (helper (+ a i) i (+\
    \ j k) k))]\n      [else 0]))\n  (helper '() 1 2 3))\n", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)\
    \ (helper (+ i 1) k (+ j k)))\n                   (helper (+ i 1) j k))]\n   \
    \   [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1)\
    \ j k)))]\n      [(< k i) (if (= (+ i j) k) (+ 1 (helper (+ i k) j (+ j k)) (helper\
    \ (+ i k) j k)))]\n      [else 0]))\n  (helper 1 1 n))\n", "  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n     \
    \     ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) (+ k i))))\n\
    \  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k) (+ i j) 0)]\n  \
    \    [(< i k) (if (= (+ i j) k) (+ i j) 0)]\n      [else (+ 1 (helper (+ i j)\
    \ (+ j k) (+ k i)))]))\n  (helper 1 2 n))\n", "  (let loop ((i 1) (a #(list 1)))\n\
    \    (if (< i n)\n        (loop (+ i 1) (cons a (list i)))\n        (if (= (modulo\
    \ (+ a i) 3) 0)\n            (+ 1 (loop (+ i 1) a))\n            (loop (+ i 1)\
    \ a))))))\n", "  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n     \
    \     ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n\
    \          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else\
    \ (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j)\
    \ (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n \
    \         (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i\
    \ j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j\
    \ k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n         \
    \ ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n        \
    \  ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n\
    \          ((= i k) (+ i j k))\n", "  (define (helper i j k)\n    (cond\n    \
    \  [(< i j) (if (= (+ i j k) 3) (+ i j k) 0)]\n      [(= i j) (if (= (+ i j k)\
    \ 3) (+ i j k) 0)]\n      [(= i k) (if (= (+ i j k) 3) (+ i j k) 0)]\n      [else\
    \ (helper (+ i j k) i k (+ j k i))]))\n  (helper 1 2 n))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n                  (helper\
    \ (+ i 1) j k)\n                  (helper (+ i 1) k (+ j k)))]\n      [(= i j)\
    \ (if (= (+ i j) k)\n                  (helper (+ i 1) j k)\n                \
    \  (helper (+ i k) (+ j k)))]\n      [(= i k) (if (= (+ i j) k)\n            \
    \      (helper (+ i k) (+ j k) k)\n                  (helper (+ i k) (+ j k) k))]))\n\
    \  (helper 1 n n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j k) 3) 1 0)]\n      [(< j k) (if (= (+ i j k) 3) 1 0)]\n      [(< k\
    \ i) (if (= (+ i j k) 3) 1 0)]\n      [else (if (= (+ i j k) 3) 1 0)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j k) 3) 1 0)]\n      [(<\
    \ j k) (if (= (+ i j k) 3) 1 0)]\n      [(< k i) (if (= (+ i j k) 3) 1 0)]\n \
    \     [else (if (= (+ i j k) 3) 1 0)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j k) 3) 1 0)]\n      [(< j k) (if (= (+ i j k) 3)\
    \ 1 0)]\n      [(< k i) (if (= (+ i j k) 3) 1 0)]\n      [else (if (= (+ i j k)\
    \ 3) 1 0)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j k) 3) 1 0)]\n      [(< j k) (if (= (+ i j k) 3) 1 0)]\n      [(< k i) (if\
    \ (= (+ i j k) 3) 1 0)]\n      [else (if (= (+ i j k) 3) 1 0)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j k) 3) 1 0)]\n      [(< j k)\
    \ (if (= (+ i j k) 3) 1 0)]\n      [(< k i) (if (= (+ i j k) 3) 1 0)]\n      [else\
    \ (if (= (+ i j k) 3) 1 0)]))\n  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j k) 3) 1 0)]\n      [(< j k) (if (= (+ i j k) 3) 1 0)]\n \
    \     [(< k i) (if (= (+ i j k) 3) 1 0)]\n      [else (if (= (+ i j k) 3) 1 0)]))\n\
    \  (define (helper i j k)\n", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ j k) k) (+ j k)\
    \ k)]\n      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]\n      ))\n  (cond\n\
    \    [(< n 1) 0]\n    [else (helper (+ 1 n) (+ 1 n) (+ 1 n))]))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n      [(< j\
    \ k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k\
    \ 1))]\n      [(= (* i i j) (* 3 k)) (+ i (+ j k))]\n      [(= (* j j k) (* 3\
    \ i)) (+ j (+ k i))]\n      [(= (* i j k) (* 3 j)) (+ i (+ k j))]\n      [(= (*\
    \ j i k) (* 3 k)) (+ j (+ i k))]\n      [else 0]))\n  (helper 1 2 n))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n              \
    \    (+ 1 (helper (+ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j\
    \ k))))]\n      [(< j k) (if (= (+ i j) k)\n                  (+ 1 (helper (+\
    \ i k) j k))\n                  (+ 1 (helper (+ i k) k (+ j k))))]\n      [(<\
    \ i k) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n     \
    \             (+ 1 (helper (+ i k) k (+ j k))))]\n      [else 0]))\n  (helper\
    \ 1 2 n))\n", "  (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n   \
    \ (if (< i n)\n        (loop (append a (list i)) (+ i 1))\n        (loop a (+\
    \ i 1)))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+\
    \ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n            \
    \      (if (= (+ i k) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n\
    \                  (if (= (+ k j) i) (+ 1 (helper (+ i 1) j k) (helper (+ i 1)\
    \ k (+ j k)))\n                  (if (= (+ k i) j) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k j) j)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ k i) j) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ k i) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ k j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ k i) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ k j) ", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ 0 (helper (+ i 1) j k))] \n      [(< j k) (+ 0 (helper (+ i\
    \ 1) (+ j 1) k))] \n      [(< k n) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n \
    \     [else (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 2 3))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ 0)]\n      [(< j k) (if (= (+ i j) k) (+ i j) 0)]\n      [else (if (= (+ i j)\
    \ k) (+ i j) 0)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k) (+ i j) 0)]\n     \
    \ [else (if (= (+ i j) k) (+ i j) 0)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) 0)]\n      [else (if (= (+ i j) k) (+ i j) 0)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j\
    \ k) (if (= (+ i j) k) (+ i j) 0)]\n      [else (if (= (+ i j) k) (+ i j) 0)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ 0)]\n      [(< j k) (if (= (+ i j) k) (+ i j) 0)]\n      [else (if (= (+ i j)\
    \ k) (+ i j) 0)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k) (+ i j) 0)]\n     \
    \ [else (if (= (+ i j) k) (+ i j) 0)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) 0)]\n      [else (if (= (+ i j) k) (+ ", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) 1 0)]\n      [(< j k) (if (= (+ j\
    \ k) k) 1 0)]\n      [(= i j) (if (= (+ i j) k) 1 0)]\n      [(= j k) (if (= (+\
    \ j k) k) 1 0)]\n      [else (if (= (+ i j) (+ j k)) 1 0)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 1 0)]\n      [(< j k) (if\
    \ (= (+ j k) k) 1 0)]\n      [(= i j) (if (= (+ i j) k) 1 0)]\n      [(= j k)\
    \ (if (= (+ j k) k) 1 0)]\n      [else (if (= (+ i j) (+ j k)) 1 0)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 1 0)]\n      [(<\
    \ j k) (if (= (+ j k) k) 1 0)]\n      [(= i j) (if (= (+ i j) k) 1 0)]\n     \
    \ [(= j k) (if (= (+ j k) k) 1 0)]\n      [else (if (= (+ i j) (+ j k)) 1 0)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 1 0)]\n\
    \      [(< j k) (if (= (+ j k) k) 1 0)]\n      [(= i j) (if (= (+ i j) k) 1 0)]\n\
    \      [(= j k) (if (= (+ j k) k) 1 0)]\n      [else (if (= (+ i j) (+ j k)) 1\
    \ 0)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\
    \ 1 0)]\n      [(< j k) (if (= (+ j k) k) 1 0)]\n      [(= i j) (if (= (+ i j)\
    \ k) 1 0)]\n      [(= j k) (if (= (+ j k) k) 1 0)]\n      [else (if (= ", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(<\
    \ j k) (helper (+ j 1) i k)] \n      [else (+ (* i i j) (* j j k) (* k k k)) ]))\n\
    \  (helper 1 n n))\n", "  (let loop ((i 1)\n             (a #(1 3 7 13 21)))\n\
    \    (if (< i n)\n        (loop (+ i 1)\n               (conj a (* i i i i)))\n\
    \        (+ 1 (loop (+ i 1)\n                   (conj a (* i i i i)))))))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k))\
    \ 0)]\n      [else (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k))]\n      ))\n\
    \  (helper 1 1 1))\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)\
    \ (helper (+ i 1) k (+ j k)))\n                  (helper (+ i 1) j (+ j k)))]\n\
    \      [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i\
    \ 1) j (+ j k)))\n                  (helper (+ i 1) j (+ j k)))]\n      [(< k\
    \ n) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (+ j k)) (helper (+ i 1) k (+ j\
    \ k)))\n                  (helper (+ i 1) j (+ j k)))]\n      [else 0]))\n  (helper\
    \ 1 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n\
    \      [(= i k) (+ i j k)]\n      [else (helper (+ i k) j k)]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j\
    \ k)]\n      [else (helper (+ i k) j k)]\n    )\n  )\n  (define (helper i j k)\n\
    \    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [else\
    \ (helper (+ i k) j k)]\n    )\n  )\n  (define (helper i j k)\n    (cond\n   \
    \   [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [else (helper (+ i k)\
    \ j k)]\n    )\n  )\n  (define (helper i j k)\n    (cond\n      [(= i j) (+ i\
    \ j k)]\n      [(= i k) (+ i j k)]\n      [else (helper (+ i k) j k)]\n    )\n\
    \  )\n  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(=\
    \ i k) (+ i j k)]\n      [else (helper (+ i k) j k)]\n    )\n  )\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n  \
    \    [else (helper (+ i k) j k)]\n    )\n  )\n  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [else (helper (+\
    \ i k) j k)]\n    )\n  )\n  (define (helper i j k)\n    (cond\n      [(= i j)\
    \ (+ i j k)]\n      [(= i k) (+ i j k)]\n      [else (helper (+ i k) j k)]\n \
    \   )\n  )\n  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n \
    \     [(= i k) (+ i j k)]\n      [else (helper (+ i k) ", "  (define (helper i\
    \ j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n       \
    \   ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) (+ k i))))\n\
    \  (if (= n 0)\n      0\n      (helper (+ n) (+ n) (+ n))))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n    \
    \  [(< j k) (if (= (+ j k) k) (+ j k) (+ j k))]\n      [else (if (= (+ i j) (+\
    \ j k)) (+ i j) (+ j k))]\n    )\n  )\n  (define (helper i j k)\n    (cond\n \
    \     [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ j\
    \ k) k) (+ j k) (+ j k))]\n      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]\n\
    \    )\n  )\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ j k) k) (+ j k) (+ j k))]\n \
    \     [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]\n    )\n  )\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n    \
    \  [(< j k) (if (= (+ j k) k) (+ j k) (+ j k))]\n      [else (if (= (+ i j) (+\
    \ j k)) (+ i j) (+ j k))]\n    )\n  )\n  (define (helper i j k)\n    (cond\n \
    \     [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ j\
    \ k) k) (+ j k) (+ j k))]\n      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]\n\
    \    )\n  )\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ j k) k) (+ j k) (+ j k))]\n \
    \     [else (if (= (+ i j) (+ j k)) (+ i j", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n\
    \                  (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+\
    \ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n                  (+\
    \ 1 (helper (+ i k) k (+ j k))))]\n      [(< i k) (if (= (+ i j) k)\n        \
    \          (+ 1 (helper (+ i k) j k))\n                  (+ 1 (helper (+ i k)\
    \ k (+ j k))))]\n      [(< j k) (if (= (+ i j) k)\n                  (+ 1 (helper\
    \ (+ i k) j k))\n                  (+ 1 (helper (+ i k) k (+ j k))))]\n      [(=\
    \ i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n     \
    \             (+ 1 (helper (+ i k) k (+ j k))))]\n      [(= j k) (if (= (+ i j)\
    \ k)\n                  (+ 1 (helper (+ i k) j k))\n                  (+ 1 (helper\
    \ (+ i k) k (+ j k))))]\n      [(= i k) (if (= (+ i j) k)\n                  (+\
    \ 1 (helper (+ i k) j k))\n                  (+ 1 (helper (+ i k) k (+ j k))))]\n\
    \      [(= j k) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n\
    \                  (+ 1 (helper (+ i k) k (+ j k))))]\n      [else 0]))\n  (helper\
    \ 1 1 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (helper (+\
    \ i 1) j k)] \n      [(< j k) (helper (+ i 1) (+ j 1) k)] \n      [(< i k) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n\
    \  (helper (+ n 1) 0 0))\n", "  (define (helper i j k)\n    (if (< i j)\n    \
    \    (if (< k n)\n            (if (= (+ i j k) (* 3 i))\n                (helper\
    \ i (+ j 1) k)\n                (helper i (+ j 1) (+ k 1)))\n            (helper\
    \ i (+ j 1) (+ k 1)))\n        (if (< k n)\n            (if (= (+ i j k) (* 3\
    \ i))\n                (helper i (+ j 1) k)\n                (helper i (+ j 1)\
    \ (+ k 1)))\n            (helper i (+ j 1) (+ k 1)))))\n  (helper 1 1 1))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))]\n\
    \      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< i k) (+ 0 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]\n      [else (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n\
    \  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j k) 3) (+ i j k) 0)]\n      [(= i j) (if (= (+ i j k) 3) (+ i j k)\
    \ 0)]\n      [(= i k) (if (= (+ i j k) 3) (+ i j k) 0)]\n      [else (helper (+\
    \ i 1) (+ j 1) (+ k 1))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n\
    \    (cond ((= i j) (+ k 0))\n          ((= i k) (+ j 0))\n          ((= j k)\
    \ (+ i 0))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (helper 1 2\
    \ n))\n", "  (define (helper i j k)\n    (if (< i j)\n        (if (< j k)\n  \
    \          (if (= (+ i j k) (* 3 i))\n                (helper i (+ j k) k)\n \
    \               (helper i (+ j k) (+ k j)))\n            (helper i (+ j k) k))\n\
    \        0))\n  (helper 1 n 1))\n", "  (define (helper i j k)\n    (if (< i j)\n\
    \        (if (< k n)\n            (helper (+ i 1) (+ j 1) (+ k 1))\n         \
    \   (helper (+ i 1) (+ j 1) k))\n        (if (< k n)\n            (helper (+ i\
    \ 1) (+ j 1) k)\n            (helper (+ i 1) j k)))\n    (if (< i j)\n       \
    \ (if (= (+ i j) (+ k n))\n            (+ i j k)\n            (helper (+ i 1)\
    \ (+ j 1) (+ k 1))))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n\
    \      [else (helper (+ i j) (+ j k) k)]))\n  (helper 1 2 3))\n", "  (let loop\
    \ ((i n) (a #(list 1 3 7 13 21)))\n    (if (< i n)\n        (loop (+ i 1) a)\n\
    \        (if (= (+ i (+ i 1) (+ i 1)) (+ a i))\n            (+ 1 (loop (+ i 1)\
    \ a))\n            (loop (+ i 1) a))))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [(< i k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (=\
    \ (+ i j) k) (+ i j) k)]))\n  (cond\n    [(< n 1) 0]\n    [else (+ 1 (helper (-\
    \ n 1) (- n 1) (- n 1)))]))\n", "  (let ([a (make-array n initial-contents '())])\n\
    \    (do ([i (in-range n)]\n         [j (in-range n)]\n         [k (in-range n)])\n\
    \        ((< i j k) (set! a[i] a[i] + (* i i j)))\n      (set! a[j] a[j] + (*\
    \ j j k)))\n    (do ([i (in-range n)]\n         [j (in-range n)]\n         [k\
    \ (in-range n)])\n        ((< i j k) (set! a[i] a[i] + (* i i j)))\n      (set!\
    \ a[k] a[k] + (* k k j)))\n    (do ([i (in-range n)]\n         [j (in-range n)]\n\
    \         [k (in-range n)])\n        ((< i j k) (set! a[i] a[i] + (* i i j)))\n\
    \      (set! a[j] a[j] + (* j j k)))\n    (do ([i (in-range n)]\n         [j (in-range\
    \ n)]\n         [k (in-range n)])\n        ((< i j k) (set! a[i] a[i] + (* i i\
    \ j)))\n      (set! a[k] a[k] + (* k k j)))\n    (do ([i (in-range n)]\n     \
    \    [j (in-range n)]\n         [k (in-range n)])\n        ((< i j k) (set! a[i]\
    \ a[i] + (* i i j)))\n      (set! a[j] a[j] + (* j j k)))\n    (do ([i (in-range\
    \ n)]\n         [j (in-range n)]\n         [k (in-range n)])\n        ((< i j\
    \ k) (set! a[i] a[i] + (* i i j)))\n      (set! a[k] a[k] + (* k k j)))\n    (do\
    \ ([i (in-range n)]\n         [j (in-range n)]\n         [k (in-range n)])\n \
    \       ((< i j k) (set! a[i] a[i] + (* i i j)))\n      (set! a[k] a[k] + (* k\
    \ k j)))\n    (do ([i (in-range n)]\n         [j (in-range n)]\n         [k (in-range\
    \ n)])\n        ((< i j k) (set! a[i] a[i] + (* i i j)))\n      (set! a[k] a[k]\
    \ + (* k k j)))\n    (do (", "  (let ([a (make-array n #(list #f #f #f))])\n \
    \   (do ([i 1 (+ i 1)])\n        ((< i n) (set! a\n                       (make-array\
    \ n\n                                   (lambda (i)\n                        \
    \            (if (< i n)\n                                        (* 3 (+ (* i\
    \ i) (* i i) (* i i)))\n                                        (* 3 (+ (* i i)\
    \ (* i i) (* i i))))))))\n    (do ([i 1 (+ i 1)])\n        ((< i n) (set! a\n\
    \                       (make-array n\n                                   (lambda\
    \ (i)\n                                    (if (< i n)\n                     \
    \                   (* 3 (+ (* i i) (* i i) (* i i)))\n                      \
    \                  (* 3 (+ (* i i) (* i i) (* i i))))))))\n    (do ([i 1 (+ i\
    \ 1)])\n        ((< i n) (set! a\n                       (make-array n\n     \
    \                              (lambda (i)\n                                 \
    \   (if (< i n)\n                                        (* 3 (+ (* i i) (* i\
    \ i) (* i i)))\n                                        (* 3 (+ (* i i) (* i i)\
    \ (* i i))))))))\n    (do ([i 1 (+ i 1)])\n        ((< i n) (set! a\n        \
    \               (make-array n\n                                   (lambda (i)\n\
    \                                    (if (< i n)\n                           \
    \             (* 3 (+ (* i i) (* i i) (* i i)))\n                            \
    \            (* 3 (+ (* i i) (* i i) (* i i))))))))\n    (do ([i 1 (+ i 1)])\n\
    \        ((< i n) (set! a\n                       (make-array n\n            \
    \                       (lambda (i)\n                                    (if (<\
    \ i n)\n                                        (* 3 (+ (* i i) (* i i) (* i i)))\n\
    \                                        (* 3 (+ (* i i) (* i i) (* i i))))))))\n\
    \    (do ([i 1 (+ i 1)])\n        ((< i n) (set! a\n                       (make-array\
    \ n\n                                   (lambda (i)\n                        \
    \            (if (< i n)\n                                        (* 3 (+ (* i\
    \ i) (* i i) (* i i)))\n                                        (* 3 (+ (* i i)\
    \ (* i i) (* i i))))))))\n    (do ([i 1 (+ i 1)])\n        ((< i n) (set! a\n\
    \                       (make-array n\n                                   (lambda\
    \ (i)\n                                    (if (< i n)", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper\
    \ (+ j 1) i k)]\n      [(< k i) (helper (+ k 1) j i)]\n      [else (+ 1 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper (+ n 1) 0 0))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k))\
    \ 0)]\n      [(< j k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k)) 0)]\n     \
    \ [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j 1) k))]\n\
    \      [(= i j) (+ 1 (helper i j k))]\n      [(= j k) (+ 1 (helper i (+ j ", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))]\
    \ \n      [(< j k) (+ 0 (helper i (+ j 1) k))] \n      [else (+ 0 (helper i (+\
    \ j k) j))]))\n  (helper 1 n n))\n", "  (define (helper i j k)\n    (cond\n  \
    \    [(< i j) (helper (+ i 1) j k)]\n      [(< j k) (helper (+ i 1) k (+ j 1))]\n\
    \      [(< k n) (helper (+ i 1) k (+ j 1))]\n      [else (+ 1 (helper (+ i 1)\
    \ j (+ k 1)))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n\
    \      [else (helper (+ i j) (+ j k) k)]\n    )\n  )\n  (helper 1 2 n)\n)\n",
  "  (let ([a (make-array n initial-contents '())])\n    (define (helper i j k)\n\
    \      (cond\n        ((< i j) (set! a\n                       (append a (list\
    \ i j k)))\n         (helper (+ i 1) j k)\n        ((< j k) (set! a\n        \
    \               (append a (list i j k)))\n         (helper (+ i 1) (+ j 1) k)\n\
    \        ((< i k) (set! a\n                       (append a (list i j k)))\n \
    \        (helper (+ i 1) j k)))\n    (helper 1 1 n)))\n", "  (define (helper i\
    \ j k)\n    (if (< i j)\n        (if (< k i)\n            (if (< k j)\n      \
    \          (if (= (+ (* i i) (* j j)) (* k k))\n                    (+ 1 (helper\
    \ (+ i 1) (+ j 1) k))\n                    (+ 1 (helper (+ i 1) (+ j k) k))\n\
    \                    (+ 1 (helper (+ i k) (+ j 1) k))\n                    (+\
    \ 1 (helper (+ i k) (+ j k) k))\n                )\n            )\n        )\n\
    \    )\n  )\n  (helper 1 1 n)\n)\n", "  (define (helper i j k)\n    (cond\n  \
    \    [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (- k 1))) 0)]\n      [(< k n) (if (=\
    \ (+ i j) k) (+ 1 (helper (+ i 1) j (- k 1))) 0)]\n      [else (+ 1 (helper (+\
    \ i 1) j (- k 1)))]))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (helper (+ i 1) j k)]\n      [(< j k) (helper (+ i 1) (+ j 1)\
    \ k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= (+ i j) (+\
    \ i k) (+ j k)) (+ i j k)]\n      [(= (+ i j) (+ i k) (+ k j)) (+ i j k)]\n  \
    \    [(= (+ i j) (+ j k) (+ k i)) (+ i j k)]\n      [(= (+ i j) (+ k j) (+ k i))\
    \ (+ i j k)]\n      [(= (+ i j) (+ k i) (+ k j)) (+ i j k)]\n      [(= (+ i k)\
    \ (+ k j) (+ k i)) (+ i j k)]\n      [(= (+ i k) (+ k i) (+ k j)) (+ i j k)]\n\
    \      [(= (+ i k) (+ j k) (+ j i)) (+ i j k)]\n      [(= (+ i k) (+ j i) (+ j\
    \ k)) (+ i j k)]\n      [(= (+ i k) (+ j k) (+ j i)) (+ i j k)]\n      [(= (+\
    \ i k) (+ j i) (+ j k)) (+ i j k)]\n      [(= (+ i k) (+ j k) (+ j i)) (+ i j\
    \ k)]\n      [(= (+ i k) (+ j i) (+ j k)) (+ i j k)]\n      [(= (+ i k) (+ j k)\
    \ (+ j i)) (+ i j k)]\n      [(= (+ i k) (+ j i) (+ j k)) (+ i j k)]\n      [(=\
    \ (+ i k) (+ j k) (+ j i)) (+ i j k)]\n      [(= (+ i k) (+ j i) (+ j k)) (+ i\
    \ j k)]\n      [(= (+ i k) (+ j k) (+ j i)) (+ i j k)]\n      [(= (+ i k) (+ j\
    \ i) (+ j k)) (+ i j k)]\n      [(= (+ i k) (+ j ", "  (define (helper a i j k)\n\
    \    (cond\n      [(< i j) (+ 1 (helper (+ a i) i (+ j 1) k))]\n      [(< j k)\
    \ (+ 1 (helper (+ a i) i (+ j 1) k))]\n      [(< k i) (+ 1 (helper (+ a i) i (+\
    \ j 1) k))]\n      [else (+ 1 (helper (+ a i) i (+ j 1) k))]))\n  (helper '()\
    \ 1 n n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n              \
    \    (helper (+ i 1) j (+ j k)))]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j (+ j k)) (helper (+ i 1) k (+ j k)))\n                  (helper (+\
    \ i 1) j (+ j k)))]\n      [(< k n) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (+\
    \ j k)) (helper (+ i 1) k (+ j k)))\n                  (helper (+ i 1) j (+ j\
    \ k)))]\n      [else 0]))\n  (helper 1 1 1))\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>", "  (let loop ((a #(list 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\
    \ 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\
    \ 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91\
    \ 92 93 94 95 96 97 98 99 100)]\n             (i 1))\n    (if (< i n)\n      \
    \  (loop (append a #(list i))\n               (+ i 1))\n        (loop a (+ i 1)))))\n",
  "  (let loop ((a (nth (range n) 0))\n             (i 1))\n    (if (< i n)\n    \
    \    (loop (append a (list i)) (+ i 1))\n        (+ 1 (loop a (+ i 1))))))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+\
    \ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< k i) (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+ i\
    \ j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\
    \ (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n    \
    \  [(< k i) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k)\
    \ (+ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+\
    \ i j))]\n      [(< k i) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n   \
    \   [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< k i) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< k i) (if (= (+ i j) k) (+ i j)\
    \ (+ i j))]\n      [else (if (= (+ i j", "  (define (helper a i j k)\n    (cond\n\
    \      [(< i j) (+ 0 (helper (+ a i) i k k) (helper (+ a j) j k k))]\n      [(=\
    \ i j) (+ 0 (helper (+ a i) i k k) (helper (+ a j) j k k) (helper (+ a k) i j\
    \ k))]\n      [(= i k) (+ 0 (helper (+ a i) i k k) (helper (+ a j) j k k) (helper\
    \ (+ a k) i j k))]\n      [(< i k) (+ 0 (helper (+ a i) i k k) (helper (+ a j)\
    \ j k k) (helper (+ a k) i j k))]\n      [else (+ 0 (helper (+ a i) i k k) (helper\
    \ (+ a j) j k k) (helper (+ a k) i j k))]))\n  (helper '() 1 n n))\n", "  (let\
    \ loop ((i 1) (a #(1 3 7 13 21)))\n    (if (< i n)\n        (loop (+ i 1) (conj\
    \ a (* i i i i)))\n        (+ 1 (loop (+ i 1) a))))))\n", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))] \n     \
    \ [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< k n) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< j k) (if (= (+ i j) k) (+ i\
    \ j) (+ i j))] \n      [(< k n) (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\
    \ \n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< k n) (if (=\
    \ (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) (+ i j))] \n      [(< k n) (if (= (+ i j) k) (+ i j) (+ i j))]))\n \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ (+ i j))] \n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< k\
    \ n) (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< j k) (if (= (+\
    \ i j) k) (+ i j) (+ i j))] \n      [(< k n) (if (= (+ i j) k) (+ i j) (+ i ",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+\
    \ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< k i) (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+ i\
    \ j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\
    \ (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n    \
    \  [(< k i) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k)\
    \ (+ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+\
    \ i j))]\n      [(< k i) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n   \
    \   [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< k i) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< k i) (if (= (+ i j) k) (+ i j)\
    \ (+ i j))]\n      [else (if (= (+ i j", "  (let ([a (make-array n #(list #f #f\
    \ #f))])\n    (do ([i (in-range n)])\n        ((< i n) (set! a[i] #t))\n     \
    \ (when (< i (- n 1))\n        (set! a[i] \n          (+ (* i i i) \n        \
    \     (+ (* i i j) \n                (+ (* i j k) \n                  (+ (* j\
    \ j k) \n                     (+ (* j k k) \n                        (+ (* k k\
    \ k) \n                          (+ (* k k k) \n                            (+\
    \ (* k k k) \n                              (+ (* k k k) \n                  \
    \              (+ (* k k k) \n                                  (+ (* k k k) \n\
    \                                    (+ (* k k k) \n                         \
    \             (+ (* k k k) \n                                        (+ (* k k\
    \ k) \n                                          (+ (* k k k) \n             \
    \                               (+ (* k k k) \n                              \
    \                (+ (* k k k) \n                                             \
    \   (+ (* k k k) \n                                                  (+ (* k k\
    \ k) \n                                                    (+ (* k k k) \n   \
    \                                                   (+ (* k k k) \n          \
    \                                              (+ (* k k k) \n               \
    \                                           (+ (* k k k) \n                  \
    \                                          (+ (* k k k) \n                   \
    \                                           (+ (* k k k) \n                  \
    \                                              (+ (* k k k) \n               \
    \                                                   (+ (* k k k) \n          \
    \                                                          (+ (* k k k) \n   \
    \                                                               (+ (* k k k) \n\
    \                                                                    (+ (* k k\
    \ k) \n                                                                  (+ (*\
    \ k k k) \n                                                                  \
    \  (+ (* k k k) \n                                                           \
    \       (+ (* k k k) \n                                                      \
    \              (+ (* k k k) \n                                               \
    \                   (+ (* k k k) \n                                          \
    \                          (+ (* k k k) \n                                   \
    \                               (+ (* k k k) \n                              \
    \                                      (+ (* k k k) \n                       \
    \                                           (+ (* k k k) \n                  \
    \                                                  (+ (* k k k) \n           \
    \                                                       (+ (* k k k) \n      \
    \                                                              (+ (* k k k) \n\
    \                                                                  (+ (* k k k)\
    \ \n                                                                    (+ (*\
    \ k k k) \n                                                                  (+\
    \ (* k k k) \n                                                               \
    \     (+ (* k k k) \n                                                        \
    \          (+ (* k k k) \n                                                   \
    \                 (+ (* k k k) \n                                            \
    \                      (+ (* k k k) \n                                       \
    \                             (+ (* k k k) ", "  (let loop ((i 1)\n          \
    \   (a #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1\
    \ 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13\
    \ 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1\
    \ 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13\
    \ 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1\
    \ 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13\
    \ 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1\
    \ 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13\
    \ 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1\
    \ 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13\
    \ 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1\
    \ 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13\
    \ 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1\
    \ 3 7 ", "  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((=\
    \ i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i\
    \ j) (+ j k) k))))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (=\
    \ (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+\
    \ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k\
    \ i) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+\
    \ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n  \
    \    [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ j k\
    \ i)]\n      [(< k i) (+ k i j)]\n      [else (+ i j k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ j k i)]\n  \
    \    [(< k i) (+ k i j)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ j k i)]\n      [(< k\
    \ i) (+ k i j)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (+ i j k)]\n      [(< j k) (+ j k i)]\n      [(< k i) (+ k i j)]\n\
    \      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (+ i j k)]\n      [(< j k) (+ j k i)]\n      [(< k i) (+ k i j)]\n      [else\
    \ (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n\
    \      [(< j k) (+ j k i)]\n      [(< k i) (+ k i j)]\n      [else (+ i j k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k)\
    \ (+ j k i)]\n      [(< k i) (+ k i j)]\n      [else (+ i j k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ j k i)]\n  \
    \    [(< k i) (+ k i j)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ j k i)]\n      [(< k\
    \ i) (+ k i j)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+\
    \ i 1) j k) (helper (+ i 1) k (+ j 1))) (helper (+ i 1) j k))]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j 1)) 3) (helper (+ i 1) j k))]\n\
    \      [(< k i) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (+ k 1)) 3) (helper (+\
    \ i 1) j k))]\n      [else 0]))\n  (helper 1 1 n))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n\
    \      [(< j k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [(< k\
    \ n) (if (= (+ i j) (+ j k)) (+ 1 (helper (+ i 1) (+ j 1) k)) 0)]\n      [else\
    \ 0]))\n  (helper 1 1 n))\n", "  (define (helper a i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ 1 (helper (+ i k) i j k) 1) 1)]\n      [(< j k) (if\
    \ (= (+ j k) k) (+ 1 (helper a i j k) 1) 1)]\n      [(= i j) (if (= (+ i j) k)\
    \ (+ 1 (helper a i j k) 1) 1)]\n      [(= j k) (if (= (+ j k) k) (+ 1 (helper\
    \ a i j k) 1) 1)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper a i j k) 1) 1)]\n\
    \      [(= j k) (if (= (+ j k) k) (+ 1 (helper a i j k) 1) 1)]\n      [else 0]))\n\
    \  (helper a 1 n n))\n", "  (define (helper a i j k)\n    (cond\n      [(= i j)\
    \ (+ a k)]\n      [(= i k) (+ a j)]\n      [(= j k) (+ a i)]\n      [else (helper\
    \ (+ a i) i (+ j 1) (+ k 1))]))\n  (helper 0 1 2 n))\n", "  (let ([a (make-array\
    \ n initial-contents '())])\n    (define (helper i j k)\n      (cond ((< i j)\
    \ (set! a\n                          (cons i a\n                             \
    \   (cons j a\n                                      (cons k a))))\n         \
    \   (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n    (helper 1 1 1)))\n", "  (let\
    \ loop ((a #(list 1 2 3 4 5 6))\n             (i 1))\n    (if (< i n)\n      \
    \  (loop (append a i) (i + 1))\n        (loop a (+ i 1)))))\n", "  (let loop ((a\
    \ #(list 1 2 3 4 5))\n             (i 0))\n    (if (< i n)\n        (loop (append\
    \ a (list i))\n               (+ i 1))\n        (if (= (modulo a\n           \
    \            (+ a a))\n               3)\n            (+ 1 (loop a (+ i 1)))))))\n",
  "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n  (helper 1 2 n))\n",
  "  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n      \
    \    ((= j k) 0)\n          ((= (+ (* i i) (* j j) (* k k)) 3) (+ 1 (helper (+\
    \ i 1) j k) (helper (+ i 1) k (+ j 1))))\n          (else 0))\n  (helper 1 2 n))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n  \
    \    [(< j k) (helper (+ i 1) k (+ j 1))]\n      [(< i k) (helper (+ i 1) j (+\
    \ k 1))]\n      [(= i j) (helper (+ i 1) k (+ j 1))]\n      [(= j k) (helper (+\
    \ i 1) j (+ k 1))]\n      [(= i k) (helper (+ i 1) j (+ k 1))]\n      [(= i j)\
    \ (helper (+ i 1) k (+ j 1))]\n      [(= j k) (helper (+ i 1) j (+ k 1))]\n  \
    \    [(= i k) (helper (+ i 1) j (+ k 1))]\n      [(= i j) (helper (+ i 1) k (+\
    \ j 1))]\n      [(= j k) (helper (+ i 1) j (+ k 1))]\n      [(= i k) (helper (+\
    \ i 1) j (+ k 1))]\n      [(= i j) (helper (+ i 1) k (+ j 1))]\n      [(= j k)\
    \ (helper (+ i 1) j (+ k 1))]\n      [(= i k) (helper (+ i 1) j (+ k 1))]\n  \
    \    [(= i j) (helper (+ i 1) k (+ j 1))]\n      [(= j k) (helper (+ i 1) j (+\
    \ k 1))]\n      [(= i k) (helper (+ i 1) j (+ k 1))]\n      [(= i j) (helper (+\
    \ i 1) k (+ j 1))]\n      [(= j k) (helper (+ i 1) j (+ k 1))]\n      [(= i k)\
    \ (helper (+ i 1) j (+ k 1))]\n      [(= i j) (helper (+ i 1) k (+ j 1))]\n  \
    \    [(= j k) (helper (+ i 1) j (+ k 1))]\n      [(= i k) (helper (+ i 1) j (+\
    \ k 1))]\n      [(= i j) (helper (+ i 1) k (+ j 1))]\n      [(= j k) (helper (+\
    \ i 1) j (+ k 1))]\n      [(= i k) (helper (+ i 1) j (+ k 1))]\n      [(= i j)\
    \ (helper (+ i 1) k (+ j 1))]\n", "  (define (helper i j k)\n    (cond\n     \
    \ [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ j k) k) (+\
    \ j k) 0)]\n      [(< k n) (if (= (+ k n) k) (+ k n) 0)]\n      [else (+ 1 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 1 1))\n", "  (let loop ((i 1) (a #(list\
    \ 1)))\n    (if (< i n)\n        (loop (+ i 1) (cons a i))\n        (if (= (+\
    \ a (* a a)) 3)\n            (+ 1 (loop (+ i 1) a))\n            0)))\n)\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n \
    \     [(< j k) (helper (+ j 1) i k)]\n      [(< k i) (helper (+ k 1) j i)]\n \
    \     [else (+ i j k)]))\n  (helper 1 n n))\n", "  (define (helper i j k)\n  \
    \  (if (< i j)\n        (if (< k n)\n            (if (= (+ (* i i) (* j j) (*\
    \ k k)) 3)\n                (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper\
    \ (+ k 1) i j))\n                0))\n        0))\n  (helper 1 1 1))\n</code>\n\
    <|/ a |>\n<| a tags=racket,scheme |>\n<code>", "  (define (helper i j k)\n   \
    \ (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i 1)\
    \ (+ j 1) k)]\n      [(< k n) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else (+\
    \ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 1 1))\n", "  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n     \
    \     ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n        \
    \  ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n\
    \          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else\
    \ (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j)\
    \ (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n \
    \         (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i\
    \ j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j\
    \ k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n         \
    \ ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n",
  "  (define (helper a i j k)\n    (cond\n      [(< i j) (+ 1 (helper (+ a i) i (+\
    \ j 1) k))] \n      [(< j k) (+ 1 (helper (+ a i) i (+ j 1) k))] \n      [(< k\
    \ i) (+ 1 (helper (+ a i) i (+ j 1) k))] \n      [else (+ 1 (helper (+ a i) i\
    \ (+ j 1) k))]))\n  (helper '() 1 n n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n\
    \      [else (helper (+ i j) (+ j k) k)]))\n  (helper 1 2 3))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k))\
    \ 0)]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j 1))) 0)]\n\
    \      [(< k n) (if (= (+ i j) k) (+ 1 (helper (+ i k) (+ j 1) k)) 0)]\n     \
    \ [else 0]))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n    (if (< i j)\n\
    \        (if (< k n)\n            (if (= (+ i j k) 3)\n                (+ 1 (helper\
    \ i (+ j 1) k))\n                (helper (+ i 1) j k))\n            (helper (+\
    \ i 1) j k))\n        (if (< k n)\n            (if (= (+ i j k) 3)\n         \
    \       (+ 1 (helper i (+ j 1) k))\n                (helper (+ i 1) j k))\n  \
    \          (helper (+ i 1) j k))))\n  (helper 1 1 1))\n", "  (let loop ((a #(list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\
    \ 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\
    \ 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\
    \ 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100) \n              \
    \ (i 1))\n    (if (< i n)\n        (loop (append a (list i)) (+ i 1))\n      \
    \  (loop a (+ i 1)))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j\
    \ k) k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1\
    \ (helper i (+ j 1) k)) 0)]\n      [(= j k) (if (= (+ j k) k) (+ 1 (helper i (+\
    \ j 1) k)) 0)]\n      [else 0]))\n  (if (= n 0)\n      0\n      (helper (- n 1)\
    \ 0 n)))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ i j) k) (+ 1\
    \ (helper (+ i 1) k (+ j 1))) 0)]\n      [(< k n) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i k) j k)) 0)]\n      [else (+ 1 (helper (+ i k) j k))]))\n  (helper 1 1\
    \ 1))\n", "  (define (helper i j k)\n    (if (< i j)\n        (if (< k n)\n  \
    \          (helper (+ i 1) (+ j 1) (+ k 1))\n            (helper (+ i 1) (+ k\
    \ 1) (+ j 1)))\n        (if (< k n)\n            (helper (+ i 1) (+ j 1) (+ k\
    \ 1))\n            (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (helper 1 1 1))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< i k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j\
    \ k) (if (= (+ i j) k) (+ i j) k)]\n      [(< i k) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [(< i k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (=\
    \ (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [(< i k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+\
    \ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< i\
    \ k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ k)]", "  (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j\
    \ k)] \n      [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper (+\
    \ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n\
    \  (helper 1 n n))\n", "  (let loop ((i 1) (a #(list 1)))\n    (if (< i n)\n \
    \       (loop (+ i 1) (cons (* i i i) a))\n        (if (> (car a) (cdr a))\n \
    \           (+ 1 (loop (+ i 1) (cdr a)))\n            (+ 1 (loop (+ i 1) a))))))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))]\n\
    \      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< i k) (+ 0 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n\
    \      [(< j k) (+ 0 (helper (+ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i\
    \ 1) (+ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n  \
    \    [(< j k) (+ 0 (helper (+ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1)\
    \ (+ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n     \
    \ [(< j k) (+ 0 (helper (+ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+\
    \ j 1) (+ k 1)))]\n      [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(<\
    \ j k) (+ 0 (helper (+ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1)\
    \ (+ k 1)))]\n      [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k)\
    \ (+ 0 (helper (+ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+\
    \ k 1)))]\n      [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+\
    \ 0 (helper (+ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n\
    \      [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< j k) (+ 0 (helper\
    \ (+ i 1) j k))]\n      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n   \
    \   [(< i j) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      ", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [else (if (= (+ i j) k) (+ i j) k)]))\n  (cond\n    [(< n 0) 0]\n    [else\
    \ (helper 1 (+ n 1) (+ n 1))]))\n", "  (define (helper i j k)\n    (cond\n   \
    \   [(< i j) (+ 0 (helper (+ i 1) j k))] \n      [(< j k) (+ 0 (helper (+ i 1)\
    \ (+ j 1) k))] \n      [else (+ 0 (helper (+ i 1) (+ j 1) k))]))\n  (helper 1\
    \ 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n  \
    \    [(= i k) (+ 1 j)]\n      [else (helper (+ i 1) (+ j 1) k)]))\n  (helper 1\
    \ 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n\
    \      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [(= i k) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i k) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i k) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i k) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i k) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i k) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i k) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i k) (helper\
    \ i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper\
    \ i (+ j k) k)]\n", "  (define (helper a i j k)\n    (cond\n      [(< i j) (+\
    \ 1 (helper (+ a i) i (+ j 1) k))] \n      [(< j k) (+ 1 (helper (+ a i) i (+\
    \ j k) k))] \n      [(< k i) (+ 1 (helper (+ a i) i (+ k j) k))] \n      [else\
    \ (+ 1 (helper (+ a i) i (+ k j) k))]\n    )\n  )\n  (helper '() 1 n n)\n)\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k))\
    \ 0)]\n      [else (+ 1 (helper i (+ j 1) k))]\n      ))\n  (helper 1 2 n))\n",
  "  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n        \
    \  ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n\
    \          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else\
    \ (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j)\
    \ (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n \
    \         (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i\
    \ j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j\
    \ k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n         \
    \ ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n        \
    \  ((= i k) (+ i j k))\n", "  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (+ 0 (helper (+ i 1) j k))]\n      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n\
    \      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [else (+ 0 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k)\n                  (helper (+ i 1)\
    \ j k)\n                  (helper (+ i 1) k (+ j k)))]\n      [(< j k) (if (=\
    \ (+ j k) k)\n                  (helper (+ j 1) i k)\n                  (helper\
    \ (+ j 1) k (+ i k)))]\n      [(< k i) (if (= (+ k i) k)\n                  (helper\
    \ (+ k 1) j k)\n                  (helper (+ k 1) i (+ j k)))]\n      [else (+\
    \ 1 (helper (+ i j) k (+ j k)))]))\n  (helper 1 2 n))\n", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k)\
    \ (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n) (if (= (+ k n) k) 0 (+ k n))]\n\
    \      [else (if (= (+ i j) (+ j k) (+ k n)) 0 (+ i j))]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n  \
    \    [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n) (if (= (+ k n) k)\
    \ 0 (+ k n))]\n      [else (if (= (+ i j) (+ j k) (+ k n)) 0 (+ i j))]\n    )\n\
    \  )\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0\
    \ (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k n) (if\
    \ (= (+ k n) k) 0 (+ k n))]\n      [else (if (= (+ i j) (+ j k) (+ k n)) 0 (+\
    \ i j))]\n    )\n  )\n  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n  \
    \    [(< k n) (if (= (+ k n) k) 0 (+ k n))]\n      [else (if (= (+ i j) (+ j k)\
    \ (+ k n)) 0 (+ i j))]\n    )\n  )\n  (define (helper i j k)\n    (cond\n    \
    \  [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0\
    \ (+ j k))]\n      [(< k n) (if (= (+ k n) k) 0 (+ k n))]\n      [else (if (=\
    \ (+ i j) (+ j k) (+ k n)) 0 (+ i j))]\n    )\n  )\n  (define ", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n  \
    \    [(< k i) (+ i j k)]\n      [else (+ i j k)]))\n  (cond\n    [(< n 0) 0]\n\
    \    [else (+ (* 3 (helper (- n 1) (- n 1) (- n 1)))\n             (helper (-\
    \ n 1) (- n 1) (- n 1))\n             (helper (- n 1) (- n 1) (- n 1)))]))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))]\
    \ \n      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))] \n      [(< k n) (+ 0 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]\n      [else (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n\
    \  (helper 1 2 3))\n", '  (let ([a (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #:initial-contents
    (make-array n #:initial-contents (make-array n #:initial-contents (make-array
    n #:initial-contents (make-array n #:initial-contents (make-array n #', "  (define\
    \ (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((=\
    \ j k) 0)\n          ((= (+ (* i i) (* j j) (* k k)) 3) (+ 1 (helper (+ i 1) (+\
    \ j 1) (+ k 1))))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (helper\
    \ 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ i j) k)]\n      [(< j k) (if (= (+ j k) k) (+ j k) k)]\n      [else\
    \ (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]\n      ))\n  (cond\n    [(< n 0) 0]\n\
    \    [else (helper (- n 1) (- n 1) (- n 1))]))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k)\n                   (helper (+ i\
    \ 1) j k)\n                   (helper (+ i 1) k (+ j 1)))]\n      [(< j k) (if\
    \ (= (+ i j) k)\n                   (helper (+ i 1) j (+ k 1))\n             \
    \      (helper (+ i 1) k (+ j 1)))]\n      [(< k n) (if (= (+ i j) k)\n      \
    \             (helper (+ i 1) j (+ k 1))\n                   (helper (+ i 1) k\
    \ (+ j 1)))]\n      [else 0]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n\
    \    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j\
    \ k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n     \
    \     ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n        \
    \  ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n\
    \          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else\
    \ (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j)\
    \ (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n \
    \         (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i\
    \ j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j\
    \ k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+\
    \ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+\
    \ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (=\
    \ (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n         \
    \         (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n\
    \                  (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1)\
    \ k (+ j k)))\n                  (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n   \
    \   [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j\
    \ 1) (+ k 1))]\n      [else (+ i j k)]))\n  (helper 1 n n))\n", "  (define (helper\
    \ a i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i j) i\
    \ k) \n                                           (helper (+ i j) k (+ j k)))\n\
    \                   (helper (+ i j) i k))]\n      [(< j k) (if (= (+ i j) k) (+\
    \ 1 (helper (+ i j) i k) \n                                           (helper\
    \ (+ i j) k (+ j k)))\n                   (helper (+ i j) i k))]\n      [(< i\
    \ k) (if (= (+ i j) k) (+ 1 (helper (+ i j) i k) \n                          \
    \                 (helper (+ i j) k (+ j k)))\n                   (helper (+ i\
    \ j) i k))]\n      [else (+ 1 (helper (+ i j) i k) (helper (+ i j) k (+ j k)))]))\n\
    \  (helper '(1 2 3 4 5) 0 1 n))\n", "  (define (helper i j k)\n    (cond\n   \
    \   [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ j 1) i k)]\n  \
    \    [(< k n) (helper (+ k 1) i j)]\n      [else (+ 1 (helper (+ i 1) (+ j 1)\
    \ (+ k 1)))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n \
    \     [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i 1) (+ j 1)\
    \ k)]\n      [(< k n) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= i j) (helper\
    \ (+ i 1) (+ j 1) k)]\n      [(= j k) (helper (+ i 1) j k)]\n      [(= k n) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [else 0]))\n  (helper 1 2 3))\n", "  (define\
    \ (helper i j k)\n    (if (< i j)\n        (if (< k i)\n            (if (< k j)\n\
    \                (if (= (+ (* i i) (* j j)) (* k k))\n                    (+ 1\
    \ (helper i k (+ j k)))\n                    (+ 1 (helper k (+ j k) j)))\n   \
    \             (+ 1 (helper i (+ k k) j)))\n            (+ 1 (helper i (+ k k)\
    \ j)))\n        (+ 1 (helper i (+ j j) k)))\n    (+ 1 (helper i j k)))\n  (helper\
    \ 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n              \
    \    (helper (+ i 1) j (+ j k)))]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j (+ j k)) (helper (+ i 1) k (+ j k)))\n                  (helper (+\
    \ i 1) j (+ j k)))]\n      [(< k n) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (+\
    \ j k)) (helper (+ i 1) k (+ j k)))\n                  (helper (+ i 1) j (+ j\
    \ k)))]\n      [else 0]))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n \
    \   (if (< i j)\n        (if (< k j)\n            (if (= (+ i k) (+ j k))\n  \
    \              (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1)\
    \ i j))\n                0)\n            0)\n        0))\n  (if (= n 0)\n    \
    \  0\n      (helper (+ 1 n) 1 n)))\n", "  (let loop ((i 1)\n             (a #(list\
    \ 1)))\n    (if (< i n)\n        (loop (+ i 1)\n              (cons (* i i i)\
    \ a))\n        (+ 1 (loop (+ i 1) a))))))\n", "  (let loop ((a (ref (make-array\
    \ n)))\n             (i (ref 1))\n             (j (ref 1))\n             (k (ref\
    \ 1)))\n    (cond\n      [(< i n) (loop (ref a) (+ i 1) (ref j) (ref k))]\n  \
    \    [(< j n) (loop (ref a) i (ref j) (ref k))]\n      [(< k n) (loop (ref a)\
    \ i (ref j) (ref (- k 1)))]\n      [(= (+ (* a a) (ref j)) (ref k)) (loop (ref\
    \ a) (+ i 1) (ref j) (ref (- k 1)))]\n      [else (loop (ref a) (+ i 1) (ref j)\
    \ (ref k))])))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (helper\
    \ (+ i 1) j k)]\n      [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(< k n) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n\
    \  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) 0]\n\
    \      [(= i k) 1]\n      [(= j k) 2]\n      [(= i k) (+ 1 (helper (+ i 1) (+\
    \ j 1) k))]))\n  (if (= n 0)\n      0\n      (+ 1 (helper (+ 1 n) (+ 1 n) (+ 1\
    \ n))))) ; n is positive\n</cell>\n<text>\nExercise 3\nWrite a procedure that\
    \ returns the number of positive integers less than or equal to n.\n\n\n</text>\n\
    <code language=racket-language>", "  (let loop ((i n) (a #(list 1)))\n    (if\
    \ (< i 0)\n        a\n        (loop (- i 1) (cons (+ (* i i i) (* (car a) (car\
    \ a)) (* (cadr a) (cadr a)) (caddr a)) a)))))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (=\
    \ (+ j k) k) (+ j k) 0)]\n      [(< k n) (if (= (+ k n) k) (+ k n) 0)]\n     \
    \ [else (if (= (+ i j) (+ j k) (+ k n)) (+ i j) (+ j k) (+ k n))]\n      ))\n\
    \  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ i j) (+ i k))]\n      [(< j k) (if (= (+ j k) k) (+ j k) (+\
    \ j i))]\n      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i k))]\n    \
    \  [(< j k) (if (= (+ j k) k) (+ j k) (+ j i))]\n      [else (if (= (+ i j) (+\
    \ j k)) (+ i j) (+ j k))]))\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) (+ i j) (+ i k))]\n      [(< j k) (if (= (+ j k) k) (+\
    \ j k) (+ j i))]\n      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i k))]\n\
    \      [(< j k) (if (= (+ j k) k) (+ j k) (+ j i))]\n      [else (if (= (+ i j)\
    \ (+ j k)) (+ i j) (+ j k))]))\n  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ i j) (+ i k))]\n      [(< j k) (if (= (+ j k) k) (+\
    \ j k) (+ j i))]\n      [else (if (= (+ i j) (+ j k)) (+ i j) (+ j k))]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i k))]\n\
    \      [(< j k) (if (= (+ j k) k) (+ j k) (+ j i))]\n      [else (if (= (+ i j)\
    \ (+ j k)) (+ i j) (+ j k))]))\n  (define (helper i j k)\n    (cond\n      [(< ",
  "  (let loop ((i 1)\n             (a #(for/list ((j i) (in-range (+ i 1)))\n   \
    \                   (for/list ((k i) (in-range (+ i 1)))\n                   \
    \     (if (= (+ i j) (+ i k))\n                            (+ 1 (loop (+ i k)\
    \ a j))\n                            (+ 1 (loop (+ i k) a k))))))\n    (if (=\
    \ i n)\n        (length (filter (lambda (x) (= (+ x 3) (+ x 1))) a))\n       \
    \ (loop (+ i 1) a 0))))\n", "  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n\
    \      [(< k i) (if (= (+ k i) k) 0 (+ k i))]\n      [else (+ 1 (helper (+ i 1)\
    \ (+ j 1) (+ k 1)))]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) 0)]\n      [(< k n) (if (= (+ i j) k) (+ i j) 0)]\n      [else (+ 1\
    \ (helper (+ i 1) (+ j 1) k))]))\n  (helper 1 1 1))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n\
    \      [(< j k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [(< k\
    \ n) (if (= (+ k n) k) (+ 1 (helper i (+ k 1) k)) 0)]\n      [else 0]))\n  (helper\
    \ 1 2 n))\n", "  (let ((a (ref (make-array n))))\n    (define (aux i j k)\n  \
    \    (set! a\n            (cond ((< i j) (aux i (+ j 1) k))\n                \
    \  ((< j k) (aux i (+ j 1) k))\n                  ((< k i) (aux i (+ j 1) k))\n\
    \                  (else (aux i (+ j 1) k))))\n    (aux 1 0 0)\n    (+ (+ (* a\
    \ a) (* (- a a) a)))))\n", "  (define (helper i j k)\n    (cond ((= i j) (+ i\
    \ j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n      \
    \    (else (helper (+ i j) (+ j k) (+ k i))))\n  (helper 1 2 n))\n", "  (define\
    \ (helper i j k)\n    (if (< i j)\n        (if (< k n)\n            (if (= (+\
    \ i j k) 3)\n                (+ 1 (helper i (+ j 1) k))\n                (+ 1\
    \ (helper i (+ j 1) (+ k 1))))\n            (if (= (+ i j k) 3)\n            \
    \    (+ 1 (helper i (+ j 1) (+ k 1)))\n                (+ 1 (helper i (+ j 1)\
    \ k))))\n        (if (< k n)\n            (if (= (+ i j k) 3)\n              \
    \  (+ 1 (helper i (+ j 1) k))\n                (+ 1 (helper i (+ j 1) (+ k 1))))\n\
    \            (if (= (+ i j k) 3)\n                (+ 1 (helper i (+ j 1) (+ k\
    \ 1)))\n                (+ 1 (helper i (+ j 1) k))))))\n  (helper 1 1 1))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n  \
    \    [(< j k) (helper (+ i 1) (+ j 1) k)] \n      [(< k n) (helper (+ i 1) (+\
    \ j 1) (+ k 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) k))]))\n  (helper 1\
    \ 1 1))\n", "  (define (helper i j k)\n    (if (< i j)\n        (if (< k n)\n\
    \            (if (= (+ i j k) (* 3 i))\n                (helper (+ i j k) i (+\
    \ j k 1))\n                0))\n        0))\n  (helper 1 0 1))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [(= i k) (+ 1 (helper (+ i 1) j k))]\n      [(= j k) (+ 1 (helper\
    \ (+ j 1) i k))]\n      [(= i j) (+ 1 (helper (+ i 1) k k))]\n      [(= j i) (+\
    \ 1 (helper (+ j 1) k k))]\n      [(= i k) (+ 1 (helper (+ i 1) j k))]\n     \
    \ [(= j i) (+ 1 (helper (+ j 1) i k))]\n      [(= k i) (+ 1 (helper (+ k 1) j\
    \ i))]\n      [(= i j) (+ 1 (helper (+ i 1) k k))]\n      [(= j k) (+ 1 (helper\
    \ (+ j 1) i k))]\n      [(= k j) (+ 1 (helper (+ k 1) j i))]\n      [(= i k) (+\
    \ 1 (helper (+ i 1) j k))]\n      [(= j i) (+ 1 (helper (+ j 1) i k))]\n     \
    \ [(= k j) (+ 1 (helper (+ k 1) j i))]\n      [(= i j) (+ 1 (helper (+ i 1) k\
    \ k))]\n      [(= j i) (+ 1 (helper (+ j 1) i k))]\n      [(= k i) (+ 1 (helper\
    \ (+ k 1) j i))]\n      [(= i k) (+ 1 (helper (+ i 1) j k))]\n      [(= j i) (+\
    \ 1 (helper (+ j 1) i k))]\n      [(= k j) (+ 1 (helper (+ k 1) j i))]\n     \
    \ [(= i j) (+ 1 (helper (+ i 1) k k))]\n      [(= j k) (+ 1 (helper (+ j 1) i\
    \ k))]\n      [(= k i) (+ 1 (helper (+ k 1) j i))]\n      [(= i j) (+ 1 (helper\
    \ (+ i 1) k k))]\n      [(= j i) (+ 1 (helper (+ j 1) i k))]\n      [(= k j) (+\
    \ 1 (helper (+ k 1) j i))]\n      [(= i k) (+ 1 (helper (+ i 1) j k))]\n     \
    \ [(= j i) (+ 1 (helper (+ j 1) i k))]\n      [(= k j) (+ 1 (helper (+ k 1) j\
    \ i))]\n      ", "  (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n\
    \    (if (< i n)\n        (loop (append a (list i)) (+ i 1))\n        (loop a\
    \ (+ i 1)))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (helper\
    \ (+ i 1) j k)] \n      [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n\
    \  (helper 1 n n))\n", "  (let loop ((a #(list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\
    \ 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66\
    \ 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92\
    \ 93 94 95 96 97 98 99 100) \n               (i 1))\n    (if (< i n)\n       \
    \ (loop (append a (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n      [(< j\
    \ k) (helper (+ j 1) i k)]\n      [(< k i) (helper (+ k 1) i j)]\n      [(= i\
    \ j) (helper (+ i 1) (+ j 1) k)]\n      [(= j k) (helper (+ j 1) (+ k 1) i)]\n\
    \      [(= k i) (helper (+ k 1) (+ i 1) j)]\n      [else (+ 1 (helper (+ i 1)\
    \ (+ j 1) (+ k 1) i))]))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n  \
    \  (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ j 1)\
    \ i k)]\n      [(< k i) (helper (+ k 1) j i)]\n      [else (+ i j k)]))\n  (helper\
    \ 1 n n))\n", "  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((=\
    \ i k) 0)\n          ((= j k) 0)\n          ((= (+ (* i i) (* j j) (* k k)) 3)\
    \ (+ 1 (helper (+ i 1) (+ j 1) (+ k 1))))\n          (else (helper (+ i 1) (+\
    \ j 1) (+ k 1)))))\n  (helper 1 n n))\n", "  (let loop ((i 1)\n             (a\
    \ #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3\
    \ 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21\
    \ #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3\
    \ 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21\
    \ #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3\
    \ 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21\
    \ #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3\
    \ 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21\
    \ #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3\
    \ 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21\
    \ #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3\
    \ 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21\
    \ #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3 7 13 21 #(1 3\
    \ 7 ", "  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((=\
    \ i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i\
    \ j) (+ j k) (+ k i))))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n   \
    \ (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i 1)\
    \ (+ j 1) k)] \n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (helper 1 n\
    \ n))\n", "  (let ([a (make-array n #:initial-contents (make-array n #:initial-contents\
    \ (make-array n #:initial-contents 0))])\n    (do ([i (in-range n) (+ i 1)])\n\
    \        ((< i n) (return-from get_max_triples 0))\n      (set! a[i] \n      \
    \      (+ (* i (- i 1))\n              (+ (* i i 1)\n                (* i (- i\
    \ 1)))))\n    (do ([i (in-range n) (+ i 1)])\n        ((< i n) (return-from get_max_triples\
    \ 0))\n      (set! a[i] \n            (+ (* i (- i 1))\n              (+ (* i\
    \ i 1)\n                (* i (- i 1)))))))\n", "  (define (helper i j k)\n   \
    \ (if (< i j)\n        (if (< k n)\n            (if (= (+ (* i i) (* j j) (* k\
    \ k)) 3)\n                (+ 1 (helper (+ i 1) (+ j 1) k))\n                0))\n\
    \        0))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n    (cond\n   \
    \   [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k)\
    \ (if (= (+ j k) n) (+ 1 (helper i (+ j 1) k)) 0)]\n      [else (+ 1 (helper i\
    \ (+ j 1) k))]\n      ))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n  \
    \  (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (=\
    \ (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i j) (+ j k)) 0 (+ i j))]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i\
    \ j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i\
    \ j) (+ j k)) 0 (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n\
    \      [else (if (= (+ i j) (+ j k)) 0 (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (=\
    \ (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i j) (+ j k)) 0 (+ i j))]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i\
    \ j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i\
    \ j) (+ j k)) 0 (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n\
    \      [else (if (= (+ i j) (+ j k)) 0 (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (=\
    \ (+ j k) k) 0 (+ j k))]\n      [else (if (= (+ i j) (+ j k)) 0 (", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+\
    \ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k))\
    \ 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n     \
    \ [(= j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [else 0]))\n\
    \  (helper (+ 1 n) n n))\n", "  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j k) 3) 1 0)]\n      [(< j k) (if (= (+ i j k) 3) 1 0)]\n   \
    \   [(< k i) (if (= (+ i j k) 3) 1 0)]\n      [else (+ 1 (helper (+ i j) k (+\
    \ k j)))]))\n  (helper 1 2 n))\n", "  (let loop ((i n) (a #(list 1)))\n    (if\
    \ (< i n)\n        (loop (+ i 1) (cons (* i i i) a))\n        (if (= (+ i 1) (+\
    \ n 1))\n            (+ 1 (loop (+ i 1) a))\n            (loop (+ i 1) a))))))\n",
  "  (let loop ((i n) (a #() (loop (+ i 1) (cons i a i))))\n    (cond\n      [(< i\
    \ n) (loop (+ i 1) a)]\n      [(= (length a) 3) (+ 1 (first a))]))))\n", "  (define\
    \ (helper a i j k)\n    (cond\n      [(< i j) (+ 1 (helper (+ a i) i k (+ k 1)))]\n\
    \      [(< j k) (+ 1 (helper (+ a i) j (+ k 1)))]\n      [(< k i) (+ 1 (helper\
    \ (+ a i) j (+ k 1)))]\n      [else (+ 1 (helper (+ a i) j (+ k 1)))]))\n  (helper\
    \ '() 1 n 1))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ k 1)]\n\
    \      [(= i k) (+ j 1)]\n      [(= j k) (+ i 1)]\n      [else (helper (+ i 1)\
    \ (+ j 1) (+ k 1))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (helper (+ i 1) j k)]\n      [(< j k) (helper (+ i 1) (+ j 1)\
    \ k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= i k) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) k))]))\n\
    \  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k)\
    \ n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [else (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ j 1) i k))]\n      ))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(= j k) (+\
    \ i 1)]\n      [else (helper i (+ j 1) (+ k 1))]))\n  (helper 1 1 1))\n", "  (define\
    \ (helper a i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+\
    \ i 1) j k) \n                                           (helper (+ j 1) i k)\
    \ \n                                           (helper (+ k 1) i j) 0))]\n   \
    \   [(= i j) (+ 1 (helper (+ i 1) j k) \n                   (helper (+ j 1) i\
    \ k) \n                   (helper (+ k 1) i j) 0))]\n      [(< i k) (+ 1 (helper\
    \ (+ i 1) j k) \n                   (helper (+ j 1) i k) \n                  \
    \ (helper (+ k 1) i j) 0))]))\n  (helper a 1 n n))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n      [(< j k) (helper\
    \ (+ i 1) (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n    \
    \  [(< i j) (helper (+ i 1) (+ j 1) k)]\n      [(< j k) (helper (+ i 1) j k)]\n\
    \      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(< i j) (helper (+ i\
    \ 1) (+ j 1) k)]\n      [(< j k) (helper (+ i 1) j k)]\n      [(< i k) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [(< i j) (helper (+ i 1) (+ j 1) k)]\n    \
    \  [(< j k) (helper (+ i 1) j k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k\
    \ 1))]\n      [(< i j) (helper (+ i 1) (+ j 1) k)]\n      [(< j k) (helper (+\
    \ i 1) j k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(< i j)\
    \ (helper (+ i 1) (+ j 1) k)]\n      [(< j k) (helper (+ i 1) j k)]\n      [(<\
    \ i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(< i j) (helper (+ i 1) (+ j\
    \ 1) k)]\n      [(< j k) (helper (+ i 1) j k)]\n      [(< i k) (helper (+ i 1)\
    \ (+ j 1) (+ k 1))]\n      [(< i j) (helper (+ i 1) (+ j 1) k)]\n      [(< j k)\
    \ (helper (+ i 1) j k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n  \
    \    [(< i j) (helper (+ i 1) (+ j 1) k)]\n      [(< j k) (helper (+ i 1) j k)]\n\
    \      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(< i j) (helper (+ i\
    \ 1) (+ j 1) ", "  (let loop ((i 1) (a #(list 1 3 7 13 21 #t)))\n    (if (< i\
    \ n)\n        (loop (+ i 1) a)\n        (if (= (+ i (+ i 1)) (+ i (+ i 1))) (+\
    \ 1 (loop (+ i 1) a)) (+ 1 (loop (+ i 1) a))))))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i\
    \ 1) k (+ j 1))]\n      [(< k n) (helper (+ i 1) k (+ j 1))]\n      [(= i j) (helper\
    \ (+ i 1) k (+ j 1))]\n      [(= j k) (helper (+ i 1) j (+ k 1))]\n      [(= k\
    \ n) (helper (+ i 1) j (+ k 1))]\n      [(= i k) (helper (+ i 1) j (+ k 1))]\n\
    \      [(= j i) (helper (+ i 1) j (+ k 1))]\n      [(= k j) (helper (+ i 1) k\
    \ (+ j 1))]\n      [(= i k) (helper (+ i 1) k (+ j 1))]\n      [(= j k) (helper\
    \ (+ i 1) j (+ k 1))]\n      [(= k i) (helper (+ i 1) k (+ j 1))]\n      [(= i\
    \ j) (helper (+ i 1) k (+ j 1))]\n      [(= j i) (helper (+ i 1) j (+ k 1))]\n\
    \      [(= k j) (helper (+ i 1) k (+ j 1))]\n      [(= i k) (helper (+ i 1) k\
    \ (+ j 1))]\n      [(= j k) (helper (+ i 1) j (+ k 1))]\n      [(= k i) (helper\
    \ (+ i 1) k (+ j 1))]\n      [(= i j) (helper (+ i 1) k (+ j 1))]\n      [(= j\
    \ i) (helper (+ i 1) j (+ k 1))]\n      [(= k j) (helper (+ i 1) k (+ j 1))]\n\
    \      [(= i k) (helper (+ i 1) k (+ j 1))]\n      [(= j k) (helper (+ i 1) j\
    \ (+ k 1))]\n      [(= k i) (helper (+ i 1) k (+ j 1))]\n      [(= i j) (helper\
    \ (+ i 1) k (+ j 1))]\n      [(= j i) (helper (+ i 1) j (+ k 1))]\n      [(= k\
    \ j) (helper (+ i 1) k (+ j 1))]\n      [(= i k) (helper (+ i 1) k (+ j 1))]\n",
  "  (define (helper a i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n    \
    \      ((= j k) 0)\n          ((= (+ i j) (+ i k)) 0)\n          ((= (+ i j) (+\
    \ k j)) 0)\n          ((= (+ k j) (+ i k)) 0)\n          ((= (+ i j) (+ k k))\
    \ 0)\n          ((= (+ i k) (+ k j)) 0)\n          ((= (+ k j) (+ k k)) 0)\n \
    \         ((= (+ i j) (+ j k)) 0)\n          ((= (+ i k) (+ j k)) 0)\n       \
    \   ((= (+ k j) (+ k j)) 0)\n          ((= (+ k k) (+ k k)) 0)\n          ((=\
    \ (+ i j) (+ j i)) 0)\n          ((= (+ i k) (+ j i)) 0)\n          ((= (+ k j)\
    \ (+ j i)) 0)\n          ((= (+ k k) (+ j i)) 0)\n          ((= (+ i j) (+ k i))\
    \ 0)\n          ((= (+ i k) (+ k i)) 0)\n          ((= (+ k j) (+ k i)) 0)\n \
    \         ((= (+ k k) (+ k i)) 0)\n          ((= (+ i j) (+ j k)) 0)\n       \
    \   ((= (+ i k) (+ j k)) 0)\n          ((= (+ k j) (+ j k)) 0)\n          ((=\
    \ (+ k k) (+ j k)) 0)\n          ((= (+ i j) (+ k j)) 0)\n          ((= (+ i k)\
    \ (+ k j)) 0)\n          ((= (+ k j) (+ k j)) 0)\n          ((= (+ k k) (+ k j))\
    \ 0)\n          ((= (+ i j) (+ j i)) 0)\n          ((= (+ i k) (+ j i)) 0)\n \
    \         ((= (+ k j) (+ j i)) 0)\n          ((= (+ k k) (+ j i)) 0)\n       \
    \   ((= (+ i j) (+ k i)) 0)\n          ((= (+ i k) (+ k i)) 0)\n          ((=\
    \ (+ k j) (+ k i)) 0)\n          ((= (+ k k) (+ k i)) 0)\n          ", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(<\
    \ j k) (helper (+ j 1) i k)] \n      [(< k i) (helper (+ k 1) j k)]\n      [else\
    \ (+ i j k)]))\n  (helper 1 n n))\n", "  (define (helper i j k)\n    (cond\n \
    \     [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i\
    \ j) k) (+ i j) (+ i j))]\n      [(< i k) (if (= (+ i j) k) (+ i j) (+ i j))]\n\
    \      [else 0]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i\
    \ j))]\n      [(< i k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else 0]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< i k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else 0]))\n  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(<\
    \ j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< i k) (if (= (+ i j) k) (+\
    \ i j) (+ i j))]\n      [else 0]))\n  (define (helper i j k)\n    (cond\n    \
    \  [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< i k) (if (= (+ i j) k) (+ i j) (+ i j))]\n \
    \     [else 0]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+\
    \ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n\
    \      [(< i k) (if (= (+ i j) ", "  (let loop ((a #(list 1 2 3 4 5))\n      \
    \       (i 0))\n    (if (< i n)\n        (loop (append a i) (i + 1))\n       \
    \ (loop a (+ i 1)))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (+ 0 (helper (+ i 1) j k))]\n      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n\
    \      [(< i k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [else (+ 0 (helper (+\
    \ i 1) (+ j 1) k))]\n      ))\n  (helper 1 n n))\n", "  (define (helper a i j\
    \ k)\n    (cond\n      [(< i j) (+ 1 (helper (+ a i) i k (+ a j)))]\n      [(<\
    \ j k) (+ 1 (helper (+ a i) k (+ a j) j))]\n      [(= i k) (+ 1 (helper (+ a i)\
    \ i (+ a j) (+ a k)))]\n      [(= j k) (+ 1 (helper (+ a i) j (+ a k) k))]\n \
    \     [(= i j) (+ 1 (helper (+ a i) i (+ a k) k))]))\n  (helper '() 1 2 3))\n",
  "  (let loop ((a (nth (range n) 0))\n             (i 1))\n    (if (< i n)\n    \
    \    (loop (conj a (* i i i)) (+ i 1))\n        (loop a (+ i 1)))))\n", "  (let\
    \ ((a (ref (make-array n))))\n    (do ((i 1 (+ i 1)))\n        ((< i n) (set!\
    \ a (make-array n)))\n      (do ((j i (+ j 1)))\n          ((< j n) (set! a (make-array\
    \ n)))\n      (do ((k j (+ k 1)))\n          ((< k n) (set! a (make-array n)))\n\
    \      (when (= (+ i j k) 0)\n        (set! a (make-array n))))\n    (do ((i 1\
    \ (+ i 1)))\n        ((< i n) (set! a (make-array n)))\n      (do ((j i (+ j 1)))\n\
    \          ((< j n) (set! a (make-array n)))\n      (do ((k j (+ k 1)))\n    \
    \      ((< k n) (set! a (make-array n)))\n      (when (= (+ i j k) 0)\n      \
    \  (set! a (make-array n))))\n    (do ((i 1 (+ i 1)))\n        ((< i n) (set!\
    \ a (make-array n)))\n      (do ((j i (+ j 1)))\n          ((< j n) (set! a (make-array\
    \ n)))\n      (do ((k j (+ k 1)))\n          ((< k n) (set! a (make-array n)))\n\
    \      (when (= (+ i j k) 0)\n        (set! a (make-array n))))\n    (do ((i 1\
    \ (+ i 1)))\n        ((< i n) (set! a (make-array n)))\n      (do ((j i (+ j 1)))\n\
    \          ((< j n) (set! a (make-array n)))\n      (do ((k j (+ k 1)))\n    \
    \      ((< k n) (set! a (make-array n)))\n      (when (= (+ i j k) 0)\n      \
    \  (set! a (make-array n))))\n    (do ((i 1 (+ i 1)))\n        ((< i n) (set!\
    \ a (make-array n)))\n      (do ((j i (+ j 1)))\n          ((< j n) (set! a (make-array\
    \ n)))\n      (do ((k j (+ k 1)))\n          ((< k n) (set! a (make-array n)))\n\
    \      (when (= (+ i j k) 0)\n        (set! a (make-array n))))\n    (do ((i 1\
    \ (+ i 1)))\n        ((< i n) (set! a (make-array n)))\n      (do ((j i (", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k))\
    \ 0)]\n      [(< k n) (if (= (+ i j) (+ j k)) (+ 1 (helper (+ i 1) (+ j 1) k))\
    \ 0)]\n      [(= i j) (if (= (+ i k) (+ k j)) (+ 1 (helper i (+ k 1) j)) 0)]\n\
    \      [(= j k) (if (= (+ j k) k) (+ 1 (helper j (+ j 1) k)) 0)]\n      [(= k\
    \ n) (if (= (+ i j) (+ j k)) (+ 1 (helper i (+ j 1) k)) 0)]\n      [else 0]))\n\
    \  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k)\
    \ n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [else (+ 1 (helper (+ i j) k (+ j k)))]))\n\
    \  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (+\
    \ 0 (helper (+ i 1) j k))] \n      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\
    \ \n      [else (+ 0 (helper (+ i 1) (+ j 1) k))]))\n  (helper 1 2 n))\n", " \
    \ (let loop ((i n) (a #(list 1)))\n    (cond ((< i 0) a)\n          ((= i 0) (+\
    \ 1 (length a)))\n          ((< i n) (loop (- i 1) (cons (* i i i) (append a (list\
    \ i))))))\n    (loop (- i 1) a)))\n", "  (define (helper i j k)\n    (cond\n \
    \     [(< i j) (helper (+ i 1) j k)]\n      [(< j k) (helper (+ i 1) (+ j 1) k)]\n\
    \      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= i j) (helper (+ i\
    \ 1) (+ j 1) (+ k 1))]\n      [(= j k) (helper (+ i 1) (+ j 1) k)]\n      [(=\
    \ i k) (helper (+ i 1) j k)]\n      [(= i j) (helper (+ i 1) (+ j 1) (+ k 1))]\n\
    \      [(= j k) (helper (+ i 1) (+ j 1) k)]\n      [(= i k) (helper (+ i 1) j\
    \ k)]\n      [(= i j) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= j k) (helper\
    \ (+ i 1) (+ j 1) k)]\n      [(= i k) (helper (+ i 1) j k)]\n      [(= i j) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [(= j k) (helper (+ i 1) (+ j 1) k)]\n    \
    \  [(= i k) (helper (+ i 1) j k)]\n      [(= i j) (helper (+ i 1) (+ j 1) (+ k\
    \ 1))]\n      [(= j k) (helper (+ i 1) (+ j 1) k)]\n      [(= i k) (helper (+\
    \ i 1) j k)]\n      [(= i j) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= j k)\
    \ (helper (+ i 1) (+ j 1) k)]\n      [(= i k) (helper (+ i 1) j k)]\n      [(=\
    \ i j) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= j k) (helper (+ i 1) (+ j\
    \ 1) k)]\n      [(= i k) (helper (+ i 1) j k)]\n      [(= i j) (helper (+ i 1)\
    \ (+ j 1) (+ k 1))]\n      [(= j k) (helper (+ i 1) (+ j 1) k)]\n      [(= i k)\
    \ (helper (+ i 1) j k)]\n      [(= i j) (helper (+ i 1) (+ j 1) ", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+\
    \ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k))\
    \ 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n     \
    \ [(= j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [(= i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(= j k) (if (= (+ j k)\
    \ n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k)) 0)]\n      [(= j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k))\
    \ 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n     \
    \ [(= j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [(= i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(= j k) (if (= (+ j k)\
    \ n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k)) 0)]\n      [(= j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k))\
    \ 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n     \
    \ [(= j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [(= i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(= j k) (if (= (+ j k)\
    \ n) (+ 1 (helper (+ j 1) i k)) ", "  (define (helper i j k)\n    (if (< i j)\n\
    \        (if (< j k)\n            (if (= (+ (* i i) (* j j) (* k k)) 3)\n    \
    \            (helper (+ i 1) (+ j 1) k)\n                (helper (+ i 1) (+ j\
    \ k) k))\n            (helper (+ i k) (+ j 1) k))\n        (if (< k j)\n     \
    \       (if (= (+ (* i i) (* k k) (* j j)) 3)\n                (helper (+ i k)\
    \ (+ j 1) k)\n                (helper (+ i k) (+ j k) k))\n            (helper\
    \ (+ i j) (+ k 1) k))))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n   \
    \ (if (< i j)\n        (if (< k n)\n            (if (= (+ i j k) 3)\n        \
    \        (+ 1 (helper i (+ j 1) k))\n                (+ 1 (helper i (+ j 1) (+\
    \ k 1))))\n            (if (= (+ i j k) 3)\n                (+ 1 (helper i (+\
    \ j 1) (+ k 1)))\n                (+ 1 (helper i (+ j 1) k))))\n        (if (<\
    \ k n)\n            (if (= (+ i j k) 3)\n                (+ 1 (helper i (+ j 1)\
    \ k))\n                (+ 1 (helper i (+ j 1) (+ k 1))))\n            (if (= (+\
    \ i j k) 3)\n                (+ 1 (helper i (+ j 1) (+ k 1)))\n              \
    \  (+ 1 (helper i (+ j 1) k))))))\n  (helper 1 1 1))\n", "  (let loop ((a (ref\
    \ (make-array n :initial-element 0))\n               (i 1))\n             (j 1))\n\
    \    (if (< i n)\n        (loop (+ (ref a i) i) j)\n        (loop (+ (ref a i)\
    \ i) j)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n\
    \        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop\
    \ (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref\
    \ a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j)\
    \ i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n   \
    \     (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop\
    \ (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref\
    \ a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j)\
    \ i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n   \
    \     (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop\
    \ (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref\
    \ a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j)\
    \ i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n   \
    \     (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop\
    \ (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref\
    \ a j) j) i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j)\
    \ i)\n        (loop (+ (ref a j) j) i)\n        (loop (+ (ref a j) j) i)\n   \
    \     (loop (+ (", "  (define (helper i j k)\n    (cond\n      [(< i j) (+ 0 (helper\
    \ (+ i 1) j k))]\n      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(<\
    \ i k) (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [else (+ 0 (helper (+ i\
    \ 1) (+ j 1) (+ k 1)))]))\n  (helper (+ n 1) 0 0))\n", "  (let loop ((i n) (a\
    \ ()))\n    (if (< i 0)\n        (length a)\n        (loop (- i 1) (cons (* i\
    \ i i) (cons (+ i j) (cons (- i j) a)))))))\n", "  (define (helper i j k)\n  \
    \  (cond\n      [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+\
    \ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j k)))]\n      [(< j\
    \ k) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n       \
    \           (+ 1 (helper (+ i k) k (+ j k)))]\n      [else (if (= (+ i j) k)\n\
    \                (+ 1 (helper (+ i k) j k))\n                (+ 1 (helper (+ i\
    \ k) k (+ j k)))]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i 1) (+ j 1)\
    \ k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 n n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j k) 3) 1 0)]\n      [(= i j) (if (= (+\
    \ i j k) 3) 1 0)]\n      [(= i k) (if (= (+ i j k) 3) 1 0)]\n      [else (helper\
    \ (+ i j k) i (+ j k) k)]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (=\
    \ (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n  \
    \    [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+\
    \ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [else\
    \ (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n     \
    \ [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+\
    \ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [else (if (= (+ i j)\
    \ k) (+ i j) k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n     \
    \ [else (if (= (+ i j) k) (+ ", "  (define (helper a i j k)\n    (cond ((= i j)\
    \ 0)\n          ((= i k) 0)\n          ((= j k) 0)\n          ((= (+ i j k) 0)\
    \ 0)\n          ((= (+ i j k) n) 1)\n          (else (+ 1 (helper (+ a i) j (+\
    \ k j) k))))\n  (helper '() 1 1 1))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) 0)]\n      [(< i k) (if (= (+ i j) k) (+ i j) 0)]\n      [else (+ 1\
    \ (helper (+ i 1) (+ j 1) k))]))\n  (helper 1 1 n))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else\
    \ (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n\
    \      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else\
    \ (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n\
    \      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else\
    \ (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n\
    \      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else\
    \ (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n\
    \      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else\
    \ (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n\
    \      [(< j k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (+ i j k)]\n      [(< j k) (+ i j k)]\n      [else\
    \ (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (+ i j k)]\n\
    \      [(< j k", "  (let ([a (make-array n initial-contents '())])\n    (do ([i\
    \ (in-range n)])\n        ((< i n) (set! a\n                       (cons (+ (*\
    \ i i) (i * i i) (+ i 1))\n                            a)))\n      (if (= (+ (*\
    \ i i) (a-ref a i))\n              (* 3 a))\n          (+ 1 (get-max-triples n))))))\n",
  '  (let loop ((a #(list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
    49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74
    75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)
    (b #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54
    55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
    81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100) (c #(1 2 3 4 5 6
    7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
    34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
    86 87 88 89 90 91 92 93 94 95 96 97 98 99 100) (d) #(1 2 3 4 5 6 7 8 9 10 11 12
    13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ', "  (let ((a (ref (make-array\
    \ n :initial-element 0))))\n    (loop for i from 0 to n\n          for j from\
    \ 0 to n\n          for k from 0 to n\n          when (and (< i j) (< j k) (<\
    \ k n))\n          do (set! a\n                   (+ (* i i i)\n             \
    \          (* j j j)\n                       (* k k k)))\n          when (= (+\
    \ i j k) 3)\n          do (return (+ 1 (+ i j k))))))\n", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper\
    \ (+ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(<\
    \ j k) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j k))\n     \
    \             (+ 1 (helper (+ i k) k (+ j k))))]\n      [(< k i) (if (= (+ i j)\
    \ k)\n                  (+ 1 (helper (+ i k) j k))\n                  (+ 1 (helper\
    \ (+ i k) k (+ j k))))]\n      [else 0]))\n  (helper 1 2 n))\n", "  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n     \
    \     ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) (+ k i))))\n\
    \  (helper 1 2 n))\n", "  (let loop ((i n) (a #(list 1)))\n    (if (= i 0)\n \
    \       a\n        (loop (- i 1) (cons (+ (* i i) (* (car a) (* (cdr a) (* (car\
    \ a) (cdr a))))\n                           (cons (+ (* i i) (* (car a) (* (cdr\
    \ a) (* (car a) (cdr a))))\n                                 (cons (+ (* i i)\
    \ (* (car a) (* (cdr a) (* (car a) (cdr a))))\n                              \
    \         (cons (+ (* i i) (* (car a) (* (cdr a) (* (car a) (cdr a))))\n     \
    \                                        a)))))))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n\
    \      [(< j k) (if (= (+ j k) n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [else\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k))]\n      ))\n  (helper 1 2 n))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n                  (if (= (+ i k) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n                  (if\
    \ (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n      \
    \            (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j 1)))\n                  (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j 1)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j 1)))\n                  (if (= (+ j k) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n                  (if (= (+ i k) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n                  (if\
    \ (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n      \
    \            (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j 1)))\n                  (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j 1)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j 1)))\n                  (if (= (+ j k) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n                  (if (= (+ i k) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n                  (if\
    \ (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n      \
    \            (if (= (+ i k) k) (+ 1 (helper (+ i ", "  (let loop ((i n) (a #(list\
    \ i i i)))\n    (if (< i 0)\n        (length a)\n        (loop (- i 1) (cons a\
    \ (list i i i)))))) \n", "  (define (helper a i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i k) i j k)))]\n      [(= i j) (+ 1 (helper\
    \ (+ i k) i j k))]\n      [(= i k) (+ 1 (helper (+ i j) i j k))]\n      [else\
    \ 0]))\n  (if (= n 0)\n      0\n      (+ 1 (helper (+ 1 n) 0 1 n))))\n", "  (define\
    \ (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((=\
    \ j k) 0)\n          ((= (+ i j) (+ i k)) 0)\n          ((= (+ i j) (+ k k)) 0)\n\
    \          ((= (+ k j) (+ i k)) 0)\n          ((= (+ k j) (+ k k)) 0)\n      \
    \    ((= (+ i k) (+ i j)) 0)\n          ((= (+ i k) (+ k j)) 0)\n          ((=\
    \ (+ k k) (+ i j)) 0)\n          ((= (+ k k) (+ k j)) 0)\n          ((= (+ i j)\
    \ (+ k k)) (+ 1 (helper (+ i k) (+ j k) (+ k j)))))\n  (helper 1 2 n))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)] \n \
    \     [(< j k) (helper (+ j 1) i k)]\n      [(< k i) (helper (+ k 1) i j)]\n \
    \     [(= i j) (helper (+ i 1) j k)]\n      [(= j k) (helper (+ j 1) i k)]\n \
    \     [(= k i) (helper (+ k 1) i j)]\n      [(= i j) (helper (+ i 1) j k)]\n \
    \     [(= j k) (helper (+ j 1) i k)]\n      [(= k i) (helper (+ k 1) i j)]\n \
    \     [(= i j) (helper (+ i 1) j k)]\n      [(= j k) (helper (+ j 1) i k)]\n \
    \     [(= k i) (helper (+ k 1) i j)]\n      [(= i j) (helper (+ i 1) j k)]\n \
    \     [(= j k) (helper (+ j 1) i k)]\n      [(= k i) (helper (+ k 1) i j)]\n \
    \     [(= i j) (helper (+ i 1) j k)]\n      [(= j k) (helper (+ j 1) i k)]\n \
    \     [(= k i) (helper (+ k 1) i j)]\n      [(= i j) (helper (+ i 1) j k)]\n \
    \     [(= j k) (helper (+ j 1) i k)]\n      [(= k i) (helper (+ k 1) i j)]\n \
    \     [(= i j) (helper (+ i 1) j k)]\n      [(= j k) (helper (+ j 1) i k)]\n \
    \     [(= k i) (helper (+ k 1) i j)]\n      [(= i j) (helper (+ i 1) j k)]\n \
    \     [(= j k) (helper (+ j 1) i k)]\n      [(= k i) (helper (+ k 1) i j)]\n \
    \     [(= i j) (helper (+ i 1) j k)]\n      [(= j k) (helper (+ j 1) i k)]\n \
    \     [(= k i) (helper (+ k 1) i j)]\n      [(= i j) (helper (+ i 1) j k)]\n \
    \     [(= j k) (helper (+ j 1) i k)]\n      [(= k i) (helper (+ k 1) i j)]\n \
    \     [(= i j) (", "  (define (helper a i j k)\n    (cond\n      [(< i j) (+ 0\
    \ (helper (+ a i) j k))]\n      [(< j k) (+ 0 (helper (+ a i) j k))]\n      [(<\
    \ k n) (+ 0 (helper (+ a i) j k))]\n      [else (+ 0 (helper (+ a i) j k))]\n\
    \    ))\n  (helper '() 1 2 3))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
