name: HumanEval_132_is_nested
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes a string as input which contains\
  \ only square brackets.\n;; The function should return True if and only if there\
  \ is a valid subsequence of brackets \n;; where at least one bracket in the subsequence\
  \ is nested.\n;; >>> (is_nested \"[[]]\")\n;; #t\n;; >>> (is_nested \"[]]]]]]][[[[[]\"\
  )\n;; #f\n;; >>> (is_nested \"[][]\")\n;; #f\n;; >>> (is_nested \"[]\")\n;; #f\n\
  ;; >>> (is_nested \"[[][]]\")\n;; #t\n;; >>> (is_nested \"[[]][[\")\n;; #t\n(define\
  \ (is_nested string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n\
  \    (check-equal? (candidate \"[[]]\") #t)\n    (check-equal? (candidate \"[]]]]]]][[[[[]\"\
  ) #f)\n    (check-equal? (candidate \"[][]\") #f)\n    (check-equal? (candidate\
  \ \"[]\") #f)\n    (check-equal? (candidate \"[[[[]]]]\") #t)\n    (check-equal?\
  \ (candidate \"[]]]]]]]]]]\") #f)\n    (check-equal? (candidate \"[][][[]]\") #t)\n\
  \    (check-equal? (candidate \"[[]\") #f)\n    (check-equal? (candidate \"[]]\"\
  ) #f)\n    (check-equal? (candidate \"[[]][[\") #t)\n    (check-equal? (candidate\
  \ \"[[][]]\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate\
  \ \"[[[[[[[[\") #f)\n    (check-equal? (candidate \"]]]]]]]]\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (first string) '[') (is_nested (rest string))]\n        [else\
    \ (is_nested (rest string))]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) #t]\n    [else (and (equal? (car string) '[) (is_nested (cdr\
    \ string)))]))\n", "  (let loop ((i 0) (string string))\n    (cond ((null? string)\
    \ #f)\n          ((char=? (car string) '[) (loop (+ i 1) (cdr string)))\n    \
    \      (else (loop (+ i 1) (cdr string))))))\n", "  (let loop ((i 0) (s string)\
    \ (result #f))\n    (cond\n      [(empty? s) result]\n      [(equal? (char-ref\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1))\n                           \
    \            (or (not result) (equal? (char-ref s i) '['))))]\n      [(equal?\
    \ (char-ref s i) ']) (loop (+ i 1) (substring s i (+ i 1))\n                 \
    \                      (or (not result) (equal? (char-ref s i) ']'))))]\n    result))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) #t]\n    [else (is_nested (cdr string))]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') (is_nested (subseq string\
    \ 1 2))]\n        [(equal? (first string) '(') (is_nested (subseq string 1 2))]\n\
    \        [else #t]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '[) #t]\n    [else (or (equal? (car string)\
    \ '[) (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '[') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '[') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '[') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[') (is_nested (subseq string 1 2))]\n\
    \    [else (is_nested (subseq string 1 string))]))\n", "  (let loop ((i 0))\n\
    \    (if (< i (string-length string))\n        (if (equal? (char-ref string i)\
    \ '[')\n            (if (equal? (char-ref string (i+1)) '[')\n               \
    \ (if (equal? (char-ref string (i+2)) '[')\n                    (if (equal? (char-ref\
    \ string (i+3)) '[')\n                        (if (equal? (char-ref string (i+4))\
    \ '[')\n                            (if (equal? (char-ref string (i+5)) '[')\n\
    \                                (if (equal? (char-ref string (i+6)) '[')\n  \
    \                                  (if (equal? (char-ref string (i+7)) '[')\n\
    \                                        (if (equal? (char-ref string (i+8)) '[')\n\
    \                                            (if (equal? (char-ref string (i+9))\
    \ '[')\n                                                (if (equal? (char-ref\
    \ string (i+10)) '[')\n                                                    (if\
    \ (equal? (char-ref string (i+11)) '[')\n                                    \
    \                    (if (equal? (char-ref string (i+12)) '[')\n             \
    \                                               (if (equal? (char-ref string (i+13))\
    \ '[')\n                                                                (if (equal?\
    \ (char-ref string (i+14)) '[')\n                                            \
    \                        (if (equal? (char-ref string (i+15)) '[')\n         \
    \                                                               (if (equal? (char-ref\
    \ string (i+16)) '[')\n                                                      \
    \                      (if (equal? (char-ref string (i+17)) '[')\n           \
    \                                                                     (if (equal?\
    \ (char-ref string (i+18)) '[')\n                                            \
    \                                        (if (equal? (char-ref string (i+19))\
    \ '[')\n                                                                     \
    \                   (if (equal? (char-ref string (i+20)) '[')\n              \
    \                                                                            \
    \  (if (equal? (char-ref string (i+21)) '[')\n                               \
    \                                                                 (if (equal?\
    \ (char-ref string (i+22)) '[')\n                                            \
    \                                                        (if (equal? (char-ref\
    \ string (i+23)) '[')\n                                                      \
    \                                                  (if (equal? (char-ref string\
    \ (i+24)) '[')\n                                                             \
    \                                               (if (equal? (char-ref string (i+25))\
    \ '[')\n                                                                     \
    \                                           (if (equal? (char-ref string (i+26))\
    \ '[')\n                                                                     \
    \                                               (if (equal? (char-ref string (i+27))\
    \ '[')\n                                                                     \
    \                                                   (if (equal? (char-ref string\
    \ (i+28)) '[')\n                                                             \
    \   ", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #t]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n  \
    \  [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr\
    \ string))\n               (is_nested (substring string 0 (- (length string) 1)))\n\
    \               (is_nested (substring string 1 (- (length string) 1)))\n     \
    \          (is_nested (substring string 0 (- (length string) 2)))\n          \
    \     (is_nested (substring string 1 (- (length string) 2)))\n               (is_nested\
    \ (substring string 0 (- (length string) 3)))\n               (is_nested (substring\
    \ string 1 (- (length string) 3)))\n               (is_nested (substring string\
    \ 0 (- (length string) 4)))\n               (is_nested (substring string 1 (-\
    \ (length string) 4)))\n               (is_nested (substring string 0 (- (length\
    \ string) 5)))\n               (is_nested (substring string 1 (- (length string)\
    \ 5)))\n               (is_nested (substring string 0 (- (length string) 6)))\n\
    \               (is_nested (substring string 1 (- (length string) 6)))\n     \
    \          (is_nested (substring string 0 (- (length string) 7)))\n          \
    \     (is_nested (substring string 1 (- (length string) 7)))\n               (is_nested\
    \ (substring string 0 (- (length string) 8)))\n               (is_nested (substring\
    \ string 1 (- (length string) 8)))\n               (is_nested (substring string\
    \ 0 (- (length string) 9)))\n               (is_nested (substring string 1 (-\
    \ (length string) 9)))\n               (is_nested (substring string 0 (- (length\
    \ string) 10)))\n               (is_nested (substring string 1 (- (length string)\
    \ 10)))\n               (is_nested (substring string 0 (- (length string) 11)))\n\
    \               (is_nested (substring string 1 (- (length string) 11)))\n    \
    \           (is_nested (substring string 0 (- (length string) 12)))\n        \
    \       (is_nested (substring string 1 (- (length string) 12)))\n            \
    \   (is_nested (substring string 0 (- (length string) 13)))\n               (is_nested\
    \ (substring string 1 (- (length string) 13)))\n               (is_nested (substring\
    \ string 0 (- (length string) 14)))\n               (is_nested (substring string\
    \ 1 (- (length string) 14)))\n               (is_nested (substring string 0 (-\
    \ (length string) 15)))\n               (is_nested (substring string 1 (- (length\
    \ string) 15)))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
