name: HumanEval_132_is_nested
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes a string as input which contains\
  \ only square brackets.\n;; The function should return True if and only if there\
  \ is a valid subsequence of brackets \n;; where at least one bracket in the subsequence\
  \ is nested.\n;; >>> (is_nested \"[[]]\")\n;; #t\n;; >>> (is_nested \"[]]]]]]][[[[[]\"\
  )\n;; #f\n;; >>> (is_nested \"[][]\")\n;; #f\n;; >>> (is_nested \"[]\")\n;; #f\n\
  ;; >>> (is_nested \"[[][]]\")\n;; #t\n;; >>> (is_nested \"[[]][[\")\n;; #t\n(define\
  \ (is_nested string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n\
  \    (check-equal? (candidate \"[[]]\") #t)\n    (check-equal? (candidate \"[]]]]]]][[[[[]\"\
  ) #f)\n    (check-equal? (candidate \"[][]\") #f)\n    (check-equal? (candidate\
  \ \"[]\") #f)\n    (check-equal? (candidate \"[[[[]]]]\") #t)\n    (check-equal?\
  \ (candidate \"[]]]]]]]]]]\") #f)\n    (check-equal? (candidate \"[][][[]]\") #t)\n\
  \    (check-equal? (candidate \"[[]\") #f)\n    (check-equal? (candidate \"[]]\"\
  ) #f)\n    (check-equal? (candidate \"[[]][[\") #t)\n    (check-equal? (candidate\
  \ \"[[][]]\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate\
  \ \"[[[[[[[[\") #f)\n    (check-equal? (candidate \"]]]]]]]]\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (first string) '[') (is_nested (rest string))]\n        [else\
    \ (is_nested (rest string))]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) #t]\n    [else (and (equal? (car string) '[) (is_nested (cdr\
    \ string)))]))\n", "  (let loop ((i 0) (string string))\n    (cond ((null? string)\
    \ #f)\n          ((char=? (car string) '[) (loop (+ i 1) (cdr string)))\n    \
    \      (else (loop (+ i 1) (cdr string))))))\n", "  (let loop ((i 0) (s string)\
    \ (result #f))\n    (cond\n      [(empty? s) result]\n      [(equal? (char-ref\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1))\n                           \
    \            (or (not result) (equal? (char-ref s i) '['))))]\n      [(equal?\
    \ (char-ref s i) ']) (loop (+ i 1) (substring s i (+ i 1))\n                 \
    \                      (or (not result) (equal? (char-ref s i) ']'))))]\n    result))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) #t]\n    [else (is_nested (cdr string))]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') (is_nested (subseq string\
    \ 1 2))]\n        [(equal? (first string) '(') (is_nested (subseq string 1 2))]\n\
    \        [else #t]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '[) #t]\n    [else (or (equal? (car string)\
    \ '[) (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '[') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '[') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '[') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[') (is_nested (subseq string 1 2))]\n\
    \    [else (is_nested (subseq string 1 string))]))\n", "  (let loop ((i 0))\n\
    \    (if (< i (string-length string))\n        (if (equal? (char-ref string i)\
    \ '[')\n            (if (equal? (char-ref string (i+1)) '[')\n               \
    \ (if (equal? (char-ref string (i+2)) '[')\n                    (if (equal? (char-ref\
    \ string (i+3)) '[')\n                        (if (equal? (char-ref string (i+4))\
    \ '[')\n                            (if (equal? (char-ref string (i+5)) '[')\n\
    \                                (if (equal? (char-ref string (i+6)) '[')\n  \
    \                                  (if (equal? (char-ref string (i+7)) '[')\n\
    \                                        (if (equal? (char-ref string (i+8)) '[')\n\
    \                                            (if (equal? (char-ref string (i+9))\
    \ '[')\n                                                (if (equal? (char-ref\
    \ string (i+10)) '[')\n                                                    (if\
    \ (equal? (char-ref string (i+11)) '[')\n                                    \
    \                    (if (equal? (char-ref string (i+12)) '[')\n             \
    \                                               (if (equal? (char-ref string (i+13))\
    \ '[')\n                                                                (if (equal?\
    \ (char-ref string (i+14)) '[')\n                                            \
    \                        (if (equal? (char-ref string (i+15)) '[')\n         \
    \                                                               (if (equal? (char-ref\
    \ string (i+16)) '[')\n                                                      \
    \                      (if (equal? (char-ref string (i+17)) '[')\n           \
    \                                                                     (if (equal?\
    \ (char-ref string (i+18)) '[')\n                                            \
    \                                        (if (equal? (char-ref string (i+19))\
    \ '[')\n                                                                     \
    \                   (if (equal? (char-ref string (i+20)) '[')\n              \
    \                                                                            \
    \  (if (equal? (char-ref string (i+21)) '[')\n                               \
    \                                                                 (if (equal?\
    \ (char-ref string (i+22)) '[')\n                                            \
    \                                                        (if (equal? (char-ref\
    \ string (i+23)) '[')\n                                                      \
    \                                                  (if (equal? (char-ref string\
    \ (i+24)) '[')\n                                                             \
    \                                               (if (equal? (char-ref string (i+25))\
    \ '[')\n                                                                     \
    \                                           (if (equal? (char-ref string (i+26))\
    \ '[')\n                                                                     \
    \                                               (if (equal? (char-ref string (i+27))\
    \ '[')\n                                                                     \
    \                                                   (if (equal? (char-ref string\
    \ (i+28)) '[')\n                                                             \
    \   ", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #t]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n  \
    \  [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr\
    \ string))\n               (is_nested (substring string 0 (- (length string) 1)))\n\
    \               (is_nested (substring string 1 (- (length string) 1)))\n     \
    \          (is_nested (substring string 0 (- (length string) 2)))\n          \
    \     (is_nested (substring string 1 (- (length string) 2)))\n               (is_nested\
    \ (substring string 0 (- (length string) 3)))\n               (is_nested (substring\
    \ string 1 (- (length string) 3)))\n               (is_nested (substring string\
    \ 0 (- (length string) 4)))\n               (is_nested (substring string 1 (-\
    \ (length string) 4)))\n               (is_nested (substring string 0 (- (length\
    \ string) 5)))\n               (is_nested (substring string 1 (- (length string)\
    \ 5)))\n               (is_nested (substring string 0 (- (length string) 6)))\n\
    \               (is_nested (substring string 1 (- (length string) 6)))\n     \
    \          (is_nested (substring string 0 (- (length string) 7)))\n          \
    \     (is_nested (substring string 1 (- (length string) 7)))\n               (is_nested\
    \ (substring string 0 (- (length string) 8)))\n               (is_nested (substring\
    \ string 1 (- (length string) 8)))\n               (is_nested (substring string\
    \ 0 (- (length string) 9)))\n               (is_nested (substring string 1 (-\
    \ (length string) 9)))\n               (is_nested (substring string 0 (- (length\
    \ string) 10)))\n               (is_nested (substring string 1 (- (length string)\
    \ 10)))\n               (is_nested (substring string 0 (- (length string) 11)))\n\
    \               (is_nested (substring string 1 (- (length string) 11)))\n    \
    \           (is_nested (substring string 0 (- (length string) 12)))\n        \
    \       (is_nested (substring string 1 (- (length string) 12)))\n            \
    \   (is_nested (substring string 0 (- (length string) 13)))\n               (is_nested\
    \ (substring string 1 (- (length string) 13)))\n               (is_nested (substring\
    \ string 0 (- (length string) 14)))\n               (is_nested (substring string\
    \ 1 (- (length string) 14)))\n               (is_nested (substring string 0 (-\
    \ (length string) 15)))\n               (is_nested (substring string 1 (- (length\
    \ string) 15)))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n  \
    \  [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let loop ((i 0) (s\
    \ string))\n    (if (or (= i 0) (= i #\\))\n        #f\n        (let ((c (char\
    \ s i)))\n          (if (or (= c #\\[) (= c #\\])) (loop (+ i 1) (substring s\
    \ i (+ i 1))))\n          (loop (+ i 1) (substring s i (+ i 1))))))))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (car string) '[) #t]\n    [else (is_nested\
    \ (cdr string))]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n  \
    \  [else #t]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[') (is_nested (cdr string))]\n    [else\
    \ #f]))\n", "  (let loop ((i 0) (s string) (valid #t) (stack '()))\n    (cond\
    \ ((null? s) valid)\n          ((char=? (car s) '[) (loop (+ i 1) (cdr s) (or\
    \ (loop (+ i 1) (car s) #f stack)\n                                          \
    \         (loop (+ i 1) (cdr s) #t stack))))\n          ((char=? (car s) '() (loop\
    \ (+ i 1) (cdr s) #t stack))\n          (else (loop (+ i 1) (cdr s) #f stack)))))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) #t]\n        [(equal?\
    \ (car string) '(') #f]\n        [else (is_nested (cdr string))]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #t]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n \
    \       [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') (is_nested (rest string))]\n\
    \        [else (is_nested (rest string))]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #t]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else (is_nested (rest string))]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[') (is_nested (rest string))]\n \
    \   [else (is_nested (rest string))]\n  ))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (let loop ((i 0) (s string) (result #f))\n    (cond ((null? s) result)\n    \
    \      ((char= (char s i) '[')\n           (loop (+ i 1) (substring s i (+ i 1))\
    \ result))\n          ((char= (char s i) '[')\n           (loop (+ i 1) (substring\
    \ s i (+ i 1)) result))\n          ((char= (char s i) '[')\n           (loop (+\
    \ i 1) (substring s i (+ i 1)) result))\n          ((char= (char s i) '[')\n \
    \          (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[')\n           (loop (+ i 1) (substring s i (+ i 1)) result))\n     \
    \     ((char= (char s i) '[')\n           (loop (+ i 1) (substring s i (+ i 1))\
    \ result))\n          ((char= (char s i) '[')\n           (loop (+ i 1) (substring\
    \ s i (+ i 1)) result))\n          ((char= (char s i) '[')\n           (loop (+\
    \ i 1) (substring s i (+ i 1)) result))\n          ((char= (char s i) '[')\n \
    \          (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[')\n           (loop (+ i 1) (substring s i (+ i 1)) result))\n     \
    \     ((char= (char s i) '[')\n           (loop (+ i 1) (substring s i (+ i 1))\
    \ result))\n          ((char= (char s i) '[')\n           (loop (+ i 1) (substring\
    \ s i (+ i 1)) result))\n          ((char= (char s i) '[')\n           (loop (+\
    \ i 1) (substring s i (+ i 1)) result))\n          ((char= (char s i) '[')\n \
    \          (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[')\n           (loop (+ i 1) (substring s i (+ i 1)) result))\n     \
    \     ((char= (char s i) '[')\n           (loop (+ i 1) (substring s i (+ i 1))\
    \ result))\n          ((char= (char s i) '[')\n           (loop (+ i 1) (substring\
    \ s i (+ ", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (let loop ((i 0) (s string) (result\
    \ #f))\n    (cond\n      [(empty? s) result]\n      [(equal? (char (car s)) '[)\
    \ (loop (+ i 1) (cdr s) (or (not result) (equal? (char (car s)) '['))))]\n   \
    \   [(equal? (char (car s)) '(') (loop (+ i 1) (cdr s) (or (not result) (equal?\
    \ (char (car s)) '['))))]\n      [else (loop (+ i 1) (cdr s) (or (not result)\
    \ (equal? (char (car s)) '['))))]\n      )))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #t]))\n",
  "  (let loop ((i 0))\n    (if (or (char=? (string-ref string i) '[')\n         \
    \   (char=? (string-ref string i) '('))\n        #f\n        (loop (+ i 1)))))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (subseq string 2))]\n        [else #f]))\n",
  "  (let loop ((i 0) (s string) (result #f))\n    (cond ((null? s) result)\n    \
    \      ((char=? (car s) '[) (loop (add1 i) (cdr s) (or (not result) (char=? (car\
    \ s) '['))))\n          ((char=? (car s) '(') (loop (add1 i) (cdr s) (not result)))\n\
    \          (else (loop (add1 i) (cdr s) result))))))\n", "  (let loop ((i 0) (string\
    \ string))\n    (cond\n      [(empty? string) #f]\n      [(equal? (car string)\
    \ '[) (loop (+ i 1) (cdr string))]\n      [else (loop (+ i 1) (cdr string))]))))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[') #t]\n    [else (is_nested (rest string))]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested (subseq\
    \ string 1 2))]\n    [else (is_nested (subseq string 1 string))]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested (substring\
    \ string 1 2))]\n    [else (is_nested (substring string 1 string))]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let loop\
    \ ((i 0) (s string) (result #f))\n    (cond ((null? s) result)\n          ((char=\
    \ (char s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '(') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '[') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) ']') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '(') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '[') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) ']') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '[') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) ']') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '(') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '[') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) ']') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '(') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '[') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) ']') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '(') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '[') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) ']') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) #t]\n    [else\
    \ (and (is_nested (cdr string))\n               (equal? (car string) '[))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[') (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') (is_nested (subseq string\
    \ 1 2))]\n        [(equal? (first string) '(') (is_nested (subseq string 1 2))]\n\
    \        [else #t]))\n", "  (let loop ((i 0) (s string) (result #f))\n    (cond\
    \ ((null? s) result)\n          ((equal? (car s) '[) (loop (+ i 1) (cdr s) (or\
    \ (loop (+ i 1) (car s) #f) (loop (+ i 1) (cdr s) #f))))\n          ((equal? (car\
    \ s) ']) (loop (+ i 1) (cdr s) (or (loop (+ i 1) (car s) #f) (loop (+ i 1) (cdr\
    \ s) #f))))\n          (else (loop (+ i 1) (cdr s) (or (loop (+ i 1) (car s) #f)\
    \ (loop (+ i 1) (cdr s) #f)))))\n    result))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (first string) '[) (is_nested (rest string))]\n        [else\
    \ #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n",
  "  (let loop ((i 0) (result #f))\n    (cond ((null? string) #f)\n          ((eq?\
    \ (car string) '[) (loop (+ i 1) (or (not result) (loop (+ i 1) #f))))\n     \
    \     ((eq? (car string) '(') (loop (+ i 1) #f))\n          (else (loop (+ i 1)\
    \ (or (not result) (loop (+ i 1) #f)))))))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[') (is_nested (subseq string 1 2))]\n    [else (is_nested (subseq\
    \ string 1 string))]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let loop\
    \ ((i 0) (s string) (result #f))\n    (cond ((null? s) result)\n          ((char=?\
    \ (car s) '[) (loop (+ i 1) (cdr s) (or (not result) (char=? (car s) '['))))\n\
    \          ((char=? (car s) '(') (loop (+ i 1) (cdr s) (not result)))\n      \
    \    (else (loop (+ i 1) (cdr s) result))))))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (first string) '[) (is_nested (substring (second string) 1))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n        [else #t]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[) (is_nested (subseq string 1\
    \ 2))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0) (string string))\n    (cond\n      [(empty? string) #f]\n      [(equal?\
    \ (car string) '[) (loop (add1 i) (sub1 string))]\n      [else (loop (add1 i)\
    \ (sub1 string))]))))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (let loop ((i\
    \ 0) (string string))\n    (cond ((null? string) #f)\n          ((char= (first\
    \ string) '[) (loop (+ i 1) (substring (first string) 1 i)))\n          ((char=\
    \ (first string) '() (loop (+ i 1) (substring (first string) 1 i)))\n        \
    \  (else (loop (+ i 1) (substring (first string) 1 i)))))\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer! I understand your code, but I still don't\
    \ understand how it works. Can you please explain how it works?\n<|/ c |>\n<|\
    \ c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thank you very much! I understand it now!\n<|/ c |>\n<| a dscore=0 |>\nI wrote\
    \ this simple recursive function which checks if a string contains only brackets.\n\
    <code>", "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested\
    \ (rest string))]\n        [else #t]))\n", "  (let loop ((i 0) (s string) (result\
    \ #f))\n    (cond\n      [(empty? s) result]\n      [(equal? (char-ref s i) '[)\
    \ (loop (+ i 1) (substring s i (+ i 1))\n                                    \
    \     (not (or (equal? (char-ref s i) '[) (equal? (char-ref s i) ']'))))\n   \
    \    (loop (+ i 1) (substring s i (+ i 1))\n             (not (or (equal? (char-ref\
    \ s i) '[) (equal? (char-ref s i) ']'))))\n       result]\n      [(equal? (char-ref\
    \ s i) ']) (loop (+ i 1) (substring s i (+ i 1))\n                           \
    \              (not (or (equal? (char-ref s i) '[) (equal? (char-ref s i) ']'))))\n\
    \       result]\n      [else result])))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[) #t]\n    [else (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (substring\
    \ (second string) 1))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (subseq\
    \ string 1))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n       \
    \ [(equal? (car string) '[) #t]\n        [else (or (is_nested (cdr string))\n\
    \                   (is_nested (string-append \"[\" (car string) \"]\")))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else #t]))\n", "  (let loop ((i 0) (s string) (result #f))\n\
    \    (cond ((null? s) result)\n          ((char=? (car s) '[) (loop (+ i 1) (cdr\
    \ s) (or (not result) (char=? (car s) '['))))\n          ((char=? (car s) '(')\
    \ (loop (+ i 1) (cdr s) (not result)))\n          (else (loop (+ i 1) (cdr s)\
    \ result))))))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string)\
    \ '[) #t]\n    [else (is_nested (cdr string))]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first string) '[) (is_nested (subseq string 1 2))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') (is_nested (rest string))]\n\
    \        [else (is_nested (rest string))]\n        ))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first string) '[') (is_nested (rest string))]\n     \
    \   [else (is_nested (rest string))]))\n", "  (let loop ((i 0) (s string) (result\
    \ #f))\n    (cond\n      [(empty? s) result]\n      [(equal? (car s) '[) (loop\
    \ (+ i 1) (cdr s) (or (not result) (equal? (car s) '['))))]\n      [(equal? (car\
    \ s) ']) (loop (+ i 1) (cdr s) (or (not result) (equal? (car s) ']'))))]\n   \
    \ result))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[)\
    \ (is_nested (cdr string))]\n        [else #f]))\n", "  (let loop ((i 0) (string\
    \ string))\n    (cond ((null? string) #f)\n          ((equal? (char (car string))\
    \ '[)\n           (loop (+ i 1) (cdr string)))\n          ((equal? (char (car\
    \ string)) ']')\n           (loop (+ i 1) (cdr string)))\n          (else (loop\
    \ (+ i 1) (cdr string))))))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0) (s string) (result #f))\n    (cond ((null? s) result)\n        \
    \  ((char= (char s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n   \
    \       ((char= (char s i) '(') (loop (+ i 1) (substring s i (+ i 1)) result))\n\
    \          (else (loop (+ i 1) (substring s i) result))))\n  result)\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else (is_nested (rest string))]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[)\
    \ (is_nested (cdr string))]\n    [else #f]))\n", "  (let loop ((i 0) (s string))\n\
    \    (cond\n      [(empty? s) #t]\n      [(equal? (char-ref s i) '[) (loop (+\
    \ i 1) (substring s 0 i))]\n      [else (loop (+ i 1) (substring s 0 i))]))))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n \
    \       [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n    \
    \    [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (let loop ((i 0) (string string))\n    (if (or (char= (char string i) '[')\n\
    \            (char= (char string i) '('))\n        (loop (+ i 1) string)\n   \
    \     #f)))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[) (is_nested (substring (second string) 1 -1))]\n        [else #f]))\n", " \
    \ (cond [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n        [else (is_nested (rest string))]))\n", "  (cond\n \
    \   [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested (rest string))]\n\
    \    [else #t]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[) (is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n      \
    \  [else #f]))\n", "  (let loop ((i 0) (result #f))\n    (cond ((null? string)\
    \ #f)\n          ((char=? (car string) '[)\n           (loop (+ i 1) (or (not\
    \ result) (char=? (car string) '[))))\n          ((char=? (car string) '])) \n\
    \          (else (loop (+ i 1) result))))))\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (first string) '[') (is_nested (rest string))]\n    [else\
    \ (is_nested (rest string))]))\n", "  (let loop ((i 0) (string string))\n    (cond\
    \ ((null? string) #f)\n          ((char=? (car string) '[) (loop (add1 i) (sub1\
    \ string 1)))\n          ((char=? (car string) '[) (loop (add1 i) (sub1 string\
    \ 1)))\n          ((char=? (car string) '(') (loop (add1 i) (sub1 string 1)))\n\
    \          ((char=? (car string) '(') (loop (add1 i) (sub1 string 1)))\n     \
    \     (else (loop (add1 i) (sub1 string))))))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) #t]\n    [else\
    \ (is_nested (cdr string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (let loop\
    \ ((i 0) (s string))\n    (cond ((null? s) #f)\n          ((eq? (car s) '[)\n\
    \           (loop (+ i 1) (cdr s)))\n          ((eq? (car s) '(]) (loop (+ i 1)\
    \ (cdr s))))\n          (else (loop (+ i 1) (cdr s)))))\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you very much for your answer! I tried to run your code,\
    \ but I got an error saying \"The value \"[\" is not of the expected type LIST.\"\
    \ I tried to fix it by changing the line \"(define (is_nested string)\" to \"\
    (define (is_nested string) (let loop ((i 0) (s string)) (cond ((null? s) #f)...))\"\
    , but then I got an error saying \"The value \"(\" is not of the expected type\
    \ LIST.\" I tried to fix it by changing the line \"(eq? (car s) '[)\" to \"(eq?\
    \ (car s) '())\", but then I got an error saying \"The value \"]\" is not of the\
    \ expected type LIST.\" I tried to fix it by changing the line \"(eq? (car s)\
    \ '(]) (loop (+ i 1) (cdr s))\" to \"(eq? (car s) '(]) (loop (+ i 1) (cdr s))\"\
    , but then I got an error saying \"The value \"]\" is not of the expected type\
    \ LIST.\" I tried to fix it by changing the line \"(eq? (car s) '(]) (loop (+\
    \ i 1) (cdr s))\" to \"(eq? (car s) '(]) (loop (+ i 1) (cdr s))\", but then I\
    \ got an error saying \"The value \"]\" is not of the expected type LIST.\" I\
    \ tried to fix it by changing the line \"(eq? (car s) '(]) (loop (+ i 1) (cdr\
    \ s))\" to \"(eq? (car s) '(]) (loop (+ i 1) (cdr s))\", but then I got an error\
    \ saying \"The value \"]\" is not of the expected type LIST.\" I tried to fix\
    \ it by changing the line \"(eq? (car s) '(]) (loop (+ i 1) (cdr s))\" to \"(eq?\
    \ (car s) '(]) (loop (+ i 1) (cdr s))\", but then I got an error saying \"The\
    \ value \"]\" is not of the expected type LIST.\" I tried to fix it by changing\
    \ the ", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) #t]\n\
    \        [else (is_nested (cdr string))]))\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (first string) '[') (is_nested (subseq string 1))]\n    [else\
    \ #f]))\n", "  (let loop ((i 0) (s string))\n    (cond\n      [(empty? s) (= i\
    \ 0)]\n      [(equal? (char-ref s i) '[) (loop (+ i 1) (substring s i (+ i 1)))]\n\
    \      [else (loop (+ i 1) (substring s i))]))))\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n    [else #f]))\n",
  "  (let loop ((i 0) (s string))\n    (cond ((null? s) #f)\n          ((equal? (char-ref\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)))\n            (loop (+ i 1) (substring\
    \ s i (+ i 1)))))\n          (else #t))))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[) #t]\n    [else (is_nested (cdr string))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) #t]\n    [else\
    \ (is_nested (cdr string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (let loop\
    \ ((i 0) (s string) (result #f))\n    (cond ((null? s) result)\n          ((char=\
    \ (first s) #\\]) (loop (+ i 1) (second s) (or (not result) (char= (first s) #\\\
    [))))\n          ((char= (first s) #\\[) (loop (+ i 1) (second s) (not result)))\n\
    \          (else (loop (+ i 1) (second s) result))))))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[') (is_nested (cdr string))]\n    [else\
    \ #t]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[)\
    \ (is_nested (rest string))]\n    [else #t]))\n", "  (let loop ((i 0) (s string))\n\
    \    (cond\n      [(empty? s) (= i 0)]\n      [(equal? (char-ref s i) '[) (loop\
    \ (+ i 1) (substring s 0 (+ i 1)))]\n      [else (loop (+ i 1) (substring s i\
    \ (+ i 1)))])))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n    \
    \    [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n        [else #t]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (let loop ((i 0) (s string) (result #f))\n    (if\
    \ (or (= i 0) (= i #(string-length s)))\n        result\n        (loop (add1 i)\
    \ (substring s i (string-length s)) (or (= (substring s i (string-length s)) '[)\
    \ (= (substring s i (string-length s)) '(')))))))\n", "  (let loop ((i 0) (string\
    \ string))\n    (cond ((null? string) #f)\n          ((char= (char string i) '[)\
    \ (loop (+ i 1) (substring string i (+ i 1)))\n            (loop (+ i 1) (substring\
    \ string i (+ i 1)))))\n          (else #t))))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (let loop ((i 0) (s string))\n    (cond ((null? s) #f)\n          ((char=? (car\
    \ s) '[) (loop (+ i 1) (cdr s)))\n          (else (loop (+ i 1) (cdr s))))))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) #t]\n        [else (or (is_nested (cdr string)) (is_nested\
    \ (car string)))]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #t]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n  \
    \  [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let loop ((i 0) (s\
    \ string) (found #f))\n    (cond ((null? s) found)\n          ((char=? (car s)\
    \ '[) (loop (+ i 1) (cdr s) (or (found (loop (+ i 1) (cdr s)) found))))\n    \
    \      ((char=? (car s) '() (loop (+ i 1) (cdr s) (or (found (loop (+ i 1) (cdr\
    \ s)) found))))\n          (else (loop (+ i 1) (cdr s) found))))))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n\
    \    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n    \
    \    [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (let loop ((i 0) (string string))\n    (cond ((null? string) #f)\n          ((char=?\
    \ (car string) '[)\n           (loop (add1 i) (substring string i (add1 i)))\n\
    \           (loop (add1 i) (substring string i (add1 i))))\n          ((char=?\
    \ (car string) ']) \n           (loop (add1 i) (substring string i (add1 i)))\n\
    \           (loop (add1 i) (substring string i (add1 i))))\n          (else (loop\
    \ (add1 i) (substring string i (add1 i)))))))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[) #t]\n        [else (and (is_nested (cdr string))\n\
    \                   (equal? (car string) '[))]))\n", "  (let loop ((i 0))\n  \
    \  (if (or (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let loop ((i 0) (s\
    \ string) (found #f))\n    (cond ((null? s) found)\n          ((char=? (car s)\
    \ '[) (loop (+ i 1) (cdr s) (or (found #f) (char=? (car s) '['))))\n         \
    \ ((char=? (car s) '(') (loop (+ i 1) (cdr s) (or (found #f) (char=? (car s) '['))))\n\
    \          (t (loop (+ i 1) (cdr s) found))))))\n", "  (let loop ((i 0) (result\
    \ #f))\n    (cond ((null? string) result)\n          ((char=? (car string) '[)\
    \ (loop (+ i 1) (or (not result) (loop (+ i 1) #f))))\n          ((char=? (car\
    \ string) '() (loop (+ i 1) (or (not result) (loop (+ i 1) #f))))\n          (t\
    \ (loop (+ i 1) (or (not result) (loop (+ i 1) #f)))))))\n", "  (let loop ((i\
    \ 0) (s string) (result #f))\n    (cond ((null? s) result)\n          ((char=\
    \ (char s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '(') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '(') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '[') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '[') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '{') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '{') (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '<) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '<) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '>) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '>) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '|) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '|) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '-) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '-) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '^) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char=\
    \ (char s i) '^) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= ",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) #t]\n    [else\
    \ (is_nested (cdr string))]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [else (is_nested (rest\
    \ string))]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[) (is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n        [(equal? (first string) '(') (is_nested\
    \ (rest string))]\n        [else #t]))\n", "  (cond [(empty? string) #f]\n   \
    \     [(equal? (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n",
  "  (let loop ((i 0) (string string))\n    (cond ((null? string) #f)\n          ((char=\
    \ (first string) '[) (loop (add1 i) (rest string)))\n          ((char= (first\
    \ string) '() (loop (add1 i) (rest string)))\n          (else (loop (add1 i) (rest\
    \ string))))))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[) (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) #t]\n    [else (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n        [else #f]))\n", "  (let loop ((i 0))\n    (if (= i 0)\n \
    \       #t\n        (let ((char (car string))\n              (prev (car string)))\n\
    \          (if (char '[)\n              (loop (+ i 1))\n              (if (char\
    \ '[)\n                  (loop (+ i 1))\n                  (if (char '[)\n   \
    \                   (loop (+ i 1))\n                      (if (char '[)\n    \
    \                      (loop (+ i 1))\n                          (if (char '[)\n\
    \                              (loop (+ i 1))\n                              (if\
    \ (char '[)\n                                  (loop (+ i 1))\n              \
    \                    (if (char '[)\n                                      (loop\
    \ (+ i 1))\n                                      (if (char '[)\n            \
    \                              (loop (+ i 1))\n                              \
    \            (if (char '[)\n                                              (loop\
    \ (+ i 1))\n                                              (if (char '[)\n    \
    \                                              (loop (+ i 1))\n              \
    \                                    (if (char '[)\n                         \
    \                             (loop (+ i 1))\n                               \
    \                       (if (char '[)\n                                      \
    \                    (loop (+ i 1))\n                                        \
    \                  (if (char '[)\n                                           \
    \                   (loop (+ i 1))\n                                         \
    \                     (if (char '[)\n                                        \
    \                          (loop (+ i 1))\n                                  \
    \                                (if (char '[)\n                             \
    \                                         (loop (+ i 1))\n                   \
    \                                                   (if (char '[)\n          \
    \                                                                (loop (+ i 1))\n\
    \                                                                          (if\
    \ (char '[)\n                                                                \
    \              (loop (+ i 1))\n                                              \
    \                                (if (char '[)\n                             \
    \                                                     (loop (+ i 1))\n       \
    \                                                                           (if\
    \ (char '[)\n                                                                \
    \                      (loop (+ i 1))\n                                      \
    \                                                (if (char '[)\n             \
    \                                                                            \
    \ (loop (+ i 1))\n                                                           \
    \                               (if (char '[)\n                              \
    \                                                                (loop (+ i 1))\n\
    \                                                                            \
    \                  (if (char '[)\n                                           \
    \                                                       (loop (+ i 1))\n     \
    \                                                                            \
    \                 (if (char '[)\n                                            \
    \                                                          (loop (+ i 1))\n  \
    \                                                                            \
    \                        (if (char '[)\n                                     \
    \                                                                     (loop (+\
    \ i 1))\n                                                                    \
    \                                      (if (char '[)\n                       \
    \                                                                            \
    \           (loop (+ i 1))\n                                                 \
    \                                                             (if (char '[)\n\
    \                                                                            \
    \                                      (loop (+ i 1))\n                      \
    \                                                                            \
    \                (if (char '[)\n                                             \
    \                                                                         (loop\
    \ (+ i 1))\n                                                                 \
    \                                                     (if (char '[)\n        \
    \                                                                            \
    \                                      (loop (+ i 1))\n                      \
    \                                                                            \
    \                        (", "  (cond [(empty? string) #f]\n        [(equal? (first\
    \ string) '[) (is_nested (subseq string 1 2))]\n        [else #f]))\n", "  (let\
    \ loop ((i 0) (s string) (result #f))\n    (cond\n      [(empty? s) result]\n\
    \      [(char=? (car s) '[) (loop (add1 i) (cdr s) (or (not result) (char=? (car\
    \ s) '['))))]\n      [(char=? (car s) '() (loop (add1 i) (cdr s) (not result)))]\n\
    \      [else (loop (add1 i) (cdr s) (not result))])))\n", "  (let loop ((i 0)\
    \ (s string) (result #f))\n    (cond ((null? s) result)\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((char= (char\
    \ s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result))\n          ((", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n \
    \       [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car\
    \ string) '[) #t]\n    [else (or (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (let loop\
    \ ((i 0) (result #f))\n    (if (< i string.length)\n        (if (char=? (char-code\
    \ string) '[')\n            (loop (+ i 1) #t)\n            (loop (+ i 1) #f))\n\
    \        result)))\n", "  (let loop ((i 0) (s string))\n    (cond ((null? s) #f)\n\
    \          ((char=? (car s) '[) (loop (add1 i) (substring s 0 (add1 i))))\n  \
    \        ((char=? (car s) '() (loop (add1 i) (substring s (add1 i) i)))\n    \
    \      (else (loop (add1 i) (substring s (add1 i) i))))))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n \
    \       [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (let loop ((i 0) (s\
    \ string) (t #f))\n    (cond\n      [(empty? s) t]\n      [(equal? (car s) '[)\
    \ (loop (add1 i) (sub1 s) (or (loop (add1 i) (sub1 s) #f) (loop (add1 i) (sub1\
    \ s) #f)))]\n      [(equal? (car s) '()) (loop (add1 i) (sub1 s) (or (loop (add1\
    \ i) (sub1 s) #f) (loop (add1 i) (sub1 s) #f)))]\n      [else (loop (add1 i) (sub1\
    \ s) (or (loop (add1 i) (sub1 s) #f) (loop (add1 i) (sub1 s) #f)))]\n    )\n \
    \ )\n)\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[)\
    \ (is_nested (rest string))]\n    [else #f]))\n", "  (let loop ((i 0) (string\
    \ string))\n    (cond ((null? string) #f)\n          ((char= (first string) '[)\
    \ (loop (+ i 1) (second string)))\n          ((char= (first string) '() (loop\
    \ (+ i 1) (second string)))\n          (else (loop (+ i 1) string))))))\n", " \
    \ (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #f]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') (is_nested (substring (second\
    \ string) 1))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n      \
    \  [(equal? (car string) '[') (is_nested (cdr string))]\n        [else (is_nested\
    \ (cdr string))]))\n", "  (let loop ((i 0) (string string))\n    (cond ((or (=\
    \ i 0) (eq? string \"\")) #f)\n          ((char=? (char-code string) '[) (loop\
    \ (+ i 1) (substring string i (+ i 1))))\n          ((char=? (char-code string)\
    \ '[) (loop (+ i 1) (substring string i (+ i 1))))\n          ((char=? (char-code\
    \ string) '[) (loop (+ i 1) (substring string i (+ i 1))))\n          ((char=?\
    \ (char-code string) '[) (loop (+ i 1) (substring string i (+ i 1))))\n      \
    \    ((char=? (char-code string) '[) (loop (+ i 1) (substring string i (+ i 1))))\n\
    \          ((char=? (char-code string) '[) (loop (+ i 1) (substring string i (+\
    \ i 1))))\n          ((char=? (char-code string) '[) (loop (+ i 1) (substring\
    \ string i (+ i 1))))\n          ((char=? (char-code string) '[) (loop (+ i 1)\
    \ (substring string i (+ i 1))))\n          ((char=? (char-code string) '[) (loop\
    \ (+ i 1) (substring string i (+ i 1))))\n          ((char=? (char-code string)\
    \ '[) (loop (+ i 1) (substring string i (+ i 1))))\n          ((char=? (char-code\
    \ string) '[) (loop (+ i 1) (substring string i (+ i 1))))\n          ((char=?\
    \ (char-code string) '[) (loop (+ i 1) (substring string i (+ i 1))))\n      \
    \    ((char=? (char-code string) '[) (loop (+ i 1) (substring string i (+ i 1))))\n\
    \          ((char=? (char-code string) '[) (loop (+ i 1) (substring string i (+\
    \ i 1))))\n          ((char=? (char-code string) '[) (loop (+ i 1) (substring\
    \ string i (+ i 1))))\n          ((char=? (char-code string) '[) (loop (+ i 1)\
    \ (substring string i (+ i 1))))\n          ((char=? (char-code string) '[) (loop\
    \ (+ i 1) (substring string i (+ i 1))))\n          ((char=? (char-", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (subseq\
    \ string 1))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[) (is_nested (substring (second string) 1))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[)\
    \ (is_nested (cdr string))]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
