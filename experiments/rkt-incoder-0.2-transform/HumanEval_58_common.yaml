name: HumanEval_58_common
language: rkt
prompt: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
  ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5 653)\n\
  ;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common l1 l2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
  \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
  \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
  \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
  \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
completions: ["  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal?\
    \ (first l1) x)) l2)\n          l1)\n        (lambda (x) (equal? (first l1) x))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (cond\n    ((null? l1) l2)\n    ((null? l2) l1)\n\
    \    ((equal? (first l1) (first l2)) (common (rest l1) (rest l2)))\n    (else\
    \ (cons (first l1) (common (rest l1) (rest l2))))))\n", "  (let ([l1 (sort l1)\n\
    \         l2 (sort l2)])\n    (if (null? l1)\n        (reverse l2)\n        (let\
    \ ([head (car l1)\n               tail (cdr l1)])\n          (if (null? tail)\n\
    \              (if (equal? head (car l2))\n                  (cons head l2)\n\
    \                  (cons head (common tail l2))\n                )\n         \
    \     (if (equal? head (car l2))\n                  (cons head l2)\n         \
    \         (cons head (common tail l2))\n                )\n            )\n   \
    \     )\n      )\n    )\n  )\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n\
    \    (cond [(empty? l1) l2]\n          [(empty? l2) l1]\n          [else (if (equal?\
    \ (first l1) (first l2))\n                  (common (rest l1) (rest l2))\n   \
    \               (cons (first l1) (common (rest l1) (rest l2)))\n             \
    \     )\n          ]\n          )\n  )\n)\n", "  (cond\n    [(empty? l1) l2]\n\
    \    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n\
    \    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n  \
    \  [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons\
    \ (first l1) (common (rest l1) (rest l2)))]))\n", "  (let loop ((l1 l1) (l2 l2)\
    \ (acc '()))\n    (cond ((null? l1) acc)\n          ((null? l2) acc)\n       \
    \   ((equal? (first l1) (first l2)) (loop (rest l1) (rest l2) (cons (first l1)\
    \ acc)))\n          (else (loop (rest l1) (rest l2) (cons (first l2) acc))))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n\
    \        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n     \
    \   [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1))\n  )\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          l1)))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1)))\n", "  (cond [(null? l1) l2]\n        [(member (car l1) l2) (common (cdr\
    \ l1) l2)]\n        [else (common (cdr l1) l2)]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond\n   \
    \ ((null? l1) l2)\n    ((null? l2) l1)\n    ((equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2)))\n    (else (cons (first l1) (common (rest l1) (rest l2))))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? x l1))\
    \ l2)\n          (remove-if-not (lambda (x) (equal? x l2)) l1))))\n", "  (cond\
    \ [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n\
    \    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else\
    \ (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (let ((l1 (sort l1\
    \ '<))\n        (l2 (sort l2 '<)))\n    (cond ((null? l1) l2)\n          ((null?\
    \ l2) l1)\n          ((equal? (first l1) (first l2)) (common (rest l1) (rest l2)))\n\
    \          (else (cons (first l1) (common (rest l1) l2))))))\n", "  (cond\n  \
    \  [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n   \
    \     [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else\
    \ (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond [(empty? l1)\
    \ l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n\
    \        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n     \
    \   [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond\n   \
    \ [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n    (cond\n\
    \      [(empty? l1) l2]\n      [(empty? l2) l1]\n      [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n      [else (cons (first l1) (common (rest\
    \ l1) l2))])))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          l1)\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >\n        >\n        >\n        >\n\
    \        >\n        >\n        >\n        >", "  (cond [(empty? l1) l2]\n    \
    \    [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1)\
    \ (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n   \
    \ (cond [(empty? l1) l2]\n          [(empty? l2) l1]\n          [(equal? (first\
    \ l1) (first l2)) (common (rest l1) (rest l2))]\n          [else (cons (first\
    \ l1) (common (rest l1) l2))])))\n", "  (cond [(null? l1) l2]\n        [(member\
    \ (first l1) l2) (common (rest l1) l2)]\n        [else (common (rest l1) l2)]))\n",
  "  (cond [(null? l1) l2]\n        [(member (car l1) l2) (common (cdr l1) l2)]\n\
    \        [else (common (cdr l1) l2)]))\n", "  (cond\n    [(empty? l1) l2]\n  \
    \  [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (let ([l (sort l1 '<)])\n    (cond [(empty? l1) l2]\n\
    \          [(empty? l2) l1]\n          [else (let ([e (first l)]\n           \
    \            (rest l1))\n                  (if (member e l2)\n               \
    \       (cons e l)\n                      (common l (rest l2)))]))))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) \n                       (remove-if-not (lambda (x) (equal? (first l2)\
    \ x)) \n                                      l2))\n          <))\n)\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          l1) '<))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (car l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (car l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let ([l1 (sort l1)\n     \
    \    l2 (sort l2)])\n    (cond [(empty? l1) l2]\n          [(empty? l2) l1]\n\
    \          [else (if (equal? (first l1) (first l2))\n                  (common\
    \ (rest l1) (rest l2))\n                  (cons (first l1) (common (rest l1) l2)))])))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          l1)))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (car l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (car l2) x)) l1))))\n", "  (cond [(null? l1) l2]\n        [(null? l2) l1]\n\
    \        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n     \
    \   [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond\n   \
    \ ((null? l1) l2)\n    ((null? l2) l1)\n    ((equal? (car l1) (car l2)) (common\
    \ (cdr l1) (cdr l2)))\n    (else (cons (car l1) (common (cdr l1) l2)))\n  )\n\
    )\n", "  (let ((l1 (sort l1 '<))\n        (l2 (sort l2 '>)))\n    (if (null? l1)\n\
    \        (reverse l2)\n        (if (null? l2)\n            (reverse l1)\n    \
    \        (if (equal? (first l1) (first l2))\n                (common (rest l1)\
    \ (rest l2))\n                (common (rest l1) (rest l2))))))))\n", "  (cond\
    \ [(null? l1) l2]\n        [(member (car l1) l2) (common (cdr l1) l2)]\n     \
    \   [else (common (cdr l1) l2)]))\n", "  (sort (remove-duplicates \n         \
    \ (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let ((l1 (sort l1 '<))\n \
    \       (l2 (sort l2 '<)))\n    (cond ((null? l1) l2)\n          ((null? l2) l1)\n\
    \          (else (and (equal? (first l1) (first l2))\n                    (common\
    \ (rest l1) (rest l2))))))))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n\
    \    (cond [(empty? l1) l2]\n          [(empty? l2) l1]\n          [else (if (equal?\
    \ (first l1) (first l2))\n                  (common (rest l1) (rest l2))\n   \
    \               (cons (first l1) (common (rest l1) l2)))])))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1)))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x)\
    \ (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first\
    \ l2) x)) l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n  \
    \  [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons\
    \ (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let ([l1 (sort\
    \ l1)\n         l2 (sort l2)])\n    (cond [(empty? l1) l2]\n          [(empty?\
    \ l2) l1]\n          [else (let ([c (first l1)\n                       c2 (first\
    \ l2)])\n                   (if (equal? c c2)\n                       (common\
    \ (rest l1) (rest l2))\n                       (cons c l1))]))]))\n", "  (cond\
    \ [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (cond [(null? l1) l2]\n        [(member (car l1) l2)\
    \ (common (cdr l1) l2)]\n        [else (common (cdr l1) l2)]))\n", "  (let ((l1\
    \ (sort l1 <))\n        (l2 (sort l2 <)))\n    (cond ((null? l1) l2)\n       \
    \   ((null? l2) l1)\n          ((equal? (first l1) (first l2)) (common (rest l1)\
    \ (rest l2)))\n          (else (cons (first l1) (common (rest l1) (rest l2))))))\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like the idea of using sort to get the\
    \ unique elements. But I do not understand why you use '<' as the comparison function.\
    \ I thought the '<' operator compares two numbers and returns true if they are\
    \ equal?\n<|/ c |>\n<| c |>\n`<` compares two numbers and returns true if they\
    \ are equal.  `'<` compares two strings and returns true if they are equal.  `'<`\
    \ compares two booleans and returns true if they are equal.  `'<` compares two\
    \ lists and returns true if they are equal.  `'<` compares two numbers and returns\
    \ true if they are equal.  `'<` compares two strings and returns true if they\
    \ are equal.  `'<` compares two booleans and returns true if they are equal. \
    \ `'<` compares two lists and returns true if they are equal.  `'<` compares two\
    \ numbers and returns true if they are equal.  `'<` compares two strings and returns\
    \ true if they are equal.  `'<` compares two booleans and returns true if they\
    \ are equal.  `'<` compares two lists and returns true if they are equal.  `'<`\
    \ compares two numbers and returns true if they are equal.  `'<` compares two\
    \ strings and returns true if they are equal.  `'<` compares two booleans and\
    \ returns true if they are equal.  `'<` compares two lists and returns true if\
    \ they are equal.\n<|/ c |>\n<| c |>\n`'<` compares two numbers and returns true\
    \ if they are equal.  `'<` compares two strings and returns true if they are equal.\
    \  `'<` compares two booleans and returns true if they are equal.  `'<` compares\
    \ two lists and returns true if they are equal.  `'<` compares two numbers and\
    \ returns true if they are equal.  `'<` compares two strings and returns true\
    \ if they are equal.  `'<` compares two booleans and returns true if they are\
    \ equal.  `'<` compares two lists and returns true if they are equal.  `'<` compares\
    \ two numbers and returns true if they are equal.  `'<", "  (cond\n    [(empty?\
    \ l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest\
    \ l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n\
    \        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n     \
    \   [else (cons (first l1) (common (rest l1) l2))]))\n", "  (cond [(empty? l1)\
    \ l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          l1)\n        (lambda (x y) (equal?\
    \ (first l1) x) (first l2))))\n", "  (cond [(null? l1) l2]\n        [(member (car\
    \ l1) l2) (common (cdr l1) l2)]\n        [else (common (cdr l1) l2)]))\n", " \
    \ (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? x l1))\
    \ l2))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x)\
    \ (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first\
    \ l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n   \
    \     [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else\
    \ (cons (first l1) (common (rest l1) l2))]))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let ((l1 (sort l1 '<))\n \
    \       (l2 (sort l2 '<))\n        (l1 (remove-duplicates l1))\n        (l2 (remove-duplicates\
    \ l2)))\n    (cond ((null? l1) l2)\n          ((null? l2) l1)\n          (else\
    \ (if (equal? (car l1) (car l2))\n                    (common (cdr l1) (cdr l2))\n\
    \                    (common (cdr l1) (cdr l2))))))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (car l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (car l2) x)) l1))))\n", "  (cond [(null? l1) l2]\n     \
    \   [(null? l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1)\
    \ (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (let ((l1 (sort l1 '<))\n        (l2 (sort l2 '<)))\n    (cond ((null? l1) l2)\n\
    \          ((null? l2) l1)\n          (else (and (equal? (first l1) (first l2))\n\
    \                    (common (rest l1) (rest l2))))))))\n", "  (cond\n    [(empty?\
    \ l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest\
    \ l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2)\
    \ l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? x l1)) l2)) \n        (lambda (x) (equal? x l1))))\n", " \
    \ (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (let ((l1 (sort l1 <))\n        (l2 (sort l2 <)))\n\
    \    (cond ((null? l1) l2)\n          ((null? l2) l1)\n          ((equal? (first\
    \ l1) (first l2)) (common (rest l1) (rest l2)))\n          (else (cons (first\
    \ l1) (common (rest l1) l2))))))\n", "  (cond [(empty? l1) l2]\n        [(empty?\
    \ l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n    (cond [(empty? l1) l2]\n  \
    \        [(empty? l2) l1]\n          [else (if (equal? (first l1) (first l2))\n\
    \                  (common (rest l1) (rest l2))\n                  (cons (first\
    \ l1) (common (rest l1) (rest l2)))\n                  )]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nI didn't know about `sort`, thanks for teaching me something new!\n\
    <|/ c |>\n<| c |>\nI didn't know about `sort`, thanks for teaching me something\
    \ new!\n<|/ c |>\n<| c |>\nI didn't know about `sort`, thanks for teaching me\
    \ something new!\n<|/ c |>\n<| c |>\nI didn't know about `sort`, thanks for teaching\
    \ me something new!\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let loop ((l1\
    \ l1) (l2 l2) (acc '()))\n    (cond ((null? l1) acc)\n          ((null? l2) acc)\n\
    \          ((equal? (first l1) (first l2)) (loop (rest l1) (rest l2) (cons (first\
    \ l1) acc)))\n          (else (loop (rest l1) (rest l2) (cons (first l2) acc))))))\n",
  "  (let ((l1 (sort l1 '<))\n        (l2 (sort l2 '<)))\n    (cond ((null? l1) l2)\n\
    \          ((null? l2) l1)\n          (else (and (equal? (first l1) (first l2))\n\
    \                    (common (rest l1) (rest l2))))))))\n", "  (let ((l1 (sort\
    \ l1 <))\n        (l2 (sort l2 <)))\n    (cond ((null? l1) l2)\n          ((null?\
    \ l2) l1)\n          (else (and (equal? (first l1) (first l2))\n             \
    \       (common (rest l1) (rest l2))))))))\n", "  (cond [(null? l1) l2]\n    \
    \    [(member (car l1) l2) (common (cdr l1) l2)]\n        [else (common (cdr l1)\
    \ l2)]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x)\
    \ (equal? (first l1) x)) \n                       (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) \n                                      l1))\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) \n                       (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) \n                                      l2))))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| a |>\n<code>", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond\n   \
    \ [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1)\
    \ (rest l2)))]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n   \
    \     [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else\
    \ (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1) '<))\n", "  (cond\n    ((null? l1) l2)\n    ((null? l2) l1)\n    ((equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2)))\n    (else (cons (first\
    \ l1) (common (rest l1) (rest l2))))))\n", "  (sort (remove-duplicates \n    \
    \      (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond\n    [(empty? l1) l2]\n\
    \    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) l2))]))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n\
    \    (cond [(empty? l1) l2]\n          [(empty? l2) l1]\n          [else (let\
    \ ([c (first l1)\n                        d (first l2)])\n                  (if\
    \ (equal? c d)\n                      (common (rest l1) (rest l2))\n         \
    \             (cons c d)))])))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (member x l2)) l1))))\n", "  (let ([l1 (sort l1)\n         l2 (sort\
    \ l2)])\n    (cond [(empty? l1) l2]\n          [(empty? l2) l1]\n          [else\
    \ (if (equal? (first l1) (first l2))\n                  (common (rest l1) (rest\
    \ l2))\n                  (cons (first l1) (common (rest l1) (rest l2)))\n   \
    \               )\n           ]\n          )\n    ))\n", "  (let loop ((l1 l1)\
    \ (l2 l2) (acc '()))\n    (cond ((null? l1) (cons l2 acc))\n          ((null?\
    \ l2) (cons l1 acc))\n          (else (loop (cdr l1) (cdr l2) (cons (car l1) acc))))))\n",
  "  (let ((l1 (sort l1 '<))\n        (l2 (sort l2 '<)))\n    (cond ((null? l1) l2)\n\
    \          ((null? l2) l1)\n          ((equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2)))\n          (else (cons (first l1) (common (rest l1) (rest\
    \ l2))))))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty?\
    \ l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) l2))]))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1)))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x)\
    \ (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first\
    \ l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n   \
    \     [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n        [else\
    \ (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond [(null? l1) l2]\n\
    \        [(member (car l1) l2)\n         (common (cdr l1) l2)]\n        [else\
    \ (common (cdr l1) l2)]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2)\
    \ l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n   \
    \ [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (let ([l1 (sort\
    \ l1)\n         l2 (sort l2)])\n    (if (null? l1)\n        (reverse l2)\n   \
    \     (let ([head (car l1)\n               tail (cdr l1)])\n          (if (null?\
    \ tail)\n              (if (equal? head (car l2))\n                  (list head)\n\
    \                  (list head (car l2)))\n              (if (equal? (car l2) head)\n\
    \                  (list head (car l2))\n                  (if (equal? (car l2)\
    \ (car l1))\n                      (list (car l1) head)\n                    \
    \  (list (car l1) head (car l2)))))))\n    (if (null? l2)\n        (reverse l1)\n\
    \        (let ([head (car l2)\n               tail (cdr l2)])\n          (if (null?\
    \ tail)\n              (if (equal? head (car l1))\n                  (list head)\n\
    \                  (list head (car l1)))\n              (if (equal? (car l1) head)\n\
    \                  (list head (car l1))\n                  (if (equal? (car l1)\
    \ (car l2))\n                      (list (car l2) head)\n                    \
    \  (list (car l2) head (car l1)))))))\n    (if (equal? (car l1) (car l2))\n  \
    \      (list (car l1) (car l2))\n        (if (equal? (car l1) (car l2))\n    \
    \        (list (car l1) (car l2))\n            (if (equal? (car l1) (car l2))\n\
    \                (list (car l1) (car l2))\n                (if (equal? (car l1)\
    \ (car l2))\n                    (list (car l1) (car l2))\n                  \
    \  (if (equal? (car l1) (car l2))\n                        (list (car l1) (car\
    \ l2))\n                        (if (equal? (car l1) (car l2))\n             \
    \               (list (car l1) (car l2))\n                            (if (equal?\
    \ (car l1) (car l2))\n                                (list (car l1) (car l2))\n\
    \                                (if (equal? (car l1) (car l2))\n            \
    \                        (list (car l1) (car l2))))))))))))\n", "  (cond [(null?\
    \ l1) l2]\n        [(member (car l1) l2)\n         (common (cdr l1) l2)]\n   \
    \     [else (common (cdr l1) l2)]))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond [(null? l1) l2]\n   \
    \     [(member (car l1) l2) (common (cdr l1) l2)]\n        [else (common (cdr\
    \ l1) l2)]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (cond [(null? l1) l2]\n        [(member\
    \ (car l1) l2)\n         (common (cdr l1) l2)]\n        [else (cons (car l1) (common\
    \ (cdr l1) l2))]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n \
    \       [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n      \
    \  [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (let ((l1 (sort\
    \ l1 <))\n        (l2 (sort l2 <)))\n    (cond ((null? l1) l2)\n          ((null?\
    \ l2) l1)\n          ((equal? (first l1) (first l2)) (common (rest l1) (rest l2)))\n\
    \          (else (cons (first l1) (common (rest l1) (rest l2))))))))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (car l1) x))\
    \ l2)\n          (remove-if-not (lambda (x) (equal? (car l2) x)) l1))))\n", " \
    \ (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) \n                       (remove-if-not (lambda\
    \ (x) (equal? (first l2) x)) \n                                      l1))\n  \
    \        (remove-if-not (lambda (x) (equal? (first l2) x)) \n                \
    \       l2))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\
    \ ((null? l1) (cons l2 acc))\n          ((null? l2) (cons l1 acc))\n         \
    \ (else (loop (car l1) (car l2) (cons (car l1) acc))))))\n", "  (cond\n    [(empty?\
    \ l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest\
    \ l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n    (cond [(null? l1) l2]\n   \
    \       [(null? l2) l1]\n          [else (if (equal? (car l1) (car l2))\n    \
    \              (common (cdr l1) (cdr l2))\n                  (cons (car l1) (common\
    \ (cdr l1) (cdr l2))))]))))\n", "  (let loop ((l1 l1) (l2 l2) (result '()))\n\
    \    (cond ((null? l1) l2)\n          ((null? l2) l1)\n          ((equal? (first\
    \ l1) (first l2)) (loop (rest l1) (rest l2) (cons (first l1) result)))\n     \
    \     (else (loop (rest l1) (rest l2) result)))\n    (reverse result)))\n", " \
    \ (cond [(null? l1) l2]\n        [(member (first l1) l2) (common (rest l1) l2)]\n\
    \        [else (common (rest l1) l2)]))\n", "  (sort (remove-duplicates \n   \
    \       (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (cond\n    [(empty? l1) l2]\n\
    \    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond\
    \ [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n   \
    \ (if (null? l1)\n        (reverse l2)\n        (if (null? l2)\n            (reverse\
    \ l1)\n            (if (equal? (first l1) (first l2))\n                (common\
    \ (rest l1) (rest l2))\n                (common (rest l1) (rest l2))))))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          l1)))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (member x l2)) l1))))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty?\
    \ l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (let ((l1\
    \ (sort l1 <))\n        (l2 (sort l2 <)))\n    (cond ((null? l1) l2)\n       \
    \   ((null? l2) l1)\n          (else (and (equal? (first l1) (first l2))\n   \
    \                 (common (rest l1) (rest l2))))))))\n", "  (cond [(empty? l1)\
    \ l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (let ([l1 (sort l1)\n         l2 (sort l2)])\n    (cond [(empty?\
    \ l1) l2]\n          [(empty? l2) l1]\n          [else (let ([c (first l1)\n \
    \                      d (first l2)])\n                  (if (equal? c d)\n  \
    \                    (common (rest l1) (rest l2))\n                      (cons\
    \ c d)))])))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (sort (remove-duplicates \n    \
    \      (remove-if-not (lambda (x) (equal? (first l1) x)) \n                  \
    \     (remove-if-not (lambda (x) (equal? (first l2) x)) \n                   \
    \                     l2))\n          <))\n)\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          l1)\n\
    \        >\n        (lambda (x y) (equal? (first l1) y))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let ((l1 (sort\
    \ l1 '<))\n        (l2 (sort l2 '<)))\n    (cond ((null? l1) l2)\n          ((null?\
    \ l2) l1)\n          ((equal? (first l1) (first l2)) (common (rest l1) (rest l2)))\n\
    \          (else (cons (first l1) (common (rest l1) (rest l2))))))))\n", "  (cond\n\
    \    ((null? l1) l2)\n    ((null? l2) l1)\n    ((equal? (first l1) (first l2))\
    \ (common (rest l1) (rest l2)))\n    (else (cons (first l1) (common (rest l1)\
    \ (rest l2))))))\n", "  (let loop ((l1 l1) (l2 l2) (result '()))\n    (cond ((null?\
    \ l1) l2)\n          ((null? l2) l1)\n          ((equal? (first l1) (first l2))\
    \ (loop (rest l1) (rest l2) (cons (first l1) result)))\n          (else (loop\
    \ (rest l1) (rest l2) result))))\n  result)\n", "  (let ([l1 (sort l1)\n     \
    \    l2 (sort l2)])\n    (if (null? l1)\n        (reverse l2)\n        (if (null?\
    \ l2)\n            (reverse l1)\n            (let ([head (car l1)\n          \
    \         tail (cdr l1)])\n              (if (equal? (car l2) head)\n        \
    \          (common (cdr l1) l2)\n                  (common (cdr l1) (cons (car\
    \ l2) tail))))))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (let ([l1 (sort l1)\n         l2 (sort\
    \ l2)])\n    (cond [(empty? l1) l2]\n          [(empty? l2) l1]\n          [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n          [else (cons\
    \ (first l1) (common (rest l1) l2))])))\n", "  (sort (remove-duplicates \n   \
    \       (remove-if-not (lambda (x) (equal? x l1)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? x l2)) l1))))\n", "  (let ((l1 (sort l1 <))\n        (l2\
    \ (sort l2 <)))\n    (cond ((null? l1) l2)\n          ((null? l2) l1)\n      \
    \    ((equal? (first l1) (first l2)) (common (rest l1) (rest l2)))\n         \
    \ (else (cons (first l1) (common (rest l1) (rest l2))))))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  l1) '<))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (car l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (car\
    \ l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (cond\n    ((null? l1) l2)\n    ((null? l2) l1)\n\
    \    ((equal? (first l1) (first l2)) (common (rest l1) (rest l2)))\n    (else\
    \ (cons (first l1) (common (rest l1) (rest l2))))))\n", "  (cond\n    [(empty?\
    \ l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest\
    \ l1) (rest l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1)\
    \ (first l2)) (common (rest l1) (rest l2))]\n        [else (cons (first l1) (common\
    \ (rest l1) (rest l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2)\
    \ l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n   \
    \ [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond [(empty?\
    \ l1) l2]\n        [(empty? l2) l1]\n        [(equal? (first l1) (first l2)) (common\
    \ (rest l1) (rest l2))]\n        [else (cons (first l1) (common (rest l1) (rest\
    \ l2)))]))\n", "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal?\
    \ (first l1) (first l2)) (common (rest l1) (rest l2))]\n    [else (cons (first\
    \ l1) (common (rest l1) (rest l2)))]))\n", "  (let loop ((l1 l1) (l2 l2) (acc\
    \ '()))\n    (cond ((null? l1) acc)\n          ((null? l2) acc)\n          ((equal?\
    \ (first l1) (first l2)) (loop (rest l1) (rest l2) (cons (first l1) acc)))\n \
    \         (else (loop (rest l1) (rest l2) (cons (first l2) acc))))))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (cond\n    [(empty? l1) l2]\n    [(empty? l2) l1]\n    [(equal? (first l1) (first\
    \ l2)) (common (rest l1) (rest l2))]\n    [else (cons (first l1) (common (rest\
    \ l1) (rest l2)))]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2) l1]\n\
    \        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n     \
    \   [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (cond [(null?\
    \ l1) l2]\n        [(member (car l1) l2) (common (cdr l1) l2)]\n        [else\
    \ (common (cdr l1) l2)]))\n", "  (cond [(empty? l1) l2]\n        [(empty? l2)\
    \ l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (let loop\
    \ ((l1 l1) (l2 l2) (acc '()))\n    (cond\n      [(empty? l1) (cons l2 acc)]\n\
    \      [(empty? l2) (cons l1 acc)]\n      [(equal? (first l1) (first l2)) (loop\
    \ (rest l1) (rest l2) (cons (first l1) acc))]\n      [else (loop (rest l1) (rest\
    \ l2) (cons (first l1) acc))]))))\n", "  (cond [(empty? l1) l2]\n        [(empty?\
    \ l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) \n                       (remove-if-not (lambda (x) (equal? (first l2) x))\
    \ \n                                       (map rest l1))))\n        (lambda (x)\
    \ (equal? (first l1) x))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (cond [(empty? l1) l2]\n        [(empty?\
    \ l2) l1]\n        [(equal? (first l1) (first l2)) (common (rest l1) (rest l2))]\n\
    \        [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2)) l1))))\n",
  "  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\n      [(empty? l1) (cons l2\
    \ acc)]\n      [(empty? l2) (cons l1 acc)]\n      [(equal? (first l1) (first l2))\
    \ (loop (rest l1) (rest l2) (cons (first l1) acc))]\n      [else (loop (rest l1)\
    \ (rest l2) (cons (first l1) acc))])))\n", "  (cond\n    [(empty? l1) l2]\n  \
    \  [(empty? l2) l1]\n    [(equal? (first l1) (first l2)) (common (rest l1) (rest\
    \ l2))]\n    [else (cons (first l1) (common (rest l1) (rest l2)))]))\n", "  (sort\
    \ (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first l1)\
    \ x)) l2)\n          l1))\n)\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (let ([l1 (sort l1)\n         l2 (sort\
    \ l2)])\n    (cond [(null? l1) l2]\n          [(null? l2) l1]\n          [(equal?\
    \ (car l1) (car l2)) (common (cdr l1) (cdr l2))]\n          [else (cons (car l1)\
    \ (common (cdr l1) l2))])))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
