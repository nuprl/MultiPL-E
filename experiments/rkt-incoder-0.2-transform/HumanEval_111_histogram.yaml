name: HumanEval_111_histogram
language: rkt
prompt: "#lang racket\n\n;; Given a string representing a space separated lowercase\
  \ letters, return a dictionary\n;; of the letter with the most repetition and containing\
  \ the corresponding count.\n;; If several letters have the same occurrence, return\
  \ all of them.\n;; Example:\n;; >>> (histogram \"a b c\")\n;; #hash((\"a\" .  1)\
  \ (\"b\" .  1) (\"c\" .  1))\n;; >>> (histogram \"a b b a\")\n;; #hash((\"a\" .\
  \  2) (\"b\" .  2))\n;; >>> (histogram \"a b c a b\")\n;; #hash((\"a\" .  2) (\"\
  b\" .  2))\n;; >>> (histogram \"b b b b a\")\n;; #hash((\"b\" .  4))\n;; >>> (histogram\
  \ \"\")\n;; #hash()\n(define (histogram test)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate histogram))\n\
  \    (check-equal? (candidate \"a b b a\") #hash((\"a\" .  2) (\"b\" .  2)))\n \
  \   (check-equal? (candidate \"a b c a b\") #hash((\"a\" .  2) (\"b\" .  2)))\n\
  \    (check-equal? (candidate \"a b c d g\") #hash((\"a\" .  1) (\"b\" .  1) (\"\
  c\" .  1) (\"d\" .  1) (\"g\" .  1)))\n    (check-equal? (candidate \"r t g\") #hash((\"\
  r\" .  1) (\"t\" .  1) (\"g\" .  1)))\n    (check-equal? (candidate \"b b b b a\"\
  ) #hash((\"b\" .  4)))\n    (check-equal? (candidate \"r t g\") #hash((\"r\" . \
  \ 1) (\"t\" .  1) (\"g\" .  1)))\n    (check-equal? (candidate \"\") #hash())\n\
  \    (check-equal? (candidate \"a\") #hash((\"a\" .  1)))\n))\n\n(test-humaneval)"
completions: ["  (let ([letters (string->list test)])\n    (let ([letter-count (make-hash\
    \ (hash-empty))])\n      (for ([letter (in-list letters)])\n        (hash-set!\
    \ letter-count (cons letter 1))\n        (hash-set! letter-count (cons letter\
    \ letter-count)))\n      (hash-map key (hash-sort letter-count <)))))\n", "  (let\
    \ ([letters (string->list test)])\n    (let ([letters-count (count-letters letters)])\n\
    \      (let ([most-repeated (max-count letters-count)])\n        (let ([most-repeated-letter\
    \ (car most-repeated)])\n          (let ([most-repeated-count (cdr most-repeated)])\n\
    \            (cons (cons most-repeated-letter most-repeated-count) most-repeated)))))\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  (let ([letters (string->list\
    \ test)])\n    (let ([counts (make-hash)])\n      (for ([letter letters])\n  \
    \      (hash-set! counts letter 0)\n        (hash-set! counts (+ counts 1)))\n\
    \      (hash->list counts))))\n", "  (let ([letters (string->list test)])\n  \
    \  (let ([letters-count (count-letters letters)])\n      (let ([most-repeated\
    \ (max-count letters-count)])\n        (let ([most-repeated-letter (car most-repeated)])\n\
    \          (let ([most-repeated-count (cdr most-repeated)])\n            (cons\
    \ (cons most-repeated-letter most-repeated-count) most-repeated))))))))\n", " \
    \ (let ([letters (string-split test #\\Space)])\n    (let ([letters-count (count-letters\
    \ letters)])\n      (let ([most-repeated (max-count letters-count)])\n       \
    \ (let ([letters-with-most-repeated (filter-letters letters most-repeated)])\n\
    \          (let ([letters-with-most-repeated-count (count-letters letters-with-most-repeated)])\n\
    \            (cons (cons most-repeated letters-with-most-repeated-count) letters-with-most-repeated-count))))))))\n",
  "  (let ([letters (string->list test)])\n    (let ([counts (make-hash)])\n     \
    \ (for ([letter letters])\n        (hash-set! counts letter 0)\n        (hash-set!\
    \ counts (lambda (letter count) (hash-update! counts letter count+1))))\n    \
    \  (hash-map letter (lambda (letter count) (list letter count)))))\n", "  (let\
    \ ([letters (string->list test)])\n    (let ([counts (make-hash (hash-empty))])\n\
    \      (for ([letter letters])\n        (hash-set! counts letter (hash-ref counts\
    \ letter (+ 1 1)))\n        counts))))\n", "  (let ([letters (string-split test\
    \ #\\Space)])\n    (let ([counts (make-hash (hash-empty))])\n      (for ([letter\
    \ letters])\n        (hash-set! counts (letter 1) letter)\n        (hash-set!\
    \ counts (letter 0) letter))\n      (hash-map [(first letters) (hash-map [(second\
    \ letters) (hash-count counts)]) ])))) ; #lang racket\n", "  (let ([letters (string->list\
    \ test)])\n    (let ([counts (make-hash)])\n      (for ([letter (in-list letters)])\n\
    \        (hash-set! counts letter 1))\n      (hash->list counts))))\n", "  (let\
    \ ([letters (string->list test)])\n    (let ([letters-count (count-letters letters)])\n\
    \      (let ([most-repeated (max-count letters-count)])\n        (let ([letters-with-most-repeated\
    \ (filter-letters letters most-repeated)])\n          (let ([letters-with-most-repeated-count\
    \ (count-letters letters-with-most-repeated)])\n            (cons (cons most-repeated\
    \ letters-with-most-repeated-count) letters-with-most-repeated-count))))))))\n",
  "  (let ([letters (string->list test)])\n    (let ([counts (make-hash (hash-empty))])\n\
    \      (for ([letter letters])\n        (hash-set! counts letter \n          \
    \         (hash-ref counts letter (add1 count)))\n        counts)\n      (hash-sort\
    \ counts (fn [a b] \n                          (< (hash-ref a 1) (hash-ref b 1))))\n\
    \      (hash-keys counts))))\n", "  (let ([letters (string-split test #\\Space)])\n\
    \    (let ([counts (make-hash (hash-empty))])\n      (for ([letter letters])\n\
    \        (hash-set! counts letter 0)\n        (hash-set! counts (hash-ref counts\
    \ letter) (+ 1 (hash-ref counts letter)))\n        counts)\n    ))\n", "  (let\
    \ ([letters (string->list test)])\n    (let ([counts (make-hash (hash-empty))])\n\
    \      (for ([letter letters])\n        (hash-set! counts letter 0)\n        (hash-update!\
    \ counts letter (+ 1 1)))\n      (hash-map key value counts))))\n", "  (let ([letters\
    \ (string-split test #\\Space)])\n    (let ([letter (car letters)])\n      (let\
    \ ([count (count-if #(< % %) letters)])\n        (cond [(empty? letters) #hash()]\n\
    \              [(< count (caar letters)) #hash(cons (car letters) (+ (cdr letters)\
    \ 1))]\n              [else (cons (car letters) (+ (cdr letters) 1))]))))))\n",
  "  (let ([letters (string-split test #\\Space)])\n    (let ([letters-count (count-letters\
    \ letters)])\n      (let ([most-frequent-letter (max-key letters-count count-letters)])\n\
    \        (let ([most-frequent-letter-count (lookup most-frequent-letter letters-count)]\n\
    \              [most-frequent-letter-letter-count (lookup most-frequent-letter\
    \ letters)])\n          (cons (cons most-frequent-letter most-frequent-letter-count)\
    \ most-frequent-letter-letter-count)))))))\n", "  (let ([letters (string-split\
    \ test #\\Space)])\n    (let ([letters-count (count-letters letters)])\n     \
    \ (let ([most-repeated (max-count letters-count)])\n        (let ([letters-with-most-repeated\
    \ (filter-letters letters most-repeated)])\n          (let ([letters-with-most-repeated-count\
    \ (count-letters letters-with-most-repeated)])\n            (let ([letters-with-most-repeated-count\
    \ (min-count letters-with-most-repeated-count most-repeated)])\n             \
    \ (let ([letters-with-most-repeated-count (min-count letters-with-most-repeated-count\
    \ most-repeated)])\n                (let ([letters-with-most-repeated-count (min-count\
    \ letters-with-most-repeated-count most-repeated)])\n                  (let ([letters-with-most-repeated-count\
    \ (min-count letters-with-most-repeated-count most-repeated)])\n             \
    \       (let ([letters-with-most-repeated-count (min-count letters-with-most-repeated-count\
    \ most-repeated)])\n                      (let ([letters-with-most-repeated-count\
    \ (min-count letters-with-most-repeated-count most-repeated)])\n             \
    \           (let ([letters-with-most-repeated-count (min-count letters-with-most-repeated-count\
    \ most-repeated)])\n                          (let ([letters-with-most-repeated-count\
    \ (min-count letters-with-most-repeated-count most-repeated)])\n             \
    \               (let ([letters-with-most-repeated-count (min-count letters-with-most-repeated-count\
    \ most-repeated)])\n                              (let ([letters-with-most-repeated-count\
    \ (min-count letters-with-most-repeated-count most-repeated)])\n             \
    \                   (let ([letters-with-most-repeated-count (min-count letters-with-most-repeated-count\
    \ most-repeated)])\n                                  (let ([letters-with-most-repeated-count\
    \ (min-count letters-with-most-repeated-count most-repeated)])\n             \
    \                       (let ([letters-with-most-repeated-count (min-count letters-with-most-repeated-count\
    \ most-repeated)])\n                                      (let ([letters-with-most",
  "  (let ([letters (string->list test)])\n    (let ([letters-count (count-letters\
    \ letters)])\n      (let ([most-repeated (max-count letters-count)])\n       \
    \ (let ([most-repeated-letter (car most-repeated)])\n          (let ([most-repeated-count\
    \ (cdr most-repeated)])\n            (cons (cons most-repeated-letter most-repeated-count)\
    \ most-repeated))))))))\n", "  (let ([letters (string-split test #\\Space)])\n\
    \    (let ([counts (make-hash (string->list test))])\n      (for ([letter letters])\n\
    \        (hash-set! counts letter (hash-ref counts letter (+ 1 1)))\n        counts))))\n",
  "  (let ([letters (string-split test #\\Space)])\n    (let ([letters-count (count-letters\
    \ letters)])\n      (let ([most-repeated (max-count letters-count)])\n       \
    \ (let ([most-repeated-letters (filter-letters letters most-repeated)])\n    \
    \      (let ([most-repeated-letters-count (count-letters most-repeated-letters)])\n\
    \            (cons (cons most-repeated most-repeated-letters) most-repeated-letters-count))))))))\n",
  "  (let ([letters (string-split test #\\Space)]\n        [counts (count-letters\
    \ letters)]\n        [max-count (max-count counts)]\n        [most-frequent-letter\
    \ (first-most-frequent-letter counts max-count)]\n        [most-frequent-letters\
    \ (most-frequent-letters letters most-frequent-letter)]\n        [most-frequent-letters-count\
    \ (most-frequent-letters-count letters most-frequent-letter)])\n    (hash-map\
    \ most-frequent-letter most-frequent-letters-count)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
