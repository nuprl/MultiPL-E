name: HumanEval_8_sum_product
language: rkt
prompt: "#lang racket\n\n;; For a given list of integers, return a tuple consisting\
  \ of a sum and a product of all the integers in a list.\n;; Empty sum should be\
  \ equal to 0 and empty product should be equal to 1.\n;; >>> (sum_product (list\
  \ ))\n;; (list 0 1)\n;; >>> (sum_product (list 1 2 3 4))\n;; (list 10 24)\n(define\
  \ (sum_product numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_product))\n\
  \    (check-equal? (candidate (list )) (list 0 1))\n    (check-equal? (candidate\
  \ (list 1 1 1)) (list 3 1))\n    (check-equal? (candidate (list 100 0)) (list 100\
  \ 0))\n    (check-equal? (candidate (list 3 5 7)) (list 15 105))\n    (check-equal?\
  \ (candidate (list 10)) (list 10 10))\n))\n\n(test-humaneval)"
completions: ["  (let ((sum (first numbers))\n        (product (second numbers)))\n\
    \    (if (null? numbers)\n        (list sum product)\n        (let ((sum (+ sum\
    \ numbers))\n              (product (* product numbers)))\n          (list sum\
    \ product))))))\n", "  (let ((sum (car numbers))\n        (product (car numbers)))\n\
    \    (if (null? numbers)\n        (list sum product)\n        (let ((sum (+ sum\
    \ numbers))\n              (product (* product numbers)))\n          (list sum\
    \ product))))))\n", "  (let ((sum (car numbers))\n        (product (car numbers)))\n\
    \    (if (null? numbers)\n        (list sum product)\n        (let ((sum (+ sum\
    \ numbers))\n              (product (* product numbers)))\n          (list sum\
    \ product))))))\n", "  (let loop ((numbers numbers)\n             (sum 0)\n  \
    \           (product 1))\n    (if (null? numbers)\n        (list sum product)\n\
    \        (loop (cdr numbers)\n              (+ sum (car numbers))\n          \
    \    (* product (car numbers))))))\n", "  (let ((sum (first numbers))\n      \
    \  (product (second numbers)))\n    (if (null? numbers)\n        (list sum product)\n\
    \        (let ((sum (+ sum numbers))\n              (product (* product numbers)))\n\
    \          (list sum product))))))\n", "  (let ((sum (first numbers))\n      \
    \  (product (second numbers)))\n    (if (null? numbers)\n        (list sum product)\n\
    \        (let ((sum (+ sum numbers))\n              (product (* product numbers)))\n\
    \          (list sum product))))))\n", "  (let ((sum (first numbers))\n      \
    \  (product (second numbers)))\n    (if (null? numbers)\n        (list sum product)\n\
    \        (let ((sum (+ sum numbers))\n              (product (* product numbers)))\n\
    \          (list sum product))))))\n", "  (let ((sum (first numbers))\n      \
    \  (product (second numbers)))\n    (if (null? numbers)\n        (list sum product)\n\
    \        (let ((sum (+ sum numbers))\n              (product (* product numbers)))\n\
    \          (list sum product))))))\n", "  (let ((sum (first numbers))\n      \
    \  (product (second numbers)))\n    (if (null? numbers)\n        (list sum product)\n\
    \        (let ((sum (+ sum numbers))\n              (product (* product numbers)))\n\
    \          (list sum product))))))\n", "  (let ((sum (first numbers))\n      \
    \  (product (second numbers)))\n    (if (null? numbers)\n        (list sum product)\n\
    \        (let ((sum (+ sum numbers))\n              (product (* product numbers)))\n\
    \          (list sum product))))))\n", "  (cond\n    [(empty? numbers) (list 0\
    \ 1)]\n    [(cons? numbers) (cons (+ (car numbers) (sum_product (cdr numbers)))\
    \ (product (cdr numbers)))]\n    [else (error \"Not a list\")]))\n", "  (let ((sum\
    \ (first numbers))\n        (product (second numbers)))\n    (if (null? numbers)\n\
    \        (list sum product)\n        (let ((sum (+ sum numbers))\n           \
    \   (product (* product numbers)))\n          (list sum product))))))\n", "  (if\
    \ (null? numbers)\n      (list 0 1)\n      (let ((sum (car numbers))\n       \
    \     (product (car (cdr numbers))))\n        (list (+ sum product) (* sum product)))))\n",
  "  (cond\n    [(empty? numbers) (list 0 1)]\n    [else (+ (first numbers) (sum_product\
    \ (rest numbers)))]))\n", "  (let ((sum (first numbers))\n        (product (second\
    \ numbers)))\n    (if (null? numbers)\n        (list sum product)\n        (let\
    \ ((sum (+ sum numbers))\n              (product (* product numbers)))\n     \
    \     (list sum product))))))\n", "  (if (null? numbers)\n      (list 0 1)\n \
    \     (let ((sum (car numbers))\n            (product (car numbers)))\n      \
    \  (cons (+ sum product)\n              (sum_product (cdr numbers))))))\n", " \
    \ (let ((sum (first numbers))\n        (product (second numbers)))\n    (if (null?\
    \ numbers)\n        (list sum product)\n        (let ((sum (+ sum numbers))\n\
    \              (product (* product numbers)))\n          (list sum product))))))\n",
  "  (let ((sum (car numbers))\n        (product (cdr numbers)))\n    (if (null? numbers)\n\
    \        (list sum product)\n        (let ((sum (+ sum numbers))\n           \
    \   (product (* product numbers)))\n          (list sum product))))))\n", "  (let\
    \ ((sum (first numbers))\n        (product (second numbers)))\n    (if (null?\
    \ numbers)\n        (list sum product)\n        (let ((sum (+ sum numbers))\n\
    \              (product (* product numbers)))\n          (list sum product))))))\n",
  "  (let ((sum (first numbers))\n        (product (second numbers)))\n    (if (null?\
    \ numbers)\n        (list sum product)\n        (let ((sum (+ sum numbers))\n\
    \              (product (* product numbers)))\n          (list sum product))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
