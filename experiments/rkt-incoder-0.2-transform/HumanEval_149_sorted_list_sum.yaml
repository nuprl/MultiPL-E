name: HumanEval_149_sorted_list_sum
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts a list of strings as a parameter,\n\
  ;; deletes the strings that have odd lengths from it,\n;; and returns the resulted\
  \ list with a sorted order,\n;; The list is always a list of strings and never an\
  \ array of numbers,\n;; and it may contain duplicates.\n;; The order of the list\
  \ should be ascending by length of each word, and you\n;; should return the list\
  \ sorted by that rule.\n;; If two words have the same length, sort the list alphabetically.\n\
  ;; The function should return a list of strings in sorted order.\n;; You may assume\
  \ that all words will have the same length.\n;; For example:\n;; >>> (list_sort\
  \ (list \"aa\" \"a\" \"aaa\"))\n;; (list \"aa\")\n;; >>> (list_sort (list \"ab\"\
  \ \"a\" \"aaa\" \"cd\"))\n;; (list \"ab\" \"cd\")\n(define (sorted_list_sum lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sorted_list_sum))\n\
  \    (check-equal? (candidate (list \"aa\" \"a\" \"aaa\")) (list \"aa\"))\n    (check-equal?\
  \ (candidate (list \"school\" \"AI\" \"asdf\" \"b\")) (list \"AI\" \"asdf\" \"school\"\
  ))\n    (check-equal? (candidate (list \"d\" \"b\" \"c\" \"a\")) (list ))\n    (check-equal?\
  \ (candidate (list \"d\" \"dcba\" \"abcd\" \"a\")) (list \"abcd\" \"dcba\"))\n \
  \   (check-equal? (candidate (list \"AI\" \"ai\" \"au\")) (list \"AI\" \"ai\" \"\
  au\"))\n    (check-equal? (candidate (list \"a\" \"b\" \"b\" \"c\" \"c\" \"a\"))\
  \ (list ))\n    (check-equal? (candidate (list \"aaaa\" \"bbbb\" \"dd\" \"cc\"))\
  \ (list \"cc\" \"dd\" \"aaaa\" \"bbbb\"))\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      '()\n      (append (sorted_list_sum (cdr lst))\
    \ (list (car lst)))))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) empty) (sorted_list_sum (rest lst))]\n    [else (cons (first lst) (sorted_list_sum\
    \ (rest lst)))]))\n", "  (sort (map string->number (remove-if (lambda (x) (odd?\
    \ (length x))) lst)) <))\n", "  (cond\n    [(empty? lst) empty]\n    [(null? (cdr\
    \ lst)) (cons (car lst) empty)]\n    [else (cons (car lst) (sorted_list_sum (cdr\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(empty? (rest lst)) (cons\
    \ (first lst) (sorted_list_sum (rest lst)))]\n    [else (cons (first lst) (sorted_list_sum\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) empty) (sorted_list_sum (rest lst))]\n    [else (cons (first lst) (sorted_list_sum\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) (first lst)) (sorted_list_sum (rest lst))]\n    [else (cons (first lst)\
    \ (sorted_list_sum (rest lst)))]))\n", "  (cond\n    [(empty? lst) empty]\n  \
    \  [(equal? (first lst) empty) (sorted_list_sum (rest lst))]\n    [else (cons\
    \ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) empty) (sorted_list_sum (rest lst))]\n    [else\
    \ (cons (first lst) (sorted_list_sum (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) (first rest)) (sorted_list_sum (rest lst))]\n\
    \    [else (cons (first lst) (sorted_list_sum (rest lst)))]))\n", "  (cond\n \
    \   [(empty? lst) empty]\n    [(even? (length lst)) (cons (first lst) (sorted_list_sum\
    \ (rest lst)))]\n    [else (cons (first lst) (sorted_list_sum (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (length lst) 1) (first lst)]\n\
    \    [else (cons (first lst) (sorted_list_sum (rest lst)))]))\n", "  (cond\n \
    \   [(empty? lst) empty]\n    [(even? (length lst)) (cons (first lst) (sorted_list_sum\
    \ (rest lst)))]\n    [else (cons (first lst) (sorted_list_sum (rest lst)))]))\n",
  "  (sort lst <))\n", "  (if (null? lst)\n      '()\n      (append (sorted_list_sum\
    \ (cdr lst))\n              (list (car lst)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (append (sorted_list_sum (cdr lst))\n              (list (car lst)))))\n",
  "  (if (null? lst)\n      '()\n      (append (sorted_list_sum (cdr lst))\n     \
    \         (list (car lst)))))\n", "  (if (null? lst)\n      '()\n      (append\
    \ (sorted_list_sum (cdr lst)) (list (car lst)))))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (length lst) 1) (first lst)]\n    [else (cons (first lst)\
    \ (sorted_list_sum (rest lst)))]))\n", "  (cond\n    [(empty? lst) empty]\n  \
    \  [(null? (cdr lst)) (cons (car lst) empty)]\n    [else (cons (car lst) (sorted_list_sum\
    \ (cdr lst)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
