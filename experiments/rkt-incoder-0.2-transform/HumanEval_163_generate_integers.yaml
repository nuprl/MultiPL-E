name: HumanEval_163_generate_integers
language: rkt
prompt: "#lang racket\n\n;; Given two positive integers a and b, return the even digits\
  \ between a\n;; and b, in ascending order.\n;; For example:\n;; >>> (generate_integers\
  \ 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;;\
  \ >>> (generate_integers 10 14)\n;; (list )\n(define (generate_integers a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate generate_integers))\n\
  \    (check-equal? (candidate 2 10) (list 2 4 6 8))\n    (check-equal? (candidate\
  \ 10 2) (list 2 4 6 8))\n    (check-equal? (candidate 132 2) (list 2 4 6 8))\n \
  \   (check-equal? (candidate 17 89) (list ))\n))\n\n(test-humaneval)"
completions: ["  (if (= a b)\n      '()\n      (cons (modulo (+ a b) 10)\n       \
    \     (generate_integers (+ a 2) b))))\n", "  (cond\n    [(< a b) (list a)]\n\
    \    [(< b a) (list b)]\n    [else (cons (quotient a b) (generate_integers (quotient\
    \ a b) b))]))\n", "  (cond\n    [(< a b) (list a)]\n    [(< b a) (list b)]\n \
    \   [else (cons (quotient a b) (generate_integers (+ a 1) b))]\n  ))\n", "  (cond\n\
    \    [(< a b) (list a)]\n    [(< b a) (list b)]\n    [else (cons (quotient a b)\
    \ (generate_integers (+ a 2) b))]))\n", "  (cond\n    [(< a b) (list a)]\n   \
    \ [(< b a) (list b)]\n    [else (cons (quotient a b) (generate_integers (+ a 1)\
    \ b))]))\n", "  (cond [(< a b) '()]\n        [(= a b) '()]\n        [(= a 0) '()]\n\
    \        [(= b 0) '()]\n        [(even? (remainder a b)) (cons a (generate_integers\
    \ (quotient a b) b))]))\n", "  (cond [(< a b) '()]\n        [(< b a) '()]\n  \
    \      [(= a b) '()]\n        [(= b a) '()]\n        [else (cons (mod a 10) \n\
    \                    (generate_integers (quotient a 10) \n                   \
    \                  (quotient b 10)))]))\n", "  (cond [(< a b) (list a)]\n    \
    \    [(< b a) (list b)]\n        [(< a b) (list a)]\n        [else (cons (mod\
    \ a 10) \n                    (generate_integers (quotient a 10) \n          \
    \                           (quotient b 10)))]))\n", "  (if (< a b)\n      (cons\
    \ (mod a 10) generate_integers (+ a 10) b)\n      (cons (mod b 10) generate_integers\
    \ a (+ b 10))))\n", "  (cond\n    [(< a b) (list a)]\n    [(< b a) (list b)]\n\
    \    [else (cons (quotient a b) (generate_integers (quotient a b) b))]))\n", " \
    \ (cond\n    [(< a b) (list a)]\n    [(< b a) (list b)]\n    [else (cons (quotient\
    \ a b) (generate_integers (quotient a b) b))]))\n", "  (cond\n    [(< a b) (list\
    \ a)]\n    [(< b a) (list b)]\n    [else (cons (mod a 10) \n                (generate_integers\
    \ (quotient a 10) \n                                 (quotient b 10)))]))\n",
  "  (cond\n    [(< a b) (list a)]\n    [(< b a) (list b)]\n    [else (cons (quotient\
    \ a b) (generate_integers (quotient a b) b))]))\n", "  (cond\n    [(< a b) (list\
    \ a)]\n    [(< b a) (list b)]\n    [else (cons (mod a 10) \n                (generate_integers\
    \ (quotient a 10) \n                                 (quotient b 10)))]))\n",
  "  (cond [(< a b) (list a)]\n        [(< b a) (list b)]\n        [else (cons (quotient\
    \ a b) (generate_integers (+ a 1) b))]))\n", "  (cond\n    [(< a b) (list a)]\n\
    \    [(< b a) (list b)]\n    [else (cons (mod a 10) \n                (generate_integers\
    \ (quotient a 10) \n                                 (quotient b 10)))]))\n",
  "  (cond\n    [(< a b) (list a)]\n    [(< b a) (list b)]\n    [else (cons (quotient\
    \ a b) (generate_integers (quotient a b) b))]))\n", "  (cond\n    [(< a b) (list\
    \ a)]\n    [(< b a) (list b)]\n    [else (cons (quotient a b) (generate_integers\
    \ (quotient a b) b))]))\n", "  (if (< a b)\n      (cons (mod a 10) generate_integers\
    \ (+ a 10) b)\n      (cons (mod b 10) generate_integers a (+ b 10))))\n", "  (cond\n\
    \    [(< a b) (list a)]\n    [(< b a) (list b)]\n    [else (cons (mod a 10) \n\
    \                (generate_integers (quotient a 10) \n                       \
    \          (quotient b 10)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
