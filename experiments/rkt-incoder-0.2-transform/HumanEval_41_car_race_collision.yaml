name: HumanEval_41_car_race_collision
language: rkt
prompt: "#lang racket\n\n;; Imagine a road that's a perfectly straight infinitely\
  \ long line.\n;; n cars are driving left to right;  simultaneously, a different\
  \ set of n cars\n;; are driving right to left.   The two sets of cars start out\
  \ being very far from\n;; each other.  All cars move in the same speed.  Two cars\
  \ are said to collide\n;; when a car that's moving left to right hits a car that's\
  \ moving right to left.\n;; However, the cars are infinitely sturdy and strong;\
  \ as a result, they continue moving\n;; in their trajectory as if they did not collide.\n\
  ;; This function outputs the number of such collisions.\n(define (car_race_collision\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate car_race_collision))\n\
  \    (check-equal? (candidate 2) 4)\n    (check-equal? (candidate 3) 9)\n    (check-equal?\
  \ (candidate 4) 16)\n    (check-equal? (candidate 8) 64)\n    (check-equal? (candidate\
  \ 10) 100)\n))\n\n(test-humaneval)"
completions: ["  (define (collision x y)\n    (cond ((and (< x n) (< y n))\n     \
    \      (cond ((< x 0) (cond ((< y 0) (cond ((< x n) (cond ((< y n) (cond ((< x\
    \ 0) (cond ((< y 0) (cond ((< x n) (cond ((< y n) (cond ((< x 0) (cond ((< y 0)\
    \ (cond ((< x n) (cond ((< y n) (cond ((< x 0) (cond ((< y 0) (cond ((< x n) (cond\
    \ ((< y n) (cond ((< x 0) (cond ((< y 0) (cond ((< x n) (cond ((< y n) (cond ((<\
    \ x 0) (cond ((< y 0) (cond ((< x n) (cond ((< y n) (cond ((< x 0) (cond ((< y\
    \ 0) (cond ((< x n) (cond ((< y n) (cond ((< x 0) (cond ((< y 0) (cond ((< x n)\
    \ (cond ((< y n) (cond ((< x 0) (cond ((< y 0) (cond ((< x n) (cond ((< y n) (cond\
    \ ((< x 0) (cond ((< y 0) (cond ((< x n) (cond ((< y n) (cond ((< x 0) (cond ((<\
    \ y 0) (cond ((< x n) (cond ((< y n) (cond ((< x 0) (cond ((< y 0) (cond ((< x\
    \ n) (cond ((< y n) (cond ((< x 0) (cond ((< y 0) (cond ((< x n) (cond ((< y n)\
    \ (cond ((< x 0) (cond ((< y 0) (cond ((< x n) (cond ((< y n) (cond ((< x 0) (cond\
    \ ((< y 0) (cond ((< x n) (cond ((< y n) (cond ((< x 0) (cond ((< y 0) (cond ((<\
    \ x n) (cond ((< y n) (cond ((< x 0) (cond ((< y 0) (cond ((< x n) (cond ((< y\
    \ n) (cond ((< x 0) (cond ((< y 0) (", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (define (collide a b)\n      (< (car-x a) (car-x b))\n      (< (car-y a)\
    \ (car-y b))\n      (< (car-x b) (car-x a))\n      (< (car-y b) (car-y a)))\n\
    \    (let ((collided-cars 0))\n      (do ((i 0 (+ i 1))\n           (a 0 (+ a\
    \ 1))\n           (b 0 (+ b 1)))\n          ((< i n) (set! collided-cars (+ collided-cars\
    \ 1)))\n          ((< a n) (set! collided-cars (+ collided-cars (- a i))))\n \
    \         ((< b n) (set! collided-cars (+ collided-cars (- b i))))\n         \
    \ ((< a b) (set! collided-cars (+ collided-cars (- a b))))\n          ((< b a)\
    \ (set! collided-cars (+ collided-cars (- b a))))\n          ((< a i) (set! collided-cars\
    \ (+ collided-cars (- a i))))\n          ((< b i) (set! collided-cars (+ collided-cars\
    \ (- b i))))\n          ((< i b) (set! collided-cars (+ collided-cars (- i b))))\n\
    \          ((< b a) (set! collided-cars (+ collided-cars (- b a))))\n        \
    \  ((< a b) (set! collided-cars (+ collided-cars (- a b))))\n          ((< b i)\
    \ (set! collided-cars (+ collided-cars (- b i))))\n          ((< i a) (set! collided-cars\
    \ (+ collided-cars (- i a))))\n          ((< a b) (set! collided-cars (+ collided-cars\
    \ (- a b))))\n          ((< b i) (set! collided-cars (+ collided-cars (- b i))))\n\
    \          ((< i a) (set! collided-cars (+ collided-cars (- i a))))\n        \
    \  ((< a b) (set! collided-cars (+ collided-cars (- a b))))\n          ((< b i)\
    \ (set! collided-cars (+ collided-cars (- b ", "  (let ([cars (make-array (list\
    \ n (make-array n '(list 'empty))))])\n    (define (collision i j)\n      (cond\n\
    \        ((= i j) 0)\n        ((< (car cars) (car cars (+ i 1))) (car cars (+\
    \ i 1)))\n        ((< (car cars) (car cars (+ j 1))) (car cars (+ j 1)))\n   \
    \     (else (car cars (+ i 1)))))\n    (define (collide i j)\n      (cond\n  \
    \      ((= i j) 0)\n        ((< (car cars) (car cars (+ i 1))) (car cars (+ i\
    \ 1)))\n        ((< (car cars) (car cars (+ j 1))) (car cars (+ j 1)))\n     \
    \   (else (car cars (+ i 1)))))\n    (define (move i j)\n      (cond\n       \
    \ ((= i j) 0)\n        ((< (car cars) (car cars (+ i 1))) (car cars (+ i 1)))\n\
    \        ((< (car cars) (car cars (+ j 1))) (car cars (+ j 1)))\n        (else\
    \ (car cars (+ i 1)))))\n    (define (collides i j)\n      (cond\n        ((=\
    \ i j) 0)\n        ((< (car cars) (car cars (+ i 1))) (car cars (+ i 1)))\n  \
    \      ((< (car cars) (car cars (+ j 1))) (car cars (+ j 1)))\n        (else (+\
    \ 1 (collide i j))))))\n    (define (collides-in i j)\n      (cond\n        ((=\
    \ i j) 0)\n        ((< (car cars) (car cars (+ i 1))) (car cars (+ i 1)))\n  \
    \      ((< (car cars) (car cars (+ j 1))) (car cars (+ j 1)))\n        (else (+\
    \ 1 (collides i j)))))\n    (define (collides-in i j)\n      (cond\n        ((=\
    \ i j) 0)\n        ((< (car cars) (car cars (+ i 1))) (car cars (+ i 1)))\n  \
    \      ((< (car cars) (car cars (+ j 1))) (car cars (+ j 1)))\n        (else (+\
    \ 1 (collides-in i j)))))\n    (define (collides-in i j)\n      (cond\n      \
    \  ((= i j) 0)\n        ((< (", "  (let ((cars (make-array n #:element-type 'car)))\n\
    \    (define (collision i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n  \
    \    (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collide? i j)\n    \
    \  (collision i j))\n    (define (collide? i j)\n      (collision i j))\n    (define\
    \ (collide? i j)\n      (collision i j))\n    (define (collide? i j)\n      (collision\
    \ i j))\n    (define (collide? i j)\n      (collision i j))\n    (define (collide?\
    \ i j)\n      (collision i j))\n    (define (collide? i j)\n      (collision i\
    \ j))\n    (define (collide? i j)\n      (collision i j))\n    (define (collide?\
    \ i j)\n      (collision i j))\n    (define (collide? i j)\n      (collision i\
    \ j))\n    (define (collide? i j)\n      (collision i j))\n    (define (collide?\
    \ i j)\n      (collision i j))\n    (define (collide? i j)\n      (collision i\
    \ j))\n    (define (collide? i j)\n      (collision i j))\n    (define (collide?\
    \ i j)\n      (collision i j))\n    (define (collide? i j)\n      (collision i\
    \ j))\n    (define (collide? i j)\n      (collision i j))\n    (define (collide?\
    \ i j)\n      (collision i j))\n    (define (collide? i j)\n      (collision i\
    \ j))\n    (define (collide? i j)\n      (collision i j))\n    (define (collide?\
    \ i j)\n      (collision i j))\n    (define (collide? i j)\n      (collision i\
    \ j))\n    (define (collide? i j)\n      (collision i j))\n    (define (collide?\
    \ i j)\n      (collision i j))\n    (define (collide? i j)\n      (collision i\
    \ j))\n    (define (collide? i j)\n      (collision i j))\n    (define (collide?\
    \ i j)\n      (collision i j))\n    (define (collide? i j)\n      (collision i\
    \ j))\n    (define (colli", "  (define (collision car1 car2)\n    (cond\n    \
    \  [(< car1 car2) 0]\n      [(> car1 car2) 1]\n      [else (+ collision (car1\
    \ car2) (car1 car2))]))\n  (define (collisions cars)\n    (cond\n      [(empty?\
    \ cars) 0]\n      [(< cars 1) 0]\n      [(< cars n) 0]\n      [(< (cars n) 1)\
    \ (+ collisions (cdr cars))]\n      [(< (cars n) n) (+ collisions (car cars) (cdr\
    \ cars))]\n      [else (+ collisions (car cars) (cdr cars))])))\n  (define (collides\
    \ car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n  \
    \    [else (collision car1 car2)]))\n  (define (collides cars)\n    (cond\n  \
    \    [(empty? cars) 0]\n      [(< cars 1) 0]\n      [(< cars n) 0]\n      [(<\
    \ (cars n) 1) (collides (cdr cars))]\n      [(< (cars n) n) (collides (car cars)\
    \ (cdr cars))]\n      [else (collides (car cars) (cdr cars))])))\n  (define (collides\
    \ car1 car2 car3)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n\
    \      [(< car1 car3) 0]\n      [(> car1 car3) 1]\n      [(< car2 car3) 0]\n \
    \     [(> car2 car3) 1]\n      [else (collision car1 car2 car3)]))\n  (define\
    \ (collides cars)\n    (cond\n      [(empty? cars) 0]\n      [(< cars 1) 0]\n\
    \      [(< cars n) 0]\n      [(< (cars n) 1) (collides (cdr cars))]\n      [(<\
    \ (cars n) n) (collides (car cars) (cdr cars))]\n      [else (collides (car cars)\
    \ (cdr cars))])))\n  (define (collides car1 car2 car3 car4)\n    (cond\n     \
    \ [(< car1 car2) 0]\n      [(> car1 car2) 1]\n      [(< car1 car3) 0]\n      [(>\
    \ car1 car3) 1]\n", "  (define (collision car1 car2)\n    (cond\n      [(< car1\
    \ car2) 0]\n      [(> car1 car2) 1]\n      [(= car1 car2) 0]\n      [(= (car car1)\
    \ (car car2)) 0]\n      [(= (car car1) (car car2)) (+ collision (car1 car2) (car\
    \ car2))]\n      [(= (car car1) (car car2)) (+ collision (car1 car2) (car car2))]\n\
    \      [(= (car car1) (car car2)) (+ collision (car1 car2) (car car2))]\n    \
    \  [(= (car car1) (car car2)) (+ collision (car1 car2) (car car2))]\n      [(=\
    \ (car car1) (car car2)) (+ collision (car1 car2) (car car2))]\n      [(= (car\
    \ car1) (car car2)) (+ collision (car1 car2) (car car2))]\n      [(= (car car1)\
    \ (car car2)) (+ collision (car1 car2) (car car2))]\n      [(= (car car1) (car\
    \ car2)) (+ collision (car1 car2) (car car2))]\n      [(= (car car1) (car car2))\
    \ (+ collision (car1 car2) (car car2))]\n      [(= (car car1) (car car2)) (+ collision\
    \ (car1 car2) (car car2))]\n      [(= (car car1) (car car2)) (+ collision (car1\
    \ car2) (car car2))]\n      [(= (car car1) (car car2)) (+ collision (car1 car2)\
    \ (car car2))]\n      [(= (car car1) (car car2)) (+ collision (car1 car2) (car\
    \ car2))]\n      [(= (car car1) (car car2)) (+ collision (car1 car2) (car car2))]\n\
    \      [(= (car car1) (car car2)) (+ collision (car1 car2) (car car2))]\n    \
    \  [(= (car car1) (car car2)) (+ collision (car1 car2) (car car2))]\n      [(=\
    \ (car car1) (car car2)) (+ collision (car1 car2) (car car2))]\n      [(= (car\
    \ car1) (car car2)) (+ collision (car1 car2) (car car2))]\n      [(= (car car1)\
    \ (c", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n    \
    \  (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars\
    \ (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i\
    \ cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (asso", "  (let ((cars (make-array n '(list 'car))))\n    (define (collides\
    \ car other-car)\n      (< (car-speed car) (car-speed other-car))\n      (< (car-speed\
    \ other-car) (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n\
    \      (< (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-",
  "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides a)\n   \
    \ (cond ((null? a) 0)\n          ((collide (car a) (car b))\n           (+ 1 (car-race_collision\
    \ (- n 1))))\n          (else (+ 1 (car-race_collision (- n 1))))))\n  (define\
    \ (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n\
    \           (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1))))))\n  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide\
    \ (car a) (car b))\n           (+ 1 (car-race_collision (- n 1))))\n         \
    \ (else (+ 1 (car-race_collision (- n 1))))))\n  (define (collides a)\n    (cond\
    \ ((null? a) 0)\n          ((collide (car a) (car b))\n           (+ 1 (car-race_collision\
    \ (- n 1))))\n          (else (+ 1 (car-race_collision (- n 1))))))\n  (define\
    \ (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n\
    \           (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1))))))\n  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide\
    \ (car a) (car b))\n           (+ 1 (car-race_collision (- n 1))))\n         \
    \ (else (+ 1 (car-race_collision (- n 1))))))\n  (define (collides a)\n    (cond\
    \ ((null? a) 0)\n          ((collide (car a) (car b))\n           (+ 1 (car-race_collision\
    \ (- n 1))))\n          (else (+ 1 (car-race_collision (- n 1))))))\n  (define\
    \ (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n\
    \           (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1))))))\n  (define (collides ", "  (define (collide x y)\n    (cond\n \
    \     [(< x y) 0]\n      [(> x y) 0]\n      [else (+ 1 (car-race x y))]))\n  (define\
    \ (collides xs ys)\n    (cond\n      [(empty? xs) 0]\n      [(empty? ys) 0]\n\
    \      [(< (first xs) (first ys)) (+ (first xs) (collide (first xs) (first ys)))]\n\
    \      [(> (first xs) (first ys)) (+ (first ys) (collide (first xs) (first ys)))]\n\
    \      [else (+ (collides (rest xs) (rest ys)) (collide (first xs) (first ys)))]))\n\
    \  (define (collides-list xs ys)\n    (cond\n      [(empty? xs) 0]\n      [(empty?\
    \ ys) 0]\n      [(< (first xs) (first ys)) (+ (first xs) (collides (rest xs) (rest\
    \ ys)))]\n      [(> (first xs) (first ys)) (+ (first ys) (collides (rest xs) (rest\
    \ ys)))]\n      [else (+ (collides-list (rest xs) (rest ys)) (collides (first\
    \ xs) (first ys)))]))\n  (define (collides-list-helper xs ys count)\n    (cond\n\
    \      [(empty? xs) (+ count 1)]\n      [(empty? ys) (+ count 1)]\n      [(< (first\
    \ xs) (first ys)) (+ (first xs) (collides-list-helper (rest xs) (rest ys) (+ count\
    \ 1)))]\n      [(> (first xs) (first ys)) (+ (first ys) (collides-list-helper\
    \ (rest xs) (rest ys) (+ count 1)))]\n      [else (+ (collides-list-helper (rest\
    \ xs) (rest ys) (+ count 1)) (collides (first xs) (first ys)))]))\n  (define (collides-list-helper-helper\
    \ xs ys count)\n    (cond\n      [(empty? xs) (+ count 1)]\n      [(empty? ys)\
    \ (+ count 1)]\n      [(< (first xs) (first ys)) (+ (first xs) (collides-list-helper-helper\
    \ (rest xs) (rest ys) (+ count 1)))]\n      [(> (first xs) (first ys)) (+ (first\
    \ ys) (collides-list-helper-helper (rest ", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (asso", "  (let ((cars (make-array n\
    \ '(list 'car))))\n    (dotimes (i n)\n      (let ((car cars i))\n        (set!\
    \ car (make-instance 'car))\n        (set! car (make-instance 'car))\n       \
    \ (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n \
    \       (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance '",
  "  (define (collide a b)\n    (< (abs (- (car a) (car b))) (car a)))\n  (define\
    \ (collides a)\n    (filter (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-2\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-3\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-4\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-5\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-6\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-7\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-8\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-9\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-10\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-11\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-12\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-13\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-14\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-15\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-16\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-17\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define ", "  (let ((cars\
    \ (make-array n '(list 'car))))\n    (define (collide car other-car)\n      (cond\
    \ ((and (< car other-car) (< other-car n))\n             (set! cars (cdr cars))\n\
    \             (set! cars (cons (car cars) (cdr cars))))\n            ((and (<\
    \ car n) (< other-car n))\n             (set! cars (cdr cars))\n             (set!\
    \ cars (cons (car cars) (cdr cars))))\n            (else\n             (set! cars\
    \ (cons (car cars) (cdr cars))))))\n    (for ((i 0 (+ i 1))) (for ((j 0 (+ j 1)))\
    \ (for ((k 0 (+ k 1))) (for ((l 0 (+ l 1))) (for ((m 0 (+ m 1))) (for ((n 0 (+\
    \ n 1))) (for ((o 0 (+ o 1))) (for ((p 0 (+ p 1))) (for ((q 0 (+ q 1))) (for ((r\
    \ 0 (+ r 1))) (for ((s 0 (+ s 1))) (for ((t 0 (+ t 1))) (for ((u 0 (+ u 1))) (for\
    \ ((v 0 (+ v 1))) (for ((w 0 (+ w 1))) (for ((x 0 (+ x 1))) (for ((y 0 (+ y 1)))\
    \ (for ((z 0 (+ z 1))) (for ((a 0 (+ a 1))) (for ((b 0 (+ b 1))) (for ((c 0 (+\
    \ c 1))) (for ((d 0 (+ d 1))) (for ((e 0 (+ e 1))) (for ((f 0 (+ f 1))) (for ((g\
    \ 0 (+ g 1))) (for ((h 0 (+ h 1))) (for ((i 0 (+ i 1))) (for ((j 0 (+ j 1))) (for\
    \ ((k 0 (+ k 1))) (for ((l 0 (+ l 1))) (for ((m 0 (+ m 1))) (for ((n 0 (+ n 1)))\
    \ (for ((o 0 (+ o 1))) (for ((p 0 (+ p 1))) (for ((q 0 (+ q 1))) (for ((r 0 (+\
    \ r 1))) (for ((s 0 (+ s 1))) (for ((t 0 (+ t 1))) (for ((u 0 (+ u 1))) (for ((v\
    \ 0 (+ v 1))) (for ((w 0 (+ w 1))) (for ((x 0 (+ x 1))) (for ((y 0 (+ y 1))) (for\
    \ ((z 0 (+ z 1))) (for ((a 0 (+ a 1))) (for ((b 0 (+ b 1))) (for ((c 0 (+ c 1))",
  "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars\
    \ (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i\
    \ cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (asso",
  "  (let ((cars (make-array (+ n 1) '(list 'empty)))\n        (collisions (make-array\
    \ (+ n 1) '(list 0))))\n    (dotimes (i n)\n      (set! cars (cdr cars))\n   \
    \   (set! collisions (cdr collisions))\n      (set! cars (cons 'empty (car cars)))\n\
    \      (set! collisions (cons 0 (car collisions))))\n    (set! collisions (cons\
    \ 0 (car collisions))))\n  (car collisions))\n", "  (let ((cars (make-array n\
    \ '(list 'car)))\n        (collisions '()))\n    (dotimes (i n)\n      (let ((car\
    \ cars i)\n            (car-right (car cars i+1))\n            (car-left (car\
    \ cars i-1)))\n        (if (and (not (null? car-left))\n                 (not\
    \ (null? car-right)))\n            (set! collisions (cons i collisions))\n   \
    \         (set! cars (set! cars (cdr cars)))))))\n", "  (define (collide a b)\n\
    \    (< (abs (- a b)) n))\n  (define (collides a)\n    (filter (lambda (b) (collide\
    \ a b)) (cars a)))\n  (define (collides-in a)\n    (filter (lambda (b) (collide\
    \ a b)) (cars-in a)))\n  (define (collides-in a-in b)\n    (filter (lambda (b)\
    \ (collide a b)) (cars-in a-in b)))\n  (define (collides-in a-in b c)\n    (filter\
    \ (lambda (b) (collide a b)) (cars-in a-in b c)))\n  (define (collides-in a-in\
    \ b c d)\n    (filter (lambda (b) (collide a b)) (cars-in a-in b c d)))\n  (define\
    \ (collides-in a-in b c d e)\n    (filter (lambda (b) (collide a b)) (cars-in\
    \ a-in b c d e)))\n  (define (collides-in a-in b c d e f)\n    (filter (lambda\
    \ (b) (collide a b)) (cars-in a-in b c d e f)))\n  (define (collides-in a-in b\
    \ c d e f g)\n    (filter (lambda (b) (collide a b)) (cars-in a-in b c d e f g)))\n\
    \  (define (collides-in a-in b c d e f g h)\n    (filter (lambda (b) (collide\
    \ a b)) (cars-in a-in b c d e f g h)))\n  (define (collides-in a-in b c d e f\
    \ g h i)\n    (filter (lambda (b) (collide a b)) (cars-in a-in b c d e f g h i)))\n\
    \  (define (collides-in a-in b c d e f g h i j)\n    (filter (lambda (b) (collide\
    \ a b)) (cars-in a-in b c d e f g h i j)))\n  (define (collides-in a-in b c d\
    \ e f g h i j k)\n    (filter (lambda (b) (collide a b)) (cars-in a-in b c d e\
    \ f g h i j k)))\n  (define (collides-in a-in b c d e f g h i j k l)\n    (filter\
    \ (lambda (b) (collide a b)) (cars-in a-in b c d e ", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (define (collision i j)\n      (cond ((= i j) 0)\n  \
    \          ((< i j) (+ (car-speed (car cars i)) (car-speed (car cars j))))\n \
    \           (else (+ (car-speed (car cars j)) (car-speed (car cars i))))))\n \
    \   (define (collide i j)\n      (cond ((= i j) 0)\n            ((< i j) (collision\
    \ i j)\n                    (collision j (+ i 1))\n                    (collision\
    \ (+ i 1) j))\n            (else (collision i (+ j 1))\n                    (collision\
    \ (+ j 1) i)\n                    (collision (+ j 1) (+ i 1)))))\n    (define\
    \ (collides i j)\n      (cond ((= i j) 0)\n            ((< i j) (+ collide i j)\n\
    \                    (+ collide (+ i 1) j)\n                    (+ collide (+\
    \ i 1) (+ j 1))\n                    (+ collide (+ j 1) i)\n                 \
    \   (+ collide (+ j 1) (+ i 1))))\n            (else (+ collide i (+ j 1))\n \
    \                   (+ collide (+ j 1) i)\n                    (+ collide (+ j\
    \ 1) (+ i 1))\n                    (+ collide (+ j 1) (+ i 1))\n             \
    \       (+ collide i (+ j 1)))))\n    (define (collides i j)\n      (cond ((=\
    \ i j) 0)\n            ((< i j) (+ collide i j)\n                    (+ collide\
    \ (+ i 1) j)\n                    (+ collide (+ i 1) (+ j 1))\n              \
    \      (+ collide (+ j 1) i)\n                    (+ collide (+ j 1) (+ i 1))))\n\
    \            (else (+ collide i (+ j 1))\n                    (+ collide (+ j\
    \ 1) i)\n                    (+ collide (+ j 1) (+ i 1))\n                   \
    \ (+ collide (+ j 1) (+ i 1))\n                    (+ collide i (+ j 1)))))\n\
    \    (define (collides i j)\n      (cond ((= i j) 0)\n            ((< i j) (+\
    \ collide i j)\n                    (+ collide (+ i 1) j)\n                  \
    \  (+ collide (+ i 1) (+ j 1))\n                    (+ collide (+ j 1) i)\n  \
    \                  (+ collide (+ j 1) (+ i 1))))\n            (else (", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (define (collide i j)\n      (cond\n\
    \        ((< i j) (+ 1 (car-race (cars i) (cars j))))\n        ((> i j) (+ 1 (car-race\
    \ (cars j) (cars i))))\n        (else 0)))\n    (do ((i 0 (+ i 1))\n         (j\
    \ 0 (+ j 1)))\n        ((< i n) (set! i (+ i 1))\n                 (set! j (+\
    \ j 1)))\n      (when (< i j)\n        (set! i (+ i 1))\n        (set! j (+ j\
    \ 1)))\n      (when (< j i)\n        (set! j (+ j 1))\n        (set! i (+ i 1)))\n\
    \      (when (< i j)\n        (set! i (+ i 1))\n        (set! j (+ j 1)))\n  \
    \    (when (< j i)\n        (set! j (+ j 1))\n        (set! i (+ i 1)))\n    \
    \  (when (< i j)\n        (set! i (+ i 1))\n        (set! j (+ j 1)))\n      (when\
    \ (< j i)\n        (set! j (+ j 1))\n        (set! i (+ i 1)))\n      (when (<\
    \ i j)\n        (set! i (+ i 1))\n        (set! j (+ j 1)))\n      (when (< j\
    \ i)\n        (set! j (+ j 1))\n        (set! i (+ i 1)))\n      (when (< i j)\n\
    \        (set! i (+ i 1))\n        (set! j (+ j 1)))\n      (when (< j i)\n  \
    \      (set! j (+ j 1))\n        (set! i (+ i 1)))\n      (when (< i j)\n    \
    \    (set! i (+ i 1))\n        (set! j (+ j 1)))\n      (when (< j i)\n      \
    \  (set! j (+ j 1))\n        (set! i (+ i 1)))\n      (when (< i j)\n        (set!\
    \ i (+ i 1))\n        (set! j (+ j 1)))\n      (when (< j i)\n        (set! j\
    \ (+ j 1))\n        (set! i (+ i 1)))\n      (when (< i j)\n        (set! i (+\
    \ i 1))\n        (set! j (+ j 1)))\n      (when (< j i)\n        (set! j (+ j\
    \ 1))\n        (set! i (+ i 1)))\n      (when (< i j)\n        (set! i (+ i ",
  "  (let ([cars (make-array n #:initial-contents '(#f #f #f #f #f #f #f #f #f #f\
    \ #f))])\n    (define (collide x y)\n      (cond [(< x y) 0]\n            [(<\
    \ y n) 0]\n            [(< x n) (+ y 1)]))\n    (define (move x y)\n      (cond\
    \ [(< x y) 0]\n            [(< y n) 0]\n            [(< x n) (+ y 1)]))\n    (define\
    \ (collides x)\n      (cond [(< x n) 0]\n            [else (+ 1 (car-race_collision\
    \ (- x 1)))]))\n    (define (collides-left x)\n      (cond [(< x n) 0]\n     \
    \       [else (+ 1 (car-race_collision (- x 1)))]))\n    (define (collides-right\
    \ x)\n      (cond [(< x n) 0]\n            [else (+ 1 (car-race_collision (- x\
    \ 1)))]))\n    (define (collides-up x)\n      (cond [(< x n) 0]\n            [else\
    \ (+ 1 (car-race_collision (- x 1)))]))\n    (define (collides-down x)\n     \
    \ (cond [(< x n) 0]\n            [else (+ 1 (car-race_collision (- x 1)))]))\n\
    \    (define (collides-left y)\n      (cond [(< y n) 0]\n            [else (+\
    \ 1 (car-race_collision (- y 1)))]))\n    (define (collides-right y)\n      (cond\
    \ [(< y n) 0]\n            [else (+ 1 (car-race_collision (- y 1)))]))\n    (define\
    \ (collides-up y)\n      (cond [(< y n) 0]\n            [else (+ 1 (car-race_collision\
    \ (- y 1)))]))\n    (define (collides-down y)\n      (cond [(< y n) 0]\n     \
    \       [else (+ 1 (car-race_collision (- y 1)))]))\n    (define (collides-left-right\
    \ x)\n      (cond [(< x n) 0]\n            [else (+ 1 (car-race_collision (- x\
    \ 1)))]))\n    (define (collides-left-up x)\n      (cond [(< x n) 0]\n       \
    \     [else (+ 1 (car-race_collision (- x 1)))]))\n    (define (collides-left-down\
    \ x)\n      (cond [(< x n", "  (let ([cars (make-array n #:initial-contents '(#f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc (- i 1) cars))\n      (set! cars (assoc (+ i 1) cars))\n      (set!\
    \ cars (assoc (- i 2) cars))\n      (set! cars (assoc (+ i 2) cars))\n      (set!\
    \ cars (assoc (- i 3) cars))\n      (set! cars (assoc (+ i 3) cars))\n      (set!\
    \ cars (assoc (- i 4) cars))\n      (set! cars (assoc (+ i 4) cars))\n      (set!\
    \ cars (assoc (- i 5) cars))\n      (set! cars (assoc (+ i 5) cars))\n      (set!\
    \ cars (assoc (- i 6) cars))\n      (set! cars (assoc (+ i 6) cars))\n      (set!\
    \ cars (assoc (- i 7) cars))\n      (set! cars (assoc (+ i 7) cars))\n      (set!\
    \ cars (assoc (- i 8) cars))\n      (set! cars (assoc (+ i 8) cars))\n      (set!\
    \ cars (assoc (- i 9) cars))\n      (set! cars (assoc (+ i 9) cars))\n      (set!\
    \ cars (assoc (- i 10) cars))\n      (set! cars (assoc (+ i 10) cars))\n     \
    \ (set! cars (assoc (- i 11) cars))\n      (set! cars (assoc (+ i 11) cars))\n\
    \      (set! cars (assoc (- i 12) cars))\n      (set! cars (assoc (+ i 12) cars))\n\
    \      (set! cars (assoc (- i 13) cars))\n      (set! cars (assoc (+ i 13) cars))\n\
    \      (set! cars (assoc (- i 14) cars))\n      (set! cars (assoc (+ i 14) cars))\n\
    \      (set! cars (assoc (- i 15) cars))\n      (set! cars (assoc (+ i 15) cars))\n\
    \      (set! cars (assoc (- i 16) cars))\n      (set! cars (assoc (+ i 16) cars))\n\
    \      (set! cars (assoc (- i 17) cars))\n      (set", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n  \
    \    (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (asso", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n  \
    \    (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (asso", "  (let ((cars (make-array\
    \ n '(lambda (i j) (make-array n '(lambda (i j) (+ i j)))))))\n    (define (collide\
    \ i j)\n      (let ((car cars i j))\n        (if (< i j)\n            (if (< i\
    \ 0)\n                (if (< j 0)\n                    (car i j)\n           \
    \         (if (< j 1)\n                        (if (< (car i j) (car j j))\n \
    \                           (if (< (car i j) (car i j))\n                    \
    \            (car i j)\n                                (if (< (car j j) (car\
    \ i j))\n                                    (car j j)\n                     \
    \               (if (< (car j j) (car j j))\n                                \
    \        (car j j)\n                                        (if (< (car j j) (car\
    \ j j))\n                                            (car j j)\n             \
    \                               (car j j))))))))\n                (if (< j 1)\n\
    \                    (if (< (car i j) (car j j))\n                        (if\
    \ (< (car i j) (car i j))\n                            (car i j)\n           \
    \                 (if (< (car j j) (car i j))\n                              \
    \  (car j j)\n                                (if (< (car j j) (car j j))\n  \
    \                                  (car j j)\n                               \
    \     (if (< (car j j) (car j j))\n                                        (car\
    \ j j)\n                                        (car j j))))))))\n           \
    \ (if (< i 1)\n                (if (< (car i j) (car j j))\n                 \
    \   (if (< (car i j) (car i j))\n                        (car i j)\n         \
    \               (if (< (car j j) (car i j))\n                            (car\
    \ j j)\n                            (if (< (car j j) (car j j))\n            \
    \                    (car j j)\n                                (if (< (car j\
    \ j) (car j j))\n                                    (car j j)\n             \
    \                       (car j j))))))))\n            (if (< j 1)\n          \
    \      (if (< (car i j) (car j j))\n                    (if (< (car i j) (car\
    \ i j))\n                        (car i j)\n                        (if (< (car\
    \ j j) (car i j))\n                            (car j j)\n                   \
    \         (if (< (car j j) (car j j))\n                                (car j\
    \ j)\n                                (if (< (car j j) (car j j))\n          \
    \                          (car j j)\n                                    (car ",
  "  (define (collide x y)\n    (cond ((and (< x 0) (< y 0))\n           (if (< x\
    \ n) (+ x 1) (+ x n))\n           (if (< y n) (+ y 1) (+ y n))))\n          ((and\
    \ (< x 0) (< y n))\n           (if (< x n) (+ x n) (+ x 1))\n           (if (<\
    \ y n) (+ y n) (+ y 1))))\n  (define (collides xs ys)\n    (cond ((null? xs) (cons\
    \ 0 0))\n          ((null? ys) (cons 0 0))\n          ((and (< xs 0) (< ys 0))\n\
    \           (if (< xs n) (+ xs 1) (+ xs n))\n           (if (< ys n) (+ ys 1)\
    \ (+ ys n)))\n          ((and (< xs 0) (< ys n))\n           (if (< xs n) (+ xs\
    \ n) (+ xs 1))\n           (if (< ys n) (+ ys n) (+ ys 1))))\n  (define (collides-pair\
    \ x y)\n    (cond ((and (< x 0) (< y 0))\n           (if (< x n) (+ x 1) (+ x\
    \ n))\n           (if (< y n) (+ y 1) (+ y n))))\n          ((and (< x 0) (< y\
    \ n))\n           (if (< x n) (+ x n) (+ x 1))\n           (if (< y n) (+ y n)\
    \ (+ y 1))))\n  (define (collides-pairs xs ys)\n    (cond ((null? xs) (cons 0\
    \ 0))\n          ((null? ys) (cons 0 0))\n          ((and (< xs 0) (< ys 0))\n\
    \           (if (< xs n) (+ xs 1) (+ xs n))\n           (if (< ys n) (+ ys 1)\
    \ (+ ys n)))\n          ((and (< xs 0) (< ys n))\n           (if (< xs n) (+ xs\
    \ n) (+ xs 1))\n           (if (< ys n) (+ ys n) (+ ys 1))))\n  (define (collides-pairs-pair\
    \ x y)\n    (cond ((and (< x 0) (< y 0))\n           (if (< x n) (+ x 1) (+ x\
    \ n))\n           (if (< y n) (+ y 1) (+ y n))))\n          ((and (< x 0) (< ",
  "  (let ((cars (make-array n '(list 'car)))\n        (collisions 0))\n    (dotimes\
    \ (i n)\n      (let ((car (car cars)))\n        (set! car (make-instance 'car))\n\
    \        (set! cars (cdr cars))\n        (set! cars (cons car cars))\n       \
    \ (set! collisions (+ collisions (car-race car))))\n    collisions))\n", "  (define\
    \ (collides car other-car)\n    (< (abs (car-x car)) (abs (other-car-x other-car)))\
    \ \n    (< (abs (car-y car)) (abs (other-car-y other-car))) \n    (< (abs (car-x\
    \ other-car)) (abs (car-x car))) \n    (< (abs (car-y other-car)) (abs (car-y\
    \ car))))\n  (define (collides-list cars other-cars)\n    (if (null? other-cars)\n\
    \        (cars)\n        (if (null? cars)\n            (cons (car cars) (collides-list\
    \ (cdr cars) (cdr other-cars)))\n            (cons (car cars) (collides-list (cdr\
    \ cars) (cons (car other-cars) (cdr other-cars))))))\n  (define (collides-list-2\
    \ cars other-cars)\n    (if (null? other-cars)\n        (cars)\n        (if (null?\
    \ cars)\n            (cons (car cars) (collides-list-2 cars (cdr other-cars)))\n\
    \            (cons (car cars) (collides-list-2 cars (cons (car other-cars) (cdr\
    \ other-cars))))))\n  (define (collides-list-3 cars other-cars)\n    (if (null?\
    \ other-cars)\n        (cars)\n        (if (null? cars)\n            (cons (car\
    \ cars) (collides-list-3 cars (cdr other-cars)))\n            (cons (car cars)\
    \ (collides-list-3 cars (cons (car other-cars) (cdr other-cars))))))\n  (define\
    \ (collides-list-4 cars other-cars)\n    (if (null? other-cars)\n        (cars)\n\
    \        (if (null? cars)\n            (cons (car cars) (collides-list-4 cars\
    \ (cdr other-cars)))\n            (cons (car cars) (collides-list-4 cars (cons\
    \ (car other-cars) (cdr other-cars))))))\n  (define (collides-list-5 cars other-cars)\n\
    \    (if (null? other-cars)\n        (cars)\n        (if (null? cars)\n      \
    \      (cons (car cars) (collides-list-5 ", "  (let ([cars (make-array n #:initial-contents\
    \ '(#t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (define (collide a b)\n\
    \    (< (abs (- a b)) n))\n  (define (collides a)\n    (cond ((null? a) 0)\n \
    \         ((collide (car a) (car b))\n           (+ 1 (car-race_collision (- n\
    \ 1))))\n          (else (car-race_collision (- n 1)))))\n  (define (collides-list\
    \ a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n        \
    \   (+ 1 (car-race_collision (- n 1))))\n          (else (car-race_collision (-\
    \ n 1)))))\n  (define (collides-list-tail a)\n    (cond ((null? a) '())\n    \
    \      ((collide (car a) (car b))\n           (cons (car a) (cons (car b) (collides-list-tail\
    \ (cdr a))))))\n  (define (collides-list-tail-list a)\n    (cond ((null? a) '())\n\
    \          ((collide (car a) (car b))\n           (cons (car a) (cons (car b)\
    \ (collides-list-tail-list \n                                        (cdr a))))))\n\
    \  (define (collides-list-tail-list-tail a)\n    (cond ((null? a) '())\n     \
    \     ((collide (car a) (car b))\n           (cons (car a) (cons (car b) (collides-list-tail-list-tail\n\
    \                                        (cdr a))))))\n  (define (collides-list-tail-list-tail-list\
    \ a)\n    (cond ((null? a) '())\n          ((collide (car a) (car b))\n      \
    \     (cons (car a) (cons (car b) (collides-list-tail-list-tail-list \n      \
    \                                  (cdr a))))))\n  (define (collides-list-tail-list-tail-list-tail\
    \ a)\n    (cond ((null? a) '())\n          ((collide (car a) (car b))\n      \
    \     (cons (car a) (cons (car b) (collides-list-tail-list-tail-list-tail\n  \
    \                                      (cdr a))))))\n  (define (collides-list-tail-list-tail-list-tail-list\
    \ a)\n    (cond ((null? a) '())\n          ((collide (car a) (car b))\n      \
    \     (", "  (let ((cars (make-array (list n (list 'car)))\n        (collided\
    \ (make-array (list n (list 'car))))\n        (collisions (make-array (list n\
    \ (list 'car))))\n        (collision-count 0))\n    (dotimes (i n)\n      (set!\
    \ cars (make-array (list n (list 'car))))\n      (dotimes (j n)\n        (set!\
    \ collided (make-array (list n (list 'car))))\n        (dotimes (k n)\n      \
    \    (set! collisions (make-array (list n (list 'car))))\n          (set! collisions\
    \ (make-array (list n (list 'car))))\n          (set! collisions (make-array (list\
    \ n (list 'car))))\n          (set! collisions (make-array (list n (list 'car))))\n\
    \          (set! collisions (make-array (list n (list 'car))))\n          (set!\
    \ collisions (make-array (list n (list 'car))))\n          (set! collisions (make-array\
    \ (list n (list 'car))))\n          (set! collisions (make-array (list n (list\
    \ 'car))))\n          (set! collisions (make-array (list n (list 'car))))\n  \
    \        (set! collisions (make-array (list n (list 'car))))\n          (set!\
    \ collisions (make-array (list n (list 'car))))\n          (set! collisions (make-array\
    \ (list n (list 'car))))\n          (set! collisions (make-array (list n (list\
    \ 'car))))\n          (set! collisions (make-array (list n (list 'car))))\n  \
    \        (set! collisions (make-array (list n (list 'car))))\n          (set!\
    \ collisions (make-array (list n (list 'car))))\n          (set! collisions (make-array\
    \ (list n (list 'car))))\n          (set! collisions (make-array (list n (list\
    \ 'car))))\n          (set! collisions (make-array (list n (list 'car))))\n  \
    \        (set! collisions (make-array (list n (list 'car))))\n          (set!\
    \ collisions (make-array (list n (list 'car))))\n          (set! collisions (make-array\
    \ (list n (list 'car))))\n          (set! collisions (make-array (list n (list\
    \ 'car))))\n          (set! collisions (make-array (list n (list 'car))))", " \
    \ (define (collision car1 car2)\n    (cond\n      [(and (< car1 car2) (< car2\
    \ car1)) 0]\n      [(and (< car1 car2) (< car2 car2)) (+ n 1)]\n      [else (+\
    \ n 0)]))\n  (define (collide car1 car2)\n    (cond\n      [(and (< car1 car2)\
    \ (< car2 car1)) 0]\n      [(and (< car1 car2) (< car2 car2)) (+ n 1)]\n     \
    \ [else (+ n 0)]))\n  (define (collides cars)\n    (cond\n      [(null? cars)\
    \ 0]\n      [(and (< cars cars) (< cars cars)) (+ n 1)]\n      [else (+ n 0)]))\n\
    \  (define (collides-left cars)\n    (cond\n      [(null? cars) 0]\n      [(and\
    \ (< cars cars) (< cars cars)) (+ n 1)]\n      [else (+ n 0)]))\n  (define (collides-right\
    \ cars)\n    (cond\n      [(null? cars) 0]\n      [(and (< cars cars) (< cars\
    \ cars)) (+ n 1)]\n      [else (+ n 0)]))\n  (define (collides-right cars)\n \
    \   (cond\n      [(null? cars) 0]\n      [(and (< cars cars) (< cars cars)) (+\
    \ n 1)]\n      [else (+ n 0)]))\n  (define (collides-left cars)\n    (cond\n \
    \     [(null? cars) 0]\n      [(and (< cars cars) (< cars cars)) (+ n 1)]\n  \
    \    [else (+ n 0)]))\n  (define (collides-right cars)\n    (cond\n      [(null?\
    \ cars) 0]\n      [(and (< cars cars) (< cars cars)) (+ n 1)]\n      [else (+\
    \ n 0)]))\n  (define (collides-left cars)\n    (cond\n      [(null? cars) 0]\n\
    \      [(and (< cars cars) (< cars cars)) (+ n 1)]\n      [else (+ n 0)]))\n \
    \ (define (collides-right cars)\n    (cond\n      [(null? cars) 0]\n      [(and\
    \ (< cars cars) (< cars cars)) (+ n 1)]\n      [else (+ n 0)]))\n  (define (collides-left\
    \ cars)\n    (cond\n      [(null? ", "  (define (collision x y)\n    (if (< x\
    \ y)\n        (if (= (- x y) 0)\n            (if (= x y)\n                0\n\
    \                1))\n        (if (= x y)\n            0\n            1)))\n \
    \ (define (collide x y)\n    (if (< x y)\n        (if (= (- x y) 0)\n        \
    \    (if (= x y)\n                0\n                1))\n        (if (= x y)\n\
    \            0\n            1)))\n  (define (collides xs ys)\n    (if (null? xs)\n\
    \        (if (null? ys)\n            0\n            1))\n    (if (null? ys)\n\
    \        (if (null? xs)\n            0\n            1))\n    (if (= (length xs)\
    \ (length ys))\n        (if (= (length xs) 0)\n            (if (= (length ys)\
    \ 0)\n                0\n                1))\n        (if (= (length xs) 1)\n\
    \            (if (= (length ys) 1)\n                (if (= (collision (car xs)\
    \ (car ys)) (collision (car ys) (car xs))) 1 0))\n            (if (= (length ys)\
    \ 1)\n                (if (= (length xs) 1)\n                    (if (= (collision\
    \ (car xs) (car ys)) (collision (car ys) (car xs))) 1 0))\n                (if\
    \ (= (collision (car xs) (car ys)) (collision (car ys) (car xs))) 1 0))\n    \
    \        (if (= (collision (car xs) (car ys)) (collision (car ys) (car xs))) 1\
    \ 0))\n        (if (= (length ys) 1)\n            (if (= (length xs) 1)\n    \
    \            (if (= (collision (car xs) (car ys)) (collision (car ys) (car xs)))\
    \ 1 0))\n            (if (= (length xs) 1)\n                (if (= (length ys)\
    \ 1)\n                    (if (= (collision (car xs) (car ys)) (collision (car\
    \ ys) (car xs))) 1 0))\n                (if (= (collision (car xs) (car ys)) (collision\
    \ (car ys) (car xs))) 1 0))\n            (if (= (collision (car xs) (car ys))\
    \ (collision (car ys) (car xs))) 1 0))\n        (if (= (length xs) 2)\n      \
    \      (if (= (length ys) 2)\n                (if (= (collision (car x", "  (let\
    \ ([cars (make-array (* n n) '(list 'empty))])\n    (define (collision i j)\n\
    \      (cond ((or (< i n) (< j n)) 0)\n            ((or (< i 0) (< j 0)) 0)\n\
    \            ((or (< i 0) (< j n)) 0)\n            (else (< (car-x cars i) (car-x\
    \ cars j)) 0)\n            (else (< (car-y cars i) (car-y cars j)) 0)\n      \
    \      (else (< (car-x cars j) (car-x cars i)) 0)\n            (else (< (car-y\
    \ cars j) (car-y cars i)) 0)\n            (else (< (car-x cars i) (car-x cars\
    \ j)) 0)\n            (else (< (car-y cars i) (car-y cars j)) 0)\n           \
    \ (else (< (car-x cars j) (car-x cars i)) 0)\n            (else (< (car-y cars\
    \ j) (car-y cars i)) 0)\n            (else (< (car-x cars i) (car-x cars j)) 0)\n\
    \            (else (< (car-y cars i) (car-y cars j)) 0)\n            (else (<\
    \ (car-x cars j) (car-x cars i)) 0)\n            (else (< (car-y cars j) (car-y\
    \ cars i)) 0)\n            (else (< (car-x cars i) (car-x cars j)) 0)\n      \
    \      (else (< (car-y cars i) (car-y cars j)) 0)\n            (else (< (car-x\
    \ cars j) (car-x cars i)) 0)\n            (else (< (car-y cars j) (car-y cars\
    \ i)) 0)\n            (else (< (car-x cars i) (car-x cars j)) 0)\n           \
    \ (else (< (car-y cars i) (car-y cars j)) 0)\n            (else (< (car-x cars\
    \ j) (car-x cars i)) 0)\n            (else (< (car-y cars j) (car-y cars i)) 0)\n\
    \            (else (< (car-x cars i) (car-x cars j)) 0)\n            (else (<\
    \ (car-y cars i) (car-y ", "  (let ((cars (make-array n #:element-type 'car)))\n\
    \    (define (collide i j)\n      (cond ((< i j) (+ i 1))\n            ((< j i)\
    \ (+ j 1))\n            (else (if (= (- i j) (- n i))\n                      (+\
    \ 1 (car-race (car cars) (- i 1) (- j 1)))\n                      (+ 1 (car-race\
    \ (car cars) (- j 1) (- i 1))))))\n    (let loop ((i 0) (j 0))\n      (if (< i\
    \ n)\n          (if (< j n)\n              (if (= (- i j) (- n i))\n         \
    \         (loop (+ i 1) (+ j 1))\n                  (loop (+ j 1) (+ i 1)))\n\
    \              (loop (+ i 1) (+ j 1)))\n          (loop (+ i 1) (+ j 1))))))\n\
    \  (+ (car-race (car cars) 0 0) (car-race (car cars) (- n 1) 0)))\n", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (asso", "  (let\
    \ ((cars (make-array n #:element-type 'car)))\n    (define (collide x y)\n   \
    \   (< (car-x x) (car-x y))\n      (< (car-y x) (car-y y)))\n    (define (collides\
    \ i j)\n      (and (< i (+ n 1))\n           (< j (+ n 1))\n           (collide\
    \ (+ i 1) (+ j 1))\n           (collide (+ i 1) (+ j 0))\n           (collide\
    \ (+ i 0) (+ j 1))\n           (collide (+ i 0) (+ j 0))))\n    (define (collide?\
    \ i j)\n      (and (< i (+ n 1))\n           (< j (+ n 1))\n           (collide\
    \ (+ i 1) (+ j 1))\n           (collide (+ i 1) (+ j 0))\n           (collide\
    \ (+ i 0) (+ j 1))\n           (collide (+ i 0) (+ j 0))))\n    (define (collides\
    \ i j)\n      (and (< i (+ n 1))\n           (< j (+ n 1))\n           (collide\
    \ (+ i 1) (+ j 1))\n           (collide (+ i 1) (+ j 0))\n           (collide\
    \ (+ i 0) (+ j 1))\n           (collide (+ i 0) (+ j 0))))\n    (define (collide?\
    \ i j)\n      (and (< i (+ n 1))\n           (< j (+ n 1))\n           (collide\
    \ (+ i 1) (+ j 1))\n           (collide (+ i 1) (+ j 0))\n           (collide\
    \ (+ i 0) (+ j 1))\n           (collide (+ i 0) (+ j 0))))\n    (define (collides\
    \ i j)\n      (and (< i (+ n 1))\n           (< j (+ n 1))\n           (collide\
    \ (+ i 1) (+ j 1))\n           (collide (+ i 1) (+ j 0))\n           (collide\
    \ (+ i 0) (+ j 1))\n           (collide (+ i 0) (+ j 0))))\n    (define (collide?\
    \ i j)\n      (and (< i (+ n 1))\n           (< j (+ n 1))\n           (collide\
    \ (+ i 1) (+ j 1))\n           (collide (+ i 1) (+ j 0))\n           (collide\
    \ (+ i 0) (+ j 1))\n           (collide (+ i 0) (+ j 0))))\n    (define (collides\
    \ i j)\n      (and (< i (+ n 1))\n           (", "  (let ((cars (make-array n\
    \ '(list 'car))))\n    (define (collision i j)\n      (cond ((= i j) 0)\n    \
    \        ((< (car cars) (car cars (+ i 1)))\n             (+ (car cars (+ i 1))\
    \ (car cars (+ j 1))))\n            (else (+ (car cars (+ i 1)) (car cars (+ j\
    \ 1))))))\n    (define (collide i j)\n      (cond ((= i j) 0)\n            ((<\
    \ (car cars) (car cars (+ i 1)))\n             (+ (car cars (+ i 1)) (car cars\
    \ (+ j 1))))\n            (else (+ (car cars (+ i 1)) (car cars (+ j 1))))))\n\
    \    (define (collides i j)\n      (cond ((= i j) 0)\n            ((< (car cars)\
    \ (car cars (+ i 1)))\n             (+ (car cars (+ i 1)) (car cars (+ j 1))))\n\
    \            (else (+ (car cars (+ i 1)) (car cars (+ j 1))))))\n    (define (collides\
    \ i j)\n      (cond ((= i j) 0)\n            ((< (car cars) (car cars (+ i 1)))\n\
    \             (+ (car cars (+ i 1)) (car cars (+ j 1))))\n            (else (+\
    \ (car cars (+ i 1)) (car cars (+ j 1))))))\n    (define (collides i j)\n    \
    \  (cond ((= i j) 0)\n            ((< (car cars) (car cars (+ i 1)))\n       \
    \      (+ (car cars (+ i 1)) (car cars (+ j 1))))\n            (else (+ (car cars\
    \ (+ i 1)) (car cars (+ j 1))))))\n    (define (collides i j)\n      (cond ((=\
    \ i j) 0)\n            ((< (car cars) (car cars (+ i 1)))\n             (+ (car\
    \ cars (+ i 1)) (car cars (+ j 1))))\n            (else (+ (car cars (+ i 1))\
    \ (car cars (+ j 1))))))\n    (define (collides i j)\n      (cond ((= i j) 0)\n\
    \            ((< (car cars) (car cars (+ i 1)))\n             (+ (car cars (+\
    \ i 1)) (car cars (+ j 1))))\n            (else (+ (car cars (+ i 1)) (car cars\
    \ (", "  (let ((cars (make-array n #:element-type 'car)))\n    (define (collide\
    \ car other-car)\n      (< (car car) other-car))\n    (define (collides car other-car)\n\
    \      (< (car car) other-car))\n    (define (collides-in car other-car)\n   \
    \   (< (car car) other-car))\n    (define (collides-in car other-car)\n      (<\
    \ (car car) other-car))\n    (define (collides-in car other-car)\n      (< (car\
    \ car) other-car))\n    (define (collides-in car other-car)\n      (< (car car)\
    \ other-car))\n    (define (collides-in car other-car)\n      (< (car car) other-car))\n\
    \    (define (collides-in car other-car)\n      (< (car car) other-car))\n   \
    \ (define (collides-in car other-car)\n      (< (car car) other-car))\n    (define\
    \ (collides-in car other-car)\n      (< (car car) other-car))\n    (define (collides-in\
    \ car other-car)\n      (< (car car) other-car))\n    (define (collides-in car\
    \ other-car)\n      (< (car car) other-car))\n    (define (collides-in car other-car)\n\
    \      (< (car car) other-car))\n    (define (collides-in car other-car)\n   \
    \   (< (car car) other-car))\n    (define (collides-in car other-car)\n      (<\
    \ (car car) other-car))\n    (define (collides-in car other-car)\n      (< (car\
    \ car) other-car))\n    (define (collides-in car other-car)\n      (< (car car)\
    \ other-car))\n    (define (collides-in car other-car)\n      (< (car car) other-car))\n\
    \    (define (collides-in car other-car)\n      (< (car car) other-car))\n   \
    \ (define (collides-in car other-car)\n      (< (car car) other-car", "  (define\
    \ (collision car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2)\
    \ 1]\n      [else (+ collision (car1 car2) (car2 car1))]))\n  (define (collide\
    \ car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n  \
    \    [else (+ collision (car1 car2) (car2 car1))]))\n  (define (collides cars)\n\
    \    (cond\n      [(null? cars) 0]\n      [(< cars 2) 0]\n      [(> cars 2) 1]\n\
    \      [else (+ collides (cdr cars))]))\n  (define (collides-left cars)\n    (cond\n\
    \      [(null? cars) 0]\n      [(< cars 2) 0]\n      [(> cars 2) 1]\n      [else\
    \ (+ collides (car cars))]))\n  (define (collides-right cars)\n    (cond\n   \
    \   [(null? cars) 0]\n      [(< cars 2) 0]\n      [(> cars 2) 1]\n      [else\
    \ (+ collides (cdr cars))]))\n  (define (collides-left cars)\n    (cond\n    \
    \  [(null? cars) 0]\n      [(< cars 2) 0]\n      [(> cars 2) 1]\n      [else (+\
    \ collides (car cars))]))\n  (define (collides-right cars)\n    (cond\n      [(null?\
    \ cars) 0]\n      [(< cars 2) 0]\n      [(> cars 2) 1]\n      [else (+ collides\
    \ (cdr cars))]))\n  (define (collides-left cars)\n    (cond\n      [(null? cars)\
    \ 0]\n      [(< cars 2) 0]\n      [(> cars 2) 1]\n      [else (+ collides (car\
    \ cars))]))\n  (define (collides-right cars)\n    (cond\n      [(null? cars) 0]\n\
    \      [(< cars 2) 0]\n      [(> cars 2) 1]\n      [else (+ collides (cdr cars))]))\n\
    \  (define (collides-left cars)\n    (cond\n      [(null? cars) 0]\n      [(<\
    \ cars 2) 0]\n      [(> cars 2) 1]\n      [else (+ collides (car cars))]))\n \
    \ (define (collides-right cars)\n    (cond\n      [(null? ", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (define (collision i j)\n      (if (< i j)\n        \
    \  (if (> (car-x cars) (car-x cars (+ i 1)))\n              (if (> (car-y cars)\
    \ (car-y cars (+ i 1)))\n                  (if (> (car-x cars (+ j 1))\n     \
    \                 (car-x cars (+ j 1)))\n                      (if (> (car-y cars\
    \ (+ j 1))\n                          (car-y cars (+ j 1)))\n                \
    \          (if (> (car-x cars (+ i 1))\n                              (car-x cars\
    \ (+ i 1)))\n                              (if (> (car-y cars (+ i 1))\n     \
    \                             (car-y cars (+ i 1)))\n                        \
    \          (if (> (car-x cars (+ j 1))\n                                     \
    \ (car-x cars (+ j 1)))\n                                      (if (> (car-y cars\
    \ (+ j 1))\n                                          (car-y cars (+ j 1)))\n\
    \                                          (if (> (car-x cars (+ i 1))\n     \
    \                                         (car-x cars (+ i 1)))\n            \
    \                                  (if (> (car-y cars (+ i 1))\n             \
    \                                     (car-y cars (+ i 1)))\n                \
    \                                  (if (> (car-x cars (+ j 1))\n             \
    \                                         (car-x cars (+ j 1)))\n            \
    \                                          (if (> (car-y cars (+ j 1))\n     \
    \                                                     (car-y cars (+ j 1)))\n\
    \                                                          (if (> (car-x cars\
    \ (+ i 1))\n                                                              (car-x\
    \ cars (+ i 1)))\n                                                           \
    \   (if (> (car-y cars (+ i 1))\n                                            \
    \                      (car-y cars (+ i 1)))\n                               \
    \                                   (if (> (car-x cars (+ j 1))\n            \
    \                                                          (car-x cars (+ j 1)))\n\
    \                                                                      (if (>\
    \ (car-y cars (+ j 1))\n                                                     \
    \                     (car-y cars (+ j 1)))\n                                \
    \                                          (if (> (car-x cars (+ i 1))\n     \
    \                                                                         (car-x\
    \ cars (+ i 1)))\n                                                           \
    \                   (if (> (car-y cars (+ i 1))\n                            \
    \                                                      (car-y cars (+ i 1)))\n\
    \                                                                            \
    \      (if (> (car-x cars (+ j 1))\n                                         \
    \                                             (car-x cars (+ j 1)))\n        \
    \                                                                            \
    \  (if (> (car-y cars (+ j 1))\n                                             \
    \                                             (car-y cars (+ j 1)))\n        \
    \                                                                            \
    \      (", "  (let ((cars (make-array (* n n) '(list 'car))))\n    (dotimes (i\
    \ n)\n      (dotimes (j n)\n        (set! cars (assoc cars (+ i j) '(:left :right)))\n\
    \        (set! cars (assoc cars (- i j) '(:right :left)))\n        (set! cars\
    \ (assoc cars (- j i) '(:left :right)))\n        (set! cars (assoc cars (+ j i)\
    \ '(:right :left)))\n        (set! cars (assoc cars (- i j) '(:left :right)))\n\
    \        (set! cars (assoc cars (+ j i) '(:right :left)))\n        (set! cars\
    \ (assoc cars (- j i) '(:left :right)))\n        (set! cars (assoc cars (+ i j)\
    \ '(:left :right)))\n        (set! cars (assoc cars (- i j) '(:right :left)))\n\
    \        (set! cars (assoc cars (+ j i) '(:right :left)))\n        (set! cars\
    \ (assoc cars (- j i) '(:left :right)))\n        (set! cars (assoc cars (+ i j)\
    \ '(:left :right)))\n        (set! cars (assoc cars (- i j) '(:right :left)))\n\
    \        (set! cars (assoc cars (+ j i) '(:right :left)))\n        (set! cars\
    \ (assoc cars (- j i) '(:left :right)))\n        (set! cars (assoc cars (+ i j)\
    \ '(:left :right)))\n        (set! cars (assoc cars (- i j) '(:right :left)))\n\
    \        (set! cars (assoc cars (+ j i) '(:right :left)))\n        (set! cars\
    \ (assoc cars (- j i) '(:left :right)))\n        (set! cars (assoc cars (+ i j)\
    \ '(:left :right)))\n        (set! cars (assoc cars (- i j) '(:right :left)))\n\
    \        (set! cars (assoc cars (+ j i) '(:right :left)))\n        (set! cars\
    \ (assoc cars (- j i) '(:left :right)))\n        (set! cars (assoc car", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (let ((car cars\
    \ (- i 1)))\n        (set! car (make-instance 'car))\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car-speed 0)\n        (set! car-speed 0)\n        (set! car-speed\
    \ 0)\n        (set! car", "  (define (collision car1 car2)\n    (cond [(and (<\
    \ car1 car2) (< car2 car1))\n           0]\n          [(and (< car1 car2) (< car2\
    \ car2))\n           (+ car1 car2)\n           ]\n          [else\n          \
    \ (+ car1 car2)\n           ]))\n  (define (collide car1 car2)\n    (cond [(and\
    \ (< car1 car2) (< car2 car1))\n           0]\n          [(and (< car1 car2) (<\
    \ car2 car2))\n           (+ car1 car2)\n           ]\n          [else\n     \
    \      (+ car1 car2)\n           ]))\n  (define (collides car1 car2)\n    (cond\
    \ [(and (< car1 car2) (< car2 car1))\n           0]\n          [(and (< car1 car2)\
    \ (< car2 car2))\n           (+ car1 car2)\n           ]\n          [else\n  \
    \         (+ car1 car2)\n           ]))\n  (define (collides-list car1 car2)\n\
    \    (cond [(and (< car1 car2) (< car2 car1))\n           0]\n          [(and\
    \ (< car1 car2) (< car2 car2))\n           (cons car1 car2)\n           ]\n  \
    \        [else\n           (cons car1 car2)\n           ]))\n  (define (collides-list-list\
    \ car1 car2)\n    (cond [(and (< car1 car2) (< car2 car1))\n           0]\n  \
    \        [(and (< car1 car2) (< car2 car2))\n           (cons (cons car1 car2)\
    \ (cons car2 car1))\n           ]\n          [else\n           (cons (cons car1\
    \ car2) (cons car2 car1))\n           ]))\n  (define (collides-list-list-list\
    \ car1 car2)\n    (cond [(and (< car1 car2) (< car2 car1))\n           0]\n  \
    \        [(and (< car1 car2) (< car2 car2))\n           (cons (cons (cons car1\
    \ car2) (cons car2 car1)) \n                 (cons (cons car2 car1) (cons car1\
    \ car2)))\n           ]\n          [else\n           (cons (cons (cons car1 car2)\
    \ (cons car2 car1)) \n                 (cons (cons car2 car1) (cons car1 car2)))\n\
    \           ]))\n  (define (collides-list-list-", "  (define (collision car1 car2)\n\
    \    (cond [(and (< car1 car2) (< car2 car1))\n           0]\n          [(and\
    \ (< car1 car2) (< car2 car1))\n           (+ car1 car2)]\n          [else\n \
    \          (+ car2 car1)]))\n  (define (collides car1 car2)\n    (cond [(and (<\
    \ car1 car2) (< car2 car1))\n           0]\n          [(and (< car1 car2) (< car2\
    \ car1))\n           (+ car1 car2)]\n          [else\n           (+ car2 car1)]))\n\
    \  (define (collides_list cars)\n    (cond [(and (< cars cars) (< cars cars))\n\
    \           0]\n          [(and (< cars cars) (< cars cars))\n           (+ cars\
    \ cars)]\n          [else\n           (+ cars cars)]))\n  (define (collides_list\
    \ cars)\n    (cond [(and (< cars cars) (< cars cars))\n           0]\n       \
    \   [(and (< cars cars) (< cars cars))\n           (+ cars cars)]\n          [else\n\
    \           (+ cars cars)]))\n  (define (collides_list cars)\n    (cond [(and\
    \ (< cars cars) (< cars cars))\n           0]\n          [(and (< cars cars) (<\
    \ cars cars))\n           (+ cars cars)]\n          [else\n           (+ cars\
    \ cars)]))\n  (define (collides_list cars)\n    (cond [(and (< cars cars) (< cars\
    \ cars))\n           0]\n          [(and (< cars cars) (< cars cars))\n      \
    \     (+ cars cars)]\n          [else\n           (+ cars cars)]))\n  (define\
    \ (collides_list cars)\n    (cond [(and (< cars cars) (< cars cars))\n       \
    \    0]\n          [(and (< cars cars) (< cars cars))\n           (+ cars cars)]\n\
    \          [else\n           (+ cars cars)]))\n  (define (collides_list cars)\n\
    \    (cond [(and (< cars cars) (< cars cars))\n           0]\n          [(and\
    \ (< cars cars) (< cars cars))\n           (+ cars cars)]\n          [else\n \
    \          (+ cars cars)]))", "  (let ([cars (make-array (* n n) car)])\n    (define\
    \ (collide a b)\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b)\
    \ (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b)\
    \ (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b)\
    \ (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b)\
    \ (car-speed a)))\n    (define (collides i j)\n      (cond ((< i j) (cons i nil))\n\
    \            ((< j i) (cons nil i))\n            (else (cons i j))))\n    (define\
    \ (collides-in i j k)\n      (cond ((< i j) (cons i nil))\n            ((< j i)\
    \ (cons nil i))\n            (else (cons i j)))\n    (define (collides-in i j\
    \ k)\n      (cond ((< i j) (cons i nil))\n            ((< j i) (cons nil i))\n\
    \            (else (cons i j)))\n    (define (collides-in i j k)\n      (cond\
    \ ((< i j) (cons i nil))\n            ((< j i) (cons nil i))\n            (else\
    \ (cons i j)))\n    (define (collides-in i j k)\n      (cond ((< i j) (cons i\
    \ nil))\n            ((< j i) (cons nil i))\n            (else (cons i j)))\n\
    \    (define (collides-in i j k)\n      (cond ((< i j) (cons i nil))\n       \
    \     ((< j i) (cons nil i))\n            (else (cons i j)))\n    (define (collides-in\
    \ i j k)\n      (cond ((< i j) (cons i nil))\n            ((< j i) (cons nil i))\n\
    \            (else (cons i j)))\n    (define (collides-in i j k)\n      (cond\
    \ ((< i j) (cons i nil))\n            ((< j i) (cons nil i))\n            (else\
    \ (cons i j)))\n    (define (collides-in i j k)\n      (cond ((< i j", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (define (collide x y)\n      (< (car\
    \ x) (car y))\n      (< (car y) (car x)))\n    (define (collides xs ys)\n    \
    \  (for/or ((x xs) (y ys))\n            (when (and (not (null? xs)) (not (null?\
    \ ys)))\n              (when (and (not (null? x)) (not (null? y))\n          \
    \              (collide x y))\n                (when (and (not (null? y)) (not\
    \ (null? x))\n                          (collide y x))\n                  (when\
    \ (and (not (null? x)) (not (null? y))\n                            (collides\
    \ xs (cdr ys))\n                            (collides (cdr xs) ys))))))\n    (when\
    \ (< n 0)\n      (error \"n must be positive\"))\n    (when (< n 100)\n      (error\
    \ \"n must be less than 100\"))\n    (when (< n 10000)\n      (error \"n must\
    \ be less than 10000\"))\n    (when (< n 100000)\n      (error \"n must be less\
    \ than 100000\"))\n    (when (< n 1000000)\n      (error \"n must be less than\
    \ 1000000\"))\n    (when (< n 10000000)\n      (error \"n must be less than 10000000\"\
    ))\n    (when (< n 100000000)\n      (error \"n must be less than 100000000\"\
    ))\n    (when (< n 1000000000)\n      (error \"n must be less than 1000000000\"\
    ))\n    (when (< n 10000000000)\n      (error \"n must be less than 10000000000\"\
    ))\n    (when (< n 100000000000)\n      (error \"n must be less than 100000000000\"\
    ))\n    (when (< n 1000000000000)\n      (error \"n must be less than 1000000000000\"\
    ))\n    (when (< n 10000000000000)\n      (error \"n must be less than 10000000000000\"\
    ))\n    (when (< n 100000000000000)\n      (error \"n must be less than 100000000000000\"\
    ))\n    (when (< n 1000000000000000)\n      (error \"n must be less than 1000000000000000\"\
    ))\n    (when (< n 10000000000000000)\n      (error \"n must be less than 10000000000000000\"\
    ))\n    (when (< n 100000000000000000)\n      (error \"n must be less than 100000000000000000\"\
    ))\n    (when (< n 1000000000000000000)\n      (error \"n must be less than 1000000000000000000\"\
    ))\n    (when (< n 10000000000000000000)\n      (error \"n must be less than 10000000000000000000\"\
    ))", "  (define (collision car1 car2)\n    (cond\n      [(and (< car1 car2) (<\
    \ car2 car1))\n       (+ n 1)]\n      [(and (< car1 car2) (< car2 car2))\n   \
    \    (+ n 1)]\n      [else\n       (+ n 0)]))\n  (define (collisions cars)\n \
    \   (cond\n      [(null? cars)\n       0]\n      [(< (car cars) (car (cdr cars)))\n\
    \       (collision (car cars) (car (cdr cars)))]\n      [else\n       (collisions\
    \ (cdr cars))]))\n  (collisions cars))\n", "  (define (collision x y)\n    (if\
    \ (< x y)\n        (if (= (- x y) 0)\n            (if (= x y)\n              \
    \  0\n                (+ 1 (collision (- x y) y)))\n            (if (= x y)\n\
    \                0\n                (+ 1 (collision (- x y) y))))))\n  (define\
    \ (collisions xs ys)\n    (if (null? xs)\n        0\n        (+ (collision (car\
    \ xs) (car ys)) (collisions (cdr xs) ys))))\n  (define (collision x y)\n    (if\
    \ (< x y)\n        (if (= (- x y) 0)\n            (if (= x y)\n              \
    \  0\n                (+ 1 (collision (- x y) y)))\n            (if (= x y)\n\
    \                0\n                (+ 1 (collision (- x y) y))))))\n  (define\
    \ (collisions xs ys)\n    (if (null? xs)\n        0\n        (+ (collision (car\
    \ xs) (car ys)) (collisions (cdr xs) ys))))\n  (define (collision x y)\n    (if\
    \ (< x y)\n        (if (= (- x y) 0)\n            (if (= x y)\n              \
    \  0\n                (+ 1 (collision (- x y) y)))\n            (if (= x y)\n\
    \                0\n                (+ 1 (collision (- x y) y))))))\n  (define\
    \ (collisions xs ys)\n    (if (null? xs)\n        0\n        (+ (collision (car\
    \ xs) (car ys)) (collisions (cdr xs) ys))))\n  (define (collision x y)\n    (if\
    \ (< x y)\n        (if (= (- x y) 0)\n            (if (= x y)\n              \
    \  0\n                (+ 1 (collision (- x y) y)))\n            (if (= x y)\n\
    \                0\n                (+ 1 (collision (- x y) y))))))\n  (define\
    \ (collisions xs ys)\n    (if (null? xs)\n        0\n        (+ (collision (car\
    \ xs) (car ys)) (collisions (cdr xs) ys))))\n  (define (collision x y)\n    (if\
    \ (< x y)\n        (if (= (- x y) 0)\n            (if (= x y)\n              \
    \  0\n                (+ 1 (collision (- x y) y)))\n            (if (= x y)\n\
    \                0\n                (+ 1 (collision (- x y) y))))))\n  (define\
    \ (collisions xs ys)\n    (if (null? xs)\n        0\n", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n  \
    \    (let ((colliding-car (car-race (car cars) (car cars))))\n        (when (not\
    \ (null? colliding-car))\n          (set! cars (cdr colliding-car))\n        \
    \  (set! cars (cons (car colliding-car) cars))))\n      (car cars))))\n", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc\
    \ i cars))\n      (let ((collided (assoc i cars)))\n        (if (not (null? collided))\n\
    \            (set! cars (cdr collided))\n            (set! cars (cons i cars))))\n\
    \      (set! cars (cons i cars))))\n  (length cars))\n", "  (define (collide a\
    \ b)\n    (< (abs (- a b)) n))\n  (define (collides a-list)\n    (cond ((null?\
    \ a-list) 0)\n          ((and (< (car a-list) (car a-list))\n               (<\
    \ (cdr a-list) (cdr a-list)))\n           (+ 0 (car (cdr a-list))))\n        \
    \  (else (+ 1 (car (car a-list))\n                    (collides (cdr a-list))))))\n\
    \  (define (collides-list a-list)\n    (cond ((null? a-list) 0)\n          ((and\
    \ (< (car a-list) (car a-list))\n               (< (cdr a-list) (cdr a-list)))\n\
    \           (+ 0 (car (cdr a-list))))\n          (else (+ 1 (car (car a-list))\n\
    \                    (collides-list (cdr a-list))))))\n  (define (collides-list-2\
    \ a-list)\n    (cond ((null? a-list) 0)\n          ((and (< (car a-list) (car\
    \ a-list))\n               (< (cdr a-list) (cdr a-list)))\n           (+ 0 (car\
    \ (cdr a-list))))\n          (else (+ 1 (car (car a-list))\n                 \
    \   (collides-list-2 (cdr a-list))))))\n  (define (collides-list-3 a-list)\n \
    \   (cond ((null? a-list) 0)\n          ((and (< (car a-list) (car a-list))\n\
    \               (< (cdr a-list) (cdr a-list)))\n           (+ 0 (car (cdr a-list))))\n\
    \          (else (+ 1 (car (car a-list))\n                    (collides-list-3\
    \ (cdr a-list))))))\n  (define (collides-list-4 a-list)\n    (cond ((null? a-list)\
    \ 0)\n          ((and (< (car a-list) (car a-list))\n               (< (cdr a-list)\
    \ (cdr a-list)))\n           (+ 0 (car (cdr a-list))))\n          (else (+ 1 (car\
    \ (car a-list))\n                    (collides-list-4 (cdr a-list))))))\n  (define\
    \ (collides-list-5 a-list)\n    (cond ((null? a-list) 0)\n          ((and (< (car\
    \ a-list) (car a-list))\n               (< (cdr a-list) (cdr a-list)))\n     \
    \      (+ 0 (car (cdr ", "  (let ((cars (make-array n '(list 'car))))\n    (define\
    \ (collide a b)\n      (< (car-x a) (car-x b))\n      (< (car-y a) (car-y b))\n\
    \      (< (car-x b) (car-x a))\n      (< (car-y b) (car-y a)))\n    (define (collides\
    \ i j)\n      (cond ((or (< i n) (< j n)) 0)\n            ((and (< i 0) (< j 0))\
    \ 0)\n            (else (and (and (< i j) (< j 0))\n                        (and\
    \ (< i 0) (< j j))\n                        (and (< i j) (< j j))\n          \
    \              (and (< i 0) (< j 0))\n                        (and (< i j) (<\
    \ j 0))\n                        (and (< i 0) (< j j))\n                     \
    \   (and (< i j) (< j j))\n                        (and (< i 0) (< j 0))\n   \
    \                     (and (< i j) (< j 0))\n                        (and (< i\
    \ 0) (< j j))\n                        (and (< i j) (< j j))\n               \
    \         (and (< i 0) (< j 0))\n                        (and (< i j) (< j 0))\n\
    \                        (and (< i 0) (< j j))\n                        (and (<\
    \ i j) (< j j))\n                        (and (< i 0) (< j 0))\n             \
    \           (and (< i j) (< j 0))\n                        (and (< i 0) (< j j))\n\
    \                        (and (< i j) (< j j))\n                        (and (<\
    \ i 0) (< j 0))\n                        (and (< i j) (< j 0))\n             \
    \           (and (< i 0) (< j j))\n                        (and (< i j) (< j j))\n\
    \                        (and (< i 0) (< j 0))\n                        (and (<\
    \ i j) (< j 0))\n                        (and (< i 0) (< j j))\n             \
    \           (and (< i j) (< j j))\n                        (and (< i 0) (< j 0))\n\
    \                        (and (< i j) (< j 0))\n                        (and (<\
    \ i 0) (< j j))\n                        (and (< i j) (< j j))\n             \
    \           (and (< i 0) (< j 0))\n                        (and (< i j) (< j 0))\n\
    \                        (and (< i 0) (< j j))\n                        (and (<\
    \ i j) (< j j))\n                        (and (< i 0) (< j 0))\n             \
    \           (and (< i j) (< j 0))\n                        (and (< i 0) (< j j",
  "  (let ((cars (make-array (+ n 1) '(list 'car))))\n    (define (collision i j)\n\
    \      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y cars\
    \ (+ j 1))))\n    (define (collides i j)\n      (< (car-x cars) (car-x cars (+\
    \ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides-left\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collides-right i j)\n      (< (car-x cars) (car-x\
    \ cars (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides-up\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collides-down i j)\n      (< (car-x cars) (car-x\
    \ cars (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides-left\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collides-right i j)\n      (< (car-x cars) (car-x\
    \ cars (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides-up\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collides-down i j)\n      (< (car-x cars) (car-x\
    \ cars (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides-left\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define ", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (asso", "  (let ([cars (make-array n #:initial-contents\
    \ '(#t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (let ((cars (make-array\
    \ (list n (make-array (list n))))))\n    (define (collision x y)\n      (< (+\
    \ x y) n))\n    (define (move x y)\n      (set! cars (assoc x cars))\n      (set!\
    \ cars (assoc y cars))\n      (car cars))\n    (define (collide x y)\n      (<\
    \ (+ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n    (define (collide?\
    \ x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n\
    \    (define (collide? x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n\
    \      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n    (define\
    \ (collide? x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+\
    \ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n    (define (collide?\
    \ x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n\
    \    (define (collide? x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n\
    \      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n    (define\
    \ (collide? x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+\
    \ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n    (define (collide?\
    \ x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n\
    \    (define (collide? x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n\
    \      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n    (define\
    \ (collide? x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+\
    \ x y) n))\n    (define (collide? x y)\n      (< (+ x y) n))\n    (define (collide?\
    \ x y)\n      (< (+ x y) n))\n    (define (collide? x y)\n      (< (+ ", "  (define\
    \ (collision car1 car2)\n    (cond\n      [(< (distance car1 car2) n] 1))\n  (cond\n\
    \    [(> (distance car1 car2) n] 0))\n  (cond\n    [(> (distance car1 car2) 0)\
    \ (collision car1 (car-right car2))]\n    [(< (distance car1 car2) 0) (collision\
    \ car1 (car-left car2))]))\n  (cond\n    [(> (distance car1 car2) 0) (collision\
    \ car1 (car-right car2))]\n    [(< (distance car1 car2) 0) (collision car1 (car-left\
    \ car2))]))\n  (cond\n    [(> (distance car1 car2) 0) (collision car1 (car-right\
    \ car2))]\n    [(< (distance car1 car2) 0) (collision car1 (car-left car2))]))\n\
    \  (cond\n    [(> (distance car1 car2) 0) (collision car1 (car-right car2))]\n\
    \    [(< (distance car1 car2) 0) (collision car1 (car-left car2))]))\n  (cond\n\
    \    [(> (distance car1 car2) 0) (collision car1 (car-right car2))]\n    [(< (distance\
    \ car1 car2) 0) (collision car1 (car-left car2))]))\n  (cond\n    [(> (distance\
    \ car1 car2) 0) (collision car1 (car-right car2))]\n    [(< (distance car1 car2)\
    \ 0) (collision car1 (car-left car2))]))\n  (cond\n    [(> (distance car1 car2)\
    \ 0) (collision car1 (car-right car2))]\n    [(< (distance car1 car2) 0) (collision\
    \ car1 (car-left car2))]))\n  (cond\n    [(> (distance car1 car2) 0) (collision\
    \ car1 (car-right car2))]\n    [(< (distance car1 car2) 0) (collision car1 (car-left\
    \ car2))]))\n  (cond\n    [(> (distance car1 car2) 0) (collision car1 (car-right\
    \ car2))]\n    [(< (distance car1 car2) 0) (collision car1 (car-left car2))]))\n\
    \  (cond\n    [(> (distance car1 car2) 0) (collision car1 (car-right car2))]\n\
    \    [(< (distance car1 car2) 0) (collision car1 (car-left car2))]))\n  (cond\n\
    \    [(> (distance car1 car2) 0) (collision car1 (car-right car2))", "  (let ((cars\
    \ (make-array n #:element-type 'car)))\n    (define (collide x y)\n      (< (car-x\
    \ x) (- car-x y))\n      (< (car-y x) (- car-y y)))\n    (define (collides i j\
    \ k)\n      (and (collide (car-x i) (car-x j))\n           (collide (car-y i)\
    \ (car-y j))\n           (collide (car-x k) (car-x j))\n           (collide (car-y\
    \ k) (car-y j))))\n    (define (collides i j)\n      (and (collide (car-x i) (car-x\
    \ j))\n           (collide (car-y i) (car-y j))))\n    (define (collides i k)\n\
    \      (and (collide (car-x i) (car-x k))\n           (collide (car-y i) (car-y\
    \ k))))\n    (define (collides j k)\n      (and (collide (car-x j) (car-x k))\n\
    \           (collide (car-y j) (car-y k))))\n    (define (collides i j)\n    \
    \  (and (collide (car-x i) (car-x j))\n           (collide (car-y i) (car-y j))))\n\
    \    (define (collides k l)\n      (and (collide (car-x k) (car-x l))\n      \
    \     (collide (car-y k) (car-y l))))\n    (define (collides k l)\n      (and\
    \ (collide (car-x k) (car-x l))\n           (collide (car-y k) (car-y l))))\n\
    \    (define (collides k l)\n      (and (collide (car-x k) (car-x l))\n      \
    \     (collide (car-y k) (car-y l))))\n    (define (collides k l)\n      (and\
    \ (collide (car-x k) (car-x l))\n           (collide (car-y k) (car-y l))))\n\
    \    (define (collides k l)\n      (and (collide (car-x k) (car-x l))\n      \
    \     (collide (car-y k) (car-y l))))\n    (define (collides k l)\n      (and\
    \ (collide (car-x ", "  (define (collision car other-car)\n    (cond [(and (<\
    \ car n) (< other-car n)) 0]\n          [(and (> car n) (< other-car n)) 0]\n\
    \          [(and (> car n) (> other-car n)) 0]\n          [(and (< car n) (> other-car\
    \ n)) 0]\n          [(and (< car n) (< other-car n)) 0]\n          [(and (> car\
    \ n) (> other-car n)) 0]\n          [(and (> car n) (< other-car n)) 0]\n    \
    \      [(and (> car n) (> other-car n)) 0]\n          [(and (< car n) (> other-car\
    \ n)) 0]\n          [(and (> car n) (< other-car n)) 0]\n          [(and (> car\
    \ n) (> other-car n)) 0]\n          [(and (< car n) (< other-car n)) 0]\n    \
    \      [(and (> car n) (> other-car n)) 0]\n          [(and (> car n) (< other-car\
    \ n)) 0]\n          [(and (> car n) (> other-car n)) 0]\n          [(and (< car\
    \ n) (> other-car n)) 0]\n          [(and (> car n) (< other-car n)) 0]\n    \
    \      [(and (> car n) (> other-car n)) 0]\n          [(and (< car n) (< other-car\
    \ n)) 0]\n          [(and (> car n) (> other-car n)) 0]\n          [(and (> car\
    \ n) (< other-car n)) 0]\n          [(and (> car n) (> other-car n)) 0]\n    \
    \      [(and (< car n) (> other-car n)) 0]\n          [(and (> car n) (< other-car\
    \ n)) 0]\n          [(and (> car n) (> other-car n)) 0]\n          [(and (< car\
    \ n) (< other-car n)) 0]\n          [(and (> car n) (> other-car n)) 0]\n    \
    \      [(and (> car n) (< other-car n)) 0]\n          [(and (> car n) (> other-car\
    \ n)) 0]\n          [(and (< car n) (> other-car n)) 0]\n          [(and (> car\
    \ n) (< other-car n)) 0]\n          [(", "  (let ((collisions 0))\n    (for ((i\
    \ n) (j n))\n      (if (= i j)\n          (set! collisions (+ collisions 1))\n\
    \          (set! collisions (+ collisions 0))))))\n", "  (define (collision car1\
    \ car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n      [else\
    \ (+ 1 (collision (- car1 1) car2))]))\n  (define (collide car1 car2)\n    (cond\n\
    \      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n      [else (collision car1\
    \ (- car2 1))]))\n  (define (collides cars)\n    (cond\n      [(null? cars) 0]\n\
    \      [(collide (car cars) (car cars)) (inc (collides (cdr cars)))]\n      [else\
    \ (inc (collides (cdr cars)))]))\n  (define (collides-list cars)\n    (cond\n\
    \      [(null? cars) '()]\n      [(collide (car cars) (car cars)) (cons (car cars)\
    \ (collides-list (cdr cars)))]\n      [else (cons (car cars) (collides-list (cdr\
    \ cars)))]))\n  (define (collides-list-2 cars)\n    (cond\n      [(null? cars)\
    \ '()]\n      [(collide (car cars) (car cars)) (cons (car cars) (collides-list-2\
    \ cars))]\n      [else (cons (car cars) (collides-list-2 cars))]))\n  (define\
    \ (collides-list-3 cars)\n    (cond\n      [(null? cars) '()]\n      [(collide\
    \ (car cars) (car cars)) (cons (car cars) (collides-list-3 cars))]\n      [else\
    \ (cons (car cars) (collides-list-3 cars))]))\n  (define (collides-list-4 cars)\n\
    \    (cond\n      [(null? cars) '()]\n      [(collide (car cars) (car cars)) (cons\
    \ (car cars) (collides-list-4 cars))]\n      [else (cons (car cars) (collides-list-4\
    \ cars))]))\n  (define (collides-list-5 cars)\n    (cond\n      [(null? cars)\
    \ '()]\n      [(collide (car cars) (car cars)) (cons (car cars) (collides-list-5\
    \ cars))]\n      [else (cons (car cars) (collides-list-5 cars))]))\n  (define\
    \ (collides-list-", "  (define (collision x y)\n    (cond ((< x y) 0)\n      \
    \    ((< y n) 0)\n          (else (+ 1 (collision (- x 1) (- y 1))))))\n  (collision\
    \ 0 n))\n", "  (let ((cars (make-array (+ n 1) (list 'car))))\n    (dotimes (i\
    \ n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc 0 (cars cars)))\n\
    \      (set! cars (assoc 1 (cars cars)))\n      (set! cars (assoc 2 (cars cars)))\n\
    \      (set! cars (assoc 3 (cars cars)))\n      (set! cars (assoc 4 (cars cars)))\n\
    \      (set! cars (assoc 5 (cars cars)))\n      (set! cars (assoc 6 (cars cars)))\n\
    \      (set! cars (assoc 7 (cars cars)))\n      (set! cars (assoc 8 (cars cars)))\n\
    \      (set! cars (assoc 9 (cars cars)))\n      (set! cars (assoc 10 (cars cars)))\n\
    \      (set! cars (assoc 11 (cars cars)))\n      (set! cars (assoc 12 (cars cars)))\n\
    \      (set! cars (assoc 13 (cars cars)))\n      (set! cars (assoc 14 (cars cars)))\n\
    \      (set! cars (assoc 15 (cars cars)))\n      (set! cars (assoc 16 (cars cars)))\n\
    \      (set! cars (assoc 17 (cars cars)))\n      (set! cars (assoc 18 (cars cars)))\n\
    \      (set! cars (assoc 19 (cars cars)))\n      (set! cars (assoc 20 (cars cars)))\n\
    \      (set! cars (assoc 21 (cars cars)))\n      (set! cars (assoc 22 (cars cars)))\n\
    \      (set! cars (assoc 23 (cars cars)))\n      (set! cars (assoc 24 (cars cars)))\n\
    \      (set! cars (assoc 25 (cars cars)))\n      (set! cars (assoc 26 (cars cars)))\n\
    \      (set! cars (assoc 27 (cars cars)))\n      (set! cars (assoc 28 (cars cars)))\n\
    \      (set! cars (assoc 29 (cars cars)))\n      (set! cars (assoc 30 (cars cars)))\n\
    \      (set! cars (assoc 31 (cars cars)))\n      (set! cars (assoc 32 (cars cars)))\n\
    \      (set! cars (assoc 33 (cars cars)))\n      (set! cars (", "  (let ((cars\
    \ (make-array n '(list 'car))))\n    (dotimes (i n)\n      (let ((car (car cars)))\n\
    \        (set! car (make-instance 'car))\n        (set! car (car cars))\n    \
    \    (set! car (car cars))\n        (set! car (car cars))\n        (set! car (car\
    \ cars))\n        (set! car (car cars))\n        (set! car (car cars))\n     \
    \   (set! car (car cars))\n        (set! car (car cars))\n        (set! car (car\
    \ cars))\n        (set! car (car cars))\n        (set! car (car cars))\n     \
    \   (set! car (car cars))\n        (set! car (car cars))\n        (set! car (car\
    \ cars))\n        (set! car (car cars))\n        (set! car (car cars))\n     \
    \   (set! car (car cars))\n        (set! car (car cars))\n        (set! car (car\
    \ cars))\n        (set! car (car cars))\n        (set! car (car cars))\n     \
    \   (set! car (car cars))\n        (set! car (car cars))\n        (set! car (car\
    \ cars))\n        (set! car (car cars))\n        (set! car (car cars))\n     \
    \   (set! car (car cars))\n        (set! car (car cars))\n        (set! car (car\
    \ cars))\n        (set! car (car cars))\n        (set! car (car cars))\n     \
    \   (set! car (car cars))\n        (set! car (car cars))\n        (set! car (car\
    \ cars))\n        (set! car (car cars))\n        (set! car (car cars))\n     \
    \   (set! car (car cars))\n        (set! car (car cars))\n        (set! car (car\
    \ cars))\n        (set! car (car cars))\n        (set! car (car cars))\n     \
    \   (set! car (car cars))\n        (set! car (car cars))\n        (set! car (car\
    \ cars))\n        (set! car (car cars))\n        (set! car (car cars))\n     \
    \   (set! car (car cars))", "  (let ([cars (make-array (* n n) '(list 'empty))])\n\
    \    (define (collide x y)\n      (cond\n        ((< x y) 0)\n        ((< y n)\
    \ 0)\n        ((< x n) (< y (+ x 1))) 1))\n    (define (move x y)\n      (set!\
    \ cars (cons (cons x y) cars))\n      (cond\n        ((< x y) 0)\n        ((<\
    \ y n) 0)\n        ((< x n) (< y (+ x 1))) 1))\n    (define (collides x)\n   \
    \   (cond\n        ((< x n) 0)\n        ((< y (+ x 1)) 0)\n        ((< x n) (<\
    \ y (+ x 1))) (+ 1 (car-race (- x 1) (- y 1)))))\n    (define (collides-all x)\n\
    \      (cond\n        ((< x n) 0)\n        ((< y (+ x 1)) 0)\n        ((< x n)\
    \ (< y (+ x 1))) (+ 1 (car-race (- x 1) (- y 1)))))\n    (define (collides-all\
    \ x)\n      (cond\n        ((< x n) 0)\n        ((< y (+ x 1)) 0)\n        ((<\
    \ x n) (< y (+ x 1))) (+ 1 (car-race (- x 1) (- y 1)))))\n    (define (collides-all\
    \ x)\n      (cond\n        ((< x n) 0)\n        ((< y (+ x 1)) 0)\n        ((<\
    \ x n) (< y (+ x 1))) (+ 1 (car-race (- x 1) (- y 1)))))\n    (define (collides-all\
    \ x)\n      (cond\n        ((< x n) 0)\n        ((< y (+ x 1)) 0)\n        ((<\
    \ x n) (< y (+ x 1))) (+ 1 (car-race (- x 1) (- y 1)))))\n    (define (collides-all\
    \ x)\n      (cond\n        ((< x n) 0)\n        ((< y (+ x 1)) 0)\n        ((<\
    \ x n) (< y (+ x 1))) (+ 1 (car-race (- x 1) (- y 1)))))\n    (define (collides-all\
    \ x)\n      (cond\n        ((< x n) 0)\n        ((< y (+ x 1)) 0)\n        ((<\
    \ x n) (< y (+ x 1))) (+ 1 (car-race (- x 1) (- y 1)))))\n    (define ", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (define (collides i j)\n      (< (car-x\
    \ cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n\
    \    (define (collide? i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n   \
    \   (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides i j)\n     \
    \ (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y cars (+\
    \ j 1))))\n    (define (collide? i j)\n      (< (car-x cars) (car-x cars (+ i\
    \ 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides i\
    \ j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collide? i j)\n      (< (car-x cars) (car-x cars\
    \ (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collide? i j)\n      (< (car-x cars) (car-x cars\
    \ (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collide? i j)\n      (< (car-x cars) (car-x cars\
    \ (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collide? i j)\n      (< (car-", "  (let ((cars\
    \ (make-array n '(list 'car)))\n        (collisions '()))\n    (dotimes (i n)\n\
    \      (let ((car (car cars)))\n        (set! car (cons car cars))\n        (set!\
    \ cars (cdr cars))\n        (let ((other-car (car cars)))\n          (if (null?\
    \ other-car)\n              (set! collisions (cons i collisions))\n          \
    \    (set! collisions (cons (car cars) collisions)))))))\n", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (define (collision i j)\n      (if (< i j)\n        \
    \  (if (< (car-x cars) (car-x cars (+ i 1)))\n              (if (< (car-y cars)\
    \ (car-y cars (+ i 1)))\n                  (if (< (car-x cars) (car-x cars (+\
    \ j 1)))\n                      (if (< (car-y cars) (car-y cars (+ j 1)))\n  \
    \                        (if (< (car-x cars (+ i 1)) (+ j 1))\n              \
    \                (if (< (car-y cars (+ i 1)) (+ j 1))\n                      \
    \            (if (< (car-x cars (+ j 1)) (+ i 1))\n                          \
    \            (if (< (car-y cars (+ j 1)) (+ i 1))\n                          \
    \                (if (< (car-x cars (+ i 1)) (+ j 1))\n                      \
    \                        (if (< (car-y cars (+ i 1)) (+ j 1))\n              \
    \                                    (if (< (car-x cars (+ j 1)) (+ i 1))\n  \
    \                                                    (if (< (car-y cars (+ j 1))\
    \ (+ i 1))\n                                                          (if (< (car-x\
    \ cars (+ i 1)) (+ j 1))\n                                                   \
    \           (if (< (car-y cars (+ i 1)) (+ j 1))\n                           \
    \                                       (if (< (car-x cars (+ j 1)) (+ i 1))\n\
    \                                                                      (if (<\
    \ (car-y cars (+ j 1)) (+ i 1))\n                                            \
    \                              (if (< (car-x cars (+ i 1)) (+ j 1))\n        \
    \                                                                      (if (<\
    \ (car-y cars (+ i 1)) (+ j 1))\n                                            \
    \                                      (if (< (car-x cars (+ j 1)) (+ i 1))\n\
    \                                                                            \
    \          (if (< (car-y cars (+ j 1)) (+ i 1))\n                            \
    \                                                              (if (< (car-x cars\
    \ (+ i 1)) (+ j 1))\n                                                        \
    \                                      (if (< (car-y cars (+ i 1)) (+ j 1))\n\
    \                                                                            \
    \                      (if (< (car-x cars (+ j 1)) (+ i 1))\n                \
    \                                                                            \
    \          (if (< (car-y cars (+ j 1)) (+ i 1))\n                            \
    \                                                                            \
    \  (if (< (car-x cars (+ i 1)) (+ j 1))\n                                    \
    \                                                                          (if\
    \ (< (car-y cars (+ i 1)) (+ j 1))\n                                         \
    \                                                                         (if\
    \ (< (car-x cars (+ j 1)) (+ i 1))\n                                         \
    \                                                                            \
    \ (if (< (", "  (let ((cars (make-array n #:element-type 'car)))\n    (define\
    \ (collide i j)\n      (cond ((< i j) (+ (cars i) (cars j)))\n            ((<\
    \ j i) (+ (cars j) (cars i)))\n            (else 0)))\n    (let ((i (- n 1))\n\
    \          (j (- n 1)))\n      (cond ((< i j) (+ i j))\n            ((< j i) (+\
    \ j i))\n            (else (let ((c (collide i j)))\n                       (set!\
    \ cars (set! cars (+ i j) c))\n                       (set! i (+ i 1))\n     \
    \                  (set! j (+ j 1))))))\n    (- cars n)))\n", "  (let ((cars (make-array\
    \ (+ n 1) (list 'car)))\n        (car-collisions (make-array (+ n 1) (list 'car))))\n\
    \    (dotimes (i n)\n      (set! cars (make-array (+ n 1) (list 'car)))\n    \
    \  (set! car-collisions (make-array (+ n 1) (list 'car))))\n    (dotimes (i n)\n\
    \      (set! cars (make-array (+ n 1) (list 'car)))\n      (set! car-collisions\
    \ (make-array (+ n 1) (list 'car))))\n    (dotimes (i n)\n      (set! cars (make-array\
    \ (+ n 1) (list 'car)))\n      (set! car-collisions (make-array (+ n 1) (list\
    \ 'car))))\n    (dotimes (i n)\n      (set! cars (make-array (+ n 1) (list 'car)))\n\
    \      (set! car-collisions (make-array (+ n 1) (list 'car))))\n    (dotimes (i\
    \ n)\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set! car-collisions\
    \ (make-array (+ n 1) (list 'car))))\n    (dotimes (i n)\n      (set! cars (make-array\
    \ (+ n 1) (list 'car)))\n      (set! car-collisions (make-array (+ n 1) (list\
    \ 'car))))\n    (dotimes (i n)\n      (set! cars (make-array (+ n 1) (list 'car)))\n\
    \      (set! car-collisions (make-array (+ n 1) (list 'car))))\n    (dotimes (i\
    \ n)\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set! car-collisions\
    \ (make-array (+ n 1) (list 'car))))\n    (dotimes (i n)\n      (set! cars (make-array\
    \ (+ n 1) (list 'car)))\n      (set! car-collisions (make-array (+ n 1) (list\
    \ 'car))))\n    (dotimes (i n)\n      (set! cars (make-array (+ n 1) (list 'car)))\n\
    \      (set! car-collisions (make-array (+ n 1) (list 'car))))\n    (dotimes (i\
    \ n)\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set! car-collisions\
    \ (make-array (+ n 1) (list 'car))))\n    (dotimes (", "  (define (collision car1\
    \ car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n      [else\
    \ (+ 1 (collision car2 (- car1 car2)))]))\n  (define (collide car1 car2)\n   \
    \ (cond\n      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n      [else (collision\
    \ car1 car2)]))\n  (define (collides cars)\n    (cond\n      [(empty? cars) 0]\n\
    \      [(collide (car cars) (car cars)) (inc (collision (car cars) (car cars)))]\n\
    \      [else (inc (collides (cdr cars)))]))\n  (define (collides-list cars)\n\
    \    (cond\n      [(empty? cars) '()]\n      [(collide (car cars) (car cars))\
    \ (cons (car cars) (collides-list (cdr cars)))]\n      [else (cons (car cars)\
    \ (collides-list (cdr cars)))]))\n  (define (collides-list-helper cars)\n    (cond\n\
    \      [(empty? cars) '()]\n      [(collide (car cars) (car cars)) (cons (car\
    \ cars) (collides-list-helper (cdr cars)))]\n      [else (cons (car cars) (collides-list-helper\
    \ (cdr cars)))]))\n  (define (collides-list-helper-helper cars)\n    (cond\n \
    \     [(empty? cars) '()]\n      [(collide (car cars) (car cars)) (cons (car cars)\
    \ (collides-list-helper-helper (cdr cars)))]\n      [else (cons (car cars) (collides-list-helper-helper\
    \ (cdr cars)))]))\n  (define (collides-list-helper-helper-helper cars)\n    (cond\n\
    \      [(empty? cars) '()]\n      [(collide (car cars) (car cars)) (cons (car\
    \ cars) (collides-list-helper-helper-helper (cdr cars)))]\n      [else (cons (car\
    \ cars) (collides-list-helper-helper-helper (cdr cars)))]))\n  (define (collides-list-helper-helper-helper-helper\
    \ cars)\n    (cond\n      [(empty? cars) '()]\n      [(collide (car cars) (car\
    \ car", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides\
    \ a)\n    (cond ((null? a) 0)\n          ((and (not (null? (cdr a))) (not (null?\
    \ (cdr (cdr a))))) 0)\n          ((and (not (null? (cdr a))) (null? (cdr (cdr\
    \ a))))\n           (if (null? (cdr (cdr a)))\n               (+ 1 (car_race_collision\
    \ (- n 1))) 0))\n          ((and (null? (cdr a)) (null? (cdr (cdr a))))\n    \
    \       (if (null? (cdr (cdr a)))\n               (+ 1 (car_race_collision (-\
    \ n 1))) 0))\n          ((and (not (null? (cdr a))) (null? (cdr (cdr a))))\n \
    \          (if (null? (cdr (cdr a)))\n               (+ 1 (car_race_collision\
    \ (- n 1))) 0))\n          ((and (not (null? (cdr a))) (not (null? (cdr (cdr a)))))\
    \ 0)\n          ((and (not (null? (cdr a))) (null? (cdr (cdr a))))\n         \
    \  (if (null? (cdr (cdr a)))\n               (+ 1 (car_race_collision (- n 1)))\
    \ 0))\n          ((and (null? (cdr a)) (null? (cdr (cdr a))))\n           (if\
    \ (null? (cdr (cdr a)))\n               (+ 1 (car_race_collision (- n 1))) 0))\n\
    \          ((and (not (null? (cdr a))) (not (null? (cdr (cdr a))))) 0)\n     \
    \     ((and (not (null? (cdr a))) (null? (cdr (cdr a))))\n           (if (null?\
    \ (cdr (cdr a)))\n               (+ 1 (car_race_collision (- n 1))) 0))\n    \
    \      ((and (null? (cdr a)) (null? (cdr (cdr a))))\n           (if (null? (cdr\
    \ (cdr a)))\n               (+ 1 (car_race_collision (- n 1))) 0))\n         \
    \ ((and (not (null? (cdr a))) (not (null? (cdr (cdr a))))) 0)\n          ((and\
    \ (not (null? (cdr a))) (null? (cdr (cdr a))))\n           (if (null? (cdr (cdr\
    \ a)))\n               (+ 1", "  (let ((cars (make-array n '(list 'car))))\n \
    \   (dotimes (i n)\n      (set! cars (assoc i cars))\n      (let ((colliding (assoc\
    \ i cars)))\n        (if (null? colliding)\n            (set! cars (cdr cars))\n\
    \            (set! cars (cons (car colliding) (cdr cars)))))))\n", "  (let ((collisions\
    \ 0))\n    (dotimes (i n)\n      (let ((car (make-instance 'car)))\n        (set!\
    \ car.speed 1)\n        (set! car.x 0)\n        (set! car.y 0)\n        (set!\
    \ car.direction 0)\n        (set! car.collided false)\n        (set! car.colliding-to\
    \ 0)\n        (set! car.colliding-with-car (make-instance 'car))\n        (set!\
    \ collisions (+ collisions 1)))\n      (set! car.collided true)\n      (set! car.colliding-to\
    \ (make-instance 'car))\n      (set! collisions (+ collisions 1))\n      (set!\
    \ car.colliding (make-instance 'car))\n      (set! collisions (+ collisions 1))\n\
    \      (set! car.colliding (make-instance 'car))\n      (set! collisions (+ collisions\
    \ 1))\n      (set! car.colliding (make-instance 'car))\n      (set! collisions\
    \ (+ collisions 1))\n      (set! car.colliding (make-instance 'car))\n      (set!\
    \ collisions (+ collisions 1))\n      (set! car.colliding (make-instance 'car))\n\
    \      (set! collisions (+ collisions 1))\n      (set! car.colliding (make-instance\
    \ 'car))\n      (set! collisions (+ collisions 1))\n      (set! car.colliding\
    \ (make-instance 'car))\n      (set! collisions (+ collisions 1))\n      (set!\
    \ car.colliding (make-instance 'car))\n      (set! collisions (+ collisions 1))\n\
    \      (set! car.colliding (make-instance 'car))\n      (set! collisions (+ collisions\
    \ 1))\n      (set! car.colliding (make-instance 'car))\n      (set! collisions\
    \ (+ collisions 1))\n      (set! car.colliding (make-instance 'car))\n      (set!\
    \ collisions (+ collisions 1))\n      (set! car.colliding (make-instance 'car))\n\
    \      (set! collisions (+ collisions 1))\n      (set! car.colliding (make-instance\
    \ 'car))\n      (set! collisions (+ collisions 1))\n      (set! car.colliding\
    \ (make-instance 'car))\n      (set! collisions (+ collisions 1))\n      (set!\
    \ car.colliding (make-instance 'car))\n      (set! collisions (+ collisions 1))\n\
    \      (set! car.colliding (make-instance 'car", "  (let ((cars (make-array n\
    \ '(list 'car)))\n        (collisions '()))\n    (for ((i 0) (< n 0))\n      (let\
    \ ((car (car cars)))\n        (set! cars (cdr cars))\n        (set! collisions\
    \ (cons car collisions))\n        (set! cars (cons (car cars) cars))\n       \
    \ (set! i (+ i 1))\n        (if (< i n)\n            (let ((car (car cars)))\n\
    \              (set! collisions (cons car collisions))\n              (set! cars\
    \ (cons (car cars) cars))\n              (set! i (+ i 1))))))\n    (length collisions)))\n",
  "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars\
    \ (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i\
    \ cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (asso",
  "  (define (collision car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(>\
    \ car1 car2) 1]\n      [else (+ collision (car1 car2) (car2 car1))]))\n  (define\
    \ (collisions cars)\n    (cond\n      [(null? cars) 0]\n      [(< cars (car cars))\
    \ 0]\n      [(> (car cars) (cars (cdr cars))) 0]\n      [else (+ collisions (car\
    \ (car cars)) (cars (cdr cars)))]))\n  (define (collision-count cars)\n    (cond\n\
    \      [(null? cars) 0]\n      [(< cars (car cars)) 0]\n      [(> (car cars) (cars\
    \ (cdr cars))) 0]\n      [else (+ collision-count (cars (cdr cars)))]))\n  (define\
    \ (collision-counts cars)\n    (cond\n      [(null? cars) '()]\n      [(< cars\
    \ (car cars)) '()]\n      [(> (car cars) (cars (cdr cars))) '()]\n      [else\
    \ (cons (collision-count (car cars)) (collision-counts (cdr cars)))]))\n  (define\
    \ (collision-counts-list cars)\n    (cond\n      [(null? cars) '()]\n      [(<\
    \ cars (car cars)) '()]\n      [(> (car cars) (cars (cdr cars))) '()]\n      [else\
    \ (cons (collision-counts (car cars)) (collision-counts-list (cdr cars)))]))\n\
    \  (define (collision-counts-list-list cars)\n    (cond\n      [(null? cars) '()]\n\
    \      [(< cars (car cars)) '()]\n      [(> (car cars) (cars (cdr cars))) '()]\n\
    \      [else (cons (collision-counts-list (car cars)) (collision-counts-list-list\
    \ (cdr cars)))]))\n  (define (collision-counts-list-list-list cars)\n    (cond\n\
    \      [(null? cars) '()]\n      [(< cars (car cars)) '()]\n      [(> (car cars)\
    \ (cars (cdr cars))) '()]\n      [else (cons (collision-counts-list-list (car\
    \ cars)) (collision-counts-list-list-list (cdr cars)))]))\n  (define (collision-counts-",
  "  (define (collision car1 car2)\n    (cond\n      [(and (< car1 car2) (< car2 car1))\n\
    \       (+ n 1)]\n      [(and (< car1 car2) (< car2 car1))\n       (+ n 0)]\n\
    \      [(and (< car1 car2) (< car2 car1))\n       (+ n -1)]\n      [else\n   \
    \    (+ n 0)]))\n  (define (collide car1 car2)\n    (cond\n      [(and (< car1\
    \ car2) (< car2 car1))\n       (collision car1 car2)]\n      [(and (< car1 car2)\
    \ (< car2 car1))\n       (collision car1 car2)]))\n  (define (collides cars)\n\
    \    (cond\n      [(null? cars)\n       0]\n      [(collide (car cars) (car cars))\n\
    \       (+ 1 (collides (cdr cars)))]))\n  (collides n))\n", "  (define (collision\
    \ x y)\n    (cond\n      [(and (< x n) (< y n)) 0]\n      [(and (< y n) (< x n))\
    \ 0]\n      [else (+ 1 (collision (- x 1) (- y 1)))]))\n  (collision n n))\n",
  "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars\
    \ (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i\
    \ cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (asso",
  "  (define (collides x1 x2)\n    (< (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n\
    \  (define (collides-left x1 x2)\n    (< (abs (- x1 x2))\n       (/ (- x1 x2)\
    \ n)))\n  (define (collides-right x1 x2)\n    (< (abs (- x1 x2))\n       (/ (-\
    \ x1 x2) n)))\n  (define (collides-left x1 x2)\n    (< (abs (- x1 x2))\n     \
    \  (/ (- x1 x2) n)))\n  (define (collides-right x1 x2)\n    (< (abs (- x1 x2))\n\
    \       (/ (- x1 x2) n)))\n  (define (collides-left x1 x2)\n    (< (abs (- x1\
    \ x2))\n       (/ (- x1 x2) n)))\n  (define (collides-right x1 x2)\n    (< (abs\
    \ (- x1 x2))\n       (/ (- x1 x2) n)))\n  (define (collides-left x1 x2)\n    (<\
    \ (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n  (define (collides-right x1 x2)\n\
    \    (< (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n  (define (collides-left x1\
    \ x2)\n    (< (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n  (define (collides-right\
    \ x1 x2)\n    (< (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n  (define (collides-left\
    \ x1 x2)\n    (< (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n  (define (collides-right\
    \ x1 x2)\n    (< (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n  (define (collides-left\
    \ x1 x2)\n    (< (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n  (define (collides-right\
    \ x1 x2)\n    (< (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n  (define (collides-left\
    \ x1 x2)\n    (< (abs (- x1 x2))\n       (/ (- x1 x2) n)))\n  (", "  (let ((cars\
    \ (make-array n '(list 'car))))\n    (define (collision i j)\n      (cond\n  \
    \      ((= i j) 0)\n        ((< i j) (+ 1 (car-race (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car\
    \ cars) (car cars) (car ", "  (let ((cars (make-array n #:element-type 'car)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (< (car y) (car x)))\n\
    \    (define (collide? x y)\n      (< (car x) (car y)) (", "  (let ((cars (make-array\
    \ n #:element-type 'car)))\n    (define (collide a b)\n      (< (car-speed a)\
    \ (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a)\
    \ (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a)\
    \ (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a)\
    \ (car-speed b))\n      (< (car-speed b) (car-speed a)))\n    (define (collides\
    \ i j)\n      (and (< i j)\n           (< j (+ i n))\n           (< i (+ j n))))\n\
    \    (define (collide? a b)\n      (and (< a b)\n           (< b (+ a n))\n  \
    \         (< a (+ b n))))\n    (define (collides i j)\n      (and (< i j)\n  \
    \         (< j (+ i n))\n           (< i (+ j n))))\n    (define (collide? a b)\n\
    \      (and (< a b)\n           (< b (+ a n))\n           (< a (+ b n))))\n  \
    \  (define (collides i j)\n      (and (< i j)\n           (< j (+ i n))\n    \
    \       (< i (+ j n))))\n    (define (collide? a b)\n      (and (< a b)\n    \
    \       (< b (+ a n))\n           (< a (+ b n))))\n    (define (collides i j)\n\
    \      (and (< i j)\n           (< j (+ i n))\n           (< i (+ j n))))\n  \
    \  (define (collide? a b)\n      (and (< a b)\n           (< b (+ a n))\n    \
    \       (< a (+ b n))))\n    (define (collides i j)\n      (and (< i j)\n    \
    \       (< j (+ i n))\n           (< i (+ j n))))\n    (define (collide? a b)\n\
    \      (and (< a b)\n           (< b (+ a n))\n           (< a (+ b n))))\n  \
    \  (define (collides i j)\n      (and (< i j)\n           (< j (+ i n))\n    \
    \       (< i (+ j n))))\n    (define (collide? a b)\n      (and (< a b)\n    \
    \       (< b (+ a n))\n           (< a (+ b n))))\n    (define (collides i j)\n\
    \      (", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides\
    \ a)\n    (filter (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-count\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-2\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-3\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-4\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-5\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-6\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-7\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-8\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-9\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-10\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-11\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-12\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-13\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-14\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-count-15\
    \ a)", "  (let ((cars (make-array n #:element-type 'car)))\n    (define (collide\
    \ x y)\n      (< (car-x x) (- car-x y))\n      (< (car-y x) (- car-y y))\n   \
    \   (< (car-x y) (- car-x y))\n      (< (car-y y) (- car-y y)))\n    (define (collides\
    \ i j k)\n      (and (collide (car-x cars) (car-x cars (+ i 1)))\n           (collide\
    \ (car-y cars) (car-y cars (+ j 1)))\n           (collide (car-x cars (+ i 1))\
    \ (+ k 1))\n           (collide (car-y cars (+ j 1)) (+ k 1))))\n    (define (collides-2\
    \ i j k)\n      (and (collide (car-x cars) (car-x cars (+ i 1)))\n           (collide\
    \ (car-y cars) (car-y cars (+ j 1)))\n           (collide (car-x cars (+ i 1))\
    \ (+ k 1))\n           (collide (car-y cars (+ j 1)) (+ k 1))))\n    (define (collides-3\
    \ i j k)\n      (and (collide (car-x cars) (car-x cars (+ i 1)))\n           (collide\
    \ (car-y cars) (car-y cars (+ j 1)))\n           (collide (car-x cars (+ i 1))\
    \ (+ k 1))\n           (collide (car-y cars (+ j 1)) (+ k 1))))\n    (define (collides-4\
    \ i j k)\n      (and (collide (car-x cars) (car-x cars (+ i 1)))\n           (collide\
    \ (car-y cars) (car-y cars (+ j 1)))\n           (collide (car-x cars (+ i 1))\
    \ (+ k 1))\n           (collide (car-y cars (+ j 1)) (+ k 1))))\n    (define (collides-5\
    \ i j k)\n      (and (collide (car-x cars) (car-x cars (+ i 1)))\n           (collide\
    \ (car-y cars) (car-y cars (+ j 1)))\n           (collide (car-x cars (+ i 1))\
    \ (+ k 1))\n           (collide (car-y cars (+ j 1)) (+ k 1))))\n    (define (collides-6\
    \ i j k)", "  (let ((cars (make-array n '(lambda (x) (make-array n '(lambda (y)\
    \ (+ x y)))))\n        (car-speed (make-array n '(lambda (x) (* x 2)))))\n   \
    \ (define (collide x y)\n      (< (+ x y) n))\n    (define (collides i j)\n  \
    \    (and (<= i j)\n           (and (<= (+ i 1) n)\n                (<= (+ j 1)\
    \ n)\n                (and (<= (+ i 1) n)\n                     (<= (+ j 1) n)\n\
    \                     (and (<= (+ i 1) n)\n                          (<= (+ j\
    \ 1) n)\n                          (and (<= (+ i 1) n)\n                     \
    \           (<= (+ j 1) n)\n                                (and (<= (+ i 1) n)\n\
    \                                      (<= (+ j 1) n)\n                      \
    \                (and (<= (+ i 1) n)\n                                       \
    \     (<= (+ j 1) n)\n                                            (and (<= (+\
    \ i 1) n)\n                                                  (<= (+ j 1) n)\n\
    \                                                  (and (<= (+ i 1) n)\n     \
    \                                                   (<= (+ j 1) n)\n         \
    \                                               (and (<= (+ i 1) n)\n        \
    \                                                      (<= (+ j 1) n)\n      \
    \                                                        (and (<= (+ i 1) n)\n\
    \                                                                    (<= (+ j\
    \ 1) n)\n                                                                    (and\
    \ (<= (+ i 1) n)\n                                                           \
    \               (<= (+ j 1) n)\n                                             \
    \                             (and (<= (+ i 1) n)\n                          \
    \                                                    (<= (+ j 1) n)\n        \
    \                                                                      (and (<=\
    \ (+ i 1) n)\n                                                               \
    \                      (<= (+ j 1) n)\n                                      \
    \                                               (and (<= (+ i 1) n)\n        \
    \                                                                            \
    \      (<= (+ j 1) n)\n                                                      \
    \                                    (and (<= (+ i 1) n)\n                   \
    \                                                                            \
    \ (<= (+ j 1) n)\n                                                           \
    \                                     (and (<= (+ i 1) n)\n                  \
    \                                                                            \
    \        (<= (+ j 1) n)\n                                                    \
    \                                                  (and (<= (+ i 1) n)\n     \
    \                                                                            \
    \                            (<= (+ j 1) n)\n                                \
    \                                                                            \
    \ (and (<= (+ i 1) n)\n                                                      \
    \                                                            (<= (+ j 1) n)\n\
    \                                                                            \
    \                                      (and (<= (+ i 1) n)\n                 \
    \                                                                            \
    \                           (<= (+ j 1) n)\n                                 \
    \                                                                            \
    \           (and (<= (+ i 1) n)\n                                            \
    \                                                                            \
    \      (<= (+ j 1) n)\n                                                      \
    \                                                                        (and\
    \ (<= (+ i 1) n)\n                                                           \
    \                                                                         (<=\
    \ (+ j 1) n)\n                                                               \
    \                                                                     (and (<=\
    \ (+ i 1) n)\n                                                               \
    \                                                                       (<= (+\
    \ j 1) n)", "  (let ((cars (make-array n '(list 'car))))\n    (define (collide\
    \ x y)\n      (< (car x) (car y))\n      (< (car y) (car x)))\n    (let loop ((i\
    \ 0))\n      (if (< i n)\n          (if (collide (car cars) (car cars))\n    \
    \          (loop (+ i 1))\n              (loop (+ i 1))))\n      0)))\n", "  (let\
    \ ([cars (make-array (list n (make-array '(list 'car)))\n                    \
    \    :initial-contents '((car (make-instance 'car)))])\n        (collisions '()))\n\
    \    (do ([i 0 (+ i 1)])\n        ((< i n) collisions)\n      (let ([car (cars\
    \ i)])\n        (do ([j i (+ j 1)])\n            ((< j n) collisions)\n      \
    \    (let ([other-car (cars j)])\n            (if (and (> (car car) (car other-car))\n\
    \                     (< (car car) (other-car)))\n                ;; Collision\
    \ happens\n                (let ([collision (+ collisions 1)])\n             \
    \     (set! collision (car-race (car car) (other-car other-car)))\n          \
    \        (set! collision (car-race other-car car))\n                  (set! collision\
    \ (car-race (car car) other-car))\n                  (set! collision (car-race\
    \ other-car car))\n                  (set! collision (car-race (car car) (car\
    \ other-car)))\n                  (set! collision (car-race (car car) (other-car\
    \ other-car)))\n                  (set! collision (car-race other-car car))\n\
    \                  (set! collision (car-race (car car) (car other-car)))\n   \
    \               (set! collision (car-race (car car) (other-car other-car)))\n\
    \                  (set! collision (car-race other-car car))\n               \
    \   (set! collision (car-race (car car) (car other-car)))\n                  (set!\
    \ collision (car-race (car car) (other-car other-car)))\n                  (set!\
    \ collision (car-race other-car car))\n                  (set! collision (car-race\
    \ (car car) (other-car other-car)))\n                  (set! collision (car-race\
    \ (car car) (other-car other-car)))\n                  (set! collision (car-race\
    \ other-car car))\n                  (set! collision (car-race (car car) (other-car\
    \ other-car)))\n                  (set! collision (car-race (car car) (other-car\
    \ other-car)))\n                  (set! collision (car-race ", "  (define (collision\
    \ car1 car2)\n    (cond\n      [(< (car-speed car1) (car-speed car2)) 0]\n   \
    \   [(> (car-speed car1) (car-speed car2)) 1]\n      [(= (car-speed car1) (car-speed\
    \ car2)) 0]\n      [else (+ 1 (collision car1 (car-next car2)))]))\n  (cond\n\
    \    [(< n 0) 0]\n    [else (+ 1 (collision (car-next (car-head n))\n        \
    \                 (car-next (car-head (car-tail n))))\n               (collision\
    \ (car-next (car-head (car-tail n)))\n                         (car-next (car-head\
    \ n)))\n               (collision (car-next (car-head n))\n                  \
    \       (car-next (car-head (car-tail n))))\n               (collision (car-next\
    \ (car-head (car-tail n)))\n                         (car-next (car-head (car-tail\
    \ n))))\n               (collision (car-next (car-head (car-tail n)))\n      \
    \                   (car-next (car-head (car-tail n))))\n               (collision\
    \ (car-next (car-head (car-tail n)))\n                         (car-next (car-head\
    \ (car-tail n))))\n               (collision (car-next (car-head (car-tail n)))\n\
    \                         (car-next (car-head (car-tail n))))\n              \
    \ (collision (car-next (car-head (car-tail n)))\n                         (car-next\
    \ (car-head (car-tail n))))\n               (collision (car-next (car-head (car-tail\
    \ n)))\n                         (car-next (car-head (car-tail n))))\n       \
    \        (collision (car-next (car-head (car-tail n)))\n                     \
    \    (car-next (car-head (car-tail n))))\n               (collision (car-next\
    \ (car-head (car-tail n)))\n                         (car-next (car-head (car-tail\
    \ n))))\n               (collision (car-next (car-head (car-tail n)))\n      \
    \                   (car-next (car-head (car-tail n))))\n               (collision",
  "  (define (collide a b)\n    (cond\n      [(< a b) (+ a b)] [(> a b) (+ b a)]\n\
    \      [(< b a) (+ b a)] [(> b a) (+ a b)]\n      [(< a b) (+ a b)] [(> a b) (+\
    \ b a)]\n      [(< b a) (+ b a)] [(> b a) (+ a b)]))\n  (define (collides n a\
    \ b)\n    (cond\n      [(< a b) (+ a b)] [(> a b) (+ b a)]\n      [(< b a) (+\
    \ b a)] [(> b a) (+ a b)]))\n  (define (collides-2 n a b)\n    (cond\n      [(<\
    \ a b) (+ a b)] [(> a b) (+ b a)]\n      [(< b a) (+ b a)] [(> b a) (+ a b)]))\n\
    \  (define (collides-3 n a b)\n    (cond\n      [(< a b) (+ a b)] [(> a b) (+\
    \ b a)]\n      [(< b a) (+ b a)] [(> b a) (+ a b)]))\n  (define (collides-4 n\
    \ a b)\n    (cond\n      [(< a b) (+ a b)] [(> a b) (+ b a)]\n      [(< b a) (+\
    \ b a)] [(> b a) (+ a b)]))\n  (define (collides-5 n a b)\n    (cond\n      [(<\
    \ a b) (+ a b)] [(> a b) (+ b a)]\n      [(< b a) (+ b a)] [(> b a) (+ a b)]))\n\
    \  (define (collides-6 n a b)\n    (cond\n      [(< a b) (+ a b)] [(> a b) (+\
    \ b a)]\n      [(< b a) (+ b a)] [(> b a) (+ a b)]))\n  (define (collides-7 n\
    \ a b)\n    (cond\n      [(< a b) (+ a b)] [(> a b) (+ b a)]\n      [(< b a) (+\
    \ b a)] [(> b a) (+ a b)]))\n  (define (collides-8 n a b)\n    (cond\n      [(<\
    \ a b) (+ a b)] [(> a b) (+ b a)]\n      [(< b a) (+ b a)] ", "  (let ([cars (make-array\
    \ n #:initial-contents '(#t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (let\
    \ ([cars (make-array (* n n) '(list 'empty))])\n    (define (collision i j)\n\
    \      (let ([car (cars i j)]\n            [other-car (cars ((+ i 1) j) ((+ j\
    \ 1) i))]\n            [other-other-car (cars ((+ i 1) j) ((+ j 1) i))]\n    \
    \        [other-other-other-car (cars ((+ i 1) j) ((+ j 1) i))])\n        (cond\n\
    \          [(and (empty? car) (empty? other-car)) 0]\n          [(and (empty?\
    \ car) (empty? other-other-car)) 0]\n          [(and (empty? car) (empty? other-other-other-car))\
    \ 0]\n          [else (+ 1 (collision other-other-other-car (+ j 1))\n       \
    \              (collision other-other-car (+ i 1))\n                     (collision\
    \ other-car (+ i 1))\n                     (collision other-car (+ j 1)))]\n \
    \         )))\n    (let ([i (- n 1)])\n      (cond\n        [(< i 0) 0]\n    \
    \    [else (+ 1 (collision i 0))]\n        ))\n    ))\n", "  (let ((cars (make-array\
    \ (list n (make-array '(list 'car))))))\n    (define (collision i j)\n      (cond\
    \ ((= i j) 0)\n            ((and (< (car cars) (car cars (+ i 1)))\n         \
    \          (< (car cars (+ i 1)) (+ j 1)))\n             (+ (car cars) (car cars\
    \ (+ i 1)))\n             (+ (car cars (+ i 1)) (+ j 1)))\n            (else (collision\
    \ (+ i 1) (+ j 1)))))\n    (define (collide i j)\n      (cond ((= i j) 0)\n  \
    \          ((and (< (car cars) (car cars (+ i 1)))\n                   (< (car\
    \ cars (+ i 1)) (+ j 1)))\n             (collision (+ i 1) (+ j 1))\n        \
    \     (collision (+ i 1) (+ j 1))))\n    (define (collides i j)\n      (cond ((=\
    \ i j) 0)\n            ((and (< (car cars) (car cars (+ i 1)))\n             \
    \      (< (car cars (+ i 1)) (+ j 1)))\n             (collide (+ i 1) (+ j 1))\n\
    \             (collide (+ i 1) (+ j 1))))\n    (define (collides-in i j)\n   \
    \   (cond ((= i j) 0)\n            ((and (< (car cars) (car cars (+ i 1)))\n \
    \                  (< (car cars (+ i 1)) (+ j 1)))\n             (collides (+\
    \ i 1) (+ j 1))\n             (collides (+ i 1) (+ j 1))))\n    (define (collides-in\
    \ i j)\n      (cond ((= i j) 0)\n            ((and (< (car cars) (car cars (+\
    \ i 1)))\n                   (< (car cars (+ i 1)) (+ j 1)))\n             (collides-in\
    \ (+ i 1) (+ j 1))\n             (collides-in (+ i 1) (+ j 1))))\n    (define\
    \ (collides-in i j)\n      (cond ((= i j) 0)\n            ((and (< (car cars)\
    \ (car cars (+ i 1)))\n                   (< (car cars (+ i 1)) (+ j 1)))\n  \
    \           (collides-in (+ i 1) (+ j 1))\n             (collides-in (+ i 1) (+\
    \ j 1))))\n    (define (collides-in i j)\n      (cond ((= i j) 0)\n          \
    \  ", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n     \
    \ (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars\
    \ (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i\
    \ cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (asso", "  (let ((cars (make-array n '(list 'car))))\n    (define (collide\
    \ i j)\n      (cond ((< i j) (+ (cars i) (cars j)))\n            (else (+ (cars\
    \ j) (cars i))))\n    (let loop ((i n) (j n))\n      (cond ((< i j) (loop (+ i\
    \ 1) j))\n            (else (loop (+ j 1) i))))\n    (let ((collisions (loop (+\
    \ n 1) n)))\n      (if (= n 0)\n          0\n          (+ 1 (cars collisions))))))\n",
  "  (define (collide x y)\n    (cond\n      [(< x y) 0]\n      [(= x y) 1]\n    \
    \  [(> x y) 2]\n      [(= y x) 3]\n      [(< y x) 4]\n      [(> y x) 5]\n    \
    \  [(= x y) 6]\n      [(< x y) 7]\n      [(> x y) 8]\n      [(= y x) 9]\n    \
    \  [(< y x) 10]\n      [(> y x) 11]\n      [(= x y) 12]\n      [(< x y) 13]\n\
    \      [(> x y) 14]\n      [(= y x) 15]\n      [(< y x) 16]\n      [(> y x) 17]\n\
    \      [(= x y) 18]\n      [(< x y) 19]\n      [(> x y) 20]\n      [(= y x) 21]\n\
    \      [(< y x) 22]\n      [(> y x) 23]\n      [(= x y) 24]\n      [(< x y) 25]\n\
    \      [(> x y) 26]\n      [(= y x) 27]\n      [(< y x) 28]\n      [(> y x) 29]\n\
    \      [(= x y) 30]\n      [(< x y) 31]\n      [(> x y) 32]\n      [(= y x) 33]\n\
    \      [(< y x) 34]\n      [(> y x) 35]\n      [(= x y) 36]\n      [(< x y) 37]\n\
    \      [(> x y) 38]\n      [(= y x) 39]\n      [(< y x) 40]\n      [(> y x) 41]\n\
    \      [(= x y) 42]\n      [(< x y) 43]\n      [(> x y) 44]\n      [(= y x) 45]\n\
    \      [(< y x) 46]\n      [(> y x) 47]\n      [(= x y) 48]\n      [(< x y) 49]\n\
    \      [(> x y) 50]\n      [(= y x) 51]\n      [(< y x) 52]\n      [(> y x) 53]\n\
    \      [(= x y) 54]\n      [(< x y) 55]\n      [(> x y) 56]\n      [(= y x) 57]\n\
    \      [(< y x) 58]\n      [(> y x) 59]\n      [(= x y) 60]\n      [(< x y) 61]\n\
    \      [(> x y) 62]\n      [(= y x) 63]\n", "  (define (collision car1 car2)\n\
    \    (cond\n      [(and (< car1 car2) (< car2 car1)) 0]\n      [(and (< car1 car2)\
    \ (< car2 car2)) (+ n 1)]\n      [else (+ n 0)]))\n  (define (collides car1 car2)\n\
    \    (cond\n      [(and (< car1 car2) (< car2 car1)) 0]\n      [(and (< car1 car2)\
    \ (< car2 car2)) (collision car1 car2)]\n      [else (collision car1 car2)]))\n\
    \  (define (collides-all cars)\n    (cond\n      [(empty? cars) 0]\n      [(collides\
    \ (first cars) (first cars)) 1]\n      [else (+ collides-all (rest cars))]))\n\
    \  (define (collides-all-pairs cars)\n    (cond\n      [(empty? cars) 0]\n   \
    \   [(collides (first cars) (first cars)) 1]\n      [else (+ collides-all-pairs\
    \ (rest cars))]))\n  (define (collides-all-pairs-all cars)\n    (cond\n      [(empty?\
    \ cars) 0]\n      [(collides-all (first cars)) (+ collides-all-pairs-all (rest\
    \ cars))]\n      [else (+ collides-all-pairs-all (rest cars))]))\n  (define (collides-all-pairs-all-pairs\
    \ cars)\n    (cond\n      [(empty? cars) 0]\n      [(collides-all (first cars))\
    \ (+ collides-all-pairs-all (rest cars))]\n      [else (+ collides-all-pairs-all\
    \ (rest cars))]))\n  (define (collides-all-pairs-all-pairs-all cars)\n    (cond\n\
    \      [(empty? cars) 0]\n      [(collides-all (first cars)) (+ collides-all-pairs-all\
    \ (rest cars))]\n      [else (+ collides-all-pairs-all (rest cars))]))\n  (define\
    \ (collides-all-pairs-all-pairs-all-pairs cars)\n    (cond\n      [(empty? cars)\
    \ 0]\n      [(collides-all (first cars)) (+ collides-all-pairs-all (rest cars))]\n\
    \      [else (+ collides-all-pairs-all (rest cars))]))\n  (define (collides-all-pairs-all-pairs-all-pairs-all ",
  "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars\
    \ (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i\
    \ cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (asso",
  "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides a-list b-list)\n\
    \    (cond ((null? a-list) 0)\n          ((null? b-list) 0)\n          ((and (<\
    \ (car a-list) (car b-list))\n               (collide (car a-list) (car b-list)))\n\
    \           (+ 1 (collides (cdr a-list) (cdr b-list))))\n          (else (collides\
    \ (cdr a-list) (cdr b-list)))))\n  (define (collides a-list b-list)\n    (cond\
    \ ((null? a-list) 0)\n          ((null? b-list) 0)\n          ((and (< (car a-list)\
    \ (car b-list))\n               (collide (car a-list) (car b-list)))\n       \
    \    (+ 1 (collides (cdr a-list) (cdr b-list))))\n          (else (collides (cdr\
    \ a-list) (cdr b-list)))))\n  (define (collides a-list b-list)\n    (cond ((null?\
    \ a-list) 0)\n          ((null? b-list) 0)\n          ((and (< (car a-list) (car\
    \ b-list))\n               (collide (car a-list) (car b-list)))\n           (+\
    \ 1 (collides (cdr a-list) (cdr b-list))))\n          (else (collides (cdr a-list)\
    \ (cdr b-list)))))\n  (define (collides a-list b-list)\n    (cond ((null? a-list)\
    \ 0)\n          ((null? b-list) 0)\n          ((and (< (car a-list) (car b-list))\n\
    \               (collide (car a-list) (car b-list)))\n           (+ 1 (collides\
    \ (cdr a-list) (cdr b-list))))\n          (else (collides (cdr a-list) (cdr b-list)))))\n\
    \  (define (collides a-list b-list)\n    (cond ((null? a-list) 0)\n          ((null?\
    \ b-list) 0)\n          ((and (< (car a-list) (car b-list))\n               (collide\
    \ (car a-list) (car b-list)))\n           (+ 1 (collides (cdr a-list) (cdr b-list))))\n\
    \          (else (collides (cdr a-list) (cdr b-list)))))\n  (define (collides\
    \ a-list b-", "  (define (collision-count a b)\n    (cond\n      [(< a b) (+ a\
    \ b)]\n      [else 0]))\n  (define (collide a b)\n    (cond\n      [(< a b) (+\
    \ a b)]\n      [else 0]))\n  (define (collides a)\n    (cond\n      [(< a n) (+\
    \ a n)]\n      [else 0]))\n  (define (collides-left a b)\n    (cond\n      [(<\
    \ a b) (+ a b)]\n      [else 0]))\n  (define (collides-right a b)\n    (cond\n\
    \      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-left a b)\n  \
    \  (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-right\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-left\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-right\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-left\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-right\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-left\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-right\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-left\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-right\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-left\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-right\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n      [else 0]))\n  (define (collides-left\
    \ a b)\n    (cond\n      [(< a b) (+ a b)]\n", "  (define (collision-count a b)\n\
    \    (cond\n      [(< a b) (+ a b)]\n      [(> a b) (+ b a)]\n      [else 0]))\n\
    \  (define (collision-count-helper a b count)\n    (cond\n      [(< a b) (collision-count-helper\
    \ (+ a b) b count)\n       (collision-count-helper a b (+ count 1))]\n      [(>\
    \ a b) (collision-count-helper (+ b a) a count)\n       (collision-count-helper\
    \ a b (+ count 1))]\n      [else count]))\n  (define (collision-count-helper-helper\
    \ a b count count)\n    (cond\n      [(< a b) (collision-count-helper-helper (+\
    \ a b) b count count)\n       (collision-count-helper-helper a b (+ count 1) count)]\n\
    \      [(> a b) (collision-count-helper-helper (+ b a) a count count)\n      \
    \ (collision-count-helper-helper a b (+ count 1) count)]\n      [else count]))\n\
    \  (define (collision-count-helper-helper-helper a b count count)\n    (cond\n\
    \      [(< a b) (collision-count-helper-helper-helper (+ a b) b count count)\n\
    \       (collision-count-helper-helper-helper a b (+ count 1) count)]\n      [(>\
    \ a b) (collision-count-helper-helper-helper (+ b a) a count count)\n       (collision-count-helper-helper-helper\
    \ a b (+ count 1) count)]\n      [else count]))\n  (define (collision-count-helper-helper-helper-helper\
    \ a b count count)\n    (cond\n      [(< a b) (collision-count-helper-helper-helper-helper\
    \ (+ a b) b count count)\n       (collision-count-helper-helper-helper-helper\
    \ a b (+ count 1) count)]\n      [(> a b) (collision-count-helper-helper-helper-helper\
    \ (+ b a) a count count)\n       (collision-count-helper-helper-helper-helper\
    \ a b (+ count 1) count)]\n      [else count]))\n  (define (collision-count-helper-helper-helper-helper-helper\
    \ a b count count)\n    (cond\n      [(< a b) (collision-count-helper-helper-helper-helper-helper\
    \ (+ a b) b count count)\n       (collision", "  (let ((cars (make-array n #:element-type\
    \ 'car)))\n    (define (collide a b)\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a)))\n    (define (collide? a b)\n      (or\
    \ (collide a b)\n          (collide b a)))\n    (define (collides a)\n      (cond\
    \ ((null? a) 0)\n            ((collide? (car a) (car a)) (+ 1 (car-race (car a))))\n\
    \            (else (+ 1 (car-race (car a))))))\n    (define (collides a)\n   \
    \   (cond ((null? a) 0)\n            ((collide? (car a) (car a)) (+ 1 (car-race\
    \ (car a))))\n            (else (+ 1 (car-race (car a))))))\n    (define (collides\
    \ a)\n      (cond ((null? a) 0)\n            ((collide? (car a) (car a)) (+ 1\
    \ (car-race (car a))))\n            (else (+ 1 (car-race (car a))))))\n    (define\
    \ (collides a)\n      (cond ((null? a) 0)\n            ((collide? (car a) (car\
    \ a)) (+ 1 (car-race (car a))))\n            (else (+ 1 (car-race (car a))))))\n\
    \    (define (collides a)\n      (cond ((null? a) 0)\n            ((collide? (car\
    \ a) (car a)) (+ 1 (car-race (car a))))\n            (else (+ 1 (car-race (car\
    \ a))))))\n    (define (collides a)\n      (cond ((null? a) 0)\n            ((collide?\
    \ (car a) (car a)) (+ 1 (car-race (car a))))", "  (define (collide x y)\n    (cond\n\
    \      [(< (- x y) n) 0]\n      [(> (- x y) n) 1]\n      [else (+ 1 (collide (-\
    \ x y) y))]))\n  (define (collides xs ys)\n    (cond\n      [(empty? xs) 0]\n\
    \      [(empty? ys) 0]\n      [(< (first xs) (first ys)) (+ 1 (collides (rest\
    \ xs) (rest ys)))]\n      [else (+ 1 (collides (rest xs) ys))]))\n  (collides\
    \ xs ys))\n", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides\
    \ a-list)\n    (filter (lambda (a) (not (null? a-list)))\n            (map (lambda\
    \ (a) (cons (car a-list) a-list))\n                  a-list)))\n  (define (collides-list\
    \ a-list)\n    (map (lambda (a) (cons (car a-list) a-list))\n          a-list))\n\
    \  (define (collides-list-2 a-list)\n    (map (lambda (a) (cons (car a-list) a-list))\n\
    \          a-list))\n  (define (collides-list-3 a-list)\n    (map (lambda (a)\
    \ (cons (car a-list) a-list))\n          a-list))\n  (define (collides-list-4\
    \ a-list)\n    (map (lambda (a) (cons (car a-list) a-list))\n          a-list))\n\
    \  (define (collides-list-5 a-list)\n    (map (lambda (a) (cons (car a-list) a-list))\n\
    \          a-list))\n  (define (collides-list-6 a-list)\n    (map (lambda (a)\
    \ (cons (car a-list) a-list))\n          a-list))\n  (define (collides-list-7\
    \ a-list)\n    (map (lambda (a) (cons (car a-list) a-list))\n          a-list))\n\
    \  (define (collides-list-8 a-list)\n    (map (lambda (a) (cons (car a-list) a-list))\n\
    \          a-list))\n  (define (collides-list-9 a-list)\n    (map (lambda (a)\
    \ (cons (car a-list) a-list))\n          a-list))\n  (define (collides-list-10\
    \ a-list)\n    (map (lambda (a) (cons (car a-list) a-list))\n          a-list))\n\
    \  (define (collides-list-11 a-list)\n    (map (lambda (a) (cons (car a-list)\
    \ a-list))\n          a-list))\n  (define (collides-list-12 a-list)\n    (map\
    \ (lambda (a) (cons (car a-list) a-list))\n          a-list))\n  (define (collides-list-13\
    \ a-list)\n    (map (lambda (a) (cons (car a-list) a-list))\n          a-list))\n\
    \  (define (collides-list-14 a-list)\n    (map (lambda (a) (cons (car a-list)\
    \ a-list))\n          a-list))\n  (define (collides-list-15 a-list)\n    (map\
    \ (lambda (a", "  (define (collision car1 car2)\n    (cond\n      [(< (distance\
    \ car1 car2) n) (+ n 1)]\n      [else 0]))\n  (define (collide_left car1 car2)\n\
    \    (cond\n      [(< (distance car1 car2) n) (+ n 1)]\n      [else 0]))\n  (define\
    \ (collide_right car1 car2)\n    (cond\n      [(< (distance car1 car2) n) (+ n\
    \ 1)]\n      [else 0]))\n  (define (collide_left car1 car2)\n    (cond\n     \
    \ [(< (distance car1 car2) n) (+ n 1)]\n      [else 0]))\n  (define (collide_right\
    \ car1 car2)\n    (cond\n      [(< (distance car1 car2) n) (+ n 1)]\n      [else\
    \ 0]))\n  (define (collide_left car1 car2)\n    (cond\n      [(< (distance car1\
    \ car2) n) (+ n 1)]\n      [else 0]))\n  (define (collide_right car1 car2)\n \
    \   (cond\n      [(< (distance car1 car2) n) (+ n 1)]\n      [else 0]))\n  (define\
    \ (collide_left car1 car2)\n    (cond\n      [(< (distance car1 car2) n) (+ n\
    \ 1)]\n      [else 0]))\n  (define (collide_right car1 car2)\n    (cond\n    \
    \  [(< (distance car1 car2) n) (+ n 1)]\n      [else 0]))\n  (define (collide_left\
    \ car1 car2)\n    (cond\n      [(< (distance car1 car2) n) (+ n 1)]\n      [else\
    \ 0]))\n  (define (collide_right car1 car2)\n    (cond\n      [(< (distance car1\
    \ car2) n) (+ n 1)]\n      [else 0]))\n  (define (collide_left car1 car2)\n  \
    \  (cond\n      [(< (distance car1 car2) n) (+ n 1)]\n      [else 0]))\n  (define\
    \ (collide_right car1 car2)\n    (cond\n      [(< (distance car1 car2) n) (+ n\
    \ 1)]\n      [else 0]))\n  (define (collide_left car1 car2)\n    (cond\n     \
    \ [(< (distance car1 car2) n) (+ n 1)]\n      [else 0]))\n  (define (collide_right\
    \ car1 car2)\n    (cond\n      [(< (distance car1 car2) n) (+ n 1)]\n      [else\
    \ 0]))\n  (define (collide_left car1 car2)\n    (cond\n      [(< (distance ",
  "  (let ((cars (make-array (* n n) '(unsigned-byte 32))))\n    (define (get-car-position\
    \ i j)\n      (let ((x (+ i 1))\n            (y (+ j 1)))\n        (list x y)))\n\
    \    (define (get-car-velocity i j)\n      (let ((x (- i 1))\n            (y (-\
    \ j 1)))\n        (list x y)))\n    (define (get-car-distance i j)\n      (let\
    \ ((x (- i 1))\n            (y (- j 1)))\n        (sqrt (+ (* x x) (* y y))))\n\
    \    (define (get-car-speed i j)\n      (let ((x (- i 1))\n            (y (- j\
    \ 1)))\n        (/ (+ (* x x) (* y y)) 2))\n    (define (get-car-direction i j)\n\
    \      (let ((x (- i 1))\n            (y (- j 1)))\n        (/ (- (* x x) (* y\
    \ y)) 2))\n    (define (get-car-velocity i j)\n      (let ((x (- i 1))\n     \
    \       (y (- j 1)))\n        (/ (- (* x x) (* y y)) 2))\n    (define (get-car-distance\
    \ i j)\n      (let ((x (- i 1))\n            (y (- j 1)))\n        (sqrt (+ (*\
    \ x x) (* y y))))\n    (define (get-car-speed i j)\n      (let ((x (- i 1))\n\
    \            (y (- j 1)))\n        (/ (+ (* x x) (* y y)) 2))\n    (define (get-car-direction\
    \ i j)\n      (let ((x (- i 1))\n            (y (- j 1)))\n        (/ (- (* x\
    \ x) (* y y)) 2))\n    (define (get-car-velocity i j)\n      (let ((x (- i 1))\n\
    \            (y (- j 1)))\n        (/ (- (* x x) (* y y)) 2))\n    (define (get-car-distance\
    \ i j)\n      (let ((x (- i 1))\n            (y (- j 1)))\n        (sqrt (+ (*\
    \ x x) (* y y))))\n    (define (get-car-speed i j)\n      (let ((x (- i 1))\n\
    \            (y (- j 1)))\n        (/ (+ (* x x) (* y y)) 2))\n    (define (get-car-direction\
    \ i j)\n      (let ((x (- i 1))\n            (y (- j 1)))\n        (/ (- (* x\
    \ x) (* y y)) 2))\n    (define (get-car-velocity i j)\n      (let ", "  (define\
    \ (collision car1 car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n      \
    \     (+ car1 car2))\n          ((and (< car1 car2) (> car2 car1))\n         \
    \  (+ car2 car1))\n          ((and (> car1 car2) (< car2 car1))\n           (+\
    \ car1 car2))\n          ((and (> car1 car2) (> car2 car1))\n           (+ car2\
    \ car1))\n          (else\n           (+ car1 car2)))\n  (define (collide car1\
    \ car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n           (collision car1\
    \ car2))\n          ((and (< car1 car2) (> car2 car1))\n           (collision\
    \ car1 car2))\n          ((and (> car1 car2) (< car2 car1))\n           (collision\
    \ car1 car2))\n          ((and (> car1 car2) (> car2 car1))\n           (collision\
    \ car1 car2))\n          (else\n           (collision car1 car2)))\n  (define\
    \ (collides cars)\n    (cond ((null? cars)\n           0)\n          ((and (<\
    \ (car cars) (car cars))\n               (< (car cars) (cadr cars)))\n       \
    \    (+ 1 (collide (car cars) (cadr cars))))\n          ((and (< (car cars) (cadr\
    \ cars))\n               (< (car cars) (caddr cars)))\n           (+ 1 (collide\
    \ (car cars) (caddr cars))))\n          ((and (< (caddr cars) (car cars))\n  \
    \             (< (caddr cars) (cadr cars)))\n           (+ 1 (collide (caddr cars)\
    \ (cadr cars))))\n          ((and (< (caddr cars) (cadr cars))\n             \
    \  (< (caddr cars) (caddr cars)))\n           (+ 1 (collide (caddr cars) (caddr\
    \ cars))))\n          (else\n           (+ 1 (collides (cdr cars))))))\n  (define\
    \ (collides-list cars)\n    (cond ((null? cars)\n           0)\n          ((and\
    \ (< (car cars) (car cars))\n               (< (car cars) (cadr cars)))\n    \
    \       (cons (+ 1 (collide (car cars) (cadr cars))) '()))\n          ((and (<\
    \ (", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (cond ((< n 2)\n \
    \        (cond ((< a b)\n                (+ a b))\n              ((< b a)\n  \
    \              (+ b a))\n              (else (+ a b))))\n        ((< n 3)\n  \
    \       (cond ((< a b)\n                (+ a b))\n              ((< b a)\n   \
    \             (+ b a))\n              ((< c d)\n                (+ c d))\n   \
    \           (else (+ a b c d))))\n        ((< n 4)\n         (cond ((< a b)\n\
    \                (+ a b))\n              ((< b a)\n                (+ b a))\n\
    \              ((< c d)\n                (+ c d))\n              ((< e f)\n  \
    \              (+ e f))\n              (else (+ a b c d e f))))\n        ((< n\
    \ 5)\n         (cond ((< a b)\n                (+ a b))\n              ((< b a)\n\
    \                (+ b a))\n              ((< c d)\n                (+ c d))\n\
    \              ((< e f)\n                (+ e f))\n              ((< g h)\n  \
    \              (+ g h))\n              (else (+ a b c d e f g h))))\n        (else\
    \ (+ a b c d e f g h i j k l m n o p q r s t u v w x y z))))\n", "  (define (collision\
    \ x y)\n    (cond ((and (<= x 0) (<= y 0))\n           (+ n 1))\n          ((and\
    \ (<= x n) (<= y 0))\n           (+ n 1))\n          ((and (<= x 0) (<= y n))\n\
    \           (+ n 1))\n          ((and (<= x n) (<= y n))\n           (+ n 0))\n\
    \          (else\n           (collision (- x 1) (- y 1)))))\n  (collision n n))\n",
  "  (define (collision car other-car)\n    (cond ((and (< car n) (< other-car n))\n\
    \           (+ other-car car))\n          ((and (< other-car n) (< car n))\n \
    \          (+ car other-car))\n          (else\n           (+ car other-car))))\n\
    \  (define (colliding-cars cars)\n    (map (lambda (car)\n           (filter (lambda\
    \ (other-car)\n                       (collision car other-car))\n           \
    \        cars))\n         cars))\n  (define (colliding-cars-list cars)\n    (map\
    \ (lambda (car)\n           (filter (lambda (other-car)\n                    \
    \   (collision car other-car))\n                   cars))\n         cars))\n \
    \ (define (colliding-cars-list-list cars)\n    (map (lambda (car)\n          \
    \ (filter (lambda (other-car)\n                       (collision car other-car))\n\
    \                   cars))\n         cars))\n  (define (colliding-cars-list-list-list\
    \ cars)\n    (map (lambda (car)\n           (filter (lambda (other-car)\n    \
    \                   (collision car other-car))\n                   cars))\n  \
    \       cars))\n  (define (colliding-cars-list-list-list-list cars)\n    (map\
    \ (lambda (car)\n           (filter (lambda (other-car)\n                    \
    \   (collision car other-car))\n                   cars))\n         cars))\n \
    \ (define (colliding-cars-list-list-list-list-list cars)\n    (map (lambda (car)\n\
    \           (filter (lambda (other-car)\n                       (collision car\
    \ other-car))\n                   cars))\n         cars))\n  (define (colliding-cars-list-list-list-list-list-list\
    \ cars)\n    (map (lambda (car)\n           (filter (lambda (other-car)\n    \
    \                   (collision car other-car))\n                   cars))\n  \
    \       cars))\n  (define (colliding-cars-list-list-list-list-list-list-list cars)\n\
    \    (map (lambda (car)\n           (filter (lambda (other-car)\n            \
    \           (collision car other-car))\n                   cars))\n         cars))\n\
    \  (define (colliding-cars-list-list-list-list-list-list-list-list cars)\n   \
    \ (map (lambda (car)\n           (", "  (let ((cars (make-array n #:element-type\
    \ 'car)))\n    (define (collide? x y)\n      (< (car-x x) (car-x y))\n      (<\
    \ (car-y x) (car-y y)))\n    (define (collides xs ys)\n      (cond ((null? xs)\
    \ 0)\n            ((null? ys) 0)\n            (else (+ (if (collide? x (car xs))\
    \ (1+ collides (cdr xs) ys)) \n                     (if (collide? y (car ys))\
    \ (1+ collides xs (cdr ys)) 0)))))\n    (define (collides-all xs ys)\n      (cond\
    \ ((null? xs) 0)\n            ((null? ys) 0)\n            (else (+ (if (collide?\
    \ x (car xs)) (1+ collides-all (cdr xs) ys)) \n                     (if (collide?\
    \ y (car ys)) (1+ collides-all xs (cdr ys)) 0)))))\n    (define (collides-all\
    \ xs ys)\n      (cond ((null? xs) 0)\n            ((null? ys) 0)\n           \
    \ (else (+ (if (collide? x (car xs)) (1+ collides-all (cdr xs) ys)) \n       \
    \              (if (collide? y (car ys)) (1+ collides-all xs (cdr ys)) 0)))))\n\
    \    (define (collides-all xs ys)\n      (cond ((null? xs) 0)\n            ((null?\
    \ ys) 0)\n            (else (+ (if (collide? x (car xs)) (1+ collides-all (cdr\
    \ xs) ys)) \n                     (if (collide? y (car ys)) (1+ collides-all xs\
    \ (cdr ys)) 0)))))\n    (define (collides-all xs ys)\n      (cond ((null? xs)\
    \ 0)\n            ((null? ys) 0)\n            (else (+ (if (collide? x (car xs))\
    \ (1+ collides-all (cdr xs) ys)) \n                     (if (collide? y (car ys))\
    \ (1+ collides-all xs (cdr ys)) 0)))))\n    (define (collides-all xs ys)\n   \
    \   (cond ((null? xs) 0)\n            ((null? ys) 0)", "  (let ([cars (make-array\
    \ (* n n) '(list 'empty))])\n    (define (collide x y)\n      (if (< x y)\n  \
    \        (if (< (car x) (car y))\n              (if (< (car y) (car x))\n    \
    \              (+ 1 (car-race (car x) (cons (car y) (car x)))\n              \
    \    (+ 1 (car-race (car y) (cons (car x) (car y))))\n                  (+ 1 (car-race\
    \ (car y) (cons (car x) (car y))))\n                  (+ 1 (car-race (car x) (cons\
    \ (car y) (car y))))\n              (+ 1 (car-race (car x) (cons (car y) (car\
    \ y))))\n          (+ 1 (car-race (car x) (cons (car y) (car y))))))\n    (define\
    \ (move-cars i j k)\n      (set! cars (cons (cons i j) (car cars))\n         \
    \    (cons (cons k j) (car cars))\n             (cons (cons k k) (car cars))\n\
    \             (cons (cons j k) (car cars))))\n    (define (collides i j k)\n \
    \     (if (< i j)\n          (if (< k j)\n              (if (< (car i) (car j))\n\
    \                  (if (< (car k) (car j))\n                      (+ 1 (car-race\
    \ (car i) (cons (car j) (car k)))\n                      (+ 1 (car-race (car k)\
    \ (cons (car i) (car j))))\n                      (+ 1 (car-race (car k) (cons\
    \ (car i) (car j))))\n                      (+ 1 (car-race (car j) (cons (car\
    \ i) (car k))))\n                  (+ 1 (car-race (car j) (cons (car i) (car k))))\n\
    \              (+ 1 (car-race (car i) (cons (car j) (car k))))\n          (+ 1\
    \ (car-race (car i) (cons (car j) (car k))))))\n    (define (collides-2 i j k)\n\
    \      (if (< i j)\n          (if (< k j)\n              (if (< (car i) (car j))\n\
    \                  (if (< (car k) (car j))\n", "  (let ((cars (make-array n #:element-type\
    \ 'car)))\n    (define (collision i j)\n      (cond ((= i j) (+ 1 (car-race (car\
    \ cars) (car cars) (car cars) (car cars))))\n            ((< i j) (+ 1 (car-race\
    \ (car cars) (car cars) (car cars) (car cars))))\n            (else 0)))\n   \
    \ (define (collisions i j)\n      (cond ((= i j) (+ 1 (car-race (car cars) (car\
    \ cars) (car cars) (car cars))))\n            ((< i j) (+ 1 (car-race (car cars)\
    \ (car cars) (car cars) (car cars))))\n            (else 0)))\n    (define (collision-loop\
    \ i j)\n      (cond ((= i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car\
    \ cars))))\n            ((< i j) (+ 1 (car-race (car cars) (car cars) (car cars)\
    \ (car cars))))\n            (else 0)))\n    (define (collision-loops i j)\n \
    \     (cond ((= i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car cars))))\n\
    \            ((< i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car cars))))\n\
    \            (else 0)))\n    (define (collision-loop-loop i j)\n      (cond ((=\
    \ i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car cars))))\n       \
    \     ((< i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car cars))))\n\
    \            (else 0)))\n    (define (collision-loop-loops i j)\n      (cond ((=\
    \ i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car cars))))\n       \
    \     ((< i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car cars))))\n\
    \            (else 0)))\n    (define (collision-loop-loop-loop i j)\n      (cond\
    \ ((= i j) (+ 1 (car-race (car cars) (car cars) ", "  (define (collides car other-car)\n\
    \    (< (abs (- car (- other-car 1))) 1))\n  (define (collides-list cars other-cars)\n\
    \    (if (null? other-cars)\n        0\n        (if (null? cars)\n           \
    \ (+ 1 (car-race_collision (car cars) other-cars))\n            (if (and (< car\
    \ cars) (< other-car other-cars))\n                (+ 1 (car-race_collision (car\
    \ cars) (remove other-car other-cars)))\n                (+ 1 (car-race_collision\
    \ (remove car cars) other-cars))))))\n  (define (collides-list-tail cars other-cars)\n\
    \    (if (null? other-cars)\n        (car cars)\n        (if (and (< car cars)\
    \ (< other-car other-cars))\n            (collides-list-tail (remove car cars)\
    \ (remove other-car other-cars))\n            (collides-list-tail (remove other-car\
    \ other-cars) (car cars)))))\n  (if (< n 0)\n      0\n      (if (null? cars)\n\
    \          0\n          (if (and (< car cars) (< other-car other-cars))\n    \
    \          (+ 1 (car-race_collision (car cars) (remove other-car other-cars)))\n\
    \              (+ 1 (car-race_collision (remove car cars) other-cars))))))\n \
    \ (if (< n 1)\n      0\n      (if (null? cars)\n          0\n          (if (and\
    \ (< car cars) (< other-car other-cars))\n              (+ 1 (car-race_collision\
    \ (car cars) (remove other-car other-cars)))\n              (+ 1 (car-race_collision\
    \ (remove car cars) other-cars))))))\n  (if (< n 2)\n      0\n      (if (null?\
    \ cars)\n          0\n          (if (and (< car cars) (< other-car other-cars))\n\
    \              (+ 1 (car-race_collision (car cars) (remove other-car other-cars)))\n\
    \              (+ 1 (car-race_collision (remove car cars) other-cars))))))\n \
    \ (if (< n 3)\n      0\n      (if (null? cars)\n          0\n          (if (and\
    \ (< car cars) (< other", "  (let ((cars (make-array n #:element-type 'car)))\n\
    \    (define (collide x y)\n      (< (car x) (car y))\n      (< (car y) (car x)))\n\
    \    (define (collides i j k)\n      (and (collide (car i) (car j)) (collide (car\
    \ k) (car j))))\n    (define (collides i j)\n      (and (collide (car i) (car\
    \ j))))\n    (define (collides i k)\n      (and (collide (car i) (car k))))\n\
    \    (define (collides j k)\n      (and (collide (car j) (car k))))\n    (define\
    \ (collides i j)\n      (and (collide (car i) (car j))))\n    (define (collides\
    \ i k)\n      (and (collide (car i) (car k))))\n    (define (collides j k)\n \
    \     (and (collide (car j) (car k))))\n    (define (collides i j)\n      (and\
    \ (collide (car i) (car j))))\n    (define (collides i k)\n      (and (collide\
    \ (car i) (car k))))\n    (define (collides j k)\n      (and (collide (car j)\
    \ (car k))))\n    (define (collides i j)\n      (and (collide (car i) (car j))))\n\
    \    (define (collides i k)\n      (and (collide (car i) (car k))))\n    (define\
    \ (collides j k)\n      (and (collide (car j) (car k))))\n    (define (collides\
    \ i j)\n      (and (collide (car i) (car j))))\n    (define (collides i k)\n \
    \     (and (collide (car i) (car k))))\n    (define (collides j k)\n      (and\
    \ (collide (car j) (car k))))\n    (define (collides i j)\n      (and (collide\
    \ (car i) (car j))))\n    (define (collides i k)\n      (and (collide (car i)\
    \ (car k))))\n    (define (collides j k)\n      (and (collide (car j) (car k))))\n\
    \    (define (collides i j)\n      (and (collide (car i) (car j))))\n    (define\
    \ (collides i k)\n      (and (collide (car i) (car k))))\n    (define (collides\
    \ j k)\n", "  (define (collision car1 car2)\n    (cond ((and (< car1 car2) (<\
    \ car2 car1))\n           (+ car1 car2))\n          ((and (< car1 car2) (< car2\
    \ car1))\n           (+ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n\
    \           (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n   \
    \        (+ car2 car1))\n          (else\n           (+ car1 car2))))\n  (define\
    \ (collide car1 car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n        \
    \   (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n           (+\
    \ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n           (+ car1\
    \ car2))\n          ((and (< car1 car2) (< car2 car1))\n           (+ car2 car1))\n\
    \          (else\n           (+ car1 car2))))\n  (define (collides cars)\n   \
    \ (cond ((null? cars)\n           0)\n          ((and (< cars cars)\n        \
    \       (< cars cars))\n           (+ 1 (car-race_collision (car cars) (car cars))))\n\
    \          (else\n           (+ (car-race_collision (car cars) (car cars)) (car-race_collision\
    \ (cdr cars) (cdr cars))))))\n  (define (collides-list cars)\n    (cond ((null?\
    \ cars)\n           0)\n          ((and (< cars cars)\n               (< cars\
    \ cars))\n           (+ 1 (car-race_collision (car cars) (car cars))))\n     \
    \     (else\n           (+ (car-race_collision (car cars) (car cars)) (car-race_collision\
    \ (cdr cars) (cdr cars))))))\n  (define (collides-list-list cars)\n    (cond ((null?\
    \ cars)\n           0)\n          ((and (< cars cars)\n               (< cars\
    \ cars))\n           (+ 1 (car-race_collision (car cars) (car cars))))\n     \
    \     (else\n           (+ (car-race_collision (car cars) (car cars)) (car-race_collision\
    \ (cdr cars) (cdr car", "  (let ((cars (make-array n '(lambda (i j) (cons i j)))))\n\
    \    (define (collides i j)\n      (< (car-x i) (car-x j))\n      (< (car-y i)\
    \ (car-y j))\n      (< (car-x j) (car-x i))\n      (< (car-y j) (car-y i)))\n\
    \    (define (collide? i j)\n      (collides i j))\n    (define (collides i j)\n\
    \      (< (car-x i) (car-x j))\n      (< (car-y i) (car-y j))\n      (< (car-x\
    \ j) (car-x i))\n      (< (car-y j) (car-y i)))\n    (define (collide? i j)\n\
    \      (collides i j))\n    (define (collides i j)\n      (< (car-x i) (car-x\
    \ j))\n      (< (car-y i) (car-y j))\n      (< (car-x j) (car-x i))\n      (<\
    \ (car-y j) (car-y i)))\n    (define (collide? i j)\n      (collides i j))\n \
    \   (define (collides i j)\n      (< (car-x i) (car-x j))\n      (< (car-y i)\
    \ (car-y j))\n      (< (car-x j) (car-x i))\n      (< (car-y j) (car-y i)))\n\
    \    (define (collide? i j)\n      (collides i j))\n    (define (collides i j)\n\
    \      (< (car-x i) (car-x j))\n      (< (car-y i) (car-y j))\n      (< (car-x\
    \ j) (car-x i))\n      (< (car-y j) (car-y i)))\n    (define (collide? i j)\n\
    \      (collides i j))\n    (define (collides i j)\n      (< (car-x i) (car-x\
    \ j))\n      (< (car-y i) (car-y j))\n      (< (car-x j) (car-x i))\n      (<\
    \ (car-y j) (car-y i)))\n    (define (collide? i j)\n      (collides i j))\n \
    \   (define (collides i j)\n      (< (car-x i) (c", "  (define (collide x y)\n\
    \    (cond\n      [(< x y) 0]\n      [(> x y) 1]\n      [else (+ 1 (collide (-\
    \ x 1) y))]))\n  (define (collides xs ys)\n    (cond\n      [(empty? xs) 0]\n\
    \      [(empty? ys) 0]\n      [(< (first xs) (first ys)) (+ 1 (collides (rest\
    \ xs) (rest ys)))]\n      [else (+ 1 (collides (rest xs) ys))]))\n  (define (collides-list\
    \ xs ys)\n    (cond\n      [(empty? xs) 0]\n      [(empty? ys) 0]\n      [(< (first\
    \ xs) (first ys)) (+ 1 (collides-list (rest xs) (rest ys)))]\n      [else (+ 1\
    \ (collides-list xs (rest ys)))]))\n  (define (collides-list-helper xs ys count)\n\
    \    (cond\n      [(empty? xs) (+ count 1)]\n      [(empty? ys) (+ count 1)]\n\
    \      [(< (first xs) (first ys)) (collides-list-helper (rest xs) (rest ys) (+\
    \ count 1))]\n      [else (collides-list-helper xs (rest ys) (+ count 1))]))\n\
    \  (define (collides-list-helper xs ys count)\n    (cond\n      [(empty? xs) (+\
    \ count 1)]\n      [(empty? ys) (+ count 1)]\n      [(< (first xs) (first ys))\
    \ (collides-list-helper (rest xs) (rest ys) (+ count 1))]\n      [else (collides-list-helper\
    \ xs (rest ys) (+ count 1))]))\n  (define (collides-list-helper xs ys count)\n\
    \    (cond\n      [(empty? xs) (+ count 1)]\n      [(empty? ys) (+ count 1)]\n\
    \      [(< (first xs) (first ys)) (collides-list-helper (rest xs) (rest ys) (+\
    \ count 1))]\n      [else (collides-list-helper xs (rest ys) (+ count 1))]))\n\
    \  (define (collides-list-helper xs ys count)\n    (cond\n      [(empty? xs) (+\
    \ count 1)]\n      [(empty? ys) (+ count 1)]\n      [(< (first xs) (first ys))\
    \ (collides-list-helper (rest xs) (rest ys) (+ count ", "  (define (collide a\
    \ b)\n    (cond ((and (< a b) (< b n))\n           (+ a b))\n          ((and (<\
    \ b a) (< a n))\n           (+ b a))\n          ((and (< a n) (< b n))\n     \
    \      (+ a b))\n          ((and (< b n) (< a n))\n           (+ b a))\n     \
    \     ((and (< a n) (< b n))\n           (+ a b))\n          ((and (< b n) (<\
    \ a n))\n           (+ b a))\n          ((and (< a n) (< b n))\n           (+\
    \ a b))\n          ((and (< b n) (< a n))\n           (+ b a))\n          ((and\
    \ (< a n) (< b n))\n           (+ a b))\n          ((and (< b n) (< a n))\n  \
    \         (+ b a))\n          ((and (< a n) (< b n))\n           (+ a b))\n  \
    \        ((and (< b n) (< a n))\n           (+ b a))\n          ((and (< a n)\
    \ (< b n))\n           (+ a b))\n          ((and (< b n) (< a n))\n          \
    \ (+ b a))\n          ((and (< a n) (< b n))\n           (+ a b))\n          ((and\
    \ (< b n) (< a n))\n           (+ b a))\n          ((and (< a n) (< b n))\n  \
    \         (+ a b))\n          ((and (< b n) (< a n))\n           (+ b a))\n  \
    \        ((and (< a n) (< b n))\n           (+ a b))\n          ((and (< b n)\
    \ (< a n))\n           (+ b a))\n          ((and (< a n) (< b n))\n          \
    \ (+ a b))\n          ((and (< b n) (< a n))\n           (+ b a))\n          ((and\
    \ (< a n) (< b n))\n           (+ a b))\n          ((and (< b n) (< a n))\n  \
    \         (+ b a))\n          ((and (< a n) (< b n))\n           (+ a b))\n  \
    \        ((and (< b n) (< a n))\n           (+ b a))\n          ((and (< a n)\
    \ (< b n))\n           (+ a b))\n          ((and (< b n) (< a n))\n          \
    \ (+ b a))\n          ((and (< a n) (< b n))\n           (+ a b))\n          ((and\
    \ (< b n) (< a n))\n           (+ b a))\n          ((and (< a n) (< b n))\n  \
    \         (+ a b))\n          ((and (< b n", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (define (collide a b)\n      (< (car a) (car b)))\n    (define\
    \ (collides i j)\n      (< (car (+ i 1)) (+ (car (- j 1)) (car (- i 1)))))\n \
    \   (define (collide? i j)\n      (and (< i n) (< j n) (collides i j)))\n    (define\
    \ (collides i j)\n      (< (car (+ i 1)) (+ (car (- j 1)) (car (- i 1)))))\n \
    \   (define (collide? i j)\n      (and (< i n) (< j n) (collides i j)))\n    (define\
    \ (collides i j)\n      (< (car (+ i 1)) (+ (car (- j 1)) (car (- i 1)))))\n \
    \   (define (collide? i j)\n      (and (< i n) (< j n) (collides i j)))\n    (define\
    \ (collides i j)\n      (< (car (+ i 1)) (+ (car (- j 1)) (car (- i 1)))))\n \
    \   (define (collide? i j)\n      (and (< i n) (< j n) (collides i j)))\n    (define\
    \ (collides i j)\n      (< (car (+ i 1)) (+ (car (- j 1)) (car (- i 1)))))\n \
    \   (define (collide? i j)\n      (and (< i n) (< j n) (collides i j)))\n    (define\
    \ (collides i j)\n      (< (car (+ i 1)) (+ (car (- j 1)) (car (- i 1)))))\n \
    \   (define (collide? i j)\n      (and (< i n) (< j n) (collides i j)))\n    (define\
    \ (collides i j)\n      (< (car (+ i 1)) (+ (car (- j 1)) (car (- i 1)))))\n \
    \   (define (collide? i j)\n      (and (< i n) (< j n) (collides i j)))\n    (define\
    \ (collides i j)\n      (< (car (+ i 1)) (+ (car (- j 1)) (car (- i 1)))))\n \
    \   (define (collide? i j)\n      (and (< i n) (< j n) (collides i j)))\n    (define\
    \ (collides i j)\n      (< (car (+ i 1)) (+ (car (- j ", "  (define (collision\
    \ car1 car2)\n    (cond\n      [(and (< car1 car2) (< car2 car1)) 0]\n      [(and\
    \ (< car1 car2) (< car2 car2)) (+ 1 collisions)]\n      [(and (< car1 car2) (<\
    \ car2 car1)) collisions]\n      [else (+ collisions 1)]))\n  (define collisions\
    \ 0)\n  (for ([i n])\n    (for ([j n])\n      (if (and (< i j) (< j i))\n    \
    \      (collision i j)\n          (collision j i))))\n  collisions)\n", "  (let\
    \ ((cars (make-array (list n (list 'car)))))\n    (define (collide i j)\n    \
    \  (if (< i j)\n          (if (< (car cars) (car (cdr cars) j))\n            \
    \  (if (< (car cars) (car (cdr cars) i))\n                  (+ 1 (collide (+ i\
    \ 1) (+ j 1)))\n                  (+ 1 (collide (+ i 1) j))\n                \
    \  (+ 1 (collide i j)))\n              (if (< (car cars) (car (cdr cars) i))\n\
    \                  (+ 1 (collide i j))\n                  (+ 1 (collide (+ j 1)\
    \ j))\n                  (+ 1 (collide i j)))\n          (if (< (car cars) (car\
    \ (cdr cars) j))\n              (+ 1 (collide i j))\n              (+ 1 (collide\
    \ (+ j 1) j))\n              (+ 1 (collide i j)))\n          (if (< (car cars)\
    \ (car (cdr cars) i))\n              (+ 1 (collide i j))\n              (+ 1 (collide\
    \ (+ j 1) j))\n              (+ 1 (collide i j))))\n      (if (< i j)\n      \
    \    (+ 1 (collide i j))\n          (+ 1 (collide (+ j 1) j))\n          (+ 1\
    \ (collide i j))))\n    (collide 0 n)))\n", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc 0 (cars cars))))\n    (let ((collisions (make-array n '(list 0))))\n\
    \      (dotimes (i n)\n        (set! collisions (assoc i collisions))\n      \
    \  (set! collisions (assoc 0 (collisions collisions))))\n      (let ((collision\
    \ (cars cars))\n            (collisions (cars collisions)))\n        (if (null?\
    \ collisions)\n            (set! collision 0)\n            (set! collision (+\
    \ collision (car collisions)))))))\n", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (define (collide a b)\n      (< (car-speed a) (car-speed b))\n      (< (car-speed\
    \ b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed\
    \ b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed\
    \ b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed\
    \ b) (car-speed a)))\n    (define (collides a)\n      (cond ((null? a) '())\n\
    \            ((collide (car a) (car a))\n             (cons (car a) (collides\
    \ (cdr a))))\n            (else (cons (car a) (collides (cdr a)))))\n    (define\
    \ (collides-all a)\n      (cond ((null? a) '())\n            ((collide (car a)\
    \ (car a))\n             (cons (car a) (collides-all (cdr a))))\n            (else\
    \ (cons (car a) (collides-all (cdr a)))))\n    (define (collides-all a)\n    \
    \  (cond ((null? a) '())\n            ((collide (car a) (car a))\n           \
    \  (cons (car a) (collides-all (cdr a))))\n            (else (cons (car a) (collides-all\
    \ (cdr a)))))\n    (define (collides-all a)\n      (cond ((null? a) '())\n   \
    \         ((collide (car a) (car a))\n             (cons (car a) (collides-all\
    \ (cdr a))))\n            (else (cons (car a) (collides-all (cdr a)))))\n    (define\
    \ (collides-all a)\n      (cond ((null? a) '())\n            ((collide (car a)\
    \ (car a))\n             (cons (car a) (collides-all (cdr a))))\n            (else\
    \ (cons (car a) (collides-all (cdr a)))))\n    (define (collides-all a)\n    \
    \  (cond ((null? a) '())\n            ((collide (car a) (car a))\n           \
    \  (cons (car a) (collides-all (cdr a))))\n", "  (define (collision car1 car2)\n\
    \    (cond ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n   \
    \       ((and (< car1 car2) (> car2 car1))\n           (+ car1 car2))\n      \
    \    ((and (> car1 car2) (< car2 car1))\n           (+ car1 car2))\n         \
    \ ((and (> car1 car2) (> car2 car1))\n           (+ car1 car2))\n          (else\n\
    \           (+ car1 car2)))\n  (define (collide car1 car2)\n    (cond ((and (<\
    \ car1 car2) (< car2 car1))\n           (+ car1 car2))\n          ((and (< car1\
    \ car2) (> car2 car1))\n           (+ car1 car2))\n          ((and (> car1 car2)\
    \ (< car2 car1))\n           (+ car1 car2))\n          ((and (> car1 car2) (>\
    \ car2 car1))\n           (+ car1 car2))\n          (else\n           (+ car1\
    \ car2)))\n  (define (collides car1 car2)\n    (cond ((and (< car1 car2) (< car2\
    \ car1))\n           (+ car1 car2))\n          ((and (< car1 car2) (> car2 car1))\n\
    \           (+ car1 car2))\n          ((and (> car1 car2) (< car2 car1))\n   \
    \        (+ car1 car2))\n          ((and (> car1 car2) (> car2 car1))\n      \
    \     (+ car1 car2))\n          (else\n           (+ car1 car2)))\n  (define (collides_count\
    \ car1 car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n           (+ car1\
    \ car2))\n          ((and (< car1 car2) (> car2 car1))\n           (+ car1 car2))\n\
    \          ((and (> car1 car2) (< car2 car1))\n           (+ car1 car2))\n   \
    \       ((and (> car1 car2) (> car2 car1))\n           (+ car1 car2))\n      \
    \    (else\n           (+ car1 car2)))\n  (define (collides_count_2 car1 car2)\n\
    \    (cond ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n   \
    \       ((and (< car1 car2) (> car2 car1))\n           (+ car1 car2))\n      \
    \    ((and (> car1 ", "  (let ((cars (make-array n #:initial-contents (make-array\
    \ n #:initial-contents empty-cell))))\n    (define (collide x y)\n      (cond\n\
    \        ((< x n) (error \"x out of range\"))\n        ((< y n) (error \"y out\
    \ of range\"))\n        ((< x y) (error \"x collides with y\"))\n        (else\
    \ (let ((x (car x))\n                       (y (cons (car y) (cdr y))))\n    \
    \            (cond\n                  ((< x n) (error \"x out of range\"))\n \
    \                 ((< y n) (error \"y out of range\"))\n                  ((<\
    \ x y) (error \"x collides with y\"))\n                  (else (let ((x (car x))\n\
    \                               (y (cons (car y) (cdr y))))\n                \
    \          (cond\n                            ((< x n) (error \"x out of range\"\
    ))\n                            ((< y n) (error \"y out of range\"))\n       \
    \                     ((< x y) (error \"x collides with y\"))\n              \
    \              (else (let ((x (car x))\n                                     \
    \      (y (cons (car y) (cdr y))))\n                                      (cond\n\
    \                                        ((< x n) (error \"x out of range\"))\n\
    \                                        ((< y n) (error \"y out of range\"))\n\
    \                                        ((< x y) (error \"x collides with y\"\
    ))\n                                        (else (let ((x (car x))\n        \
    \                                               (y (cons (car y) (cdr y))))\n\
    \                                                  (cond\n                   \
    \                                 ((< x n) (error \"x out of range\"))\n     \
    \                                               ((< y n) (error \"y out of range\"\
    ))\n                                                    ((< x y) (error \"x collides\
    \ with y\"))\n                                                    (else (let ((x\
    \ (car x))\n                                                                 \
    \  (y (cons (car y) (cdr y))))\n                                             \
    \               (cond\n                                                      \
    \        ((< x n) (error \"x out of range\"))\n                              \
    \                                ((< y n) (error \"y out of range\"))\n      \
    \                                                        ((< x y) (error \"x collides\
    \ with y\"))\n                                                              (else\
    \ (let ((x (car x))\n                                                        \
    \                   (y (cons (car y) (cdr y))))\n                            \
    \                                (cond\n                                     \
    \                         ((< x n) (error \"x out of range\"))\n             \
    \                                                 ((< y n) (error \"y out of range\"\
    ))\n                                                              ((< x y) (error\
    \ \"x collides with y\"))\n                                                  \
    \            (else (let ((x (c", "  (define (collision x1 x2)\n    (cond\n   \
    \   [(< x1 x2) 0]\n      [(> x1 x2) 1]\n      [else (+ 1 (collision (- x1 x2)\
    \ (+ x1 x2)))]))\n  (define (collide x1 x2)\n    (cond\n      [(< x1 x2) 0]\n\
    \      [(> x1 x2) 1]\n      [else (collision x1 x2)]))\n  (define (collides x1\
    \ x2)\n    (cond\n      [(< x1 x2) 0]\n      [(> x1 x2) 1]\n      [else (+ 1 (collides\
    \ (- x1 x2) (+ x1 x2)))]))\n  (define (collides_count x1 x2)\n    (cond\n    \
    \  [(< x1 x2) 0]\n      [(> x1 x2) 1]\n      [else (+ 1 (collides x1 x2))]))\n\
    \  (define (collides_count_2 x1 x2)\n    (cond\n      [(< x1 x2) 0]\n      [(>\
    \ x1 x2) 1]\n      [else (+ 1 (collides x1 x2))]))\n  (define (collides_count_3\
    \ x1 x2)\n    (cond\n      [(< x1 x2) 0]\n      [(> x1 x2) 1]\n      [else (+\
    \ 1 (collides x1 x2))]))\n  (define (collides_count_4 x1 x2)\n    (cond\n    \
    \  [(< x1 x2) 0]\n      [(> x1 x2) 1]\n      [else (+ 1 (collides x1 x2))]))\n\
    \  (define (collides_count_5 x1 x2)\n    (cond\n      [(< x1 x2) 0]\n      [(>\
    \ x1 x2) 1]\n      [else (+ 1 (collides x1 x2))]))\n  (define (collides_count_6\
    \ x1 x2)\n    (cond\n      [(< x1 x2) 0]\n      [(> x1 x2) 1]\n      [else (+\
    \ 1 (collides x1 x2))]))\n  (define (collides_count_7 x1 x2)\n    (cond\n    \
    \  [(< x1 x2) 0]\n      [(> x1 x2) 1]\n      [else (+ 1 (collides x1 x2))]))\n\
    \  (define (collides_count_8 x1 x2)\n    (cond\n      [(< x1 x2) 0]\n      [(>\
    \ x1 x2) 1]", "  (let ((cars (make-array n #:element-type 'car)))\n    (dotimes\
    \ (i n)\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-type 'car))\n      (set! cars (make-array n #:element-type\
    \ 'car))\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-type 'car))\n      (set! cars (make-array n #:element-type\
    \ 'car))\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-type 'car))\n      (set! cars (make-array n #:element-type\
    \ 'car))\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-type 'car))\n      (set! cars (make-array n #:element-type\
    \ 'car))\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-type 'car))\n      (set! cars (make-array n #:element-type\
    \ 'car))\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-type 'car))\n      (set! cars (make-array n #:element-type\
    \ 'car))\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-type 'car))\n      (set! cars (make-array n #:element-type\
    \ 'car))\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-type 'car))\n      (set! cars (make-array n #:element-type\
    \ 'car))\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-type 'car))\n      (set! cars (make-array n #:element-type\
    \ 'car))\n      (set! cars (make-array n #:element-type 'car))\n      (set! cars\
    \ (make-array n #:element-", "  (define (collide a b)\n    (< (abs (- a b)) n))\n\
    \  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a)\
    \ (car b))\n           (+ 1 (car-race_collision (- n 1))))\n          (else (+\
    \ 1 (car-race_collision (- n 1))) (collides (cdr a)))))\n  (collides (list n)))\n",
  "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars\
    \ (assoc i cars))\n      (let ((car (car cars)))\n        (set! cars (cdr cars))\n\
    \        (set! car (car cars))\n        (set! car (car cars))\n        (set! car\
    \ (car cars))\n        (set! car (car cars))\n        (set! car (car cars))\n\
    \        (set! car (car cars))\n        (set! car (car cars))\n        (set! car\
    \ (car cars))\n        (set! car (car cars))\n        (set! car (car cars))\n\
    \        (set! car (car cars))\n        (set! car (car cars))\n        (set! car\
    \ (car cars))\n        (set! car (car cars))\n        (set! car (car cars))\n\
    \        (set! car (car cars))\n        (set! car (car cars))\n        (set! car\
    \ (car cars))\n        (set! car (car cars))\n        (set! car (car cars))\n\
    \        (set! car (car cars))\n        (set! car (car cars))\n        (set! car\
    \ (car cars))\n        (set! car (car cars))\n        (set! car (car cars))\n\
    \        (set! car (car cars))\n        (set! car (car cars))\n        (set! car\
    \ (car cars))\n        (set! car (car cars))\n        (set! car (car cars))\n\
    \        (set! car (car cars))\n        (set! car (car cars))\n        (set! car\
    \ (car cars))\n        (set! car (car cars))\n        (set! car (car cars))\n\
    \        (set! car (car cars))\n        (set! car (car cars))\n        (set! car\
    \ (car cars))\n        (set! car (car cars))\n        (set! car (car cars))\n\
    \        (set! car (car cars))\n        (set! car (car cars))\n        (set! car\
    \ (car cars))\n        (set! car (car cars))\n        (set! car (car cars))\n\
    \        (set! car (car cars))", "  (define (collide a b)\n    (< (abs (- a b))\
    \ n))\n  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide (car\
    \ a) (car b))\n           (+ 1 (car-race_collision (- n 1))))\n          (else\
    \ (+ 1 (car-race_collision (- n 1))))))\n  (define (collides-list a)\n    (cond\
    \ ((null? a) 0)\n          ((collide (car a) (car b))\n           (cons (car a)\
    \ (cons (car b) (cons (car a) (cons (car b) (cons (car a) (cons (car b) '()))))))))\n\
    \  (define (collides-list-tail a)\n    (cond ((null? a) '())\n          ((collide\
    \ (car a) (car b))\n           (cons (car a) (cons (car b) (cons (car a) (cons\
    \ (car b) (cons (car a) (cons (car b) '())))))))\n          (else (cons (car a)\
    \ (cons (car b) (cons (car a) (cons (car b) (cons (car a) (cons (car b) '())))))))\n\
    \  (define (collides-list-tail-list a)\n    (cond ((null? a) '())\n          ((collide\
    \ (car a) (car b))\n           (cons (car a) (cons (car b) (cons (car a) (cons\
    \ (car b) (cons (car a) (cons (car b) '())))))))\n          (else (cons (car a)\
    \ (cons (car b) (cons (car a) (cons (car b) (cons (car a) (cons (car b) '())))))))\n\
    \  (define (collides-list-tail-list-tail a)\n    (cond ((null? a) '())\n     \
    \     ((collide (car a) (car b))\n           (cons (car a) (cons (car b) (cons\
    \ (car a) (cons (car b) (cons (car a) (cons (car b) '())))))))\n          (else\
    \ (cons (car a) (cons (car b) (cons (car a) (cons (car b) (cons (car a) (cons\
    \ (car ", "  (let ((cars (make-array n '(list 'car))))\n    (define (collides\
    \ car other-car)\n      (< (car-speed car) (car-speed other-car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed car) (car-speed other-car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed car) (car-speed other-car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed car) (car-speed other-car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed car) (car-speed other-car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed car) (car-speed other-car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed car) (car-speed other-car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed car) (car-speed other-car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed car) (car-speed other-car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed car) (car-speed other-car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed car) (car-speed other-car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed car) (car-speed other-car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-", "  (let ([cars (make-array n #:initial-contents\
    \ '(#t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (let ((cars (make-array\
    \ (+ n 1) '(list 'car))))\n    (dotimes (i n)\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (set! cars (make-array (+ n 1) '(list 'car)))\n      (set! cars (cdr cars))\n\
    \      (", "  (let ((cars (make-array n '(list 'car))))\n    (define (collide\
    \ x y)\n      (< (car-x x) (car-x y))\n      (< (car-y x) (car-y y)))\n    (define\
    \ (collides xs ys)\n      (cond ((null? xs) 0)\n            ((null? ys) 0)\n \
    \           (else (or (and (collide (car-x xs) (car-x ys)) (collide (car-y xs)\
    \ (car-y ys))\n                         (and (collide (car-x xs) (car-y ys)) (collide\
    \ (car-y xs) (car-x ys))))\n                   (collides (cdr xs) (cdr ys)))))\n\
    \    (define (collides-list xs ys)\n      (cond ((null? xs) 0)\n            ((null?\
    \ ys) 0)\n            (else (or (and (collide (car xs) (car ys)) (collide (car\
    \ xs) (car ys))\n                         (and (collide (car xs) (car ys)) (collide\
    \ (car xs) (car ys))))\n                   (collides-list (cdr xs) (cdr ys)))))\n\
    \    (define (collides-list-cond xs ys)\n      (cond ((null? xs) 0)\n        \
    \    ((null? ys) 0)\n            (else (or (and (collide (car xs) (car ys)) (collide\
    \ (car xs) (car ys))\n                         (and (collide (car xs) (car ys))\
    \ (collide (car xs) (car ys))))\n                   (collides-list-cond (cdr xs)\
    \ (cdr ys)))))\n    (define (collides-list-cond-list xs ys)\n      (cond ((null?\
    \ xs) 0)\n            ((null? ys) 0)\n            (else (or (and (collide (car\
    \ xs) (car ys)) (collide (car xs) (car ys))\n                         (and (collide\
    \ (car xs) (car ys)) (collide (car xs) (car ys))))\n                   (collides-list-cond-list\
    \ (cdr xs) (cdr ys)))))\n    (define (collides-list-cond-list-cond xs ys)\n  \
    \    (cond ((null? xs) 0)\n            ((null? ys) 0)\n            (else (or (",
  "  (let ((cars (make-array n #:element-type 'car)))\n    (define (collides car other-car)\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (< (car speed) (car other-car))\n\
    \      (< (car speed) (car other-car))\n      (", "  (let ((cars (make-array n\
    \ #:element-type 'car)))\n    (define (collision i j)\n      (cond ((= i j) (+\
    \ 1 (car-race (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (car cars) (car cars) (car cars) (car cars) (car cars) (car cars) (car cars)\
    \ (c", "  (let ((cars (make-array n '(list 'car))))\n    (define (collide a b)\n\
    \      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n\
    \      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n\
    \      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n\
    \      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a)))\n\
    \    (define (collides i j)\n      (cond ((or (< i n) (< j n)) 0)\n          \
    \  ((and (< i j) (< i n)) (+ (car-speed (car cars)) 1))\n            ((and (<\
    \ j n) (< j j)) (+ (car-speed (car cars)) 1))\n            (else (+ (car-speed\
    \ (car cars)) 1))))\n    (define (collides-all i j)\n      (cond ((or (< i n)\
    \ (< j n)) 0)\n            ((and (< i j) (< i n)) (+ (car-speed (car cars)) 1))\n\
    \            ((and (< j n) (< j j)) (+ (car-speed (car cars)) 1))\n          \
    \  (else (+ (car-speed (car cars)) 1))))\n    (define (collides-all i j)\n   \
    \   (cond ((or (< i n) (< j n)) 0)\n            ((and (< i j) (< i n)) (+ (car-speed\
    \ (car cars)) 1))\n            ((and (< j n) (< j j)) (+ (car-speed (car cars))\
    \ 1))\n            (else (+ (car-speed (car cars)) 1))))\n    (define (collides-all\
    \ i j)\n      (cond ((or (< i n) (< j n)) 0)\n            ((and (< i j) (< i n))\
    \ (+ (car-speed (car cars)) 1))\n            ((and (< j n) (< j j)) (+ (car-speed\
    \ (car cars)) 1))\n            (else (+ (car-speed (car cars)) 1))))\n    (define\
    \ (collides-all i j)\n      (cond ((or (< i n) (< j n)) 0)\n            ((and\
    \ (< i j) (< i n)) (+ (car-speed ", "  (let ((cars (make-array n #:element-type\
    \ 'car)))\n    (define (collide i j)\n      (cond ((< i j) (if (car-is-colliding\
    \ (car cars i) (car cars j)) (+ 1 (car-race (car cars i) (car cars j)))))\n  \
    \          ((> i j) (if (car-is-colliding (car cars i) (car cars j)) (+ 1 (car-race\
    \ (car cars j) (car cars i)))))\n            (else (+ 1 (car-race (car cars i)\
    \ (car cars j)))))\n    (let loop ((i 0) (j 0))\n      (if (< i n) (loop (+ i\
    \ 1) (+ j 1))\n          (if (< j n) (loop (+ i 1) (+ j 1))\n              (loop\
    \ (+ i 1) (+ j 1))))))\n    (let loop ((i 0) (j 0))\n      (if (< i n) (loop (+\
    \ i 1) (+ j 1))\n          (if (< j n) (loop (+ i 1) (+ j 1))\n              (loop\
    \ (+ i 1) (+ j 1))))))\n  (let loop ((i 0) (j 0))\n    (if (< i n) (loop (+ i\
    \ 1) (+ j 1))\n        (if (< j n) (loop (+ i 1) (+ j 1))\n            (loop (+\
    \ i 1) (+ j 1))))))\n</code>\n<|/ a |>\n<| c |>\nThank you very much for taking\
    \ the time to write this out. I'm going to try and implement this and see how\
    \ it goes. I appreciate it.\n<|/ c |>\n<| c |>\nI implemented this and I'm getting\
    \ a stack overflow error. I'm going to try to figure out why and post it here\
    \ if I figure it out. Thanks again for the help.\n<|/ c |>\n<| c |>\nI figured\
    \ it out. I had a typo in my code where I called car-race instead of car-race-collision.\
    \ Thanks again for the help.\n<|/ c |>\n<| c |>\nI added a second solution that\
    \ doesn't use recursion.\n<|/ c |>\n<| c |>\nI added a third solution that doesn't\
    \ use recursion.\n<|/ c |>\n<| a tags=racket,scheme |>\nHere's a solution using\
    \ recursion:\n<code>", "  (define (collision car1 car2)\n    (cond\n      [(<\
    \ car1 car2) 0]\n      [(> car1 car2) 1]\n      [else (+ collision (car1 car2))]))\n\
    \  (define (collisions cars)\n    (cond\n      [(empty? cars) 0]\n      [(< cars\
    \ 1) 0]\n      [(< cars (- n)) 0]\n      [else (+ collisions (cdr cars))]))\n\
    \  (define (colliding car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(>\
    \ car1 car2) 1]\n      [else 0]))\n  (define (collidings cars)\n    (cond\n  \
    \    [(empty? cars) 0]\n      [(< cars 1) 0]\n      [(< cars (- n)) 0]\n     \
    \ [else (+ collidings (cdr cars))]))\n  (define (colliding-pairs cars)\n    (cond\n\
    \      [(empty? cars) '()]\n      [(< cars 1) '()]\n      [(< cars (- n)) '()]\n\
    \      [else (cons (cons (car cars) (car cars)) (colliding-pairs (cdr cars)))]))\n\
    \  (define (colliding-pairs-2 cars)\n    (cond\n      [(empty? cars) '()]\n  \
    \    [(< cars 1) '()]\n      [(< cars (- n)) '()]\n      [else (cons (cons (car\
    \ cars) (car cars)) (colliding-pairs-2 (cdr cars)))]))\n  (define (colliding-pairs-3\
    \ cars)\n    (cond\n      [(empty? cars) '()]\n      [(< cars 1) '()]\n      [(<\
    \ cars (- n)) '()]\n      [else (cons (cons (car cars) (car cars)) (colliding-pairs-3\
    \ (cdr cars)))]))\n  (define (colliding-pairs-4 cars)\n    (cond\n      [(empty?\
    \ cars) '()]\n      [(< cars 1) '()]\n      [(< cars (- n)) '()]\n      [else\
    \ (cons (cons (car cars) (car cars)) (colliding-pairs-4 (cdr cars)))]))\n  (define\
    \ (colliding-pairs-5 cars)\n    (cond\n      [(empty? cars) '()]\n      [(< cars\
    \ 1) '()]\n      [(< cars (- n)) '()]\n      [else ", "  (let ((cars (make-array\
    \ n #:element-type 'car)))\n    (define (collision i j)\n      (let ((car cars)\n\
    \            (car-left (car i))\n            (car-right (car j)))\n        (cond\n\
    \          ((< i j) (+ car-left car-right))\n          ((< j i) (+ car-right car-left))\n\
    \          (else 0)))\n    (let ((i (- n 1))\n          (j (- n 1)))\n      (cond\n\
    \        ((< i j) (+ cars 0))\n        ((< j i) (+ cars 0))\n        (else (collision\
    \ i j)))))\n  (car_race_collision n))\n", "  (let ((cars (make-array (* n n) '(list)))\n\
    \        (car1 (make-array (* n n) '(list)))\n        (car2 (make-array (* n n)\
    \ '(list)))\n        (collisions (make-array (* n n) '(list)))\n        (collision\
    \ (make-array (* n n) '(list)))\n        (collision-count 0))\n    (dotimes (i\
    \ n)\n      (dotimes (j n)\n        (set! car1 (make-array (* n n) '(list)))\n\
    \        (set! car2 (make-array (* n n) '(list)))\n        (set! collision (make-array\
    \ (* n n) '(list)))\n        (set! collision-count 0))\n      (dotimes (k n)\n\
    \        (set! car1 (make-array (* n n) '(list)))\n        (set! car2 (make-array\
    \ (* n n) '(list)))\n        (set! collision (make-array (* n n) '(list)))\n \
    \       (set! collision-count 0))\n      (dotimes (l n)\n        (set! car1 (make-array\
    \ (* n n) '(list)))\n        (set! car2 (make-array (* n n) '(list)))\n      \
    \  (set! collision (make-array (* n n) '(list)))\n        (set! collision-count\
    \ 0))\n      (dotimes (m n)\n        (set! car1 (make-array (* n n) '(list)))\n\
    \        (set! car2 (make-array (* n n) '(list)))\n        (set! collision (make-array\
    \ (* n n) '(list)))\n        (set! collision-count 0))\n      (dotimes (n n)\n\
    \        (set! car1 (make-array (* n n) '(list)))\n        (set! car2 (make-array\
    \ (* n n) '(list)))\n        (set! collision (make-array (* n n) '(list)))\n \
    \       (set! collision-count 0))\n      (dotimes (o n)\n        (set! car1 (make-array\
    \ (* n n) '(list)))\n        (set! car2 (make-array (* n n) '(list)))\n      \
    \  (set! collision (make-array (* n n) '(list)))\n        (set! collision-count\
    \ 0))\n      (dotimes (p n)\n        (set! car1 (make-array (* n n) '(list)))\n",
  "  (let ([cars (make-array n #:initial-contents '(#t #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f ", "  (define (collision car1 car2)\n    (cond\n      [(< car1\
    \ car2) 0]\n      [(> car1 car2) 1]\n      [(= car1 car2) 0]\n      [(= car2 car1)\
    \ 0]\n      [(= car1 car2) 1]\n      [(= car2 car1) 1]\n      [(= car1 car2) 0]\n\
    \      [(= car2 car1) 0]\n      [(= car1 car2) 1]\n      [(= car2 car1) 1]\n \
    \     [(= car1 car2) 0]\n      [(= car2 car1) 0]\n      [(= car1 car2) 1]\n  \
    \    [(= car2 car1) 1]\n      [(= car1 car2) 0]\n      [(= car2 car1) 0]\n   \
    \   [(= car1 car2) 1]\n      [(= car2 car1) 1]\n      [(= car1 car2) 0]\n    \
    \  [(= car2 car1) 0]\n      [(= car1 car2) 1]\n      [(= car2 car1) 1]\n     \
    \ [(= car1 car2) 0]\n      [(= car2 car1) 0]\n      [(= car1 car2) 1]\n      [(=\
    \ car2 car1) 1]\n      [(= car1 car2) 0]\n      [(= car2 car1) 0]\n      [(= car1\
    \ car2) 1]\n      [(= car2 car1) 1]\n      [(= car1 car2) 0]\n      [(= car2 car1)\
    \ 0]\n      [(= car1 car2) 1]\n      [(= car2 car1) 1]\n      [(= car1 car2) 0]\n\
    \      [(= car2 car1) 0]\n      [(= car1 car2) 1]\n      [(= car2 car1) 1]\n \
    \     [(= car1 car2) 0]\n      [(= car2 car1) 0]\n      [(= car1 car2) 1]\n  \
    \    [(= car2 car1) 1]\n      [(= car1 car2) 0]\n      [(= car2 car1) 0]\n   \
    \   [(= car1 car2) 1]\n      [(= car2 car1) 1]\n      [(= car1 car2) 0]\n    \
    \  [(= car2 car1) 0]\n      [(= car1 car2) 1]\n      [(= car2 car1) 1]\n     \
    \ [(= car1 car2) 0]\n      [(= car2 car1) 0]\n      [(= car1 car2) 1]\n      [(=\
    \ car2 car1) 1]\n      [(= car1 car2) 0]\n      [(= car", "  (define (collision\
    \ car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n  \
    \    [(= car1 car2) 2]\n      [(= (car car1) (car car2)) 3]\n      [(< (car car1)\
    \ (car car2)) (+ (collision (car car1) (car car2)) (collision (car car2) (car\
    \ car1)))]\n      [(> (car car1) (car car2)) (+ (collision (car car1) (car car2))\
    \ (collision (car car2) (car car1)))]\n      [(= (car car1) (car car2)) (+ (collision\
    \ (car car1) (car car2)) (collision (car car2) (car car1)))]\n      [(< (car car1)\
    \ (car car2)) (+ (collision (car car1) (car car2)) (collision (car car2) (car\
    \ car1)))]\n      [(> (car car1) (car car2)) (+ (collision (car car1) (car car2))\
    \ (collision (car car2) (car car1)))]\n      [(= (car car1) (car car2)) (+ (collision\
    \ (car car1) (car car2)) (collision (car car2) (car car1)))]\n      [(< (car car1)\
    \ (car car2)) (+ (collision (car car1) (car car2)) (collision (car car2) (car\
    \ car1)))]\n      [(> (car car1) (car car2)) (+ (collision (car car1) (car car2))\
    \ (collision (car car2) (car car1)))]\n      [(= (car car1) (car car2)) (+ (collision\
    \ (car car1) (car car2)) (collision (car car2) (car car1)))]\n      [(< (car car1)\
    \ (car car2)) (+ (collision (car car1) (car car2)) (collision (car car2) (car\
    \ car1)))]\n      [(> (car car1) (car car2)) (+ (collision (car car1) (car car2))\
    \ (collision (car car2) (car car1)))]\n      [(= (car car1) (car car2)) (+ (collision\
    \ (car car1) (car car2)) (collision (car car2) (car car1)))]\n      [(< (car car1)\
    \ (car car2)) (+ (collision (car car1) (car car2)) (collision (", "  (let ((cars\
    \ (make-array n '(list 'car))))\n    (define (collides car1 car2)\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2) (car-speed\
    \ car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2)\
    \ (car-speed car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car2) (car-speed car1))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car2) (car-speed car1))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car2) (car-speed car1))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2) (car-speed\
    \ car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2)\
    \ (car-speed car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car2) (car-speed car1))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car2) (car-speed car1))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car2) (car-speed car1))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2) (car-speed\
    \ car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2)\
    \ (car-speed car1))\n      (< (car-speed car1) (car-", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (define (collide a b)\n      (< (car a) (car b))\n  \
    \    (< (car b) (car a)))\n    (define (collides i j)\n      (and (<= i j)\n \
    \          (or (= i j)\n               (and (<= (car a) (car b))\n           \
    \         (<= (car b) (car a))))\n           (and (<= (car a) (car b))\n     \
    \           (<= (car b) (car a))))\n      (and (<= i j)\n           (or (= i j)\n\
    \               (and (<= (car a) (car b))\n                    (<= (car b) (car\
    \ a))))\n           (and (<= (car a) (car b))\n                (<= (car b) (car\
    \ a))))\n      (and (<= i j)\n           (or (= i j)\n               (and (<=\
    \ (car a) (car b))\n                    (<= (car b) (car a))))\n           (and\
    \ (<= (car a) (car b))\n                (<= (car b) (car a))))\n      (and (<=\
    \ i j)\n           (or (= i j)\n               (and (<= (car a) (car b))\n   \
    \                 (<= (car b) (car a))))\n           (and (<= (car a) (car b))\n\
    \                (<= (car b) (car a))))\n      (and (<= i j)\n           (or (=\
    \ i j)\n               (and (<= (car a) (car b))\n                    (<= (car\
    \ b) (car a))))\n           (and (<= (car a) (car b))\n                (<= (car\
    \ b) (car a))))\n      (and (<= i j)\n           (or (= i j)\n               (and\
    \ (<= (car a) (car b))\n                    (<= (car b) (car a))))\n         \
    \  (and (<= (car a) (car b))\n                (<= (car b) (car a))))\n      (and\
    \ (<= i j)\n           (or (= i j)\n               (and (<= (car a) (car b))\n\
    \                    (<= (car b) (car a))))\n           (and (<= (car a) (car\
    \ b))\n                (<= (car b) (car a))))\n      (and (<= i j)\n         \
    \  (or (= i j)\n               (and (<= (car a) (car b))\n                   \
    \ (<= (car b) (car a))))\n           (and (<= (car a) (car b))\n             \
    \   (<= (car b) (car a))))\n      (and (<= ", "  (define (collision-count a b)\n\
    \    (cond\n      [(< a b) (+ a 1)]\n      [(> a b) (+ b 1)]\n      [else 0]))\n\
    \  (define (collide a b)\n    (cond\n      [(< a b) (+ a 1)]\n      [(> a b) (+\
    \ b 1)]\n      [else 0]))\n  (define (collides a-list b-list)\n    (cond\n   \
    \   [(empty? a-list) (empty? b-list)]\n      [(empty? b-list) (empty? a-list)]\n\
    \      [(< (car a-list) (car b-list)) (collide (car a-list) (car b-list))]\n \
    \     [else (collides (cdr a-list) (cdr b-list))]))\n  (define (collides-list\
    \ a-list b-list)\n    (cond\n      [(empty? a-list) (empty? b-list)]\n      [(empty?\
    \ b-list) (empty? a-list)]\n      [(< (car a-list) (car b-list)) (cons (car a-list)\
    \ (cons (car b-list) (collision-count (car a-list) (car b-list))))]\n      [else\
    \ (cons (car a-list) (cons (car b-list) (collision-count (car a-list) (car b-list))))]))\n\
    \  (define (collides-list-2 a-list b-list)\n    (cond\n      [(empty? a-list)\
    \ (empty? b-list)]\n      [(empty? b-list) (empty? a-list)]\n      [(< (car a-list)\
    \ (car b-list)) (cons (car a-list) (cons (car b-list) (collision-count (car a-list)\
    \ (car b-list))))]\n      [else (cons (car a-list) (cons (car b-list) (collision-count\
    \ (car a-list) (car b-list))))]))\n  (define (collides-list-3 a-list b-list)\n\
    \    (cond\n      [(empty? a-list) (empty? b-list)]\n      [(empty? b-list) (empty?\
    \ a-list)]\n      [(< (car a-list) (car b-list)) (cons (car a-list) (cons (car\
    \ b-list) (collision-count (car a-list) (car b-list))))]\n      [else (cons (car\
    \ a-list) (cons (car b-list) (collision-count (car a-list) (car b-list))))]))\n\
    \  (define (colli", "  (define (collide x y)\n    (cond\n      [(< (abs (- x y))\
    \ n) 0]\n      [else 1]))\n  (define (collides xs ys)\n    (cond\n      [(empty?\
    \ xs) 0]\n      [(empty? ys) 0]\n      [(< (car (first xs)) (car (first ys)))\
    \ 0]\n      [else (+ (* n 1) (collide (car (first xs)) (car (first ys))))]))\n\
    \  (define (collides-list xs ys)\n    (cond\n      [(empty? xs) 0]\n      [(empty?\
    \ ys) 0]\n      [(< (car (first xs)) (car (first ys))) 0]\n      [else (+ (* n\
    \ 1) (collides (xs (rest xs)) (ys (rest ys))))]))\n  (define (collides-list-tail\
    \ xs ys n)\n    (cond\n      [(empty? xs) 0]\n      [(empty? ys) 0]\n      [(<\
    \ (car (first xs)) (car (first ys))) 0]\n      [else (+ (* n 1) (collides-list-tail\
    \ (xs (rest xs)) (ys (rest ys)) n))]))\n  (define (collides-list-tail-tail xs\
    \ ys n m)\n    (cond\n      [(empty? xs) 0]\n      [(empty? ys) 0]\n      [(<\
    \ (car (first xs)) (car (first ys))) 0]\n      [else (+ (* m n) (collides-list-tail-tail\
    \ (xs (rest xs)) (ys (rest ys)) n (+ m n)))]))\n  (define (collides-list-tail-tail-tail\
    \ xs ys n m n)\n    (cond\n      [(empty? xs) 0]\n      [(empty? ys) 0]\n    \
    \  [(< (car (first xs)) (car (first ys))) 0]\n      [else (+ (* m n) (collides-list-tail-tail-tail\
    \ (xs (rest xs)) (ys (rest ys)) n (+ m n) (+ n m)))]))\n  (define (collides-list-tail-tail-tail-tail\
    \ xs ys n m n m)\n    (cond\n      [(empty? xs) 0]\n      [(empty? ys) 0]\n  \
    \    [(< (car (first xs)) (car (first ys))) 0]\n      [else (", "  (define (collide\
    \ a b)\n    (< (abs (- a b)) n))\n  (define (collides a)\n    (cond ((null? a)\
    \ 0)\n          ((collide (car a) (car b))\n           (+ 1 (car-race_collision\
    \ (- n 1))))\n          (else (+ 1 (car-race_collision (- n 1))))))\n  (define\
    \ (collides-list a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car\
    \ b))\n           (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1))))\n          (else (+ 1 (car-race_collision (- n 1)))))))\n", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (define (collides car other-car)\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-",
  "  (let ((cars (make-array n '(list 'car))))\n    (define (collides car1 car2)\n\
    \      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2) (car-speed\
    \ car1)))\n    (let loop ((i 0) (cars cars))\n      (if (< i n)\n          (if\
    \ (and (< i 1) (< i (+ n 1)))\n              (if (and (< i (+ n 2)) (< i (+ n\
    \ 3)))\n                  (if (and (< i (+ n 4)) (< i (+ n 5)))\n            \
    \          (if (and (< i (+ n 6)) (< i (+ n 7)))\n                          (if\
    \ (and (< i (+ n 8)) (< i (+ n 9)))\n                              (if (and (<\
    \ i (+ n 10)) (< i (+ n 11)))\n                                  (if (and (< i\
    \ (+ n 12)) (< i (+ n 13)))\n                                      (if (and (<\
    \ i (+ n 14)) (< i (+ n 15)))\n                                          (if (and\
    \ (< i (+ n 16)) (< i (+ n 17)))\n                                           \
    \   (if (and (< i (+ n 18)) (< i (+ n 19)))\n                                \
    \                  (if (and (< i (+ n 20)) (< i (+ n 21)))\n                 \
    \                                     (if (and (< i (+ n 22)) (< i (+ n 23)))\n\
    \                                                          (if (and (< i (+ n\
    \ 24)) (< i (+ n 25)))\n                                                     \
    \         (if (and (< i (+ n 26)) (< i (+ n 27)))\n                          \
    \                                        (if (and (< i (+ n 28)) (< i (+ n 29)))\n\
    \                                                                      (if (and\
    \ (< i (+ n 30)) (< i (+ n 31)))\n                                           \
    \                               (if (and (< i (+ n 32)) (< i (+ n 33)))\n    \
    \                                                                          (if\
    \ (and (< i (+ n 34)) (< i (+ n 35)))\n                                      \
    \                                            (if (and (< i (+ n 36)) (< i (+ n\
    \ 37)))\n                                                                    \
    \                  (if (and (< i (+ n 38)) (< i (+ n 39)))\n                 \
    \                                                                         (if\
    \ (and (< i (+ n 40)) (< i (+ n 41)))\n                                      \
    \                                                        (if (and (< i (+ n 42))\
    \ (< i (+ n 43)))\n                                                          \
    \                                        (if (and (< i (+ n 44)) (< i (+ n 45)))\n\
    \                                                                            \
    \                          (if (and (< i (+ n 46)) (< i (+ n 47)))\n         \
    \                                                                            \
    \                     (if (and (< ", "  (define (collision car other-car)\n  \
    \  (cond [(and (< car n) (< other-car n)) 0]\n          [(and (> car n) (< other-car\
    \ n)) 0]\n          [(and (> car n) (> other-car n)) 0]\n          [else 1]))\n\
    \  (define (collide car other-car)\n    (cond [(and (< car n) (< other-car n))\
    \ 0]\n          [(and (> car n) (< other-car n)) 0]\n          [(and (> car n)\
    \ (> other-car n)) 0]\n          [else 1]))\n  (define (collides cars other-cars)\n\
    \    (cond [(and (< car n) (< other-car n)) 0]\n          [(and (> car n) (< other-car\
    \ n)) 0]\n          [(and (> car n) (> other-car n)) 0]\n          [else (+ cars\
    \ (* n 2))]))\n  (define (collides-list cars other-cars)\n    (cond [(and (< car\
    \ n) (< other-car n)) 0]\n          [(and (> car n) (< other-car n)) 0]\n    \
    \      [(and (> car n) (> other-car n)) 0]\n          [else (cons car cars (cons\
    \ other-car other-cars))]))\n  (define (collides-list-cons cars other-cars)\n\
    \    (cond [(and (< car n) (< other-car n)) 0]\n          [(and (> car n) (< other-car\
    \ n)) 0]\n          [(and (> car n) (> other-car n)) 0]\n          [else (cons\
    \ car cars (cons other-car other-cars))]))\n  (define (collides-list-cons-cons\
    \ cars other-cars)\n    (cond [(and (< car n) (< other-car n)) 0]\n          [(and\
    \ (> car n) (< other-car n)) 0]\n          [(and (> car n) (> other-car n)) 0]\n\
    \          [else (cons car cars (cons other-car other-cars))]))\n  (define (collides-list-cons-cons-cons\
    \ cars other-cars)\n    (cond [(and (< car n) (< other-car n)) 0]\n          [(and\
    \ (> ", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides\
    \ a)\n    (filter (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-all\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-all-pairs\
    \ a)\n    (map (lambda (b) (cons (cons a b) (car_list b)))\n          (car_list\
    \ a)))\n  (define (collides-all-pairs-all a)\n    (map (lambda (b) (cons (cons\
    \ a b) (car_list b)))\n          (car_list a)))\n  (define (collides-all-pairs-all-pairs\
    \ a)\n    (map (lambda (b) (cons (cons a b) (car_list b)))\n          (car_list\
    \ a)))\n  (define (collides-all-pairs-all-pairs-all a)\n    (map (lambda (b) (cons\
    \ (cons a b) (car_list b)))\n          (car_list a)))\n  (define (collides-all-pairs-all-pairs-all-pairs\
    \ a)\n    (map (lambda (b) (cons (cons a b) (car_list b)))\n          (car_list\
    \ a)))\n  (define (collides-all-pairs-all-pairs-all-pairs-all a)\n    (map (lambda\
    \ (b) (cons (cons a b) (car_list b)))\n          (car_list a)))\n  (define (collides-all-pairs-all-pairs-all-pairs-all-pairs\
    \ a)\n    (map (lambda (b) (cons (cons a b) (car_list b)))\n          (car_list\
    \ a)))\n  (define (collides-all-pairs-all-pairs-all-pairs-all-pairs-all a)\n \
    \   (map (lambda (b) (cons (cons a b) (car_list b)))\n          (car_list a)))\n\
    \  (define (collides-all-pairs-all-pairs-all-pairs-all-pairs-all-pairs a)\n  \
    \  (map (lambda (b) (cons (cons a b) (car_list b)))\n          (car_list a)))\n\
    \  (define (collides-all-pairs-all-pairs-all-pairs-all-pairs-all-pairs-all a)\n\
    \    (map (lambda (b) (cons (cons a b) (car_list b)))\n          (car_list a)))\n\
    \  (define (collides-all-pairs-all-pairs-all-pairs-all-pairs-", "  (define (collide\
    \ a b)\n    (< (abs (- a b)) n))\n  (define (collides a-list)\n    (cond ((null?\
    \ a-list) 0)\n          ((and (not (null? (cdr a-list)))\n               (not\
    \ (null? (cdr (cdr a-list))))\n               (not (null? (cdr (cdr (cdr a-list))))\n\
    \               (not (null? (cdr (cdr (cdr (cdr a-list))))))\n           (+ (car\
    \ (car a-list)) (car_race_collision (- n 1))))\n          ((and (not (null? (cdr\
    \ a-list)))\n               (not (null? (cdr (cdr a-list))))\n               (not\
    \ (null? (cdr (cdr (cdr a-list))))\n               (not (null? (cdr (cdr (cdr\
    \ (cdr a-list))))))\n           (+ (car (car a-list)) (car_race_collision (- n\
    \ 1))))\n          ((and (not (null? (cdr a-list)))\n               (not (null?\
    \ (cdr (cdr a-list))))\n               (not (null? (cdr (cdr (cdr a-list))))\n\
    \               (not (null? (cdr (cdr (cdr (cdr a-list))))))\n           (+ (car\
    \ (car a-list)) (car_race_collision (- n 1))))\n          ((and (not (null? (cdr\
    \ a-list)))\n               (not (null? (cdr (cdr a-list))))\n               (not\
    \ (null? (cdr (cdr (cdr a-list))))\n               (not (null? (cdr (cdr (cdr\
    \ (cdr a-list))))))\n           (+ (car (car a-list)) (car_race_collision (- n\
    \ 1))))\n          ((and (not (null? (cdr a-list)))\n               (not (null?\
    \ (cdr (cdr a-list))))\n               (not (null? (cdr (cdr (cdr a-list))))\n\
    \               (not (null? (cdr (cdr (cdr (cdr a-list))))))\n           (+ (car\
    \ (car a-list)) (car_race_collision (- n 1))))\n          ((and (not (null? (cdr\
    \ a-list)))\n               (not (null? (cdr (cdr a-list))))\n               (not\
    \ (null? (", "  (let ((cars (make-array n '(list 'car))))\n    (define (collide\
    \ x y)\n      (< (car x) (car y))\n      (< (car y) (car x)))\n    (define (collide?\
    \ x y)\n      (and (collide x y)\n           (not (collide y x))))\n    (define\
    \ (collides xs ys)\n      (cond ((null? xs) 0)\n            ((null? ys) 0)\n \
    \           (else (+ (count (filter (lambda (x) (not (null? xs))) xs)\n      \
    \                   (count (filter (lambda (y) (not (null? ys))) ys))))\n    \
    \        (else (+ (count (filter (lambda (x) (not (null? ys))) xs)\n         \
    \                (count (filter (lambda (y) (not (null? xs))) ys)))))))\n    (define\
    \ (collide? x y)\n      (and (collide x y)\n           (not (collide y x))))\n\
    \    (define (collides xs ys)\n      (cond ((null? xs) 0)\n            ((null?\
    \ ys) 0)\n            (else (+ (count (filter (lambda (x) (not (null? xs))) xs)\n\
    \                         (count (filter (lambda (y) (not (null? ys))) ys))))\n\
    \            (else (+ (count (filter (lambda (x) (not (null? ys))) xs)\n     \
    \                    (count (filter (lambda (y) (not (null? xs))) ys)))))))\n\
    \    (define (collide? x y)\n      (and (collide x y)\n           (not (collide\
    \ y x))))\n    (define (collides xs ys)\n      (cond ((null? xs) 0)\n        \
    \    ((null? ys) 0)\n            (else (+ (count (filter (lambda (x) (not (null?\
    \ xs))) xs)\n                         (count (filter (lambda (y) (not (null? ys)))\
    \ ys))))\n            (else (+ (count (filter (lambda (x) (not (null? ys))) xs)\n\
    \                         (count (filter (lambda (y) (not (null? xs))) ys)))))))\n\
    \    (define (collide? x y)\n      (and (collide x y)\n           (not (collide\
    \ y x))))\n    (define (collides xs ys)\n      (cond ((null? xs) 0)\n        \
    \    ((null? ys) 0)\n            (else (+ (count ", "  (define (collision car1\
    \ car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n\
    \          ((and (< car1 car2) (< car2 car2))\n           (+ car2 car1))\n   \
    \       (else\n           (+ car1 car2)))\n  (define (collide car1 car2)\n   \
    \ (cond ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n      \
    \    ((and (< car1 car2) (< car2 car2))\n           (+ car2 car1))\n         \
    \ (else\n           (+ car1 car2)))\n  (define (collides cars)\n    (cond ((null?\
    \ cars)\n           0)\n          ((and (< (car cars) (car cars))\n          \
    \     (< (car cars) (car (cdr cars))))\n           (+ 1 (collision (car cars)\
    \ (car (cdr cars)))))\n          ((and (< (car cars) (car cars))\n           \
    \    (< (car cars) (car (cdr cars))))\n           (+ 1 (collision (car cars) (car\
    \ (cdr cars)))))\n          (else\n           (+ 1 (collision (car cars) (car\
    \ (cdr cars))))))\n  (define (collides-list cars)\n    (cond ((null? cars)\n \
    \          0)\n          ((and (< (car cars) (car cars))\n               (< (car\
    \ cars) (car (cdr cars))))\n           (+ 1 (collision (car cars) (car (cdr cars)))))\n\
    \          ((and (< (car cars) (car cars))\n               (< (car cars) (car\
    \ (cdr cars))))\n           (+ 1 (collision (car cars) (car (cdr cars)))))\n \
    \         (else\n           (+ 1 (collision (car cars) (car (cdr cars))))))\n\
    \  (define (collides-list-2 cars)\n    (cond ((null? cars)\n           0)\n  \
    \        ((and (< (car cars) (car cars))\n               (< (car cars) (car (cdr\
    \ cars))))\n           (+ 1 (collision (car cars) (car (cdr cars)))))\n      \
    \    ((and (< (car cars) (car cars))\n               (< (car cars) (car (cdr cars))))\n\
    \           (+ 1 (collision", "  (define (collide a b)\n    (< (abs (- a b)) n))\n\
    \  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a)\
    \ (car b))\n           (+ 1 (car-race_collision n)))\n          (else (+ 1 (car-race_collision\
    \ n)))))\n  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide\
    \ (car a) (car b))\n           (+ 1 (car-race_collision n)))\n          (else\
    \ (+ 1 (car-race_collision n)))))\n  (define (collides a)\n    (cond ((null? a)\
    \ 0)\n          ((collide (car a) (car b))\n           (+ 1 (car-race_collision\
    \ n)))\n          (else (+ 1 (car-race_collision n)))))\n  (define (collides a)\n\
    \    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n           (+\
    \ 1 (car-race_collision n)))\n          (else (+ 1 (car-race_collision n)))))\n\
    \  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a)\
    \ (car b))\n           (+ 1 (car-race_collision n)))\n          (else (+ 1 (car-race_collision\
    \ n)))))\n  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide\
    \ (car a) (car b))\n           (+ 1 (car-race_collision n)))\n          (else\
    \ (+ 1 (car-race_collision n)))))\n  (define (collides a)\n    (cond ((null? a)\
    \ 0)\n          ((collide (car a) (car b))\n           (+ 1 (car-race_collision\
    \ n)))\n          (else (+ 1 (car-race_collision n)))))\n  (define (collides a)\n\
    \    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n           (+\
    \ 1 (car-race_collision n)))\n          (else (+ 1 (car-race_collision n)))))\n\
    \  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a)\
    \ (car b))\n           (+ 1 (car-race_collision", "  (let ((cars (make-array n\
    \ #:element-type 'car)))\n    (define (collide x y)\n      (< (car x) (car y))\n\
    \      (< (car y) (car x)))\n    (define (collides i j)\n      (and (<= i j)\n\
    \           (or (collide (car cars i) (car cars j))\n               (collide (car\
    \ cars j) (car cars i))))\n    (define (collides-in i j k)\n      (and (<= i j)\n\
    \           (or (collides i k)\n               (collides k j))))\n    (define\
    \ (collides-in i j k)\n      (and (<= i j)\n           (or (collides i k)\n  \
    \             (collides k j))))\n    (define (collides-in i j k)\n      (and (<=\
    \ i j)\n           (or (collides i k)\n               (collides k j))))\n    (define\
    \ (collides-in i j k)\n      (and (<= i j)\n           (or (collides i k)\n  \
    \             (collides k j))))\n    (define (collides-in i j k)\n      (and (<=\
    \ i j)\n           (or (collides i k)\n               (collides k j))))\n    (define\
    \ (collides-in i j k)\n      (and (<= i j)\n           (or (collides i k)\n  \
    \             (collides k j))))\n    (define (collides-in i j k)\n      (and (<=\
    \ i j)\n           (or (collides i k)\n               (collides k j))))\n    (define\
    \ (collides-in i j k)\n      (and (<= i j)\n           (or (collides i k)\n  \
    \             (collides k j))))\n    (define (collides-in i j k)\n      (and (<=\
    \ i j)\n           (or (collides i k)\n               (collides k j))))\n    (define\
    \ (collides-in i j k)\n      (and (<= i j)\n           (or (collides i k)\n  \
    \             (collides k j))))\n    (define (collides-in i j k)\n      (and (<=\
    \ i j)\n           (or (collides i k)\n               (collides k j))))\n    (define\
    \ (collides-in i j k)\n      (and (<= i j)\n           (or (collides i k)\n  \
    \             (collides k j))))\n    (define (collides-in i j k)\n      (", " \
    \ (let ((cars (make-array (* n n) '(unsigned-byte 8))))\n    (dotimes (i n)\n\
    \      (dotimes (j n)\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars\
    \ (+ cars (* j i)))\n        (set! cars (+ cars (* i ", "  (let ((cars (make-array\
    \ n '(lambda (i j) (cons i j)))))\n    (define (collide i j)\n      (cond\n  \
    \      ((< i j) (cons i j))\n        ((< j i) (cons j i))\n        ((< i j) (cons\
    \ j i))\n        ((< j i) (cons i j))\n        (else (cons i j))))\n    (let loop\
    \ ((i 0) (j 0))\n      (cond\n        ((< i n) (loop (+ i 1) (+ j 1)))\n     \
    \   ((< j n) (loop (+ i 1) (- j 1)))\n        ((< i n) (loop (+ i 1) (- j 1)))\n\
    \        ((< j n) (loop (- i 1) (+ j 1)))\n        (else (loop (+ i 1) (- j 1))))))\n\
    \    (let ((collisions (loop (+ i 1) (+ j 1))))\n      (cond\n        ((null?\
    \ collisions) 0)\n        (else (+ 1 (car collisions))))))\n", "  (let ([cars\
    \ (make-array (* n n) '(list 'car))])\n    (define (collision i j)\n      (if\
    \ (= i j)\n          0\n          (if (> (car-x cars) (car-x cars (+ i 1)))\n\
    \              (if (> (car-y cars) (car-y cars (+ i 1)))\n                  (if\
    \ (> (car-x cars) (car-x cars (+ j 1)))\n                      (if (> (car-y cars)\
    \ (car-y cars (+ j 1)))\n                          (+ 1 (collision (+ i 1) (+\
    \ j 1)))\n                          (+ 1 (collision (+ i 1) (+ j 1)))\n      \
    \                    (+ 1 (collision (+ i 1) (+ j 1)))\n                     \
    \     (+ 1 (collision (+ i 1) (+ j 1)))\n                          (+ 1 (collision\
    \ (+ i 1) (+ j 1)))\n                          (+ 1 (collision (+ i 1) (+ j 1)))\n\
    \                          (+ 1 (collision (+ i 1) (+ j 1)))\n               \
    \           (+ 1 (collision (+ i 1) (+ j 1)))\n                          (+ 1\
    \ (collision (+ i 1) (+ j 1)))\n                          (+ 1 (collision (+ i\
    \ 1) (+ j 1)))\n                          (+ 1 (collision (+ i 1) (+ j 1)))\n\
    \                          (+ 1 (collision (+ i 1) (+ j 1)))\n               \
    \           (+ 1 (collision (+ i 1) (+ j 1)))\n                          (+ 1\
    \ (collision (+ i 1) (+ j 1)))\n                          (+ 1 (collision (+ i\
    \ 1) (+ j 1)))\n                          (+ 1 (collision (+ i 1) (+ j 1)))\n\
    \                          (+ 1 (collision (+ i 1) (+ j 1)))\n               \
    \           (+ 1 (collision (+ i 1) (+ j 1)))\n                          (+ 1\
    \ (collision (+ i 1) (+ j 1)))\n                          (+ 1 (collision (+ i\
    \ 1) (+ j 1)))\n                          (+ 1 (collision (+ i 1) (+ j 1)))\n\
    \                          (+ 1 (collision (+ i 1) (+ j 1)))\n               \
    \           (+ 1 (collision (+ i 1) (+ j 1)))\n                          (+ 1\
    \ (collision (+ i 1) (+ j 1)))\n                          (+ 1 (collision (+ i\
    \ 1) (+ j 1)))\n                          (+ 1 (collision (+ i 1) (+ j 1)))\n\
    \                          (+ 1 (collision (+ i 1) (+ j 1)))\n               \
    \           (+ 1 (collision (+ i 1) (+ j 1)))\n                          (+ 1\
    \ (collision (+ ", "  (define (collide a b)\n    (cond\n      [(< a b) 0]\n  \
    \    [(> a b) 1]\n      [else (+ a b)]))\n  (define (collides a-1 b-2)\n    (cond\n\
    \      [(< a-1 b-2) 0]\n      [(> a-1 b-2) 1]\n      [else (+ a-1 b-2)]))\n  (define\
    \ (collides a-1 b-3)\n    (cond\n      [(< a-1 b-3) 0]\n      [(> a-1 b-3) 1]\n\
    \      [else (+ a-1 b-3)]))\n  (define (collides a-1 b-4)\n    (cond\n      [(<\
    \ a-1 b-4) 0]\n      [(> a-1 b-4) 1]\n      [else (+ a-1 b-4)]))\n  (define (collides\
    \ a-1 b-5)\n    (cond\n      [(< a-1 b-5) 0]\n      [(> a-1 b-5) 1]\n      [else\
    \ (+ a-1 b-5)]))\n  (define (collides a-1 b-6)\n    (cond\n      [(< a-1 b-6)\
    \ 0]\n      [(> a-1 b-6) 1]\n      [else (+ a-1 b-6)]))\n  (define (collides a-1\
    \ b-7)\n    (cond\n      [(< a-1 b-7) 0]\n      [(> a-1 b-7) 1]\n      [else (+\
    \ a-1 b-7)]))\n  (define (collides a-1 b-8)\n    (cond\n      [(< a-1 b-8) 0]\n\
    \      [(> a-1 b-8) 1]\n      [else (+ a-1 b-8)]))\n  (define (collides a-1 b-9)\n\
    \    (cond\n      [(< a-1 b-9) 0]\n      [(> a-1 b-9) 1]\n      [else (+ a-1 b-9)]))\n\
    \  (define (collides a-1 b-10)\n    (cond\n      [(< a-1 b-10) 0]\n      [(> a-1\
    \ b-10) 1]\n      [else (+ a-1 b-10)]))\n  (define (collides a-1 b-11)\n    (cond\n\
    \      [(< a-1 b-11) 0]\n      [(> a-1 b-11) 1]\n      [else (+ a-1 b-11)]))\n\
    \  (define (collides a-1 b-12)\n    (cond\n      [(< a-1 b-12) 0]\n      [(> a-1\
    \ b-12) 1]\n      [else (", "  (define (collide a b)\n    (< (abs (- a b)) n))\n\
    \  (define (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a)\
    \ (car b))\n           (+ 1 (car-race_collision (- n 1))))\n          (else (+\
    \ 1 (car-race_collision (- n 1))))))\n  (define (collides-list a)\n    (cond ((null?\
    \ a) '())\n          ((collide (car a) (car b))\n           (cons (car a) (cons\
    \ (car b) (collides-list (cdr a))))))\n          (else (cons (car a) (collides-list\
    \ (cdr a))))))\n  (define (collides-list-helper a b)\n    (cond ((null? a) b)\n\
    \          ((collide (car a) (car b))\n           (cons (car a) (cons (car b)\
    \ (collides-list-helper (cdr a) (cdr b))))))\n          (else (cons (car a) (collides-list-helper\
    \ (cdr a) (cdr b))))))\n  (define (collides-list-helper a b)\n    (cond ((null?\
    \ a) b)\n          ((collide (car a) (car b))\n           (cons (car a) (cons\
    \ (car b) (collides-list-helper (cdr a) (cdr b))))))\n          (else (cons (car\
    \ a) (collides-list-helper (cdr a) (cdr b))))))\n  (define (collides-list-helper\
    \ a b)\n    (cond ((null? a) b)\n          ((collide (car a) (car b))\n      \
    \     (cons (car a) (cons (car b) (collides-list-helper (cdr a) (cdr b))))))\n\
    \          (else (cons (car a) (collides-list-helper (cdr a) (cdr b))))))\n  (define\
    \ (collides-list-helper a b)\n    (cond ((null? a) b)\n          ((collide (car\
    \ a) (car b))\n           (cons (car a) (cons (car b) (collides-list-helper (cdr\
    \ a) (cdr b))))))\n          (else (cons (car a) (collides-list-helper (cdr a)\
    \ (cdr b))))", "  (let ((cars (make-array (list n (make-array n '(list 'car))))))\n\
    \    (define (collide x y)\n      (< (car-x x) (car-x y))\n      (< (car-y x)\
    \ (car-y y)))\n    (define (collides i j)\n      (and (< i (- n 1))\n        \
    \   (< j (- n 1))\n           (and (< i j)\n                (< i (- j 1))\n  \
    \              (< j (- j 1))\n                (and (< i (- n 2))\n           \
    \          (< j (- n 2))\n                     (and (< i (- j 2))\n          \
    \                (< j (- j 2))\n                          (collide (car-x cars)\
    \ (car-y cars))))))\n    (define (collides-loop i j)\n      (if (or (< i n)\n\
    \              (< j n))\n          (if (or (< i j)\n                  (< i j)\n\
    \                  (< j j)\n                  (< i (- j 1))\n                \
    \  (< j (- j 1))\n                  (< i (- j 2))\n                  (< j (- j\
    \ 2))\n                  (collide (car-x cars) (car-y cars))))\n          (if\
    \ (or (< i j)\n                  (< i j)\n                  (< j j)\n        \
    \          (< i (- j 1))\n                  (< j (- j 1))\n                  (<\
    \ i (- j 2))\n                  (< j (- j 2))\n                  (collides i j))\n\
    \              (if (or (< i j)\n                      (< i j)\n              \
    \        (< j j)\n                      (< i (- j 1))\n                      (<\
    \ j (- j 1))\n                      (< i (- j 2))\n                      (< j\
    \ (- j 2))\n                      (collides-loop i (- j 1))\n                \
    \      (collides-loop (- j 1) j))\n                  (if (or (< i j)\n       \
    \                   (< i j)\n                          (< j j)\n             \
    \             (< i (- j 1))\n                          (< j (- j 1))\n       \
    \                   (< i (- j 2))\n                          (< j (- j 2))\n \
    \                         (collides-loop i (- j 2))\n                        \
    \  (collides-loop (- j 2) j))\n                      (if (or (< i j)\n       \
    \                       (< i j)\n                              (< j j)\n     \
    \                         (< i (- j 1))\n                              (< j (-\
    \ j 1))\n                              (< i (- j 2))\n                       \
    \       ", "  (let ((cars (make-array (list n (make-array '(list 'car))))))\n\
    \    (set! cars (make-array (list n (make-array '(list 'car))))))\n    (set! cars\
    \ (make-array (list n (make-array '(list 'car))))))\n    (set! cars (make-array\
    \ (list n (make-array '(list 'car))))))\n    (set! cars (make-array (list n (make-array\
    \ '(list 'car))))))\n    (set! cars (make-array (list n (make-array '(list 'car))))))\n\
    \    (set! cars (make-array (list n (make-array '(list 'car))))))\n    (set! cars\
    \ (make-array (list n (make-array '(list 'car))))))\n    (set! cars (make-array\
    \ (list n (make-array '(list 'car))))))\n    (set! cars (make-array (list n (make-array\
    \ '(list 'car))))))\n    (set! cars (make-array (list n (make-array '(list 'car))))))\n\
    \    (set! cars (make-array (list n (make-array '(list 'car))))))\n    (set! cars\
    \ (make-array (list n (make-array '(list 'car))))))\n    (set! cars (make-array\
    \ (list n (make-array '(list 'car))))))\n    (set! cars (make-array (list n (make-array\
    \ '(list 'car))))))\n    (set! cars (make-array (list n (make-array '(list 'car))))))\n\
    \    (set! cars (make-array (list n (make-array '(list 'car))))))\n    (set! cars\
    \ (make-array (list n (make-array '(list 'car))))))\n    (set! cars (make-array\
    \ (list n (make-array '(list 'car))))))\n    (set! cars (make-array (list n (make-array\
    \ '(list 'car))))))\n    (set! cars (make-array (list n (make-array '(list 'car))))))\n\
    \    (set! cars (make-array (list n (make-array '(list 'car))))))\n    (set! cars\
    \ (make-array (list n (make-array '(list 'car))))))\n    (set! cars (make-array\
    \ (list n (make-array '(list 'car))))))\n    (set! cars (make-array (", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (asso", "  (let\
    \ ([cars (make-array n #:initial-contents '(#t #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f ", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides\
    \ a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n        \
    \   (+ 1 (car-race_collision (- n 1))))\n          (else (car-race_collision (-\
    \ n 1)))))\n  (define (collides-list a)\n    (cond ((null? a) '())\n         \
    \ ((collide (car a) (car b))\n           (cons (car a) (cons (car b) (collides-list\
    \ (cdr a))))))\n          (else (cons (car a) (collides-list (cdr a))))))\n  (define\
    \ (collides-list-2 a)\n    (cond ((null? a) '())\n          ((collide (car a)\
    \ (car b))\n           (cons (car a) (cons (car b) (collides-list-2 (cdr a))))))\n\
    \          (else (cons (car a) (collides-list-2 (cdr a))))))\n  (define (collides-list-3\
    \ a)\n    (cond ((null? a) '())\n          ((collide (car a) (car b))\n      \
    \     (cons (car a) (cons (car b) (collides-list-3 (cdr a))))))\n          (else\
    \ (cons (car a) (collides-list-3 (cdr a))))))\n  (define (collides-list-4 a)\n\
    \    (cond ((null? a) '())\n          ((collide (car a) (car b))\n           (cons\
    \ (car a) (cons (car b) (collides-list-4 (cdr a))))))\n          (else (cons (car\
    \ a) (collides-list-4 (cdr a))))))\n  (define (collides-list-5 a)\n    (cond ((null?\
    \ a) '())\n          ((collide (car a) (car b))\n           (cons (car a) (cons\
    \ (car b) (collides-list-5 (cdr a))))))\n          (else (cons (car a) (collides-list-5\
    \ (cdr a))))))\n  (define (collides-list-6 a)\n    (cond ((null? a) '())\n   \
    \       ((collide (car a) (car b))\n           (cons (car a) (", "  (let ((cars\
    \ (make-array n '(list 'car))))\n    (define (collide a b)\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a)))\n    (define (collide?\
    \ a b)\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a)))\n    (define (collide? a b)\n      (< (car-speed a) (car-speed b))\n  \
    \    (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a)))\n", "  (let ([cars (make-array n #:initial-contents\
    \ '(#t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (let ((cars (make-array\
    \ n #:element-type 'car)))\n    (define (collide x y)\n      (< (car-x x) (car-x\
    \ y))\n      (< (car-y x) (car-y y)))\n    (define (collides xs ys)\n      (for/or\
    \ ([x xs]\n               [y ys])\n        (when (and (not (null? x))\n      \
    \             (not (null? y)))\n          (when (and (collide x y)\n         \
    \            (not (collides xs (cdr ys))))\n            (set! cars (cons x cars))\n\
    \            (set! cars (cons (car y) (cdr cars)))))))\n    (set! cars (cons 'a\
    \ 'b))\n    (set! cars (cons 'b 'a))\n    (set! cars (cons 'a 'c))\n    (set!\
    \ cars (cons 'c 'a))\n    (set! cars (cons 'b 'c))\n    (set! cars (cons 'c 'b))\n\
    \    (set! cars (cons 'a 'd))\n    (set! cars (cons 'd 'a))\n    (set! cars (cons\
    \ 'b 'd))\n    (set! cars (cons 'd 'b))\n    (set! cars (cons 'a 'e))\n    (set!\
    \ cars (cons 'e 'a))\n    (set! cars (cons 'b 'e))\n    (set! cars (cons 'e 'b))\n\
    \    (set! cars (cons 'a 'f))\n    (set! cars (cons 'f 'a))\n    (set! cars (cons\
    \ 'b 'f))\n    (set! cars (cons 'f 'b))\n    (set! cars (cons 'a 'g))\n    (set!\
    \ cars (cons 'g 'a))\n    (set! cars (cons 'b 'g))\n    (set! cars (cons 'g 'b))\n\
    \    (set! cars (cons 'a 'h))\n    (set! cars (cons 'h 'a))\n    (set! cars (cons\
    \ 'b 'h))\n    (set! cars (cons 'h 'b))\n    (set! cars (cons 'a 'i))\n    (set!\
    \ cars (cons 'i 'a))\n    (set! cars (cons 'b 'i))\n    (set! cars (cons 'i 'b))\n\
    \    (set! cars (cons 'a 'j))\n    (set! cars (cons 'j 'a))\n    (set! cars (cons\
    \ 'b 'j))\n    (", "  (define (collision x1 x2)\n    (cond ((< x1 x2) (+ x1 x2))\n\
    \          ((< x2 x1) (+ x2 x1))\n          (else (+ x1 x2))))\n  (define (collisions\
    \ x1 x2)\n    (cond ((< x1 x2) (+ x1 x2))\n          ((< x2 x1) (+ x2 x1))\n \
    \         (else (+ x1 x2))))\n  (define (collision-count x1 x2)\n    (cond ((<\
    \ x1 x2) (+ x1 x2))\n          ((< x2 x1) (+ x2 x1))\n          (else (+ x1 x2))))\n\
    \  (define (collision-count x1 x2 x3)\n    (cond ((< x1 x2) (+ x1 x2))\n     \
    \     ((< x2 x1) (+ x2 x1))\n          ((< x3 x1) (+ x3 x1))\n          (else\
    \ (+ x1 x2))))\n  (define (collision-count x1 x2 x3 x4)\n    (cond ((< x1 x2)\
    \ (+ x1 x2))\n          ((< x2 x1) (+ x2 x1))\n          ((< x3 x1) (+ x3 x1))\n\
    \          ((< x4 x1) (+ x4 x1))\n          (else (+ x1 x2))))\n  (define (collision-count\
    \ x1 x2 x3 x4 x5)\n    (cond ((< x1 x2) (+ x1 x2))\n          ((< x2 x1) (+ x2\
    \ x1))\n          ((< x3 x1) (+ x3 x1))\n          ((< x4 x1) (+ x4 x1))\n   \
    \       ((< x5 x1) (+ x5 x1))\n          (else (+ x1 x2))))\n  (define (collision-count\
    \ x1 x2 x3 x4 x5 x6)\n    (cond ((< x1 x2) (+ x1 x2))\n          ((< x2 x1) (+\
    \ x2 x1))\n          ((< x3 x1) (+ x3 x1))\n          ((< x4 x1) (+ x4 x1))\n\
    \          ((< x5 x1) (+ x5 x1))\n          ((< x6 x1) (+ x6 x1))\n          (else\
    \ (+ x1 x2))))\n  (define (collision", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (dotimes (i n)\n      (set! cars (car-race (car cars) (car cars))))\n   \
    \ (length cars)))\n", "  (let ([cars (make-array (list n) '(lambda (x) (+ x 1)))])\n\
    \    (define (collide x y)\n      (< (+ x y) n))\n    (define (collides x)\n \
    \     (for/or ([x x])\n              ([y (in-array cars x)])\n              (if\
    \ (collide x y)\n                  (+ 1 (collides y)))))\n    (for/or ([x n])\n\
    \          ([y (in-array cars x)])\n          (if (collide x y)\n            \
    \  (+ 1 (collides y)))))\n  0)\n", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (define (collides car1 car2)\n      (< (car-x car1) (car-x car2))\n     \
    \ (< (car-y car1) (car-y car2))\n      (< (car-speed car1) (car-speed car2))\n\
    \      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1)\
    \ (car-", "  (let ((cars (make-array n '(list 'car))))\n    (define (collide a\
    \ b)\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a)))\n    (define (collides a)\n      (cond ((null? a) 0)\n            ((and\
    \ (null? (cdr a)) (null? (cdr (cdr a))))\n             (+ 1 (car-race_collision\
    \ (car a))))\n            (else (+ 1 (car-race_collision (car a))\n          \
    \             (car-race_collision (cdr a))\n                       (car-race_collision\
    \ (cdr (cdr a)))))))\n    (define (collides-list a)\n      (cond ((null? a) 0)\n\
    \            ((and (null? (cdr a)) (null? (cdr (cdr a))))\n             (+ 1 (car-race_collision\
    \ (car a))))\n            (else (+ 1 (car-race_collision (car a))\n          \
    \             (car-race_collision (cdr a))\n                       (car-race_collision\
    \ (cdr (cdr a)))))))\n    (define (collides-list-2 a)\n      (cond ((null? a)\
    \ 0)\n            ((and (null? (cdr a)) (null? (cdr (cdr a))))\n             (+\
    \ 1 (car-race_collision (car a))))\n            (else (+ 1 (car-race_collision\
    \ (car a))\n                       (car-race_collision (cdr a))\n            \
    \           (car-race_collision (cdr (cdr a)))))))\n    (define (collides-list-3\
    \ a)\n      (cond ((null? a) 0)\n            ((and (null? (cdr a)) (null? (cdr\
    \ (cdr a))))\n             (+ 1 (car-race_collision (car a))))\n            (else\
    \ (+ 1 (car-race_collision (car a))\n                       (car-race_collision\
    \ (cdr a))\n                       (car-race_collision (cdr (cdr a)))))))\n  \
    \  (define (collides-list-4 a)\n      (cond ((null? a) 0)\n            ((and (null?\
    \ (cdr a)) (null? (cdr (cdr a))))\n             (+ 1 (car-race_collision (car\
    \ a))))\n            (else (+ 1 (car-race_collision (car a))\n               \
    \        (car-", "  (define (collision x1 x2 y1 y2)\n    (cond ((and (< x1 x2)\
    \ (< y1 y2)) (+ n 1))\n          ((and (> x1 x2) (< y1 y2)) (+ n 1))\n       \
    \   ((and (> x1 x2) (> y1 y2)) (+ n 1))\n          ((and (< x1 x2) (> y1 y2))\
    \ (+ n 1))\n          (else 0)))\n  (define (collisions x1 x2 y1 y2)\n    (cond\
    \ ((and (< x1 x2) (< y1 y2)) (collision x1 x2 y1 y2))\n          ((and (> x1 x2)\
    \ (< y1 y2)) (collision x1 x2 y1 y2))\n          ((and (> x1 x2) (> y1 y2)) (collision\
    \ x1 x2 y1 y2))\n          ((and (< x1 x2) (> y1 y2)) (collision x1 x2 y1 y2))\n\
    \          (else (collision x1 x2 y1 y2))))\n  (define (collision-test x1 x2 y1\
    \ y2)\n    (cond ((and (< x1 x2) (< y1 y2)) (collision x1 x2 y1 y2))\n       \
    \   ((and (> x1 x2) (< y1 y2)) (collision x1 x2 y1 y2))\n          ((and (> x1\
    \ x2) (> y1 y2)) (collision x1 x2 y1 y2))\n          ((and (< x1 x2) (> y1 y2))\
    \ (collision x1 x2 y1 y2))\n          (else (collision x1 x2 y1 y2))))\n  (define\
    \ (collision-test x1 x2 y1 y2)\n    (cond ((and (< x1 x2) (< y1 y2)) (collision\
    \ x1 x2 y1 y2))\n          ((and (> x1 x2) (< y1 y2)) (collision x1 x2 y1 y2))\n\
    \          ((and (> x1 x2) (> y1 y2)) (collision x1 x2 y1 y2))\n          ((and\
    \ (< x1 x2) (> y1 y2)) (collision x1 x2 y1 y2))\n          (else (collision x1\
    \ x2 y1 y2))))\n  (define (collision-test x1 x2 y1 y2)\n    (cond ((and (", " \
    \ (define (collision car1 car2)\n    (cond\n      [(< car1 car2) 1]\n      [(>\
    \ car1 car2) 0]\n      [else (+ collision (collision car1 (- car1 car2))\n   \
    \                    (collision car2 (+ car1 car2)))]))\n  (define (collisions\
    \ cars)\n    (cond\n      [(empty? cars) 0]\n      [(< cars (- n 2)) 0]\n    \
    \  [(< cars (- n 1)) (+ collisions (- cars (- n 1)))]\n      [else (+ collisions\
    \ (- cars (- n 1)))]))\n  (collisions cars))\n", "  (define (collide a b)\n  \
    \  (< (abs (- a b)) n))\n  (define (collides a)\n    (cond ((null? a) 0)\n   \
    \       ((collide (car a) (car b))\n           (+ 1 (car-race_collision (- n 1))))\n\
    \          (else (car-race_collision (- n 1)))))\n  (define (collides-list a)\n\
    \    (cond ((null? a) '())\n          ((collide (car a) (car b))\n           (cons\
    \ (car a) (cons (car b) (collides-list (cdr a))))))\n          (else (cons (car\
    \ a) (collides-list (cdr a)))))\n  (collides-list '()))\n", "  (let ((cars (make-array\
    \ n '(list 'car)))\n        (collisions (make-array n '(list 0))))\n    (dotimes\
    \ (i n)\n      (let ((car cars i)\n            (car-prev cars (i-1))\n       \
    \     (car-next cars i))\n        (set! car-prev (car-prev car))\n        (set!\
    \ car-next (car-next car))\n        (set! car (make-car (car-prev car-prev car-next\
    \ car-next)))\n        (set! collisions (append collisions (car-race car cars)))\n\
    \        (set! cars (append cars (list car))))\n    (length collisions)))\n",
  "  (let ((cars (make-array n '(list 'car)))\n        (car-speed (make-array n '(list\
    \ 'car)))\n        (collisions (make-array n '(list 'car))))\n    (for ((i 0)\
    \ (< n 0))\n      (let ((car (cars i)))\n        (if (> (car-speed i)\n      \
    \        (car-speed (car-speed i)))\n            (set! collisions i)\n       \
    \     (set! cars (cdr cars))\n            (set! car-speed (cdr car-speed))\n \
    \           (set! i (+ i 1))\n            (set! collisions (+ i 1))\n        \
    \    (set! cars (cdr cars))\n            (set! car-speed (cdr car-speed))))\n\
    \      (set! i (+ i 1))\n      (set! collisions (+ i 1))\n      (set! cars (cdr\
    \ cars))\n      (set! car-speed (cdr car-speed))))\n  (set! collisions 0))\n",
  "  (define (collides car other-car)\n    (< (abs (- car (- other-car 1))) 1))\n\
    \  (define (collides-left car other-car)\n    (< (abs (- other-car 1)) (abs (-\
    \ car 1))))\n  (define (collides-right car other-car)\n    (< (abs (- car 1))\
    \ (abs (- other-car 1))))\n  (define (collides-both car other-car)\n    (< (abs\
    \ (- car 1)) (abs (- other-car 1))))\n  (define (collides-left car other-car)\n\
    \    (< (abs (- other-car 1)) (abs (- car 1))))\n  (define (collides-right car\
    \ other-car)\n    (< (abs (- car 1)) (abs (- other-car 1))))\n  (define (collides-both\
    \ car other-car)\n    (< (abs (- car 1)) (abs (- other-car 1))))\n  (define (collides-left\
    \ car other-car)\n    (< (abs (- other-car 1)) (abs (- car 1))))\n  (define (collides-right\
    \ car other-car)\n    (< (abs (- car 1)) (abs (- other-car 1))))\n  (define (collides-both\
    \ car other-car)\n    (< (abs (- car 1)) (abs (- other-car 1))))\n  (define (collides-left\
    \ car other-car)\n    (< (abs (- other-car 1)) (abs (- car 1))))\n  (define (collides-right\
    \ car other-car)\n    (< (abs (- car 1)) (abs (- other-car 1))))\n  (define (collides-both\
    \ car other-car)\n    (< (abs (- car 1)) (abs (- other-car 1))))\n  (define (collides-left\
    \ car other-car)\n    (< (abs (- other-car 1)) (abs (- car 1))))\n  (define (collides-right\
    \ car other-car)\n    (< (abs (- car 1)) (abs (- other-car 1))))\n  (define (collides-both\
    \ car other-car)\n    (< (abs (- car 1)) (abs (- other-car 1))))\n  (define (colli",
  "  (define (collision car1 car2)\n    (cond\n      [(and (< car1 car2) (< car2 car1))\n\
    \       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n\
    \      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1\
    \ car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n\
    \       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n\
    \      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1\
    \ car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n\
    \       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n\
    \      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1\
    \ car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n\
    \       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n\
    \      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1\
    \ car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n\
    \       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n\
    \      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1\
    \ car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n\
    \       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n\
    \      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1\
    \ car2) (< car2 car1))\n       (", "  (let ((cars (make-array (* n n) '(cons car\
    \ car))))\n    (define (collide i j)\n      (< (car cars) (car cars (+ i 1)))\n\
    \      (< (car cars) (car cars (+ j 1))))\n    (define (collides i j)\n      (<\
    \ (cars cars) (cars cars (+ i 1)))\n      (< (cars cars) (cars cars (+ j 1))))\n\
    \    (define (collides-left i j)\n      (< (cars cars) (cars cars (+ i -1)))\n\
    \      (< (cars cars) (cars cars (+ j -1))))\n    (define (collides-right i j)\n\
    \      (< (cars cars) (cars cars (+ i 1)))\n      (< (cars cars) (cars cars (+\
    \ j 1))))\n    (define (collides-left i j)\n      (< (cars cars) (cars cars (+\
    \ i -1)))\n      (< (cars cars) (cars cars (+ j -1))))\n    (define (collides-right\
    \ i j)\n      (< (cars cars) (cars cars (+ i 1)))\n      (< (cars cars) (cars\
    \ cars (+ j 1))))\n    (define (collides-left i j)\n      (< (cars cars) (cars\
    \ cars (+ i -1)))\n      (< (cars cars) (cars cars (+ j -1))))\n    (define (collides-right\
    \ i j)\n      (< (cars cars) (cars cars (+ i 1)))\n      (< (cars cars) (cars\
    \ cars (+ j 1))))\n    (define (collides-left i j)\n      (< (cars cars) (cars\
    \ cars (+ i -1)))\n      (< (cars cars) (cars cars (+ j -1))))\n    (define (collides-right\
    \ i j)\n      (< (cars cars) (cars cars (+ i 1)))\n      (< (cars cars) (cars\
    \ cars (+ j 1))))\n    (define (collides-left i j)\n      (< (cars cars) (cars\
    \ cars (+ i -1)))\n      (< (cars cars) (cars cars (+ j -1))))\n    (define (collides-right\
    \ i j)\n      (< (cars cars) (cars cars (+ i 1)))\n      (< (cars cars) (cars\
    \ cars (+ j 1))))", "  (let ((cars (make-array (* n n) '(list 'empty))) (car-count\
    \ 0))\n    (define (collide a b)\n      (cond ((and (empty? a) (empty? b)) 0)\n\
    \            ((and (empty? b) (empty? a)) 0)\n            (else (< (car a) (car\
    \ b)) (+ (car-count 1) 1))))\n    (define (move a b)\n      (cond ((empty? a)\
    \ (empty? b))\n            ((empty? b) (cons (car a) (cons (car b) (cars))))\n\
    \            (else (cons (car a) (cons (car b) (move (cdr a) (cdr b))))))\n  \
    \  (define (collides a)\n      (cond ((empty? a) (car-count 0))\n            ((empty?\
    \ (cdr a)) (collides (cdr a)))\n            (else (collide (car a) (car a))))\n\
    \    (define (collides-loop a)\n      (cond ((empty? a) (car-count 0))\n     \
    \       ((empty? (cdr a)) (collides-loop (cdr a)))\n            (else (collide\
    \ (car a) (car a))))\n    (define (collides-loop-helper a b)\n      (cond ((empty?\
    \ a) (car-count 0))\n            ((empty? (cdr a)) (collides-loop-helper (cdr\
    \ a) b))\n            (else (collide (car a) (car a))))\n    (define (collides-loop-helper\
    \ a b)\n      (cond ((empty? a) (car-count 0))\n            ((empty? (cdr a))\
    \ (collides-loop-helper (cdr a) b))\n            (else (collide (car a) (car a))))\n\
    \    (define (collides-loop-helper a b)\n      (cond ((empty? a) (car-count 0))\n\
    \            ((empty? (cdr a)) (collides-loop-helper (cdr a) b))\n           \
    \ (else (collide (car a) (car a))))\n    (define (collides-loop-helper a b)\n\
    \      (cond ((empty? a) (car-count 0))\n            ((empty? (cdr a)) (collides-loop-helper\
    \ (cdr a) b))\n            (else (collide (car a) (car a))))\n    (define (",
  "  (let ((cars (make-array n '(list 'car))))\n    (define (collide x y)\n      (<\
    \ (car x) (car y))\n      (< (car y) (car x)))\n    (define (collides x)\n   \
    \   (for/or ([x x])\n              (when (not (null? x))\n                (when\
    \ (not (null? (cdr x)))\n                  (when (not (null? (cdr (cdr x))))\n\
    \                    (when (not (null? (cdr (cdr (cdr x)))))\n               \
    \       (when (not (null? (cdr (cdr (cdr (cdr x)))))\n                       \
    \ (when (not (null? (cdr (cdr (cdr (cdr (cdr x))))))\n                       \
    \   (when (not (null? (cdr (cdr (cdr (cdr (cdr (cdr x))))))))\n              \
    \              (when (not (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr x))))))))\n\
    \                              (when (not (null? (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr x))))))))\n                                (when (not (null? (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr x))))))))\n                                  (when\
    \ (not (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr x))))))))))\n     \
    \                               (when (not (null? (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr x))))))))))))\n                                  (when (not (null?\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr x))))))))))))\n               \
    \                 (when (not (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr x))))))))))))\n                              (when (not (null? (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr x))))))))))))\n                    \
    \        (when (not (null? (cdr (cdr (cdr (cdr (cdr (", "  (let ((collisions 0))\n\
    \    (dotimes (i n)\n      (let ((car car-at-position (+ i 1)))\n        (if (>\
    \ (car-speed car) (car-speed (car-at-position i)))\n            (set! collisions\
    \ (+ collisions 1))\n            (set! car (car-at-position i))\n            (set!\
    \ car (car-at-position i))\n            (set! car (car-at-position i))\n     \
    \       (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! car (car-at-position i))\n            (set! car (car-at-position\
    \ i))\n            (set! ", "  (let ((cars (make-array n '(list 'car))))\n   \
    \ (dotimes (i n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc i\
    \ cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (asso", "  (define (collision car1 car2)\n    (cond\
    \ ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n          ((and\
    \ (< car1 car2) (< car2 car1))\n           (+ car2 car1))\n          ((and (<\
    \ car1 car2) (< car2 car1))\n           (+ car1 car2))\n          ((and (< car1\
    \ car2) (< car2 car1))\n           (+ car2 car1))\n          ((and (< car1 car2)\
    \ (< car2 car1))\n           (+ car1 car2))\n          ((and (< car1 car2) (<\
    \ car2 car1))\n           (+ car2 car1))\n          ((and (< car1 car2) (< car2\
    \ car1))\n           (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n\
    \           (+ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n   \
    \        (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n      \
    \     (+ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n         \
    \  (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n           (+\
    \ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n           (+ car1\
    \ car2))\n          ((and (< car1 car2) (< car2 car1))\n           (+ car2 car1))\n\
    \          ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n   \
    \       ((and (< car1 car2) (< car2 car1))\n           (+ car2 car1))\n      \
    \    ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n         \
    \ ((and (< car1 car2) (< car2 car1))\n           (+ car2 car1))\n          ((and\
    \ (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n          ((and (<\
    \ car1 car2) (< car2 car1))\n           (+ car2 car1))\n          ((and (< car1\
    \ car2) (< car2 car1))\n           (+ car1 car2))\n          ((and (< car1 car2)\
    \ (< car2 car1))\n           (+ car2 car1))\n          ((and (< car1 car2) (<\
    \ car2 car1))\n           (", "  (let ((cars (make-array n #:element-type 'car)))\n\
    \    (dotimes (i n)\n      (set! cars (make-array n #:element-type 'car))\n  \
    \    (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (define (collides car cars)\n      (cond ((null? cars) 0)\n  \
    \          ((eq? (car cars) car) 1)\n            (else (+ 1 (collides (cdr car)\
    \ (cdr cars))))))\n    (let loop ((i 0))\n      (if (< i n)\n          (loop (+\
    \ i 1))\n          (if (> (car cars) (car car))\n              (loop (+ i 1))\n\
    \              (loop (+ i 1))))))\n    (collides (car cars) cars)))\n", "  (let\
    \ ((cars (make-array n '(list 'car)))\n        (colliding (make-array n '(list\
    \ 'car)))\n        (colliding2 (make-array n '(list 'car)))\n        (colliding3\
    \ (make-array n '(list 'car)))\n        (colliding4 (make-array n '(list 'car)))\n\
    \        (colliding5 (make-array n '(list 'car)))\n        (colliding6 (make-array\
    \ n '(list 'car)))\n        (colliding7 (make-array n '(list 'car)))\n       \
    \ (colliding8 (make-array n '(list 'car)))\n        (colliding9 (make-array n\
    \ '(list 'car)))\n        (colliding10 (make-array n '(list 'car)))\n        (colliding11\
    \ (make-array n '(list 'car)))\n        (colliding12 (make-array n '(list 'car)))\n\
    \        (colliding13 (make-array n '(list 'car)))\n        (colliding14 (make-array\
    \ n '(list 'car)))\n        (colliding15 (make-array n '(list 'car)))\n      \
    \  (colliding16 (make-array n '(list 'car)))\n        (colliding17 (make-array\
    \ n '(list 'car)))\n        (colliding18 (make-array n '(list 'car)))\n      \
    \  (colliding19 (make-array n '(list 'car)))\n        (colliding20 (make-array\
    \ n '(list 'car)))\n        (colliding21 (make-array n '(list 'car)))\n      \
    \  (colliding22 (make-array n '(list 'car)))\n        (colliding23 (make-array\
    \ n '(list 'car)))\n        (colliding24 (make-array n '(list 'car)))\n      \
    \  (colliding25 (make-array n '(list 'car)))\n        (colliding26 (make-array\
    \ n '(list 'car)))\n        (colliding27 (make-array n '(list 'car)))\n      \
    \  (colliding28 (make-array n '(list 'car)))\n        (colliding29 (make-array\
    \ n '(list 'car)))\n        (colliding30 (make-array n '(list 'car)))\n      \
    \  (colliding31 (make-array n '(list 'car)))\n        (colliding32 (make-array\
    \ n '(list 'car)))\n        (colliding33 (make-array n '(list 'car)))\n      \
    \  (colliding34 (", "  (define (collision car1 car2)\n    (cond ((and (< car1\
    \ car2) (< car2 car1))\n           (+ car1 car2))\n          ((and (< car1 car2)\
    \ (< car2 car1))\n           (+ car2 car1))\n          ((and (< car1 car2) (<\
    \ car2 car1))\n           (+ car1 car2))\n          (else\n           (+ car2\
    \ car1))))\n  (define (collide car1 car2)\n    (cond ((and (< car1 car2) (< car2\
    \ car1))\n           (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n\
    \           (+ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n   \
    \        (+ car1 car2))\n          (else\n           (+ car2 car1))))\n  (define\
    \ (collides car1 car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n       \
    \    (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n          \
    \ (+ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n           (+\
    \ car1 car2))\n          (else\n           (+ car2 car1))))\n  (define (collides\
    \ car1 car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n           (+ car1\
    \ car2))\n          ((and (< car1 car2) (< car2 car1))\n           (+ car2 car1))\n\
    \          ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n   \
    \       (else\n           (+ car2 car1))))\n  (define (collides car1 car2)\n \
    \   (cond ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n    \
    \      ((and (< car1 car2) (< car2 car1))\n           (+ car2 car1))\n       \
    \   ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n          (else\n\
    \           (+ car2 car1))))\n  (define (collides car1 car2)\n    (cond ((and\
    \ (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n          ((and (<\
    \ car1 car2) (< car2 car1))\n           (+ car2 car1))\n          ((", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (define (collides car other-car)\n\
    \      (cond\n        ((null? other-car) 0)\n        ((eq? (car other-car) (car\
    \ car)) 1)\n        (else (+ 1 (collides (cdr other-car) car)))))\n    (let ((collides\
    \ (make-array n '(list 0))))\n      (do ((i 0 (+ i 1))\n           (car (car cars))\n\
    \           (other-car (car other-cars))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (collides (cdr collides))\n           (collides (car collides))\n\
    \           (colli", "  (define (collide a b)\n    (< (abs (- (car a) (car b)))\n\
    \       (abs (- (car b) (car a))))))\n  (define (collides a)\n    (cond ((null?\
    \ a) 0)\n          ((collide (car a) (car a))\n           (+ 1 (car-race_collision\
    \ (cdr a))))\n          ((collide (car a) (car b))\n           (+ 1 (car-race_collision\
    \ (cdr a))))\n          (else (+ 1 (car-race_collision (cdr a))))))\n  (if (<\
    \ n 1)\n      (if (collides (cdr a))\n          (+ 1 (car-race_collision (cdr\
    \ a)))\n          (+ 1 (car-race_collision (cdr a))))\n      (+ 1 (car-race_collision\
    \ (cdr a))))))\n", "  (let ((collisions 0))\n    (dotimes (i n)\n      (let ((car\
    \ (make-car)))\n        (set! car.speed 10)\n        (set! car.direction 'left)\n\
    \        (set! car.x 10)\n        (set! car.y 10)\n        (set! car.direction\
    \ car.direction)\n        (set! car.x car.x)\n        (set! car.y car.y)\n   \
    \     (set! car.speed car.speed)\n        (set! car.direction car.direction)\n\
    \        (set! car.x car.x)\n        (set! car.y car.y)\n        (set! collisions\
    \ (+ collisions 1))\n        (display car)\n        (display (cons car collisions))\n\
    \        (sleep 1)\n        (set! car.speed 10)\n        (set! car.direction 'right)\n\
    \        (set! car.x 10)\n        (set! car.y 10)\n        (set! car.direction\
    \ car.direction)\n        (set! car.x car.x)\n        (set! car.y car.y)\n   \
    \     (set! collisions (+ collisions 1))\n        (display car)\n        (display\
    \ (cons car collisions))\n        (sleep 1)\n        (set! car.speed 10)\n   \
    \     (set! car.direction 'left)\n        (set! car.x 10)\n        (set! car.y\
    \ 10)\n        (set! car.direction car.direction)\n        (set! car.x car.x)\n\
    \        (set! car.y car.y)\n        (set! collisions (+ collisions 1))\n    \
    \    (display car)\n        (display (cons car collisions))\n        (sleep 1)\n\
    \        (set! car.speed 10)\n        (set! car.direction 'right)\n        (set!\
    \ car.x 10)\n        (set! car.y 10)\n        (set! car.direction car.direction)\n\
    \        (set! car.x car.x)\n        (set! car.y car.y)\n        (set! collisions\
    \ (+ collisions 1))\n        (display car)\n        (display (cons car collisions))\n\
    \        (sleep 1)\n        (set! car.speed 10)\n        (set! car.direction 'left)\n\
    \        (set! car.x 10)\n        (set! car.y 10)\n        (set! car.direction\
    \ car.direction)\n        (set! car.x car.x)\n        (set! car.y car.y)\n   \
    \     (set! collisions (+ collisions 1))\n        ("]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
