name: HumanEval_82_prime_length
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes a string and returns True\
  \ if the string\n;; length is a prime number or False otherwise\n;; Examples\n;;\
  \ >>> (prime_length \"Hello\")\n;; #t\n;; >>> (prime_length \"abcdcba\")\n;; #t\n\
  ;; >>> (prime_length \"kittens\")\n;; #t\n;; >>> (prime_length \"orange\")\n;; #f\n\
  (define (prime_length string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_length))\n\
  \    (check-equal? (candidate \"Hello\") #t)\n    (check-equal? (candidate \"abcdcba\"\
  ) #t)\n    (check-equal? (candidate \"kittens\") #t)\n    (check-equal? (candidate\
  \ \"orange\") #f)\n    (check-equal? (candidate \"wow\") #t)\n    (check-equal?\
  \ (candidate \"world\") #t)\n    (check-equal? (candidate \"MadaM\") #t)\n    (check-equal?\
  \ (candidate \"Wow\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal?\
  \ (candidate \"HI\") #t)\n    (check-equal? (candidate \"go\") #t)\n    (check-equal?\
  \ (candidate \"gogo\") #f)\n    (check-equal? (candidate \"aaaaaaaaaaaaaaa\") #f)\n\
  \    (check-equal? (candidate \"Madam\") #t)\n    (check-equal? (candidate \"M\"\
  ) #f)\n    (check-equal? (candidate \"0\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond [(= (string-length string) 2) #t]\n        [(= (modulo (string->number\
    \ string) 2) 0) #f]\n        [else (prime_length (substring string 0 (string->number\
    \ string))) #t]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '#\\0) #t]\n    [(equal? (first string) '#\\1) #f]\n    [else (let ([number\
    \ (integer? (first string))])\n            (cond\n              [(= number 0)\
    \ #t]\n              [(= number 1) #f]\n              [else (let ([factor (first\
    \ string)])\n                       (cond\n                         [(= (length\
    \ string) 1) #t]\n                         [(= (length string) 2) #t]\n      \
    \                   [(= (length string) 3) #f]\n                         [(= (length\
    \ string) 4) #f]\n                         [(= (length string) 5) #f]\n      \
    \                   [(= (length string) 6) #f]\n                         [(= (length\
    \ string) 7) #f]\n                         [(= (length string) 8) #f]\n      \
    \                   [(= (length string) 9) #t]\n                         [(= (length\
    \ string) 10) #t]\n                         [(= (length string) 11) #t]\n    \
    \                     [(= (length string) 12) #t]\n                         [(=\
    \ (length string) 13) #t]\n                         [(= (length string) 14) #t]\n\
    \                         [(= (length string) 15) #t]\n                      \
    \   [(= (length string) 16) #t]\n                         [(= (length string)\
    \ 17) #t]\n                         [(= (length string) 18) #t]\n            \
    \             [(= (length string) 19) #t]\n                         [(= (length\
    \ string) 20) #t]\n                         [(= (length string) 21) #t]\n    \
    \                     [(= (length string) 22) #t]\n                         [(=\
    \ (length string) 23) #t]\n                         [(= (length string) 24) #t]\n\
    \                         [(= (length string) 25) #t]\n                      \
    \   [(= (length string) 26) #t]\n                         [(= (length string)\
    \ 27) #t]\n                         [(= (length string) 28) #t]\n            \
    \             [(= (length string) 29) #t]\n                         [(= (length\
    \ string) 30) #t]\n                         [(= (length string) 31) #t]\n    \
    \                     [(= (length string) 32) #t]\n                         [(=\
    \ (length string) 33) #t]\n                         [(= (length string) 34) #t]\n\
    \                         [(= (length string) 35) #t]\n                      \
    \   [(= (length string) ", "  (cond [(= (string-length string) 1) #t]\n      \
    \  [(= (modulo (string->number string) 2) 0) #f]\n        [else (prime_length\
    \ (substring string 0 (string->number (string->string (string-length string))))))))\n",
  "  (prime-length (length string)))\n", "  (cond [(= (string-length string) 1) #t]\n\
    \        [(= (string-length string) 2) #t]\n        [(= (string-length string)\
    \ 3) #t]\n        [else (let ([i (string-length string)])\n               (cond\
    \ [(= (string-length string) i)\n                       (= (prime? (string->number\
    \ string)) #t)]\n                     [else #f]))]))\n", "  (prime-length (length\
    \ string)))\n", "  (define (prime? n)\n    (= (modulo n 2) 1))\n  (define (primes?)\n\
    \    (for/list ([i string])\n      (when (prime? i)\n        (return t))))\n \
    \ (primes?))\n", "  (cond [(= (string-length string) 1) #t]\n        [(= (modulo\
    \ (string-length string) 2) 0) #f]\n        [else (prime_length (substring string\
    \ 0 (string-length string)))]))\n", "  (cond [(empty? string) #t]\n        [(=\
    \ (length string) 1) #t]\n        [(= (length string) 2) #t]\n        [(= (length\
    \ string) 3) #t]\n        [(= (length string) 4) #t]\n        [(= (length string)\
    \ 5) #t]\n        [(= (length string) 6) #t]\n        [(= (length string) 7) #t]\n\
    \        [(= (length string) 8) #t]\n        [(= (length string) 9) #t]\n    \
    \    [else (= (length string) 10)]))\n", "  (cond [(= (string-length string) 1)\
    \ #t]\n        [(= (modulo (string->number string) 2) #f)\n         (prime_length\
    \ (substring string 0 (string->number string)))]\n        [else (prime_length\
    \ (substring string 1 (string->number string)))]))\n", "  (define (prime? n)\n\
    \    (= (remainder n 2) 0))\n  (define (prime-iter n primes)\n    (cond ((null?\
    \ primes) #f)\n          ((prime? n) (cons n primes))\n          (else (prime-iter\
    \ (+ n 1) (cons n primes)))))\n  (prime-iter 0 '()))\n", "  (cond [(null? string)\
    \ #f]\n        [(= (length string) 1) #t]\n        [(= (length string) 2) #t]\n\
    \        [(= (length string) 3) #t]\n        [(= (length string) 4) #t]\n    \
    \    [(= (length string) 5) #t]\n        [(= (length string) 6) #t]\n        [(=\
    \ (length string) 7) #t]\n        [(= (length string) 8) #t]\n        [(= (length\
    \ string) 9) #t]\n        [(= (length string) 10) #t]\n        [(= (length string)\
    \ 11) #t]\n        [(= (length string) 12) #t]\n        [(= (length string) 13)\
    \ #t]\n        [(= (length string) 14) #t]\n        [(= (length string) 15) #t]\n\
    \        [(= (length string) 16) #t]\n        [(= (length string) 17) #t]\n  \
    \      [(= (length string) 18) #t]\n        [(= (length string) 19) #t]\n    \
    \    [(= (length string) 20) #t]\n        [(= (length string) 21) #t]\n      \
    \  [(= (length string) 22) #t]\n        [(= (length string) 23) #t]\n        [(=\
    \ (length string) 24) #t]\n        [(= (length string) 25) #t]\n        [(= (length\
    \ string) 26) #t]\n        [(= (length string) 27) #t]\n        [(= (length string)\
    \ 28) #t]\n        [(= (length string) 29) #t]\n        [(= (length string) 30)\
    \ #t]\n        [(= (length string) 31) #t]\n        [(= (length string) 32) #t]\n\
    \        [(= (length string) 33) #t]\n        [(= (length string) 34) #t]\n  \
    \      [(= (length string) 35) #t]\n        [(= (length string) 36) #t]\n    \
    \    [(= (length string) 37) #t]\n        [(= (length string) 38) #t]\n      \
    \  [(= (length string) 39) #t]\n        [(= (length string) 40) #t]\n        [(=\
    \ (length string) 41) #t]\n        [(= (length string) ", "  (prime-length? string\
    \ 2))\n", "  (cond [(= (string-length string) 1) #t]\n        [(= (modulo (string->number\
    \ string) 2) 0) #f]\n        [else (prime_length (substring string 0 (string->number\
    \ (string->string (string-length string))))))))\n", "  (prime-length (length string)))\n",
  "  (define (prime? n)\n    (= (modulo n 2) 1))\n  (define (prime-length n)\n   \
    \ (if (prime? n)\n        (+ 1 (prime-length (+ n 1)))))\n  (prime-length string))\n",
  "  (cond [(= (string-length string) 1) #t]\n        [(= (modulo (string->number\
    \ string) 2) 0) #f]\n        [else (prime_length (substring string 0 (string->number\
    \ string)))]))\n", "  (define (prime? n)\n    (= (modulo n 2) 1))\n  (define (primes?\
    \ n)\n    (= (modulo n 2) 0))\n  (define (prime-length n)\n    (cond ((null? n)\
    \ 0)\n          ((prime? n) (+ 1 (prime-length (cdr n))))\n          (else (prime-length\
    \ (cdr n)))))\n  (prime-length (string-length string)))\n", "  (cond [(= (string-length\
    \ string) 1) #t]\n        [(= (modulo (string->number string) 2) 0) #f]\n    \
    \    [else (prime_length (substring string 0 (string->number (string->length string))))\
    \ #t]))\n", "  (cond [(= (string-length string) 1) #t]\n        [(= (modulo (string->number\
    \ string) 2) 0) #f]\n        [else (prime_length (substring string 0 (string->number\
    \ (string->string (string-length string))))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
