name: HumanEval_143_words_in_sentence
language: rkt
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is\
  \ a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\"\
  )\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence\
  \ contains only letters\n(define (words_in_sentence sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?A) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?E) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?I) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?O) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?U) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?Y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?A) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?E) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?I) (helper (rest ", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence))\n                  (list (first sentence)))]))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond ((null? sentence)\
    \ result)\n          ((char=? (first sentence) ?space) result)\n          ((char=?\
    \ (first sentence) ?newline) result)\n          ((char=? (first sentence) ?tab)\
    \ result)\n          ((char=? (first sentence) ?return) result)\n          ((char=?\
    \ (first sentence) ?(#\\a)) result)\n          ((char=? (first sentence) ?(#\\\
    z)) result)\n          ((char=? (first sentence) ?(#\\A)) result)\n          ((char=?\
    \ (first sentence) ?(#\\Z)) result)\n          ((char=? (first sentence) ?(#\\\
    0)) result)\n          ((char=? (first sentence) ?(#\\9)) result)\n          ((char=?\
    \ (first sentence) ?(#\\8)) result)\n          ((char=? (first sentence) ?(#\\\
    7)) result)\n          ((char=? (first sentence) ?(#\\6)) result)\n          ((char=?\
    \ (first sentence) ?(#\\5)) result)\n          ((char=? (first sentence) ?(#\\\
    4)) result)\n          ((char=? (first sentence) ?(#\\3)) result)\n          ((char=?\
    \ (first sentence) ?(#\\2)) result)\n          ((char=? (first sentence) ?(#\\\
    1)) result)\n          ((char=? (first sentence) ?(#\\0)) result)\n          ((char=?\
    \ (first sentence) ?(#\\9)) result)\n          ((char=? (first sentence) ?(#\\\
    8)) result)\n          ((char=? (first sentence) ?(#\\7)) result)\n          ((char=?\
    \ (first sentence) ?(#\\6)) result)\n          ((char=? (first sentence) ?(#\\\
    5)) result)\n          ((char=? (first sentence) ?(#\\4)) result)\n          ((char=?\
    \ (first sentence) ?(#\\3)) result)\n          ((char=? (first sentence) ?(#\\\
    2)) result)\n          ((char=? (first sentence) ?(#\\1)) result)\n          ((char=?\
    \ (first sentence) ?(#\\0)) result)\n          ((char=? (first sentence) ?(#\\\
    9)) result)\n          ((char=? (first sentence) ?(#\\8)) result)\n          ((char=?\
    \ (first sentence) ?(#\\7)) result)", "  (let loop ((sentence sentence)\n    \
    \         (result '()))\n    (if (empty? sentence)\n        result\n        (loop\
    \ (rest sentence)\n              (cons (first sentence)\n                    (loop\
    \ (rest sentence)\n                          result))))))\n", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append\
    \ (words_in_sentence (substring sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence\
    \ (substring sentence (floor (/ 1 (length sentence))) (length sentence)))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! This was very helpful!\n\
    <|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence)\n           result)\n\
    \          ((char=? (car sentence) \" \")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) \"\"]\n\
    \    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (append (words_in_sentence (substring sentence 0 (floor (/ 1 (length\
    \ sentence))))) (words_in_sentence (substring sentence (floor (/ 1 (length sentence))\
    \ (length sentence))))]))\n)\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\n\
    Thanks so much for your help! I appreciate it!\n<|/ c |>\n<| a |>\n<code>", " \
    \ (let loop ((sentence sentence)\n             (result '()))\n    (if (empty?\
    \ sentence)\n        result\n        (loop (rest sentence)\n              (cons\
    \ (first sentence)\n                    (loop (rest sentence)\n              \
    \            result))))))\n", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?A) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?E) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?I) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?O) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?U) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?Y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?I) (helper (rest ",
  "  (define (helper sentence result)\n    (cond [(empty? sentence) result]\n    \
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?i) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?o) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?t) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?h) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?r) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?m) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?n) (helper (rest ", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?h) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?r) (helper (", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?l) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?w) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?m) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (if (empty? sentence)\n\
    \        result\n        (loop (rest sentence)\n              (cons (first sentence)\n\
    \                    (loop (rest sentence)\n                          result))))))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((empty?\
    \ sentence) result)\n          ((char=? (first sentence) \" \") (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"\\n\"\
    ) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"\\r\") (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"\\t\") (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"#\") (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ \"!\") (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \"?\") (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"(\" (rest sentence) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \")\"\
    ) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \".\") (loop (rest sentence) (cons (first sentence) result)))\n  \
    \        ((char=? (first sentence) \"-\") (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"_\") (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"*\"\
    ) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"/\") (loop (rest sentence) (cons (first sentence) result)))\n  \
    \        ((char=? (first sentence) \"^\") (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"~\") (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"=\"\
    ) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"|\") (loop (rest sentence) (cons (first sentence) result)))\n  \
    \        ((char=? (first sentence) \"\\\\\") (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"`\") (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (if (empty? sentence)\n\
    \        result\n        (loop (rest sentence)\n              (cons (first sentence)\n\
    \                    (loop (rest sentence)\n                          result))))))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char? (car sentence)) (loop (cdr sentence)\
    \ (cons (car sentence) result))]\n      [else (loop (cdr sentence) (cons (car\
    \ sentence) (loop (cdr sentence) result)))])))\n", "  (cond [(empty? sentence)\
    \ empty]\n        [(empty? (rest sentence)) sentence]\n        [else (cons (first\
    \ sentence)\n                    (words_in_sentence (rest sentence)))]))\n", " \
    \ (let loop ((sentence sentence)\n             (result '()))\n    (if (empty?\
    \ sentence)\n        result\n        (loop (rest sentence)\n              (cons\
    \ (first sentence)\n                    (loop (rest sentence)\n              \
    \            result))))))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else\n       (loop (rest sentence)\n             (cons (first\
    \ sentence) (loop (rest sentence) (cons (first sentence) result))))]))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| a tags=racket,scheme |>\n<code>", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) ?a) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?u) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?i) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?a) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?l) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?t) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?h) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?r) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first ", "  (let loop ((sentence sentence)\n    \
    \         (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (loop (rest sentence) (cons (first sentence) result))]\n \
    \     [else (loop (rest sentence) (cons (first sentence) (loop (rest sentence)\
    \ result)))])))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence) result)\n          ((char-alphabetic? (car sentence))\n\
    \           (loop (cdr sentence)\n                 (cons (car sentence) result)))\n\
    \          ((char-numeric? (car sentence))\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          (else\n          \
    \ (loop (cdr sentence)\n                 (cons (car sentence) result))))))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (car sentence) ?space) result)\n     \
    \     ((char=? (car sentence) ?.) result)\n          ((char=? (car sentence) ?!)\
    \ result)\n          ((char=? (car sentence) ?-) result)\n          ((char=? (car\
    \ sentence) ?!) result)\n          ((char=? (car sentence) ?<) result)\n     \
    \     ((char=? (car sentence) ?=) result)\n          ((char=? (car sentence) ?>)\
    \ result)\n          ((char=? (car sentence) ?;) result)\n          ((char=? (car\
    \ sentence) ?/) result)\n          ((char=? (car sentence) ?@) result)\n     \
    \     ((char=? (car sentence) ?$) result)\n          ((char=? (car sentence) ?%)\
    \ result)\n          ((char=? (car sentence) ?^) result)\n          ((char=? (car\
    \ sentence) ?&) result)\n          ((char=? (car sentence) ?*) result)\n     \
    \     ((char=? (car sentence) ?+) result)\n          ((char=? (car sentence) ?-)\
    \ result)\n          ((char=? (car sentence) ?/) result)\n          ((char=? (car\
    \ sentence) ?%) result)\n          ((char=? (car sentence) ?^) result)\n     \
    \     ((char=? (car sentence) ?&) result)\n          ((char=? (car sentence) ?*)\
    \ result)\n          ((char=? (car sentence) ?+) result)\n          ((char=? (car\
    \ sentence) ?;) result)\n          ((char=? (car sentence) ?$) result)\n     \
    \     ((char=? (car sentence) ?@) result)\n          ((char=? (car sentence) ?%)\
    \ result)\n          ((char=? (car sentence) ?^) result)\n          ((char=? (car\
    \ sentence) ?&) result)\n          ((char=? (car sentence) ?*) result)\n     \
    \     ((char=? (car sentence) ?+) result)\n          ((char=? (car sentence) ?-)\
    \ result)\n          ((char=? (car sentence) ?/) result)\n          ((char=? (car\
    \ sentence) ?@) ", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence)\n           result)\n          ((char=? (car sentence)\
    \ \" \")\n           (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \",\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \".\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \")\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \"(\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \")\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \"[\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \"]\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"{\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \"}\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \"|\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \";\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \"#\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \"`\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"`\")\n           (loop (cdr sentence",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence)) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest sentence)\
    \ (cons (first sentence) (loop (rest sentence) result)))])))\n", "  (cond\n  \
    \  [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n    [else\
    \ (append (words_in_word (first sentence))\n                  (words_in_sentence\
    \ (rest sentence)))]))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(equal?\
    \ (first sentence) \"\") \"\"]\n    [else (cons (first sentence) (words_in_sentence\
    \ (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (if (empty? sentence)\n        result\n        (loop (rest sentence)\n\
    \              (cons (first sentence)\n                    (loop (rest sentence)\n\
    \                          result))))))\n", "  (cond\n    [(empty? sentence) \"\
    \"]\n    [(empty? (rest sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence)) (list (first sentence)))]))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (conj result (first sentence)))]\n   \
    \   [(char=? (first sentence) ?e) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (conj ", "  (let loop ((sentence sentence)\n   \
    \          (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char?\
    \ (car sentence)) (loop (cdr sentence) (cons (car sentence) result))]\n      [else\
    \ (loop (cdr sentence) (cons (car sentence) (loop (cdr sentence) result)))])))\n",
  "  (cond [(empty? sentence) \"\"]\n        [(number? (length sentence)) sentence]\n\
    \        [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence)) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [else (loop (rest sentence) (cons (first sentence) (loop (rest\
    \ sentence) result)))])))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond\n      [(empty? sentence) (list result)]\n      [(char?\
    \ (car sentence)) (loop (cdr sentence) (cons (car sentence) result))]\n      [else\
    \ (loop (cdr sentence) (cons (car sentence) (loop (cdr sentence) result)))])))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (append (words_in_sentence (substring sentence 0 (floor (/ length (first\
    \ sentence))))) (words_in_sentence (substring sentence (floor (/ length (first\
    \ sentence))) (length (first sentence))))])\n  )\n)\n", "  (cond [(empty? sentence)\
    \ \"\"]\n        [(prime? (length sentence)) sentence]\n        [else (cons (first\
    \ sentence) (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence))\n       (loop (rest sentence) (cons\
    \ (first sentence) result))]\n      [else (loop (rest sentence) (cons (first sentence)\
    \ (cons (first sentence) result)))])))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (re", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence)) (loop (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (loop (rest sentence) (cons (first sentence) (loop (rest sentence) (cons (first\
    \ sentence) result))))])))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty?\
    \ (rest sentence)) sentence]\n    [else (cons (first sentence) (words_in_sentence\
    \ (rest sentence)))]))\n", "  (define (helper sentence result)\n    (cond [(empty?\
    \ sentence) result]\n          [(char=? (first sentence) ?a) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n          [(char=? (first sentence) ?l) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?i) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?s) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?n) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?r) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?n) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?p) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?o) (helper (rest ", "  (cond\n\
    \    [(empty? sentence) \"\"]\n    [(number? (length sentence)) \"\"]\n    [else\
    \ (append (words_in_word (first sentence))\n                  (words_in_sentence\
    \ (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (loop (rest sentence) (cons (first sentence) result))]\n \
    \     [else (loop (rest sentence) (cons (first sentence) (loop (rest sentence)\
    \ (cons (first sentence) result))))])))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence)) (helper (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (helper (rest sentence) (cons (first sentence) (helper result (first sentence))))]))\n\
    \  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (loop (rest sentence) (cons (first sentence) result))]\n \
    \     [else (loop (rest sentence) (cons (first sentence) (loop (rest sentence)\
    \ result)))])))\n", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?A) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?E) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?I) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?O) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?U) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?Y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?A) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?E) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?I) (helper (rest ", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (", "  (let loop ((sentence sentence)\n       \
    \      (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) #\\Space) loop (cons (first sentence) result)]\n      [(char=?\
    \ (first sentence) #\\Newline) loop (cons (first sentence) result)]\n      [(char=?\
    \ (first sentence) #\\Space) loop (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) #\\Newline) loop (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) #\\Space)\
    \ loop (loop (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) #\\Newline) loop (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) #\\Space) loop (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) #\\Newline)\
    \ loop (loop (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) #\\Space) loop (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) #\\Newline) loop (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) #\\Space)\
    \ loop (loop (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) #\\Newline) loop (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) #\\Space) loop (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) #\\Newline)\
    \ loop (loop (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) #\\Space) loop (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) #\\Newline) loop (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) #\\Space)\
    \ loop (loop (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) #\\Newline) loop (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) #\\Space) loop (loop (rest sentence)\
    \ (con", "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\
    \ (loop (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest\
    \ sentence) (cons (first sentence) (loop (rest sentence) result)))])))\n", " \
    \ (cond\n    [(empty? sentence) \"\"]\n    [(equal? (first sentence) \"\") \"\"\
    ]\n    [else (append (words_in_sentence (rest sentence)) (list (first sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (car sentence) ?a) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?l) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?o) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?s) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?t) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?e) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?i) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?n) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?g) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?f) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?m) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?e) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?r) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?e) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?t) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?h) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?e) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?s) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((", "  (cond [(empty? sentence) \"\"]\n\
    \        [(empty? (rest sentence)) \"\"]\n        [(prime? (length sentence))\
    \ (append (words_in_sentence (rest sentence)) (list (first sentence)))]\n    \
    \    [else (words_in_sentence (rest sentence))]))\n", "  (cond [(empty? sentence)\
    \ empty]\n        [(number? (length sentence)) sentence]\n        [else (cons\
    \ (first sentence) (words_in_sentence (rest sentence)))]))\n", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?I) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?O) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?U) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?Y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?A) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?E) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?I) (helper (rest ", "  (let loop ((sentence sentence)\n  \
    \           (result '()))\n    (cond\n      [(empty? sentence) result]\n     \
    \ [(char? (car sentence)) (loop (cdr sentence) (cons (car sentence) result))]\n\
    \      [else (loop (cdr sentence) (cons (car sentence) (loop (cdr sentence) result)))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char? (car sentence)) (loop (cdr sentence)\
    \ (cons (car sentence) result))]\n      [else (loop (cdr sentence) (cons (car\
    \ sentence) (loop (cdr sentence) result)))])))\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) sentence]\n    [else (cons (first sentence)\
    \ (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) (list result)]\n\
    \      [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?z) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?A) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?Z) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?0) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?9) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?1) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?8) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?2) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?7) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?3) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?6) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?4) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?5) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?4) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?5) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?6) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?7) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?8) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?9) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence) result)\n          ((char=? (car sentence) ?space)\
    \ result)\n          ((char=? (car sentence) ?.) result)\n          ((char=? (car\
    \ sentence) ?!) result)\n          ((char=? (car sentence) ?-) result)\n     \
    \     ((char=? (car sentence) ?!-) result)\n          ((char=? (car sentence)\
    \ ?-!) result)\n          ((char=? (car sentence) ?!-!) result)\n          ((char=?\
    \ (car sentence) ?-!-) result)\n          ((char=? (car sentence) ?!-!-) result)\n\
    \          ((char=? (car sentence) ?-!-!-) result)\n          ((char=? (car sentence)\
    \ ?!-!-!-) result)\n          ((char=? (car sentence) ?-!-!-!-) result)\n    \
    \      ((char=? (car sentence) ?!-!-!-!-) result)\n          ((char=? (car sentence)\
    \ ?-!-!-!-!-) result)\n          ((char=? (car sentence) ?!-!-!-!-!) result)\n\
    \          ((char=? (car sentence) ?-!-!-!-!-!) result)\n          ((char=? (car\
    \ sentence) ?!-!-!-!-!-!) result)\n          ((char=? (car sentence) ?-!-!-!-!-!-!)\
    \ result)\n          ((char=? (car sentence) ?!-!-!-!-!-!-) result)\n        \
    \  ((char=? (car sentence) ?-!-!-!-!-!-!) result)\n          ((char=? (car sentence)\
    \ ?!-!-!-!-!-!-) result)\n          ((char=? (car sentence) ?-!-!-!-!-!-!-) result)\n\
    \          ((char=? (car sentence) ?!-!-!-!-!-!-!-) result)\n          ((char=?\
    \ (car sentence) ?-!-!-!-!-!-!-!-) result)\n          ((char", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(number? (length sentence)) \"\"]\n    [else (append (words_in_word\
    \ (first sentence))\n                  (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (cond [(empty? sentence) result]\n    \
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [else (helper (rest sentence) (cons (first sentence) (helper\
    \ result (first sentence))))]))\n  (helper sentence '()))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((empty? sentence) result)\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence) (cons (first sentence) result)))\n         \
    \ ((char-numeric? (first sentence))\n           (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          (else\n           (loop (rest sentence) (cons\
    \ (first sentence) result))))))\n", "  (let loop ((sentence sentence)\n      \
    \       (result '()))\n    (cond ((null? sentence)\n           result)\n     \
    \     ((char=? (first sentence) \" \")\n           (loop (rest sentence)\n   \
    \              (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ \".\")\n           (loop (rest sentence)\n                 (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"?\")\n           (loop (rest\
    \ sentence)\n                 (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \"!\")\n           (loop (rest sentence)\n                \
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"-\"\
    )\n           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"(\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \")\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \" \")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"?\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"!\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"-\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"(\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \")\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \" \")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \".\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"?\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"!\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"-\")\n           (", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (conj ",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) (list result)]\n      [(char-alphabetic? (first sentence))\n\
    \       (loop (rest sentence)\n             (cons (first sentence) result))]\n\
    \      [else\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ (loop (rest sentence) result)))]\n    )))\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence)) (list (first sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence))\n       (loop (rest sentence)\n     \
    \        (cons (first sentence) result))]\n      [else (loop (rest sentence)\n\
    \                 (cons (first sentence)\n                      (loop (rest sentence)\n\
    \                             (cons (first sentence) result))))])))\n", "  (define\
    \ (helper sentence result)\n    (if (empty? sentence)\n        result\n      \
    \  (helper (rest sentence)\n                 (cons (first sentence)\n        \
    \               (helper (rest sentence)\n                              result))))))\n\
    \  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (if (empty? sentence)\n        result\n        (loop (rest\
    \ sentence)\n              (cons (first sentence)\n                    (loop (rest\
    \ sentence)\n                          result))))))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [else (helper (rest sentence) (cons (first sentence) (helper (rest sentence)\
    \ result)))]))\n  (helper sentence '()))\n", "  (define (helper sentence result)\n\
    \    (if (empty? sentence)\n        result\n        (helper (rest sentence)\n\
    \                 (cons (first sentence)\n                      (helper (rest\
    \ sentence)\n                              result))))))\n  (helper sentence '()))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence)) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest sentence)\
    \ (cons (first sentence) (loop (rest sentence) (cons (first sentence) result))))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((empty?\
    \ sentence)\n           result)\n          ((char=? (first sentence) \" \")\n\
    \           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"\\n\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \" \")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"\\n\")\n        \
    \   (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"!\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"?\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"!\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"?\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \".\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \" \")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \".\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \".\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \".\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \".\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \".\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \".", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?I) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?O) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?U) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?Y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?A) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?E) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?I) (helper (rest ", "  (cond\n    [(empty? sentence) \"\"\
    ]\n    [(equal? (first sentence) \"\") (words_in_sentence (rest sentence))]\n\
    \    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((empty?\
    \ sentence) result)\n          ((char-alphabetic? (first sentence))\n        \
    \   (loop (rest sentence)\n                   (cons (first sentence) result)))\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\n\
    \                   (cons (first sentence) result)))\n          (else\n      \
    \     (loop (rest sentence)\n                   (cons (first sentence) result))))))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (if (empty? sentence)\n\
    \        result\n        (loop (rest sentence)\n              (cons (first sentence)\n\
    \                    (loop (rest sentence)\n                          result))))))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (helper (rest sentence) (cons (first sentence)\
    \ (helper result (first sentence))))]))\n  (helper sentence '()))\n", "  (define\
    \ (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n    \
    \  [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence)\n           result)\n\
    \          ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\n \
    \                (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \" \")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          (else\n           (loop (cdr sentence)\n              \
    \   (cons (car sentence) result))))))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?A) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?E) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?I) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?O) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?U) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?Y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?A) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?E) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?I) (helper (rest ", "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length\
    \ sentence)) sentence]\n    [else (cons (first sentence) (words_in_sentence (rest\
    \ sentence)))]))\n", "  (define (helper sentence result)\n    (if (empty? sentence)\n\
    \        result\n        (helper (rest sentence)\n                 (cons (first\
    \ sentence)\n                      result)))\n    (helper (rest sentence)\n  \
    \           (cons (first sentence)\n                   result)))\n  (helper sentence\
    \ '()))\n", "  (define (helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(char? (car sentence)) (helper (cdr sentence) (cons (car sentence)\
    \ result))]\n      [else (helper (cdr sentence) (cons (car sentence) (helper sentence\
    \ result)))]))\n  (helper sentence '()))\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (substring sentence 0 (floor (/ length (first sentence))))) (words_in_sentence\
    \ (substring sentence (floor (/ length (first sentence)) (+ 1 (length sentence))))))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence)) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest sentence)\
    \ (cons (first sentence) (loop (rest sentence) (cons (first sentence) result))))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) (list result)]\n      [(char=? (first sentence) ?a) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?s) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?i) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?f) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?r) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?r) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (first sentence) ?space) result)\n          ((char=? (first sentence) ?newline)\
    \ result)\n          ((char=? (first sentence) ?tab) result)\n          ((char=?\
    \ (first sentence) ?return) result)\n          ((char=? (first sentence) ?(#\\\
    a)) result)\n          ((char=? (first sentence) ?(#\\z)) result)\n          ((char=?\
    \ (first sentence) ?(#\\A)) result)\n          ((char=? (first sentence) ?(#\\\
    Z)) result)\n          ((char=? (first sentence) ?(#\\0)) result)\n          ((char=?\
    \ (first sentence) ?(#\\9)) result)\n          ((char=? (first sentence) ?(#\\\
    8)) result)\n          ((char=? (first sentence) ?(#\\7)) result)\n          ((char=?\
    \ (first sentence) ?(#\\6)) result)\n          ((char=? (first sentence) ?(#\\\
    5)) result)\n          ((char=? (first sentence) ?(#\\4)) result)\n          ((char=?\
    \ (first sentence) ?(#\\3)) result)\n          ((char=? (first sentence) ?(#\\\
    2)) result)\n          ((char=? (first sentence) ?(#\\1)) result)\n          ((char=?\
    \ (first sentence) ?(#\\0)) result)\n          ((char=? (first sentence) ?(#\\\
    9)) result)\n          ((char=? (first sentence) ?(#\\8)) result)\n          ((char=?\
    \ (first sentence) ?(#\\7)) result)\n          ((char=? (first sentence) ?(#\\\
    6)) result)\n          ((char=? (first sentence) ?(#\\5)) result)\n          ((char=?\
    \ (first sentence) ?(#\\4)) result)\n          ((char=? (first sentence) ?(#\\\
    3)) result)\n          ((char=? (first sentence) ?(#\\2)) result)\n          ((char=?\
    \ (first sentence) ?(#\\1)) result)\n          ((char=? (first sentence) ?(#\\\
    0)) result)\n          ((char=? (first sentence) ?(#\\9)) result)\n          ((char=?\
    \ (first sentence) ?(#\\8)) result)\n          ((char=? (first sentence) ?(#\\\
    7)) result)", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((empty? sentence) result)\n          ((char=? (first sentence) ?space)\
    \ result)\n          ((char=? (first sentence) ?.) result)\n          ((char=?\
    \ (first sentence) ?!) result)\n          ((char=? (first sentence) ?-) result)\n\
    \          ((char=? (first sentence) ?+) result)\n          ((char=? (first sentence)\
    \ ?/) result)\n          ((char=? (first sentence) ?:) result)\n          ((char=?\
    \ (first sentence) ?;) result)\n          ((char=? (first sentence) ?'s) result)\n\
    \          ((char=? (first sentence) ?'S) result)\n          ((char=? (first sentence)\
    \ ?'s) result)\n          ((char=? (first sentence) ?'S) result)\n          ((char=?\
    \ (first sentence) ?'a) result)\n          ((char=? (first sentence) ?'A) result)\n\
    \          ((char=? (first sentence) ?'e) result)\n          ((char=? (first sentence)\
    \ ?'E) result)\n          ((char=? (first sentence) ?'i) result)\n          ((char=?\
    \ (first sentence) ?'I) result)\n          ((char=? (first sentence) ?'l) result)\n\
    \          ((char=? (first sentence) ?'L) result)\n          ((char=? (first sentence)\
    \ ?'o) result)\n          ((char=? (first sentence) ?'O) result)\n          ((char=?\
    \ (first sentence) ?'u) result)\n          ((char=? (first sentence) ?'U) result)\n\
    \          ((char=? (first sentence) ?'n) result)\n          ((char=? (first sentence)\
    \ ?'N) result)\n          ((char=? (first sentence) ?'s) result)\n          ((char=?\
    \ (first sentence) ?'S) result)\n          ((char=? (first sentence) ?'w) result)\n\
    \          ((char=? (first sentence) ?'W) result)\n          ((char=? (first sentence)\
    \ ?'m) result)\n          ((char=? (first sentence) ?'M) result)\n          ((char=?\
    \ (first sentence) ?'d) result)\n          ((char=? (first sentence) ?'D) result)\n\
    \          ((char=? (first sentence) ?'g) result)\n          ((char=? (first sentence)\
    \ ?'", "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\
    \ ((null? sentence) result)\n          ((char=? (car sentence) ?space) result)\n\
    \          ((char=? (car sentence) ?.) result)\n          ((char=? (car sentence)\
    \ ?!) result)\n          ((char=? (car sentence) ?-) result)\n          ((char=?\
    \ (car sentence) ?!.) result)\n          ((char=? (car sentence) ?-!) result)\n\
    \          ((char=? (car sentence) ?!-) result)\n          ((char=? (car sentence)\
    \ ?-!.) result)\n          ((char=? (car sentence) ?!-!) result)\n          ((char=?\
    \ (car sentence) ?-!-) result)\n          ((char=? (car sentence) ?!-!.) result)\n\
    \          ((char=? (car sentence) ?-!-!) result)\n          ((char=? (car sentence)\
    \ ?!-!-) result)\n          ((char=? (car sentence) ?-!-!.) result)\n        \
    \  ((char=? (car sentence) ?!-!-!) result)\n          ((char=? (car sentence)\
    \ ?-!-!-) result)\n          ((char=? (car sentence) ?!-!-!.) result)\n      \
    \    ((char=? (car sentence) ?-!-!-!) result)\n          ((char=? (car sentence)\
    \ ?!-!-!-) result)\n          ((char=? (car sentence) ?-!-!-!.) result)\n    \
    \      ((char=? (car sentence) ?!-!-!-!) result)\n          ((char=? (car sentence)\
    \ ?-!-!-!-) result)\n          ((char=? (car sentence) ?!-!-!-!.) result)\n  \
    \        ((char=? (car sentence) ?-!-!-!-!) result)\n          ((char=? (car sentence)\
    \ ?!-!-!-!-) result)\n          ((char=? (car sentence) ?-!-!-!-!.) result)\n\
    \          ((char=? (car sentence) ?!-!-!-!-!) result)\n          ((char=? (car\
    \ sentence) ?", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (if (empty? sentence)\n        result\n        (loop (rest sentence)\n  \
    \            (cons (first sentence)\n                    (loop (rest sentence)\n\
    \                          result))))))\n", "  (cond [(empty? sentence) empty]\n\
    \        [(empty? (rest sentence)) sentence]\n        [else (append (words_in_word\
    \ (rest sentence)) (words_in_word (first sentence)))]))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((null? sentence)\n       \
    \    result)\n          ((char=? (car sentence) \" \")\n           (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) \" \")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          (else\n  \
    \         (loop (cdr sentence) (cons (car sentence) result))))))\n", "  (cond\
    \ [(empty? sentence) \"\"]\n        [(empty? (rest sentence)) \"\"]\n        [(prime?\
    \ (length (rest sentence)))\n         (cons (first sentence) (words_in_sentence\
    \ (rest sentence)))]\n        [else (words_in_sentence (rest sentence))]))\n",
  "  (define (helper sentence result)\n    (cond [(empty? sentence) result]\n    \
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?i) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?o) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?o) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?u) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?y) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?u) (helper (rest ", "  (cond [(empty? sentence)\
    \ empty]\n        [(empty? (rest sentence)) sentence]\n        [else (append (words_in_sentence\
    \ (rest sentence)) (list (first sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence)) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [else (loop (rest sentence) (cons (first sentence) (loop (rest\
    \ sentence) (cons (first sentence) result))))])))\n", "  (define (helper sentence\
    \ result)\n    (cond [(empty? sentence) result]\n          [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n          [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \          [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n          [(char=? (first sentence) ?o) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n          [(char=? (first sentence) ?u) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?I) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?O) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?U) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?Y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?u) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?I) (helper\
    \ (rest sentence", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (if (empty? sentence)\n        result\n        (loop (rest sentence)\n  \
    \            (cons (first sentence)\n                    (loop (rest sentence)\n\
    \                          result))))))\n", "  (cond\n    [(empty? sentence) \"\
    \"]\n    [(empty? (rest sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence))\n                   (list (first sentence)))]))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond ((null? sentence)\
    \ result)\n          ((char=? (first sentence) ?space) result)\n          ((char=?\
    \ (first sentence) ?newline) result)\n          ((char=? (first sentence) ?tab)\
    \ result)\n          ((char=? (first sentence) ?return) result)\n          ((char=?\
    \ (first sentence) ?(space)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(newline)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(tab)) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?(return)) (loop (rest sentence) (cons (first sentence) result)))\n        \
    \  ((char=? (first sentence) ?(letter)) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?(digit)) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) ?(other))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(other)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(other)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(other)) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?(other)) (loop (rest sentence) (cons (first sentence) result)))\n         \
    \ ((char=? (first sentence) ?(other)) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?(other)) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) ?(other))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(other)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(other)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(other)) (loop (rest\
    \ sentence) (cons (", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence)) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [else (helper (rest sentence)\
    \ (cons (first sentence) (helper result (first sentence))))]))\n  (helper sentence\
    \ '()))\n", "  (let loop ((sentence sentence)\n             (result '()))\n  \
    \  (cond ((null? sentence)\n           result)\n          ((char=? (car sentence)\
    \ \" \")\n           (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \" \")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \" \")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \" \")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\")\n       \
    \    (loop (cdr sentence", "  (cond\n    [(empty? sentence) \"\"]\n    [(number?\
    \ (length sentence)) sentence]\n    [else (append (words_in_sentence (substring\
    \ sentence 0 (floor (/ length (first sentence))))) (words_in_sentence (substring\
    \ sentence (floor (/ length (first sentence)) (+ 1 (length sentence))))))]))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (", "  (define (helper sentence result)\n\
    \    (cond [(empty? sentence) result]\n          [(char=? (first sentence) ?a)\
    \ (helper (rest sentence) (cons (first sentence) result))]\n          [else (helper\
    \ (rest sentence) (cons (first sentence) (helper result (first sentence))))]))\n\
    \  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond ((null? sentence) result)\n          ((char=? (first\
    \ sentence) ?space) result)\n          ((char=? (first sentence) ?newline) result)\n\
    \          ((char=? (first sentence) ?tab) result)\n          ((char=? (first\
    \ sentence) ?return) result)\n          ((char=? (first sentence) ?(#\\a)) result)\n\
    \          ((char=? (first sentence) ?(#\\z)) result)\n          ((char=? (first\
    \ sentence) ?(#\\A)) result)\n          ((char=? (first sentence) ?(#\\Z)) result)\n\
    \          ((char=? (first sentence) ?(#\\0)) result)\n          ((char=? (first\
    \ sentence) ?(#\\9)) result)\n          ((char=? (first sentence) ?(#\\8)) result)\n\
    \          ((char=? (first sentence) ?(#\\7)) result)\n          ((char=? (first\
    \ sentence) ?(#\\6)) result)\n          ((char=? (first sentence) ?(#\\5)) result)\n\
    \          ((char=? (first sentence) ?(#\\4)) result)\n          ((char=? (first\
    \ sentence) ?(#\\3)) result)\n          ((char=? (first sentence) ?(#\\2)) result)\n\
    \          ((char=? (first sentence) ?(#\\1)) result)\n          ((char=? (first\
    \ sentence) ?(#\\0)) result)\n          ((char=? (first sentence) ?(#\\9)) result)\n\
    \          ((char=? (first sentence) ?(#\\8)) result)\n          ((char=? (first\
    \ sentence) ?(#\\7)) result)\n          ((char=? (first sentence) ?(#\\6)) result)\n\
    \          ((char=? (first sentence) ?(#\\5)) result)\n          ((char=? (first\
    \ sentence) ?(#\\4)) result)\n          ((char=? (first sentence) ?(#\\3)) result)\n\
    \          ((char=? (first sentence) ?(#\\2)) result)\n          ((char=? (first\
    \ sentence) ?(#\\1)) result)\n          ((char=? (first sentence) ?(#\\0)) result)\n\
    \          ((char=? (first sentence) ?(#\\9)) result)\n          ((char=? (first\
    \ sentence) ?(#\\8)) result)\n          ((char=? (first sentence) ?(#\\7)) result)",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (first sentence) ?space) result)\n   \
    \       ((char=? (first sentence) ?newline) result)\n          ((char=? (first\
    \ sentence) ?tab) result)\n          ((char=? (first sentence) ?return) result)\n\
    \          ((char=? (first sentence) ?(#\\space)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\newline))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\tab)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\return)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\space))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\newline)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\tab)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(#\\return)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\space)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\newline)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\tab)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\return)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\space)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\newline))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\tab)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\return)) (loop", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(equal? (first sentence) \"\") (words_in_sentence (rest\
    \ sentence))]\n    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (string-length sentence))\
    \ \"\"]\n    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) \"\"]\n\
    \    [else (append (words_in_sentence (rest sentence)) (list (first sentence)))]))\n",
  "  (define (helper sentence result)\n    (if (empty? sentence)\n        result\n\
    \        (helper (rest sentence)\n                 (cons (first sentence)\n  \
    \                    result)))))\n  (helper sentence '()))\n", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?A) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?E) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?I) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?O) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?U) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?Y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?I) (helper (rest ",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (", "  (cond [(empty? sentence) empty]\n\
    \        [(equal? (first sentence) empty) empty]\n        [else (cons (first sentence)\
    \ (words_in_sentence (rest sentence)))]))\n", "  (cond [(empty? sentence) \"\"\
    ]\n        [(number? (length sentence)) sentence]\n        [else (append (words_in_word\
    \ (first sentence))\n                      (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence)) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest sentence)\
    \ (cons (first sentence) (loop (rest sentence) result)))])))\n", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (if (empty? sentence)\n\
    \        result\n        (loop (rest sentence)\n              (cons (first sentence)\n\
    \                    (loop (rest sentence)\n                          result))))))\n",
  "  (cond [(empty? sentence) \"\"]\n        [(number? (length sentence)) sentence]\n\
    \        [else (append (words_in_word (first sentence))\n                    \
    \  (words_in_sentence (rest sentence)))]))\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) \"\"]\n    [else (append (words_in_word\
    \ (first sentence))\n                  (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (re", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence))\n       (loop (rest sentence)\n     \
    \        (cons (first sentence) result))]\n      [else (loop (rest sentence)\n\
    \                 (cons (first sentence) (loop (rest sentence) result)))])))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (append (words_in_sentence (substring sentence 0 (floor (/ 1 (length\
    \ sentence))))) (words_in_sentence (substring sentence (floor (/ 1 (length sentence)))\
    \ (length sentence)))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much\
    \ for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome. Feel\
    \ free to accept the answer if it helped you.\n<|/ c |>\n<| c |>\nI did but it\
    \ says I have to wait 5 minutes before I can accept it\n<|/ c |>\n<| c |>\nOh\
    \ okay. Thanks for letting me know!\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>",
  "  (define (helper sentence result)\n    (cond [(empty? sentence) result]\n    \
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?i) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?o) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?t) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?h) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?r) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?m) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?n) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?a) (helper (rest ", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((null? sentence) result)\n\
    \          ((char=? (car sentence) ?a) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?l) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?u) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?e) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?s) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?t) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?i) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?n) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?g) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?f) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?m) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?e) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?r) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?i) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?a) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?n) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?g) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((", "  (define (helper sentence result)\n    (cond [(empty? sentence)\
    \ result]\n          [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [else (helper (rest sentence) (cons (first\
    \ sentence) (helper result (first sentence))))]))\n  (helper sentence '()))\n",
  "  (define (helper sentence result)\n    (if (empty? sentence)\n        result\n\
    \        (helper (rest sentence) (cons (first sentence) result))))\n  (helper\
    \ sentence '()))\n", "  (define (helper sentence)\n    (cond\n      [(empty? sentence)\
    \ \"\"]\n      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest\
    \ sentence)))]\n      [(char=? (first sentence) ?l) (cons (first sentence) (helper\
    \ (rest sentence)))]\n      [(char=? (first sentence) ?o) (cons (first sentence)\
    \ (helper (rest sentence)))]\n      [(char=? (first sentence) ?u) (cons (first\
    \ sentence) (helper (rest sentence)))]\n      [(char=? (first sentence) ?e) (cons\
    \ (first sentence) (helper (rest sentence)))]\n      [(char=? (first sentence)\
    \ ?i) (cons (first sentence) (helper (rest sentence)))]\n      [(char=? (first\
    \ sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n      [(char=?\
    \ (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e", "  (define (helper sentence result)\n  \
    \  (cond [(empty? sentence) result]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?u) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?i) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?h) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?u) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?n) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?g) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?m) (helper\
    \ (rest ", "  (define (helper sentence)\n    (cond\n      [(empty? sentence) \"\
    \"]\n      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest\
    \ sentence)))]\n      [(char=? (first sentence) ?e) (cons (first sentence) (helper\
    \ (rest sentence)))]\n      [(char=? (first sentence) ?i) (cons (first sentence)\
    \ (helper (rest sentence)))]\n      [(char=? (first sentence) ?o) (cons (first\
    \ sentence) (helper (rest sentence)))]\n      [(char=? (first sentence) ?u) (cons\
    \ (first sentence) (helper (rest sentence)))]\n      [(char=? (first sentence)\
    \ ?y) (cons (first sentence) (helper (rest sentence)))]\n      [(char=? (first\
    \ sentence) ?A) (cons (first sentence) (helper (rest sentence)))]\n      [(char=?\
    \ (first sentence) ?E) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?I) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?O) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?U) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?Y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?A) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?E) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?I) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?O) (", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(equal? (first sentence)\
    \ '#\\Space) result]\n      [(equal? (first sentence) '#\\Newline) result]\n \
    \     [(equal? (first sentence) '#\\Tab) result]\n      [(equal? (first sentence)\
    \ '#\\Newline) result]\n      [(equal? (first sentence) '#\\Space) result]\n \
    \     [(equal? (first sentence) '#\\Newline) result]\n      [(equal? (first sentence)\
    \ '#\\Tab) result]\n      [(equal? (first sentence) '#\\Space) result]\n     \
    \ [(equal? (first sentence) '#\\Newline) result]\n      [(equal? (first sentence)\
    \ '#\\Tab) result]\n      [(equal? (first sentence) '#\\Space) result]\n     \
    \ [(equal? (first sentence) '#\\Newline) result]\n      [(equal? (first sentence)\
    \ '#\\Tab) result]\n      [(equal? (first sentence) '#\\Space) result]\n     \
    \ [(equal? (first sentence) '#\\Newline) result]\n      [(equal? (first sentence)\
    \ '#\\Tab) result]\n      [(equal? (first sentence) '#\\Space) result]\n     \
    \ [(equal? (first sentence) '#\\Newline) result]\n      [(equal? (first sentence)\
    \ '#\\Tab) result]\n      [(equal? (first sentence) '#\\Space) result]\n     \
    \ [(equal? (first sentence) '#\\Newline) result]\n      [(equal? (first sentence)\
    \ '#\\Tab) result]\n      [(equal? (first sentence) '#\\Space) result]\n     \
    \ [(equal? (first sentence) '#\\Newline) result]\n      [(equal? (first sentence)\
    \ '#\\Tab) result]\n      [(equal? (first sentence) '#\\Space) result]\n     \
    \ [(equal? (first sentence) '#\\Newline) result]\n      [(equal? (first sentence)\
    \ '#\\Tab) result]\n      [(equal? (first sentence) '#\\Space) result]\n     \
    \ [(equal? (first sentence) '#\\Newline) result]\n      [(equal? (first sentence)\
    \ '#\\Tab) result]\n      [(equal? (first sentence) '#\\Space) result]\n     \
    \ [(", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n\
    \    [else (cons (first sentence)\n                (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char? (car sentence)) (loop (cdr sentence)\
    \ (cons (car sentence) result))]\n      [else (loop (cdr sentence) (cons (car\
    \ sentence) (loop (cdr sentence) result)))])))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence)) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [else (loop (rest sentence) (cons (first sentence) (loop (rest\
    \ sentence) result)))])))\n", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char? (car sentence)) (helper (cdr\
    \ sentence) (cons (car sentence) result))]\n      [else (helper (cdr sentence)\
    \ (cons (car sentence) (helper result \"\")))]))\n  (helper sentence '()))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence)) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest sentence)\
    \ (cons (first sentence) (loop (rest sentence) result)))])))\n", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence))\n       (loop\
    \ (rest sentence)\n             (cons (first sentence) result))]\n      [else\
    \ (loop (rest sentence)\n                 (cons (first sentence) (loop (rest sentence)\n\
    \                                           (cons (first sentence) result))))])))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (if (empty? sentence)\n\
    \        result\n        (loop (rest sentence)\n              (cons (first sentence)\n\
    \                    (loop (rest sentence)\n                          result))))))\n",
  "  (cond [(empty? sentence) \"\"]\n        [(equal? (first sentence) \"\") (words_in_sentence\
    \ (rest sentence))]\n        [else (cons (first sentence) (words_in_sentence (rest\
    \ sentence)))]))\n", "  (define (helper sentence result)\n    (cond ((null? sentence)\
    \ result)\n          ((char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?i) (helper (rest sentence) (cons (first sentence) result)))\n   \
    \       ((char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?y) (helper\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result)))\n   \
    \       ((char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?l) (helper\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?l) (helper (rest sentence) (cons (first sentence) result)))\n   \
    \       ((char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?g) (helper\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result)))\n   \
    \       ((char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?t) (helper (rest sentence) (cons (first sentence) result)))\n   \
    \       ((char=? (first sentence) ?h) (helper (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?e) (helper (rest sentence",
  "  (define (helper sentence result)\n    (cond [(empty? sentence) result]\n    \
    \      [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n          [else (helper (rest sentence) (cons (first sentence)\
    \ (helper result (first sentence))))]))\n  (helper sentence '()))\n", "  (cond\
    \ [(empty? sentence) \"\"]\n        [(number? (length sentence)) sentence]\n \
    \       [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((empty?\
    \ sentence) result)\n          ((char-alphabetic? (first sentence))\n        \
    \   (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char-alphabetic?\
    \ (first sentence))\n           (loop (rest sentence)\n                 (cons\
    \ (first sentence) result)))\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char-alphabetic?\
    \ (first sentence))\n           (loop (rest sentence)\n                 (cons\
    \ (first sentence) result)))\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char-alphabetic?\
    \ (first sentence))\n           (loop (rest sentence)\n                 (cons\
    \ (first sentence) result)))\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char-alphabetic?\
    \ (first sentence))\n           (loop (rest sentence)\n                 (cons\
    \ (first sentence) result)))\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char-alphabetic?\
    \ (first sentence))\n           (loop (rest sentence)\n                 (cons\
    \ (first sentence) result)))\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char-alphabetic? (first sentence))\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char-alphabetic?\
    \ (first sentence))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(number?\
    \ (length sentence)) sentence]\n    [else (append (words_in_sentence (substring\
    \ sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence (substring sentence\
    \ (floor (/ 1 (length sentence))) (length sentence)))]))\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you so much! This was really helpful! I really appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence))\
    \ sentence]\n    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\n   \
    \    (loop (rest sentence) (cons (first sentence) result))]\n      [else\n   \
    \    (loop (rest sentence) (cons (first sentence) (loop (rest sentence) result)))]\n\
    \      )))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else\n       (loop (rest sentence)\n             (cons (first\
    \ sentence) (loop (rest sentence) result)))]\n      )))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (if (empty? sentence)\n        result\n\
    \        (loop (rest sentence)\n              (cons (first sentence)\n       \
    \             (loop (rest sentence)\n                          result))))))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?A) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?E) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?I) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?O) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?U) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?Y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?A) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?E) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?I) (helper (rest ", "  (cond [(empty? sentence)\
    \ \"\"]\n        [(empty? (rest sentence)) \"\"]\n        [(prime? (length sentence))\
    \ (cons (first sentence) (words_in_sentence (rest sentence)))]\n        [else\
    \ (words_in_sentence (rest sentence))]))\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (substring sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence (substring\
    \ sentence (floor (/ 1 (length sentence))) (length sentence)))]))\n", "  (define\
    \ (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n    \
    \  [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?p) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?r) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?m) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (re", "  (cond [(empty? sentence)\
    \ \"\"]\n        [(empty? (rest sentence)) \"\"]\n        [(prime? (length (rest\
    \ sentence))) (reverse (cons (first sentence) \"\"))]\n        [else (words_in_sentence\
    \ (rest sentence))]))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(number?\
    \ (string-length sentence)) sentence]\n    [else (cons (first sentence) (words_in_sentence\
    \ (rest sentence)))]))\n", "  (cond [(empty? sentence) empty]\n        [(empty?\
    \ (rest sentence)) sentence]\n        [else (cons (first sentence) (words_in_sentence\
    \ (rest sentence)))]))\n", "  (define (helper sentence result)\n    (cond\n  \
    \    [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?A) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?E) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?I) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?O) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?U) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?Y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?I) (helper (rest ",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\n   \
    \    (loop (rest sentence)\n             (cons (first sentence) result))]\n  \
    \    [else\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ (loop (rest sentence) result)))]\n      )))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?z) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?A) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?Z) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?0) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?9) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?!) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?.) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?,) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?;) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?:) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?;) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?<) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?>) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?-) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?_) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?+) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?/) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?%) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?$) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first ", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (re", "  (let loop ((sentence sentence)\n     \
    \        (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char?\
    \ (car sentence)) (loop (cdr sentence) (cons (car sentence) result))]\n      [else\
    \ (loop (cdr sentence) (cons (car sentence) (loop (cdr sentence) result)))])))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(equal? (first sentence) \"\") (words_in_sentence\
    \ (rest sentence))]\n    [else (cons (first sentence) (words_in_sentence (rest\
    \ sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((empty? sentence) result)\n          ((char=? (first sentence) ?space)\
    \ result)\n          ((char=? (first sentence) ?newline) result)\n          ((char=?\
    \ (first sentence) ?end-of-string) result)\n          ((char=? (first sentence)\
    \ ?newline) (loop (rest sentence) (cons (first sentence) result)))\n         \
    \ ((char=? (first sentence) ?space) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?end-of-string) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) ?letter)\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?digit) (loop (rest sentence) (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) ?letter) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?digit) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?letter) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?digit) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?letter) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?digit) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?letter) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?digit) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?letter) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?digit) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?letter) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?digit) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?letter) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?digit) (loop (", " \
    \ (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?g) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?r) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?m) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (conj result (first sentence)))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (conj result (first\
    \ sentence)))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (conj\
    \ result (first sentence)))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (conj result (first sentence)))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (conj result (first sentence)))]\n      [(char=?\
    \ (first sentence) ?r) (helper (rest sentence) (conj ", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((empty? sentence) result)\n\
    \          ((char? (first sentence))\n           (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          (else\n           (loop (rest sentence) (cons\
    \ (first sentence) (loop (rest sentence) result)))))))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence))\n       (loop (rest sentence)\n  \
    \           (cons (first sentence) result))]\n      [else\n       (loop (rest\
    \ sentence)\n             (cons (first sentence) (loop (rest sentence) result)))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for your answer! But I still\
    \ don't understand how I can use your code to solve my problem. Could you please\
    \ explain how I can use your code to solve my problem?\n<|/ c |>\n<| c |>\nI added\
    \ an explanation to the answer.\n<|/ c |>\n<| c |>\nThank you very much! But I\
    \ still don't understand how I can use your code to solve my problem. Could you\
    \ please explain how I can use your code to solve my problem?\n<|/ c |>\n<| c\
    \ |>\nI added an explanation to the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  (define (helper sentence result)\n    (if (empty? sentence)\n        result\n\
    \        (helper (rest sentence)\n                 (cons (first sentence)\n  \
    \                    (helper (rest sentence)\n                              result))))))\n\
    \  (helper sentence '()))\n", "  (define (helper sentence result)\n    (cond [(empty?\
    \ sentence) result]\n          [(char? (car sentence)) (helper (cdr sentence)\
    \ (cons (car sentence) result))]\n          [else (helper (cdr sentence) (cons\
    \ (car sentence) (helper sentence result)))]))\n  (helper sentence '()))\n", " \
    \ (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?h) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence)\n           result)\n\
    \          ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\n \
    \                (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          (else\n           (loop (cdr sentence)\n              \
    \   (cons (car sentence) result))))))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((empty? sentence) result)\n          ((char=?\
    \ (first sentence) ?space) result)\n          ((char=? (first sentence) ?newline)\
    \ result)\n          ((char=? (first sentence) ?tab) result)\n          ((char=?\
    \ (first sentence) ?return) result)\n          ((char=? (first sentence) ?(#\\\
    a)) result)\n          ((char=? (first sentence) ?(#\\z)) result)\n          ((char=?\
    \ (first sentence) ?(#\\A)) result)\n          ((char=? (first sentence) ?(#\\\
    Z)) result)\n          ((char=? (first sentence) ?(#\\0)) result)\n          ((char=?\
    \ (first sentence) ?(#\\9)) result)\n          ((char=? (first sentence) ?(#\\\
    8)) result)\n          ((char=? (first sentence) ?(#\\7)) result)\n          ((char=?\
    \ (first sentence) ?(#\\6)) result)\n          ((char=? (first sentence) ?(#\\\
    5)) result)\n          ((char=? (first sentence) ?(#\\4)) result)\n          ((char=?\
    \ (first sentence) ?(#\\3)) result)\n          ((char=? (first sentence) ?(#\\\
    2)) result)\n          ((char=? (first sentence) ?(#\\1)) result)\n          ((char=?\
    \ (first sentence) ?(#\\0)) result)\n          ((char=? (first sentence) ?(#\\\
    9)) result)\n          ((char=? (first sentence) ?(#\\8)) result)\n          ((char=?\
    \ (first sentence) ?(#\\7)) result)\n          ((char=? (first sentence) ?(#\\\
    6)) result)\n          ((char=? (first sentence) ?(#\\5)) result)\n          ((char=?\
    \ (first sentence) ?(#\\4)) result)\n          ((char=? (first sentence) ?(#\\\
    3)) result)\n          ((char=? (first sentence) ?(#\\2)) result)\n          ((char=?\
    \ (first sentence) ?(#\\1)) result)\n          ((char=? (first sentence) ?(#\\\
    0)) result)\n          ((char=? (first sentence) ?(#\\9)) result)\n          ((char=?\
    \ (first sentence) ?(#\\8)) result)\n          ((char=? (first sentence) ?(#\\\
    7)) result)", "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence))\
    \ sentence]\n    [else (append (words_in_sentence (rest sentence)) (list (first\
    \ sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence)) (loop (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (loop (rest sentence) (cons (first sentence) (loop (rest sentence) (cons (first\
    \ sentence) result))))])))\n", "  (let loop ((sentence sentence)\n           \
    \  (result '()))\n    (cond ((empty? sentence) result)\n          ((char=? (first\
    \ sentence) ?space) result)\n          ((char=? (first sentence) ?newline) result)\n\
    \          ((char=? (first sentence) ?tab) result)\n          ((char=? (first\
    \ sentence) ?return) result)\n          ((char=? (first sentence) ?(#\\space))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\newline)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\tab)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(#\\return)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\space)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\newline)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\tab)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\return)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\space)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\newline))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\tab)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\return)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\space))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\newline)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\tab)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(#\\return)) (loop",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (car sentence) \" \") (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \".\") (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"?\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \".\") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \",\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \";\") (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \":\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \";\") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"?\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\") (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"!\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \",\") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \";\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \":\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \";\") (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (c", "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence))\
    \ sentence]\n    [else (append (words_in_sentence (substring sentence 0 (floor\
    \ (/ 1 (length sentence))))) (words_in_sentence (substring sentence (floor (/\
    \ 1 (length sentence)) (length sentence))))]))\n)\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((null? sentence)\n       \
    \    result)\n          ((char=? (car sentence) \" \")\n           (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \",\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cd", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence))\n       (loop\
    \ (rest sentence)\n             (cons (first sentence) result))]\n      [else\n\
    \       (loop (rest sentence)\n             (cons (first sentence) (append result\
    \ (loop (rest sentence)\n                                                   (cons\
    \ (first sentence) result))))])]))\n", "  (cond\n    [(empty? sentence) \"\"]\n\
    \    [(equal? (first sentence) \"\") \"\"]\n    [else (cons (first sentence) (words_in_sentence\
    \ (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (loop (rest sentence) (cons (first sentence) result))]\n \
    \     [else (loop (rest sentence) (cons (first sentence) (loop (rest sentence)\
    \ (cons (first sentence) result))))])))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper rest (cons (first sentence) result))]\n      [else (helper (rest\
    \ sentence) (cons (first sentence) result))]))\n  (helper sentence '()))\n", " \
    \ (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (helper (rest sentence) (cons (first sentence)\
    \ (helper (rest sentence) result)))]))\n  (helper sentence '()))\n", "  (define\
    \ (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n    \
    \  [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?r) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?m) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?l) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (helper (", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_word\
    \ (first sentence))\n                  (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (cond [(empty? sentence) result]\n    \
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?o) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?s) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?l) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?s) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?o) (helper (rest ", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?z) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?A) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?Z) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?0) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?9) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?1) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?8) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?2) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?7) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?3) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?6) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?4) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?5) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?6) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?5) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?4) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?3) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?2) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?1) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first ", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?w) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((null? sentence)\n       \
    \    result)\n          ((char=? (car sentence) \" \")\n           (loop (cdr\
    \ sentence)\n                 (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \".\")\n           (loop (cdr sentence)\n                 (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence)\n                 (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) \"!\")\n           (loop (cdr sentence)\n  \
    \               (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"(\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \")\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \" \")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \".\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"?\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"(\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \")\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \" \")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \".\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"?\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"(\")\n           (loop (", "  (define (helper sentence result)\n    (cond\
    \ ((null? sentence) result)\n          ((char=? (car sentence) ?a) (helper (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?e) (helper (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?i) (helper (cdr sentence) (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) ?o) (helper (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?u) (helper (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?y) (helper (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?o) (helper (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?u) (helper (cdr sentence) (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) ?a) (helper (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?e) (helper (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?i) (helper (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?o) (helper (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?u) (helper (cdr sentence) (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) ?y) (helper (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?a) (helper (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?e) (helper (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?i) (helper (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?o) (helper (cdr sentence) (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) ", "  (define (helper sentence result)\n   \
    \ (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence) ?a)\
    \ (helper (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?s) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?r) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char? (car sentence)) (loop\
    \ (cdr sentence) (cons (car sentence) result))]\n      [else (loop (cdr sentence)\
    \ (cons (car sentence) (loop (cdr sentence) result)))])))\n", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append\
    \ (words_in_word (first sentence))\n                  (words_in_sentence (rest\
    \ sentence)))]))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest\
    \ sentence)) sentence]\n    [else (append (words_in_sentence (rest sentence))\
    \ (list (first sentence)))]))\n", "  (let loop ((sentence sentence)\n        \
    \     (result '()))\n    (if (empty? sentence)\n        result\n        (loop\
    \ (rest sentence)\n              (cons (first sentence)\n                    (loop\
    \ (rest sentence)\n                          result))))))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((null? sentence) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?end-of-string)\
    \ result)\n          ((char=? (first sentence) ?digit) result)\n          ((char=?\
    \ (first sentence) ?letter) \n           (loop (rest sentence)\n             \
    \    (cons (first sentence) result)))\n          (else (loop (rest sentence)\n\
    \                       (cons (first sentence) result))))))\n", "  (cond\n   \
    \ [(empty? sentence) \"\"]\n    [(number? (length sentence)) \"\"]\n    [else\
    \ (append (words_in_sentence (substring sentence 0 (floor (length sentence))))\
    \ (words_in_sentence (substring sentence (floor (length sentence)) (length sentence))))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
